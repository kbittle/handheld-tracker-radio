
stm32l476rg-radio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e478  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016a0  0801e608  0801e608  0001f608  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801fca8  0801fca8  000212d8  2**0
                  CONTENTS
  4 .ARM          00000008  0801fca8  0801fca8  00020ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801fcb0  0801fcb0  000212d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801fcb0  0801fcb0  00020cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801fcb4  0801fcb4  00020cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d8  20000000  0801fcb8  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008dd4  200002d8  0801ff90  000212d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  200090ac  0801ff90  000220ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000212d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003e21b  00000000  00000000  00021308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008e45  00000000  00000000  0005f523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000032f0  00000000  00000000  00068368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002772  00000000  00000000  0006b658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003525b  00000000  00000000  0006ddca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004673f  00000000  00000000  000a3025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ad23  00000000  00000000  000e9764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00204487  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000eab0  00000000  00000000  002044cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00212f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d8 	.word	0x200002d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801e5f0 	.word	0x0801e5f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002dc 	.word	0x200002dc
 80001cc:	0801e5f0 	.word	0x0801e5f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c70:	f000 b9a0 	b.w	8000fb4 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f83c 	bl	8000cf8 <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__aeabi_d2lz>:
 8000c8c:	b538      	push	{r3, r4, r5, lr}
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2300      	movs	r3, #0
 8000c92:	4604      	mov	r4, r0
 8000c94:	460d      	mov	r5, r1
 8000c96:	f7ff ff21 	bl	8000adc <__aeabi_dcmplt>
 8000c9a:	b928      	cbnz	r0, 8000ca8 <__aeabi_d2lz+0x1c>
 8000c9c:	4620      	mov	r0, r4
 8000c9e:	4629      	mov	r1, r5
 8000ca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca4:	f000 b80a 	b.w	8000cbc <__aeabi_d2ulz>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cae:	f000 f805 	bl	8000cbc <__aeabi_d2ulz>
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	bd38      	pop	{r3, r4, r5, pc}
 8000cba:	bf00      	nop

08000cbc <__aeabi_d2ulz>:
 8000cbc:	b5d0      	push	{r4, r6, r7, lr}
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf0 <__aeabi_d2ulz+0x34>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	4606      	mov	r6, r0
 8000cc4:	460f      	mov	r7, r1
 8000cc6:	f7ff fc97 	bl	80005f8 <__aeabi_dmul>
 8000cca:	f7ff ff57 	bl	8000b7c <__aeabi_d2uiz>
 8000cce:	4604      	mov	r4, r0
 8000cd0:	f7ff fc18 	bl	8000504 <__aeabi_ui2d>
 8000cd4:	4b07      	ldr	r3, [pc, #28]	@ (8000cf4 <__aeabi_d2ulz+0x38>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f7ff fc8e 	bl	80005f8 <__aeabi_dmul>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	460b      	mov	r3, r1
 8000ce0:	4630      	mov	r0, r6
 8000ce2:	4639      	mov	r1, r7
 8000ce4:	f7ff fad0 	bl	8000288 <__aeabi_dsub>
 8000ce8:	f7ff ff48 	bl	8000b7c <__aeabi_d2uiz>
 8000cec:	4621      	mov	r1, r4
 8000cee:	bdd0      	pop	{r4, r6, r7, pc}
 8000cf0:	3df00000 	.word	0x3df00000
 8000cf4:	41f00000 	.word	0x41f00000

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	460c      	mov	r4, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14e      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d04:	4694      	mov	ip, r2
 8000d06:	458c      	cmp	ip, r1
 8000d08:	4686      	mov	lr, r0
 8000d0a:	fab2 f282 	clz	r2, r2
 8000d0e:	d962      	bls.n	8000dd6 <__udivmoddi4+0xde>
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0320 	rsb	r3, r2, #32
 8000d16:	4091      	lsls	r1, r2
 8000d18:	fa20 f303 	lsr.w	r3, r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	4319      	orrs	r1, r3
 8000d22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2a:	fa1f f68c 	uxth.w	r6, ip
 8000d2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb07 1114 	mls	r1, r7, r4, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb04 f106 	mul.w	r1, r4, r6
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d4e:	f080 8112 	bcs.w	8000f76 <__udivmoddi4+0x27e>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 810f 	bls.w	8000f76 <__udivmoddi4+0x27e>
 8000d58:	3c02      	subs	r4, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a59      	subs	r1, r3, r1
 8000d5e:	fa1f f38e 	uxth.w	r3, lr
 8000d62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d66:	fb07 1110 	mls	r1, r7, r0, r1
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb00 f606 	mul.w	r6, r0, r6
 8000d72:	429e      	cmp	r6, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x94>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d7e:	f080 80fc 	bcs.w	8000f7a <__udivmoddi4+0x282>
 8000d82:	429e      	cmp	r6, r3
 8000d84:	f240 80f9 	bls.w	8000f7a <__udivmoddi4+0x282>
 8000d88:	4463      	add	r3, ip
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d92:	2100      	movs	r1, #0
 8000d94:	b11d      	cbz	r5, 8000d9e <__udivmoddi4+0xa6>
 8000d96:	40d3      	lsrs	r3, r2
 8000d98:	2200      	movs	r2, #0
 8000d9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d905      	bls.n	8000db2 <__udivmoddi4+0xba>
 8000da6:	b10d      	cbz	r5, 8000dac <__udivmoddi4+0xb4>
 8000da8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dac:	2100      	movs	r1, #0
 8000dae:	4608      	mov	r0, r1
 8000db0:	e7f5      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000db2:	fab3 f183 	clz	r1, r3
 8000db6:	2900      	cmp	r1, #0
 8000db8:	d146      	bne.n	8000e48 <__udivmoddi4+0x150>
 8000dba:	42a3      	cmp	r3, r4
 8000dbc:	d302      	bcc.n	8000dc4 <__udivmoddi4+0xcc>
 8000dbe:	4290      	cmp	r0, r2
 8000dc0:	f0c0 80f0 	bcc.w	8000fa4 <__udivmoddi4+0x2ac>
 8000dc4:	1a86      	subs	r6, r0, r2
 8000dc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dca:	2001      	movs	r0, #1
 8000dcc:	2d00      	cmp	r5, #0
 8000dce:	d0e6      	beq.n	8000d9e <__udivmoddi4+0xa6>
 8000dd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dd4:	e7e3      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	f040 8090 	bne.w	8000efc <__udivmoddi4+0x204>
 8000ddc:	eba1 040c 	sub.w	r4, r1, ip
 8000de0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000de4:	fa1f f78c 	uxth.w	r7, ip
 8000de8:	2101      	movs	r1, #1
 8000dea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000df2:	fb08 4416 	mls	r4, r8, r6, r4
 8000df6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dfa:	fb07 f006 	mul.w	r0, r7, r6
 8000dfe:	4298      	cmp	r0, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x11c>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x11a>
 8000e0c:	4298      	cmp	r0, r3
 8000e0e:	f200 80cd 	bhi.w	8000fac <__udivmoddi4+0x2b4>
 8000e12:	4626      	mov	r6, r4
 8000e14:	1a1c      	subs	r4, r3, r0
 8000e16:	fa1f f38e 	uxth.w	r3, lr
 8000e1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb00 f707 	mul.w	r7, r0, r7
 8000e2a:	429f      	cmp	r7, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x148>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x146>
 8000e38:	429f      	cmp	r7, r3
 8000e3a:	f200 80b0 	bhi.w	8000f9e <__udivmoddi4+0x2a6>
 8000e3e:	4620      	mov	r0, r4
 8000e40:	1bdb      	subs	r3, r3, r7
 8000e42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e46:	e7a5      	b.n	8000d94 <__udivmoddi4+0x9c>
 8000e48:	f1c1 0620 	rsb	r6, r1, #32
 8000e4c:	408b      	lsls	r3, r1
 8000e4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e52:	431f      	orrs	r7, r3
 8000e54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e58:	fa04 f301 	lsl.w	r3, r4, r1
 8000e5c:	ea43 030c 	orr.w	r3, r3, ip
 8000e60:	40f4      	lsrs	r4, r6
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	0c38      	lsrs	r0, r7, #16
 8000e68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e70:	fa1f fc87 	uxth.w	ip, r7
 8000e74:	fb00 441e 	mls	r4, r0, lr, r4
 8000e78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e80:	45a1      	cmp	r9, r4
 8000e82:	fa02 f201 	lsl.w	r2, r2, r1
 8000e86:	d90a      	bls.n	8000e9e <__udivmoddi4+0x1a6>
 8000e88:	193c      	adds	r4, r7, r4
 8000e8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e8e:	f080 8084 	bcs.w	8000f9a <__udivmoddi4+0x2a2>
 8000e92:	45a1      	cmp	r9, r4
 8000e94:	f240 8081 	bls.w	8000f9a <__udivmoddi4+0x2a2>
 8000e98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	eba4 0409 	sub.w	r4, r4, r9
 8000ea2:	fa1f f983 	uxth.w	r9, r3
 8000ea6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eaa:	fb00 4413 	mls	r4, r0, r3, r4
 8000eae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb6:	45a4      	cmp	ip, r4
 8000eb8:	d907      	bls.n	8000eca <__udivmoddi4+0x1d2>
 8000eba:	193c      	adds	r4, r7, r4
 8000ebc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ec0:	d267      	bcs.n	8000f92 <__udivmoddi4+0x29a>
 8000ec2:	45a4      	cmp	ip, r4
 8000ec4:	d965      	bls.n	8000f92 <__udivmoddi4+0x29a>
 8000ec6:	3b02      	subs	r3, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ece:	fba0 9302 	umull	r9, r3, r0, r2
 8000ed2:	eba4 040c 	sub.w	r4, r4, ip
 8000ed6:	429c      	cmp	r4, r3
 8000ed8:	46ce      	mov	lr, r9
 8000eda:	469c      	mov	ip, r3
 8000edc:	d351      	bcc.n	8000f82 <__udivmoddi4+0x28a>
 8000ede:	d04e      	beq.n	8000f7e <__udivmoddi4+0x286>
 8000ee0:	b155      	cbz	r5, 8000ef8 <__udivmoddi4+0x200>
 8000ee2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ee6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eea:	fa04 f606 	lsl.w	r6, r4, r6
 8000eee:	40cb      	lsrs	r3, r1
 8000ef0:	431e      	orrs	r6, r3
 8000ef2:	40cc      	lsrs	r4, r1
 8000ef4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef8:	2100      	movs	r1, #0
 8000efa:	e750      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000efc:	f1c2 0320 	rsb	r3, r2, #32
 8000f00:	fa20 f103 	lsr.w	r1, r0, r3
 8000f04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f08:	fa24 f303 	lsr.w	r3, r4, r3
 8000f0c:	4094      	lsls	r4, r2
 8000f0e:	430c      	orrs	r4, r1
 8000f10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f18:	fa1f f78c 	uxth.w	r7, ip
 8000f1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f20:	fb08 3110 	mls	r1, r8, r0, r3
 8000f24:	0c23      	lsrs	r3, r4, #16
 8000f26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f2a:	fb00 f107 	mul.w	r1, r0, r7
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x24c>
 8000f32:	eb1c 0303 	adds.w	r3, ip, r3
 8000f36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f3a:	d22c      	bcs.n	8000f96 <__udivmoddi4+0x29e>
 8000f3c:	4299      	cmp	r1, r3
 8000f3e:	d92a      	bls.n	8000f96 <__udivmoddi4+0x29e>
 8000f40:	3802      	subs	r0, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	1a5b      	subs	r3, r3, r1
 8000f46:	b2a4      	uxth	r4, r4
 8000f48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f54:	fb01 f307 	mul.w	r3, r1, r7
 8000f58:	42a3      	cmp	r3, r4
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x276>
 8000f5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f64:	d213      	bcs.n	8000f8e <__udivmoddi4+0x296>
 8000f66:	42a3      	cmp	r3, r4
 8000f68:	d911      	bls.n	8000f8e <__udivmoddi4+0x296>
 8000f6a:	3902      	subs	r1, #2
 8000f6c:	4464      	add	r4, ip
 8000f6e:	1ae4      	subs	r4, r4, r3
 8000f70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f74:	e739      	b.n	8000dea <__udivmoddi4+0xf2>
 8000f76:	4604      	mov	r4, r0
 8000f78:	e6f0      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e706      	b.n	8000d8c <__udivmoddi4+0x94>
 8000f7e:	45c8      	cmp	r8, r9
 8000f80:	d2ae      	bcs.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f8a:	3801      	subs	r0, #1
 8000f8c:	e7a8      	b.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f8e:	4631      	mov	r1, r6
 8000f90:	e7ed      	b.n	8000f6e <__udivmoddi4+0x276>
 8000f92:	4603      	mov	r3, r0
 8000f94:	e799      	b.n	8000eca <__udivmoddi4+0x1d2>
 8000f96:	4630      	mov	r0, r6
 8000f98:	e7d4      	b.n	8000f44 <__udivmoddi4+0x24c>
 8000f9a:	46d6      	mov	lr, sl
 8000f9c:	e77f      	b.n	8000e9e <__udivmoddi4+0x1a6>
 8000f9e:	4463      	add	r3, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e74d      	b.n	8000e40 <__udivmoddi4+0x148>
 8000fa4:	4606      	mov	r6, r0
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e70f      	b.n	8000dcc <__udivmoddi4+0xd4>
 8000fac:	3e02      	subs	r6, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	e730      	b.n	8000e14 <__udivmoddi4+0x11c>
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <gnss_app_setup>:
//! GPS instance
static GPS_positionData_t gpsData;

extern osMutexId_t gnssDataLockHandle;

void gnss_app_setup(void) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
	GPS_ReturnCode_e retVal = GPS_Initialize(&gpsData);
 8000fbe:	4808      	ldr	r0, [pc, #32]	@ (8000fe0 <gnss_app_setup+0x28>)
 8000fc0:	f000 fe60 	bl	8001c84 <GPS_Initialize>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	71fb      	strb	r3, [r7, #7]
	if (retVal != GPS_OK) {
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <gnss_app_setup+0x1e>
		DebugLogPrintf(__FUNCTION__, "ERROR - GPS_Initialize");
 8000fce:	4905      	ldr	r1, [pc, #20]	@ (8000fe4 <gnss_app_setup+0x2c>)
 8000fd0:	4805      	ldr	r0, [pc, #20]	@ (8000fe8 <gnss_app_setup+0x30>)
 8000fd2:	f001 faf7 	bl	80025c4 <DebugLogPrintf>
	}
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200002f4 	.word	0x200002f4
 8000fe4:	0801e608 	.word	0x0801e608
 8000fe8:	0801edac 	.word	0x0801edac

08000fec <gnss_app_update>:

void gnss_app_update(void) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
	osMutexAcquire(gnssDataLockHandle, osWaitForever);
 8000ff2:	4b12      	ldr	r3, [pc, #72]	@ (800103c <gnss_app_update+0x50>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f04f 31ff 	mov.w	r1, #4294967295
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f014 fea0 	bl	8015d40 <osMutexAcquire>

	GPS_ReturnCode_e retVal = GPS_Update(&gpsData);
 8001000:	480f      	ldr	r0, [pc, #60]	@ (8001040 <gnss_app_update+0x54>)
 8001002:	f000 fe65 	bl	8001cd0 <GPS_Update>
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
	if (retVal != GPS_OK) {
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d003      	beq.n	8001018 <gnss_app_update+0x2c>
		DebugLogPrintf(__FUNCTION__, "ERROR - GPS_Update");
 8001010:	490c      	ldr	r1, [pc, #48]	@ (8001044 <gnss_app_update+0x58>)
 8001012:	480d      	ldr	r0, [pc, #52]	@ (8001048 <gnss_app_update+0x5c>)
 8001014:	f001 fad6 	bl	80025c4 <DebugLogPrintf>
	}

	osMutexRelease(gnssDataLockHandle);
 8001018:	4b08      	ldr	r3, [pc, #32]	@ (800103c <gnss_app_update+0x50>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4618      	mov	r0, r3
 800101e:	f014 feda 	bl	8015dd6 <osMutexRelease>

	// TODO - when uart works make delay 1-10ms??
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001022:	2120      	movs	r1, #32
 8001024:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001028:	f005 ffee 	bl	8007008 <HAL_GPIO_TogglePin>
	osDelay(1000);
 800102c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001030:	f014 fde5 	bl	8015bfe <osDelay>
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	200031a4 	.word	0x200031a4
 8001040:	200002f4 	.word	0x200002f4
 8001044:	0801e620 	.word	0x0801e620
 8001048:	0801edbc 	.word	0x0801edbc

0800104c <gnss_app_getFixData>:

void gnss_app_getFixData(GPS_positionData_t *pos) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	// Lock data to get copy
	osMutexAcquire(gnssDataLockHandle, osWaitForever);
 8001054:	4b10      	ldr	r3, [pc, #64]	@ (8001098 <gnss_app_getFixData+0x4c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f04f 31ff 	mov.w	r1, #4294967295
 800105c:	4618      	mov	r0, r3
 800105e:	f014 fe6f 	bl	8015d40 <osMutexAcquire>

	// Determine if we have a recent gps fix
	if (gpsData.gns_data.satellites > 3) {
 8001062:	4b0e      	ldr	r3, [pc, #56]	@ (800109c <gnss_app_getFixData+0x50>)
 8001064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001066:	2b03      	cmp	r3, #3
 8001068:	dd03      	ble.n	8001072 <gnss_app_getFixData+0x26>
		gpsData.gpsFix = true;
 800106a:	4b0c      	ldr	r3, [pc, #48]	@ (800109c <gnss_app_getFixData+0x50>)
 800106c:	2201      	movs	r2, #1
 800106e:	701a      	strb	r2, [r3, #0]
 8001070:	e002      	b.n	8001078 <gnss_app_getFixData+0x2c>
	} else {
		gpsData.gpsFix = false;
 8001072:	4b0a      	ldr	r3, [pc, #40]	@ (800109c <gnss_app_getFixData+0x50>)
 8001074:	2200      	movs	r2, #0
 8001076:	701a      	strb	r2, [r3, #0]
	//    tm.Day = 27;
	//    parse_time((char *)&(gpsData.rmc_data.time), &tm);
	//    gpsData.epochTime = makeTime(tm);

	// Copy local copy out
	memcpy(pos, &gpsData, sizeof(GPS_positionData_t));
 8001078:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800107c:	4907      	ldr	r1, [pc, #28]	@ (800109c <gnss_app_getFixData+0x50>)
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f01a fa37 	bl	801b4f2 <memcpy>

	osMutexRelease(gnssDataLockHandle);
 8001084:	4b04      	ldr	r3, [pc, #16]	@ (8001098 <gnss_app_getFixData+0x4c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f014 fea4 	bl	8015dd6 <osMutexRelease>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200031a4 	.word	0x200031a4
 800109c:	200002f4 	.word	0x200002f4

080010a0 <main_app_setup>:
#include "app.h"

volatile bool dmaComplete;

void main_app_setup(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
    DebugLogPrintf(__FUNCTION__, "Begin");
 80010a4:	4906      	ldr	r1, [pc, #24]	@ (80010c0 <main_app_setup+0x20>)
 80010a6:	4807      	ldr	r0, [pc, #28]	@ (80010c4 <main_app_setup+0x24>)
 80010a8:	f001 fa8c 	bl	80025c4 <DebugLogPrintf>

    osDelay(10000);
 80010ac:	f242 7010 	movw	r0, #10000	@ 0x2710
 80010b0:	f014 fda5 	bl	8015bfe <osDelay>

    //fs_test2(); this is taking lots of stack???
    //PlayAudio();
    //PlayAudioFileTest();

    DebugLogPrintf(__FUNCTION__, "End");
 80010b4:	4904      	ldr	r1, [pc, #16]	@ (80010c8 <main_app_setup+0x28>)
 80010b6:	4803      	ldr	r0, [pc, #12]	@ (80010c4 <main_app_setup+0x24>)
 80010b8:	f001 fa84 	bl	80025c4 <DebugLogPrintf>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	0801e634 	.word	0x0801e634
 80010c4:	0801edcc 	.word	0x0801edcc
 80010c8:	0801e63c 	.word	0x0801e63c

080010cc <main_app_update>:

void main_app_update(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	DebugLogPrintf(__FUNCTION__, "Loop");
 80010d0:	4907      	ldr	r1, [pc, #28]	@ (80010f0 <main_app_update+0x24>)
 80010d2:	4808      	ldr	r0, [pc, #32]	@ (80010f4 <main_app_update+0x28>)
 80010d4:	f001 fa76 	bl	80025c4 <DebugLogPrintf>

	HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 80010d8:	2110      	movs	r1, #16
 80010da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010de:	f005 ff93 	bl	8007008 <HAL_GPIO_TogglePin>

	osDelay(1000);
 80010e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010e6:	f014 fd8a 	bl	8015bfe <osDelay>
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	0801e640 	.word	0x0801e640
 80010f4:	0801eddc 	.word	0x0801eddc

080010f8 <HAL_GPIO_EXTI_Callback>:
{
	dmaComplete = true;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	80fb      	strh	r3, [r7, #6]
    DebugLogPrintf(__FUNCTION__, "pin=0x%x", GPIO_Pin);
 8001102:	88fb      	ldrh	r3, [r7, #6]
 8001104:	461a      	mov	r2, r3
 8001106:	4907      	ldr	r1, [pc, #28]	@ (8001124 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001108:	4807      	ldr	r0, [pc, #28]	@ (8001128 <HAL_GPIO_EXTI_Callback+0x30>)
 800110a:	f001 fa5b 	bl	80025c4 <DebugLogPrintf>

    if (GPIO_Pin == B1_Pin)
 800110e:	88fb      	ldrh	r3, [r7, #6]
 8001110:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001114:	d102      	bne.n	800111c <HAL_GPIO_EXTI_Callback+0x24>
    {
    	ui_handle_extiEvent(USER_BUTTON1);
 8001116:	2001      	movs	r0, #1
 8001118:	f000 f852 	bl	80011c0 <ui_handle_extiEvent>
    }
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	0801e648 	.word	0x0801e648
 8001128:	0801edec 	.word	0x0801edec

0800112c <ui_app_setup>:

//------------------------------------------------------------------------
// Public Functions
//------------------------------------------------------------------------

void ui_app_setup(void) {
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	// Setup UI stack
	ui_setup_main_page();
 8001130:	f000 f862 	bl	80011f8 <ui_setup_main_page>
	ui_setup_msg_page();
 8001134:	f000 f964 	bl	8001400 <ui_setup_msg_page>
	ui_setup_gnss_page();
 8001138:	f000 fad0 	bl	80016dc <ui_setup_gnss_page>
	ui_setup_folder_page();
 800113c:	f000 fc84 	bl	8001a48 <ui_setup_folder_page>
}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}

08001144 <ui_app_update>:

void ui_app_update(void) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b0e6      	sub	sp, #408	@ 0x198
 8001148:	af00      	add	r7, sp, #0
	// Handle button press events
	osMutexAcquire(uiDataLockHandle, osWaitForever);
 800114a:	4b1b      	ldr	r3, [pc, #108]	@ (80011b8 <ui_app_update+0x74>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f04f 31ff 	mov.w	r1, #4294967295
 8001152:	4618      	mov	r0, r3
 8001154:	f014 fdf4 	bl	8015d40 <osMutexAcquire>
	ui_handle_event();
 8001158:	f000 fc82 	bl	8001a60 <ui_handle_event>
	osMutexRelease(uiDataLockHandle);
 800115c:	4b16      	ldr	r3, [pc, #88]	@ (80011b8 <ui_app_update+0x74>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f014 fe38 	bl	8015dd6 <osMutexRelease>

	// Determine page
	if (ui.activePageId == GNSS_PAGE_ID) {
 8001166:	4b15      	ldr	r3, [pc, #84]	@ (80011bc <ui_app_update+0x78>)
 8001168:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800116c:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	@ 0x530
 8001170:	2b03      	cmp	r3, #3
 8001172:	d115      	bne.n	80011a0 <ui_app_update+0x5c>
		// Grab data from appropriate datastore
		GPS_positionData_t gpsData;
		gnss_app_getFixData(&gpsData);
 8001174:	463b      	mov	r3, r7
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff ff68 	bl	800104c <gnss_app_getFixData>

		// Update textboxes/widgets
		ui_update_gnssPage(gpsData.gns_data.latitude,
 800117c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8001180:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001184:	edd3 7a05 	vldr	s15, [r3, #20]
 8001188:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800118c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001190:	ed93 7a07 	vldr	s14, [r3, #28]
 8001194:	eef0 0a47 	vmov.f32	s1, s14
 8001198:	eeb0 0a67 	vmov.f32	s0, s15
 800119c:	f000 fd54 	bl	8001c48 <ui_update_gnssPage>
				gpsData.gns_data.longitude);
	}

	// Call framework to update widgets
	ui_framework_update(&ui);
 80011a0:	4806      	ldr	r0, [pc, #24]	@ (80011bc <ui_app_update+0x78>)
 80011a2:	f002 fce5 	bl	8003b70 <ui_framework_update>

	osDelay(10);
 80011a6:	200a      	movs	r0, #10
 80011a8:	f014 fd29 	bl	8015bfe <osDelay>
}
 80011ac:	bf00      	nop
 80011ae:	f507 77cc 	add.w	r7, r7, #408	@ 0x198
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200031a8 	.word	0x200031a8
 80011bc:	2000048c 	.word	0x2000048c

080011c0 <ui_handle_extiEvent>:

void ui_handle_extiEvent(application_event_e event) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
	osMutexAcquire(uiDataLockHandle, osWaitForever);
 80011ca:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <ui_handle_extiEvent+0x30>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f04f 31ff 	mov.w	r1, #4294967295
 80011d2:	4618      	mov	r0, r3
 80011d4:	f014 fdb4 	bl	8015d40 <osMutexAcquire>
	// Set flag to handle button press inside task execution
	uiEvent = event;
 80011d8:	4a06      	ldr	r2, [pc, #24]	@ (80011f4 <ui_handle_extiEvent+0x34>)
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	7013      	strb	r3, [r2, #0]
	osMutexRelease(uiDataLockHandle);
 80011de:	4b04      	ldr	r3, [pc, #16]	@ (80011f0 <ui_handle_extiEvent+0x30>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f014 fdf7 	bl	8015dd6 <osMutexRelease>
}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	200031a8 	.word	0x200031a8
 80011f4:	20002c04 	.word	0x20002c04

080011f8 <ui_setup_main_page>:

void ui_setup_main_page(void) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	@ 0x28
 80011fc:	af0a      	add	r7, sp, #40	@ 0x28
	DebugLogPrintf(__FUNCTION__, "begin");
 80011fe:	496f      	ldr	r1, [pc, #444]	@ (80013bc <ui_setup_main_page+0x1c4>)
 8001200:	486f      	ldr	r0, [pc, #444]	@ (80013c0 <ui_setup_main_page+0x1c8>)
 8001202:	f001 f9df 	bl	80025c4 <DebugLogPrintf>

	// Initialize UI framework and link SD instance
	ui_framework_init(&ui, &sd);
 8001206:	496f      	ldr	r1, [pc, #444]	@ (80013c4 <ui_setup_main_page+0x1cc>)
 8001208:	486f      	ldr	r0, [pc, #444]	@ (80013c8 <ui_setup_main_page+0x1d0>)
 800120a:	f002 fc77 	bl	8003afc <ui_framework_init>

	ui_framework_configureStatsBar(&ui,
 800120e:	4b6f      	ldr	r3, [pc, #444]	@ (80013cc <ui_setup_main_page+0x1d4>)
 8001210:	9304      	str	r3, [sp, #16]
 8001212:	4b6f      	ldr	r3, [pc, #444]	@ (80013d0 <ui_setup_main_page+0x1d8>)
 8001214:	9303      	str	r3, [sp, #12]
 8001216:	4b6f      	ldr	r3, [pc, #444]	@ (80013d4 <ui_setup_main_page+0x1dc>)
 8001218:	9302      	str	r3, [sp, #8]
 800121a:	4b6f      	ldr	r3, [pc, #444]	@ (80013d8 <ui_setup_main_page+0x1e0>)
 800121c:	9301      	str	r3, [sp, #4]
 800121e:	4b6e      	ldr	r3, [pc, #440]	@ (80013d8 <ui_setup_main_page+0x1e0>)
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	4b6d      	ldr	r3, [pc, #436]	@ (80013d8 <ui_setup_main_page+0x1e0>)
 8001224:	f647 32ef 	movw	r2, #31727	@ 0x7bef
 8001228:	2120      	movs	r1, #32
 800122a:	4867      	ldr	r0, [pc, #412]	@ (80013c8 <ui_setup_main_page+0x1d0>)
 800122c:	f002 fd46 	bl	8003cbc <ui_framework_configureStatsBar>
			"/bitmaps/battEmpty32x32_24bit_grey.bmp",
			"/bitmaps/battEmpty32x32_24bit_grey.bmp",
			"/bitmaps/sd32x32_grey.bmp", "/bitmaps/sat32x32_grey.bmp",
			"/bitmaps/locMarker32x32_grey.bmp");

	ui_framework_newPage(&ui, MAIN_PAGE_ID, LightGrey);
 8001230:	f24c 6218 	movw	r2, #50712	@ 0xc618
 8001234:	2101      	movs	r1, #1
 8001236:	4864      	ldr	r0, [pc, #400]	@ (80013c8 <ui_setup_main_page+0x1d0>)
 8001238:	f002 fda6 	bl	8003d88 <ui_framework_newPage>

	// Image Button 1
	ui_framework_addImageButton(&ui, // Inst
 800123c:	2300      	movs	r3, #0
 800123e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001240:	4b66      	ldr	r3, [pc, #408]	@ (80013dc <ui_setup_main_page+0x1e4>)
 8001242:	9308      	str	r3, [sp, #32]
 8001244:	230a      	movs	r3, #10
 8001246:	9307      	str	r3, [sp, #28]
 8001248:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800124c:	9306      	str	r3, [sp, #24]
 800124e:	2300      	movs	r3, #0
 8001250:	9305      	str	r3, [sp, #20]
 8001252:	2301      	movs	r3, #1
 8001254:	9304      	str	r3, [sp, #16]
 8001256:	4b62      	ldr	r3, [pc, #392]	@ (80013e0 <ui_setup_main_page+0x1e8>)
 8001258:	9303      	str	r3, [sp, #12]
 800125a:	2350      	movs	r3, #80	@ 0x50
 800125c:	9302      	str	r3, [sp, #8]
 800125e:	2350      	movs	r3, #80	@ 0x50
 8001260:	9301      	str	r3, [sp, #4]
 8001262:	232a      	movs	r3, #42	@ 0x2a
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	230a      	movs	r3, #10
 8001268:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800126c:	2101      	movs	r1, #1
 800126e:	4856      	ldr	r0, [pc, #344]	@ (80013c8 <ui_setup_main_page+0x1d0>)
 8001270:	f002 fea6 	bl	8003fc0 <ui_framework_addImageButton>
			10, // Corner Radius
			"/bitmaps/msg48x48_grey.bmp", // Image File Location
			NULL);

	// Image Button 2
	ui_framework_addImageButton(&ui, // Inst
 8001274:	2300      	movs	r3, #0
 8001276:	9309      	str	r3, [sp, #36]	@ 0x24
 8001278:	4b5a      	ldr	r3, [pc, #360]	@ (80013e4 <ui_setup_main_page+0x1ec>)
 800127a:	9308      	str	r3, [sp, #32]
 800127c:	230a      	movs	r3, #10
 800127e:	9307      	str	r3, [sp, #28]
 8001280:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8001284:	9306      	str	r3, [sp, #24]
 8001286:	2300      	movs	r3, #0
 8001288:	9305      	str	r3, [sp, #20]
 800128a:	2301      	movs	r3, #1
 800128c:	9304      	str	r3, [sp, #16]
 800128e:	4b56      	ldr	r3, [pc, #344]	@ (80013e8 <ui_setup_main_page+0x1f0>)
 8001290:	9303      	str	r3, [sp, #12]
 8001292:	2350      	movs	r3, #80	@ 0x50
 8001294:	9302      	str	r3, [sp, #8]
 8001296:	2350      	movs	r3, #80	@ 0x50
 8001298:	9301      	str	r3, [sp, #4]
 800129a:	232a      	movs	r3, #42	@ 0x2a
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	2364      	movs	r3, #100	@ 0x64
 80012a0:	f240 1201 	movw	r2, #257	@ 0x101
 80012a4:	2101      	movs	r1, #1
 80012a6:	4848      	ldr	r0, [pc, #288]	@ (80013c8 <ui_setup_main_page+0x1d0>)
 80012a8:	f002 fe8a 	bl	8003fc0 <ui_framework_addImageButton>
			10, // Corner Radius
			"/bitmaps/satellite48x48_grey2.bmp", // Image File Location
			NULL);

	// Image Button 3
	ui_framework_addImageButton(&ui, // Inst
 80012ac:	2300      	movs	r3, #0
 80012ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80012b0:	4b4e      	ldr	r3, [pc, #312]	@ (80013ec <ui_setup_main_page+0x1f4>)
 80012b2:	9308      	str	r3, [sp, #32]
 80012b4:	230a      	movs	r3, #10
 80012b6:	9307      	str	r3, [sp, #28]
 80012b8:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80012bc:	9306      	str	r3, [sp, #24]
 80012be:	2300      	movs	r3, #0
 80012c0:	9305      	str	r3, [sp, #20]
 80012c2:	2301      	movs	r3, #1
 80012c4:	9304      	str	r3, [sp, #16]
 80012c6:	4b4a      	ldr	r3, [pc, #296]	@ (80013f0 <ui_setup_main_page+0x1f8>)
 80012c8:	9303      	str	r3, [sp, #12]
 80012ca:	2350      	movs	r3, #80	@ 0x50
 80012cc:	9302      	str	r3, [sp, #8]
 80012ce:	2350      	movs	r3, #80	@ 0x50
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	232a      	movs	r3, #42	@ 0x2a
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	23be      	movs	r3, #190	@ 0xbe
 80012d8:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80012dc:	2101      	movs	r1, #1
 80012de:	483a      	ldr	r0, [pc, #232]	@ (80013c8 <ui_setup_main_page+0x1d0>)
 80012e0:	f002 fe6e 	bl	8003fc0 <ui_framework_addImageButton>
			10, // Corner Radius
			"/bitmaps/folder48x48_grey.bmp", // Image File Location
			NULL);

	// Image Button 4
	ui_framework_addImageButton(&ui, // Inst
 80012e4:	2300      	movs	r3, #0
 80012e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80012e8:	4b42      	ldr	r3, [pc, #264]	@ (80013f4 <ui_setup_main_page+0x1fc>)
 80012ea:	9308      	str	r3, [sp, #32]
 80012ec:	230a      	movs	r3, #10
 80012ee:	9307      	str	r3, [sp, #28]
 80012f0:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80012f4:	9306      	str	r3, [sp, #24]
 80012f6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80012fa:	9305      	str	r3, [sp, #20]
 80012fc:	2301      	movs	r3, #1
 80012fe:	9304      	str	r3, [sp, #16]
 8001300:	4b3d      	ldr	r3, [pc, #244]	@ (80013f8 <ui_setup_main_page+0x200>)
 8001302:	9303      	str	r3, [sp, #12]
 8001304:	2350      	movs	r3, #80	@ 0x50
 8001306:	9302      	str	r3, [sp, #8]
 8001308:	2350      	movs	r3, #80	@ 0x50
 800130a:	9301      	str	r3, [sp, #4]
 800130c:	2384      	movs	r3, #132	@ 0x84
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	230a      	movs	r3, #10
 8001312:	f240 1203 	movw	r2, #259	@ 0x103
 8001316:	2101      	movs	r1, #1
 8001318:	482b      	ldr	r0, [pc, #172]	@ (80013c8 <ui_setup_main_page+0x1d0>)
 800131a:	f002 fe51 	bl	8003fc0 <ui_framework_addImageButton>
			10, // Corner Radius
			"/bitmaps/settings48x48_grey.bmp", // Image File Location
			NULL);

	// Image Button 5
	ui_framework_addImageButton(&ui, // Inst
 800131e:	2300      	movs	r3, #0
 8001320:	9309      	str	r3, [sp, #36]	@ 0x24
 8001322:	4b32      	ldr	r3, [pc, #200]	@ (80013ec <ui_setup_main_page+0x1f4>)
 8001324:	9308      	str	r3, [sp, #32]
 8001326:	230a      	movs	r3, #10
 8001328:	9307      	str	r3, [sp, #28]
 800132a:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800132e:	9306      	str	r3, [sp, #24]
 8001330:	231f      	movs	r3, #31
 8001332:	9305      	str	r3, [sp, #20]
 8001334:	2301      	movs	r3, #1
 8001336:	9304      	str	r3, [sp, #16]
 8001338:	4b2f      	ldr	r3, [pc, #188]	@ (80013f8 <ui_setup_main_page+0x200>)
 800133a:	9303      	str	r3, [sp, #12]
 800133c:	2350      	movs	r3, #80	@ 0x50
 800133e:	9302      	str	r3, [sp, #8]
 8001340:	2350      	movs	r3, #80	@ 0x50
 8001342:	9301      	str	r3, [sp, #4]
 8001344:	2384      	movs	r3, #132	@ 0x84
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	2364      	movs	r3, #100	@ 0x64
 800134a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800134e:	2101      	movs	r1, #1
 8001350:	481d      	ldr	r0, [pc, #116]	@ (80013c8 <ui_setup_main_page+0x1d0>)
 8001352:	f002 fe35 	bl	8003fc0 <ui_framework_addImageButton>
			10, // Corner Radius
			"/bitmaps/folder48x48_grey.bmp", // Image File Location
			NULL);

	// Image Button 6
	ui_framework_addImageButton(&ui, // Inst
 8001356:	2300      	movs	r3, #0
 8001358:	9309      	str	r3, [sp, #36]	@ 0x24
 800135a:	4b26      	ldr	r3, [pc, #152]	@ (80013f4 <ui_setup_main_page+0x1fc>)
 800135c:	9308      	str	r3, [sp, #32]
 800135e:	230a      	movs	r3, #10
 8001360:	9307      	str	r3, [sp, #28]
 8001362:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8001366:	9306      	str	r3, [sp, #24]
 8001368:	2300      	movs	r3, #0
 800136a:	9305      	str	r3, [sp, #20]
 800136c:	2301      	movs	r3, #1
 800136e:	9304      	str	r3, [sp, #16]
 8001370:	4b22      	ldr	r3, [pc, #136]	@ (80013fc <ui_setup_main_page+0x204>)
 8001372:	9303      	str	r3, [sp, #12]
 8001374:	2350      	movs	r3, #80	@ 0x50
 8001376:	9302      	str	r3, [sp, #8]
 8001378:	2350      	movs	r3, #80	@ 0x50
 800137a:	9301      	str	r3, [sp, #4]
 800137c:	2384      	movs	r3, #132	@ 0x84
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	23be      	movs	r3, #190	@ 0xbe
 8001382:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8001386:	2101      	movs	r1, #1
 8001388:	480f      	ldr	r0, [pc, #60]	@ (80013c8 <ui_setup_main_page+0x1d0>)
 800138a:	f002 fe19 	bl	8003fc0 <ui_framework_addImageButton>
			10, // Corner Radius
			"/bitmaps/settings48x48_grey.bmp", // Image File Location
			NULL);

	// Default to image button 1 being selected
	ui.selectedWidgetId = MESSAGE_BUTTON_WIDGET_ID;
 800138e:	4b0e      	ldr	r3, [pc, #56]	@ (80013c8 <ui_setup_main_page+0x1d0>)
 8001390:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001394:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001398:	f8a3 2532 	strh.w	r2, [r3, #1330]	@ 0x532
	ui.newSelectedWidgetId = INVALID_UI_FRAMEWORK_ID;
 800139c:	4b0a      	ldr	r3, [pc, #40]	@ (80013c8 <ui_setup_main_page+0x1d0>)
 800139e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013a6:	f8a3 2536 	strh.w	r2, [r3, #1334]	@ 0x536
	// Kick off draw of main menu
	ui.newPageId = MAIN_PAGE_ID;
 80013aa:	4b07      	ldr	r3, [pc, #28]	@ (80013c8 <ui_setup_main_page+0x1d0>)
 80013ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013b0:	2201      	movs	r2, #1
 80013b2:	f8a3 2534 	strh.w	r2, [r3, #1332]	@ 0x534
}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	0801e654 	.word	0x0801e654
 80013c0:	0801ee04 	.word	0x0801ee04
 80013c4:	20001a00 	.word	0x20001a00
 80013c8:	2000048c 	.word	0x2000048c
 80013cc:	0801e684 	.word	0x0801e684
 80013d0:	0801e6a8 	.word	0x0801e6a8
 80013d4:	0801e6c4 	.word	0x0801e6c4
 80013d8:	0801e65c 	.word	0x0801e65c
 80013dc:	0801e6e0 	.word	0x0801e6e0
 80013e0:	0801e6fc 	.word	0x0801e6fc
 80013e4:	0801e700 	.word	0x0801e700
 80013e8:	0801e724 	.word	0x0801e724
 80013ec:	0801e72c 	.word	0x0801e72c
 80013f0:	0801e74c 	.word	0x0801e74c
 80013f4:	0801e754 	.word	0x0801e754
 80013f8:	0801e774 	.word	0x0801e774
 80013fc:	0801e778 	.word	0x0801e778

08001400 <ui_setup_msg_page>:

void ui_setup_msg_page(void) {
 8001400:	b590      	push	{r4, r7, lr}
 8001402:	b08b      	sub	sp, #44	@ 0x2c
 8001404:	af0a      	add	r7, sp, #40	@ 0x28
	ui_framework_newPage(&ui, MESSAGE_PAGE_ID, Navy);
 8001406:	220f      	movs	r2, #15
 8001408:	2102      	movs	r1, #2
 800140a:	48a8      	ldr	r0, [pc, #672]	@ (80016ac <ui_setup_msg_page+0x2ac>)
 800140c:	f002 fcbc 	bl	8003d88 <ui_framework_newPage>
			MESSAGE_PAGE_ID, // Page ID
			MESSAGE_TEXT_ROW1_WIDGET_ID, // Widget ID
			10, // X
			STATUS_BAR_HEIGHT_PX + 10, // Y
			200, // W
			ui_framework_getFontPixelSize(FONT_SIZE_2X), // H
 8001410:	2001      	movs	r0, #1
 8001412:	f002 fede 	bl	80041d2 <ui_framework_getFontPixelSize>
 8001416:	4603      	mov	r3, r0
	ui_framework_addTextBox(&ui, // Instance
 8001418:	461a      	mov	r2, r3
 800141a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800141e:	9305      	str	r3, [sp, #20]
 8001420:	2301      	movs	r3, #1
 8001422:	9304      	str	r3, [sp, #16]
 8001424:	4ba2      	ldr	r3, [pc, #648]	@ (80016b0 <ui_setup_msg_page+0x2b0>)
 8001426:	9303      	str	r3, [sp, #12]
 8001428:	9202      	str	r2, [sp, #8]
 800142a:	23c8      	movs	r3, #200	@ 0xc8
 800142c:	9301      	str	r3, [sp, #4]
 800142e:	232a      	movs	r3, #42	@ 0x2a
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	230a      	movs	r3, #10
 8001434:	f240 2201 	movw	r2, #513	@ 0x201
 8001438:	2102      	movs	r1, #2
 800143a:	489c      	ldr	r0, [pc, #624]	@ (80016ac <ui_setup_msg_page+0x2ac>)
 800143c:	f002 fcec 	bl	8003e18 <ui_framework_addTextBox>
			&ui, // Instance
			MESSAGE_PAGE_ID, // Page ID
			MESSAGE_TEXT_ROW2_WIDGET_ID, // Widget ID
			10, // X
			STATUS_BAR_HEIGHT_PX + 10
					+ ui_framework_getFontPixelSize(FONT_SIZE_2X), // Y
 8001440:	2001      	movs	r0, #1
 8001442:	f002 fec6 	bl	80041d2 <ui_framework_getFontPixelSize>
 8001446:	4603      	mov	r3, r0
	ui_framework_addTextBox(
 8001448:	332a      	adds	r3, #42	@ 0x2a
 800144a:	b29c      	uxth	r4, r3
			200, // W
			ui_framework_getFontPixelSize(FONT_SIZE_2X), // H
 800144c:	2001      	movs	r0, #1
 800144e:	f002 fec0 	bl	80041d2 <ui_framework_getFontPixelSize>
 8001452:	4603      	mov	r3, r0
	ui_framework_addTextBox(
 8001454:	461a      	mov	r2, r3
 8001456:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800145a:	9305      	str	r3, [sp, #20]
 800145c:	2301      	movs	r3, #1
 800145e:	9304      	str	r3, [sp, #16]
 8001460:	4b94      	ldr	r3, [pc, #592]	@ (80016b4 <ui_setup_msg_page+0x2b4>)
 8001462:	9303      	str	r3, [sp, #12]
 8001464:	9202      	str	r2, [sp, #8]
 8001466:	23c8      	movs	r3, #200	@ 0xc8
 8001468:	9301      	str	r3, [sp, #4]
 800146a:	9400      	str	r4, [sp, #0]
 800146c:	230a      	movs	r3, #10
 800146e:	f240 2202 	movw	r2, #514	@ 0x202
 8001472:	2102      	movs	r1, #2
 8001474:	488d      	ldr	r0, [pc, #564]	@ (80016ac <ui_setup_msg_page+0x2ac>)
 8001476:	f002 fccf 	bl	8003e18 <ui_framework_addTextBox>
			&ui, // Instance
			MESSAGE_PAGE_ID, // Page ID
			MESSAGE_TEXT_ROW3_WIDGET_ID, // Widget ID
			10, // X
			STATUS_BAR_HEIGHT_PX + 10
					+ (2 * ui_framework_getFontPixelSize(FONT_SIZE_2X)), // Y
 800147a:	2001      	movs	r0, #1
 800147c:	f002 fea9 	bl	80041d2 <ui_framework_getFontPixelSize>
 8001480:	4603      	mov	r3, r0
 8001482:	3315      	adds	r3, #21
	ui_framework_addTextBox(
 8001484:	b29b      	uxth	r3, r3
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	b29c      	uxth	r4, r3
			200, // W
			ui_framework_getFontPixelSize(FONT_SIZE_2X), // H
 800148a:	2001      	movs	r0, #1
 800148c:	f002 fea1 	bl	80041d2 <ui_framework_getFontPixelSize>
 8001490:	4603      	mov	r3, r0
	ui_framework_addTextBox(
 8001492:	461a      	mov	r2, r3
 8001494:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001498:	9305      	str	r3, [sp, #20]
 800149a:	2301      	movs	r3, #1
 800149c:	9304      	str	r3, [sp, #16]
 800149e:	4b86      	ldr	r3, [pc, #536]	@ (80016b8 <ui_setup_msg_page+0x2b8>)
 80014a0:	9303      	str	r3, [sp, #12]
 80014a2:	9202      	str	r2, [sp, #8]
 80014a4:	23c8      	movs	r3, #200	@ 0xc8
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	9400      	str	r4, [sp, #0]
 80014aa:	230a      	movs	r3, #10
 80014ac:	f240 2203 	movw	r2, #515	@ 0x203
 80014b0:	2102      	movs	r1, #2
 80014b2:	487e      	ldr	r0, [pc, #504]	@ (80016ac <ui_setup_msg_page+0x2ac>)
 80014b4:	f002 fcb0 	bl	8003e18 <ui_framework_addTextBox>
			&ui, // Instance
			MESSAGE_PAGE_ID, // Page ID
			MESSAGE_TEXT_ROW4_WIDGET_ID, // Widget ID
			10, // X
			STATUS_BAR_HEIGHT_PX + 10
					+ (3 * ui_framework_getFontPixelSize(FONT_SIZE_2X)), // Y
 80014b8:	2001      	movs	r0, #1
 80014ba:	f002 fe8a 	bl	80041d2 <ui_framework_getFontPixelSize>
 80014be:	4603      	mov	r3, r0
	ui_framework_addTextBox(
 80014c0:	461a      	mov	r2, r3
 80014c2:	0052      	lsls	r2, r2, #1
 80014c4:	4413      	add	r3, r2
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	332a      	adds	r3, #42	@ 0x2a
 80014ca:	b29c      	uxth	r4, r3
			200, // W
			ui_framework_getFontPixelSize(FONT_SIZE_2X), // H
 80014cc:	2001      	movs	r0, #1
 80014ce:	f002 fe80 	bl	80041d2 <ui_framework_getFontPixelSize>
 80014d2:	4603      	mov	r3, r0
	ui_framework_addTextBox(
 80014d4:	461a      	mov	r2, r3
 80014d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014da:	9305      	str	r3, [sp, #20]
 80014dc:	2301      	movs	r3, #1
 80014de:	9304      	str	r3, [sp, #16]
 80014e0:	4b76      	ldr	r3, [pc, #472]	@ (80016bc <ui_setup_msg_page+0x2bc>)
 80014e2:	9303      	str	r3, [sp, #12]
 80014e4:	9202      	str	r2, [sp, #8]
 80014e6:	23c8      	movs	r3, #200	@ 0xc8
 80014e8:	9301      	str	r3, [sp, #4]
 80014ea:	9400      	str	r4, [sp, #0]
 80014ec:	230a      	movs	r3, #10
 80014ee:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80014f2:	2102      	movs	r1, #2
 80014f4:	486d      	ldr	r0, [pc, #436]	@ (80016ac <ui_setup_msg_page+0x2ac>)
 80014f6:	f002 fc8f 	bl	8003e18 <ui_framework_addTextBox>
			&ui, // Instance
			MESSAGE_PAGE_ID, // Page ID
			MESSAGE_TEXT_ROW5_WIDGET_ID, // Widget ID
			10, // X
			STATUS_BAR_HEIGHT_PX + 10
					+ (4 * ui_framework_getFontPixelSize(FONT_SIZE_2X)), // Y
 80014fa:	2001      	movs	r0, #1
 80014fc:	f002 fe69 	bl	80041d2 <ui_framework_getFontPixelSize>
 8001500:	4603      	mov	r3, r0
	ui_framework_addTextBox(
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	b29b      	uxth	r3, r3
 8001506:	332a      	adds	r3, #42	@ 0x2a
 8001508:	b29c      	uxth	r4, r3
			200, // W
			ui_framework_getFontPixelSize(FONT_SIZE_2X), // H
 800150a:	2001      	movs	r0, #1
 800150c:	f002 fe61 	bl	80041d2 <ui_framework_getFontPixelSize>
 8001510:	4603      	mov	r3, r0
	ui_framework_addTextBox(
 8001512:	461a      	mov	r2, r3
 8001514:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001518:	9305      	str	r3, [sp, #20]
 800151a:	2301      	movs	r3, #1
 800151c:	9304      	str	r3, [sp, #16]
 800151e:	4b68      	ldr	r3, [pc, #416]	@ (80016c0 <ui_setup_msg_page+0x2c0>)
 8001520:	9303      	str	r3, [sp, #12]
 8001522:	9202      	str	r2, [sp, #8]
 8001524:	23c8      	movs	r3, #200	@ 0xc8
 8001526:	9301      	str	r3, [sp, #4]
 8001528:	9400      	str	r4, [sp, #0]
 800152a:	230a      	movs	r3, #10
 800152c:	f240 2205 	movw	r2, #517	@ 0x205
 8001530:	2102      	movs	r1, #2
 8001532:	485e      	ldr	r0, [pc, #376]	@ (80016ac <ui_setup_msg_page+0x2ac>)
 8001534:	f002 fc70 	bl	8003e18 <ui_framework_addTextBox>
			&ui, // Instance
			MESSAGE_PAGE_ID, // Page ID
			MESSAGE_TEXT_ROW6_WIDGET_ID, // Widget ID
			10, // X
			STATUS_BAR_HEIGHT_PX + 10
					+ (5 * ui_framework_getFontPixelSize(FONT_SIZE_2X)), // Y
 8001538:	2001      	movs	r0, #1
 800153a:	f002 fe4a 	bl	80041d2 <ui_framework_getFontPixelSize>
 800153e:	4603      	mov	r3, r0
	ui_framework_addTextBox(
 8001540:	461a      	mov	r2, r3
 8001542:	0092      	lsls	r2, r2, #2
 8001544:	4413      	add	r3, r2
 8001546:	b29b      	uxth	r3, r3
 8001548:	332a      	adds	r3, #42	@ 0x2a
 800154a:	b29c      	uxth	r4, r3
			200, // W
			ui_framework_getFontPixelSize(FONT_SIZE_2X), // H
 800154c:	2001      	movs	r0, #1
 800154e:	f002 fe40 	bl	80041d2 <ui_framework_getFontPixelSize>
 8001552:	4603      	mov	r3, r0
	ui_framework_addTextBox(
 8001554:	461a      	mov	r2, r3
 8001556:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800155a:	9305      	str	r3, [sp, #20]
 800155c:	2301      	movs	r3, #1
 800155e:	9304      	str	r3, [sp, #16]
 8001560:	4b58      	ldr	r3, [pc, #352]	@ (80016c4 <ui_setup_msg_page+0x2c4>)
 8001562:	9303      	str	r3, [sp, #12]
 8001564:	9202      	str	r2, [sp, #8]
 8001566:	23c8      	movs	r3, #200	@ 0xc8
 8001568:	9301      	str	r3, [sp, #4]
 800156a:	9400      	str	r4, [sp, #0]
 800156c:	230a      	movs	r3, #10
 800156e:	f240 2206 	movw	r2, #518	@ 0x206
 8001572:	2102      	movs	r1, #2
 8001574:	484d      	ldr	r0, [pc, #308]	@ (80016ac <ui_setup_msg_page+0x2ac>)
 8001576:	f002 fc4f 	bl	8003e18 <ui_framework_addTextBox>
			&ui, // Instance
			MESSAGE_PAGE_ID, // Page ID
			MESSAGE_TEXT_ROW7_WIDGET_ID, // Widget ID
			10, // X
			STATUS_BAR_HEIGHT_PX + 10
					+ (6 * ui_framework_getFontPixelSize(FONT_SIZE_2X)), // Y
 800157a:	2001      	movs	r0, #1
 800157c:	f002 fe29 	bl	80041d2 <ui_framework_getFontPixelSize>
 8001580:	4603      	mov	r3, r0
	ui_framework_addTextBox(
 8001582:	461a      	mov	r2, r3
 8001584:	0052      	lsls	r2, r2, #1
 8001586:	4413      	add	r3, r2
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	b29b      	uxth	r3, r3
 800158c:	332a      	adds	r3, #42	@ 0x2a
 800158e:	b29c      	uxth	r4, r3
			200, // W
			ui_framework_getFontPixelSize(FONT_SIZE_2X), // H
 8001590:	2001      	movs	r0, #1
 8001592:	f002 fe1e 	bl	80041d2 <ui_framework_getFontPixelSize>
 8001596:	4603      	mov	r3, r0
	ui_framework_addTextBox(
 8001598:	461a      	mov	r2, r3
 800159a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800159e:	9305      	str	r3, [sp, #20]
 80015a0:	2301      	movs	r3, #1
 80015a2:	9304      	str	r3, [sp, #16]
 80015a4:	4b48      	ldr	r3, [pc, #288]	@ (80016c8 <ui_setup_msg_page+0x2c8>)
 80015a6:	9303      	str	r3, [sp, #12]
 80015a8:	9202      	str	r2, [sp, #8]
 80015aa:	23c8      	movs	r3, #200	@ 0xc8
 80015ac:	9301      	str	r3, [sp, #4]
 80015ae:	9400      	str	r4, [sp, #0]
 80015b0:	230a      	movs	r3, #10
 80015b2:	f240 2207 	movw	r2, #519	@ 0x207
 80015b6:	2102      	movs	r1, #2
 80015b8:	483c      	ldr	r0, [pc, #240]	@ (80016ac <ui_setup_msg_page+0x2ac>)
 80015ba:	f002 fc2d 	bl	8003e18 <ui_framework_addTextBox>
			&ui, // Instance
			MESSAGE_PAGE_ID, // Page ID
			MESSAGE_TEXT_ROW8_WIDGET_ID, // Widget ID
			10, // X
			STATUS_BAR_HEIGHT_PX + 10
					+ (7 * ui_framework_getFontPixelSize(FONT_SIZE_2X)), // Y
 80015be:	2001      	movs	r0, #1
 80015c0:	f002 fe07 	bl	80041d2 <ui_framework_getFontPixelSize>
 80015c4:	4603      	mov	r3, r0
	ui_framework_addTextBox(
 80015c6:	461a      	mov	r2, r3
 80015c8:	00d2      	lsls	r2, r2, #3
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	332a      	adds	r3, #42	@ 0x2a
 80015d0:	b29c      	uxth	r4, r3
			200, // W
			ui_framework_getFontPixelSize(FONT_SIZE_2X), // H
 80015d2:	2001      	movs	r0, #1
 80015d4:	f002 fdfd 	bl	80041d2 <ui_framework_getFontPixelSize>
 80015d8:	4603      	mov	r3, r0
	ui_framework_addTextBox(
 80015da:	461a      	mov	r2, r3
 80015dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015e0:	9305      	str	r3, [sp, #20]
 80015e2:	2301      	movs	r3, #1
 80015e4:	9304      	str	r3, [sp, #16]
 80015e6:	4b39      	ldr	r3, [pc, #228]	@ (80016cc <ui_setup_msg_page+0x2cc>)
 80015e8:	9303      	str	r3, [sp, #12]
 80015ea:	9202      	str	r2, [sp, #8]
 80015ec:	23c8      	movs	r3, #200	@ 0xc8
 80015ee:	9301      	str	r3, [sp, #4]
 80015f0:	9400      	str	r4, [sp, #0]
 80015f2:	230a      	movs	r3, #10
 80015f4:	f44f 7202 	mov.w	r2, #520	@ 0x208
 80015f8:	2102      	movs	r1, #2
 80015fa:	482c      	ldr	r0, [pc, #176]	@ (80016ac <ui_setup_msg_page+0x2ac>)
 80015fc:	f002 fc0c 	bl	8003e18 <ui_framework_addTextBox>
			"8:", // Text
			FONT_SIZE_2X,
			White);

	// Bottom row buttons
	ui_framework_addButton(&ui, // Inst
 8001600:	2300      	movs	r3, #0
 8001602:	9308      	str	r3, [sp, #32]
 8001604:	2305      	movs	r3, #5
 8001606:	9307      	str	r3, [sp, #28]
 8001608:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800160c:	9306      	str	r3, [sp, #24]
 800160e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001612:	9305      	str	r3, [sp, #20]
 8001614:	2301      	movs	r3, #1
 8001616:	9304      	str	r3, [sp, #16]
 8001618:	4b2d      	ldr	r3, [pc, #180]	@ (80016d0 <ui_setup_msg_page+0x2d0>)
 800161a:	9303      	str	r3, [sp, #12]
 800161c:	2328      	movs	r3, #40	@ 0x28
 800161e:	9302      	str	r3, [sp, #8]
 8001620:	2350      	movs	r3, #80	@ 0x50
 8001622:	9301      	str	r3, [sp, #4]
 8001624:	23c8      	movs	r3, #200	@ 0xc8
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	230a      	movs	r3, #10
 800162a:	f44f 7204 	mov.w	r2, #528	@ 0x210
 800162e:	2102      	movs	r1, #2
 8001630:	481e      	ldr	r0, [pc, #120]	@ (80016ac <ui_setup_msg_page+0x2ac>)
 8001632:	f002 fc95 	bl	8003f60 <ui_framework_addButton>
			"Enter", // Text
			FONT_SIZE_2X,
			White,
			DarkGrey, 5,
			NULL);
	ui_framework_addButton(&ui, // Inst
 8001636:	2300      	movs	r3, #0
 8001638:	9308      	str	r3, [sp, #32]
 800163a:	2305      	movs	r3, #5
 800163c:	9307      	str	r3, [sp, #28]
 800163e:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8001642:	9306      	str	r3, [sp, #24]
 8001644:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001648:	9305      	str	r3, [sp, #20]
 800164a:	2301      	movs	r3, #1
 800164c:	9304      	str	r3, [sp, #16]
 800164e:	4b21      	ldr	r3, [pc, #132]	@ (80016d4 <ui_setup_msg_page+0x2d4>)
 8001650:	9303      	str	r3, [sp, #12]
 8001652:	2328      	movs	r3, #40	@ 0x28
 8001654:	9302      	str	r3, [sp, #8]
 8001656:	2350      	movs	r3, #80	@ 0x50
 8001658:	9301      	str	r3, [sp, #4]
 800165a:	23c8      	movs	r3, #200	@ 0xc8
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	2364      	movs	r3, #100	@ 0x64
 8001660:	f240 2211 	movw	r2, #529	@ 0x211
 8001664:	2102      	movs	r1, #2
 8001666:	4811      	ldr	r0, [pc, #68]	@ (80016ac <ui_setup_msg_page+0x2ac>)
 8001668:	f002 fc7a 	bl	8003f60 <ui_framework_addButton>
			"v", // Text
			FONT_SIZE_2X,
			White,
			DarkGrey, 5,
			NULL);
	ui_framework_addButton(&ui, // Inst
 800166c:	2300      	movs	r3, #0
 800166e:	9308      	str	r3, [sp, #32]
 8001670:	2305      	movs	r3, #5
 8001672:	9307      	str	r3, [sp, #28]
 8001674:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8001678:	9306      	str	r3, [sp, #24]
 800167a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800167e:	9305      	str	r3, [sp, #20]
 8001680:	2301      	movs	r3, #1
 8001682:	9304      	str	r3, [sp, #16]
 8001684:	4b14      	ldr	r3, [pc, #80]	@ (80016d8 <ui_setup_msg_page+0x2d8>)
 8001686:	9303      	str	r3, [sp, #12]
 8001688:	2328      	movs	r3, #40	@ 0x28
 800168a:	9302      	str	r3, [sp, #8]
 800168c:	2350      	movs	r3, #80	@ 0x50
 800168e:	9301      	str	r3, [sp, #4]
 8001690:	23c8      	movs	r3, #200	@ 0xc8
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	23be      	movs	r3, #190	@ 0xbe
 8001696:	f240 2212 	movw	r2, #530	@ 0x212
 800169a:	2102      	movs	r1, #2
 800169c:	4803      	ldr	r0, [pc, #12]	@ (80016ac <ui_setup_msg_page+0x2ac>)
 800169e:	f002 fc5f 	bl	8003f60 <ui_framework_addButton>
			"Back", // Text
			FONT_SIZE_2X,
			White,
			DarkGrey, 5,
			NULL);
}
 80016a2:	bf00      	nop
 80016a4:	3704      	adds	r7, #4
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd90      	pop	{r4, r7, pc}
 80016aa:	bf00      	nop
 80016ac:	2000048c 	.word	0x2000048c
 80016b0:	0801e780 	.word	0x0801e780
 80016b4:	0801e79c 	.word	0x0801e79c
 80016b8:	0801e7a0 	.word	0x0801e7a0
 80016bc:	0801e7a4 	.word	0x0801e7a4
 80016c0:	0801e7a8 	.word	0x0801e7a8
 80016c4:	0801e7ac 	.word	0x0801e7ac
 80016c8:	0801e7b0 	.word	0x0801e7b0
 80016cc:	0801e7b4 	.word	0x0801e7b4
 80016d0:	0801e7b8 	.word	0x0801e7b8
 80016d4:	0801e7c0 	.word	0x0801e7c0
 80016d8:	0801e7c4 	.word	0x0801e7c4

080016dc <ui_setup_gnss_page>:

void ui_setup_gnss_page(void) {
 80016dc:	b590      	push	{r4, r7, lr}
 80016de:	b08b      	sub	sp, #44	@ 0x2c
 80016e0:	af0a      	add	r7, sp, #40	@ 0x28
	ui_framework_newPage(&ui, GNSS_PAGE_ID, Black);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2103      	movs	r1, #3
 80016e6:	48c0      	ldr	r0, [pc, #768]	@ (80019e8 <ui_setup_gnss_page+0x30c>)
 80016e8:	f002 fb4e 	bl	8003d88 <ui_framework_newPage>
			GNSS_PAGE_ID, // Page ID
			LATITUDE_LABEL_ID, // Widget ID
			10, // X
			STATUS_BAR_HEIGHT_PX + 10, // Y
			140, // W
			ui_framework_getFontPixelSize(FONT_SIZE_2X), // H
 80016ec:	2001      	movs	r0, #1
 80016ee:	f002 fd70 	bl	80041d2 <ui_framework_getFontPixelSize>
 80016f2:	4603      	mov	r3, r0
	ui_framework_addTextBox(&ui, // Instance
 80016f4:	461a      	mov	r2, r3
 80016f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016fa:	9305      	str	r3, [sp, #20]
 80016fc:	2301      	movs	r3, #1
 80016fe:	9304      	str	r3, [sp, #16]
 8001700:	4bba      	ldr	r3, [pc, #744]	@ (80019ec <ui_setup_gnss_page+0x310>)
 8001702:	9303      	str	r3, [sp, #12]
 8001704:	9202      	str	r2, [sp, #8]
 8001706:	238c      	movs	r3, #140	@ 0x8c
 8001708:	9301      	str	r3, [sp, #4]
 800170a:	232a      	movs	r3, #42	@ 0x2a
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	230a      	movs	r3, #10
 8001710:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001714:	2103      	movs	r1, #3
 8001716:	48b4      	ldr	r0, [pc, #720]	@ (80019e8 <ui_setup_gnss_page+0x30c>)
 8001718:	f002 fb7e 	bl	8003e18 <ui_framework_addTextBox>
			GNSS_PAGE_ID, // Page ID
			LATITUDE_TEXTBOX_ID, // Widget ID
			10 + 140, // X
			STATUS_BAR_HEIGHT_PX + 10, // Y
			140, // W
			ui_framework_getFontPixelSize(FONT_SIZE_2X), // H
 800171c:	2001      	movs	r0, #1
 800171e:	f002 fd58 	bl	80041d2 <ui_framework_getFontPixelSize>
 8001722:	4603      	mov	r3, r0
	ui_framework_addTextBox(&ui, // Instance
 8001724:	461a      	mov	r2, r3
 8001726:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800172a:	9305      	str	r3, [sp, #20]
 800172c:	2301      	movs	r3, #1
 800172e:	9304      	str	r3, [sp, #16]
 8001730:	4baf      	ldr	r3, [pc, #700]	@ (80019f0 <ui_setup_gnss_page+0x314>)
 8001732:	9303      	str	r3, [sp, #12]
 8001734:	9202      	str	r2, [sp, #8]
 8001736:	238c      	movs	r3, #140	@ 0x8c
 8001738:	9301      	str	r3, [sp, #4]
 800173a:	232a      	movs	r3, #42	@ 0x2a
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	2396      	movs	r3, #150	@ 0x96
 8001740:	f240 3201 	movw	r2, #769	@ 0x301
 8001744:	2103      	movs	r1, #3
 8001746:	48a8      	ldr	r0, [pc, #672]	@ (80019e8 <ui_setup_gnss_page+0x30c>)
 8001748:	f002 fb66 	bl	8003e18 <ui_framework_addTextBox>
			&ui, // Inst
			GNSS_PAGE_ID, // Page ID
			LONGITUDE_LABEL_ID, // Widget ID
			10, // X
			STATUS_BAR_HEIGHT_PX + 10
					+ ui_framework_getFontPixelSize(FONT_SIZE_2X) + 5, // Y
 800174c:	2001      	movs	r0, #1
 800174e:	f002 fd40 	bl	80041d2 <ui_framework_getFontPixelSize>
 8001752:	4603      	mov	r3, r0
	ui_framework_addTextBox(
 8001754:	332f      	adds	r3, #47	@ 0x2f
 8001756:	b29c      	uxth	r4, r3
			140, // W
			ui_framework_getFontPixelSize(FONT_SIZE_2X), // H
 8001758:	2001      	movs	r0, #1
 800175a:	f002 fd3a 	bl	80041d2 <ui_framework_getFontPixelSize>
 800175e:	4603      	mov	r3, r0
	ui_framework_addTextBox(
 8001760:	461a      	mov	r2, r3
 8001762:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001766:	9305      	str	r3, [sp, #20]
 8001768:	2301      	movs	r3, #1
 800176a:	9304      	str	r3, [sp, #16]
 800176c:	4ba1      	ldr	r3, [pc, #644]	@ (80019f4 <ui_setup_gnss_page+0x318>)
 800176e:	9303      	str	r3, [sp, #12]
 8001770:	9202      	str	r2, [sp, #8]
 8001772:	238c      	movs	r3, #140	@ 0x8c
 8001774:	9301      	str	r3, [sp, #4]
 8001776:	9400      	str	r4, [sp, #0]
 8001778:	230a      	movs	r3, #10
 800177a:	f240 3202 	movw	r2, #770	@ 0x302
 800177e:	2103      	movs	r1, #3
 8001780:	4899      	ldr	r0, [pc, #612]	@ (80019e8 <ui_setup_gnss_page+0x30c>)
 8001782:	f002 fb49 	bl	8003e18 <ui_framework_addTextBox>
			&ui, // Inst
			GNSS_PAGE_ID, // Page ID
			LONGITUDE_TEXTBOX_ID, // Widget ID
			10 + 140, // X
			STATUS_BAR_HEIGHT_PX + 10
					+ ui_framework_getFontPixelSize(FONT_SIZE_2X) + 5, // Y
 8001786:	2001      	movs	r0, #1
 8001788:	f002 fd23 	bl	80041d2 <ui_framework_getFontPixelSize>
 800178c:	4603      	mov	r3, r0
	ui_framework_addTextBox(
 800178e:	332f      	adds	r3, #47	@ 0x2f
 8001790:	b29c      	uxth	r4, r3
			140, // W
			ui_framework_getFontPixelSize(FONT_SIZE_2X), // H
 8001792:	2001      	movs	r0, #1
 8001794:	f002 fd1d 	bl	80041d2 <ui_framework_getFontPixelSize>
 8001798:	4603      	mov	r3, r0
	ui_framework_addTextBox(
 800179a:	461a      	mov	r2, r3
 800179c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017a0:	9305      	str	r3, [sp, #20]
 80017a2:	2301      	movs	r3, #1
 80017a4:	9304      	str	r3, [sp, #16]
 80017a6:	4b92      	ldr	r3, [pc, #584]	@ (80019f0 <ui_setup_gnss_page+0x314>)
 80017a8:	9303      	str	r3, [sp, #12]
 80017aa:	9202      	str	r2, [sp, #8]
 80017ac:	238c      	movs	r3, #140	@ 0x8c
 80017ae:	9301      	str	r3, [sp, #4]
 80017b0:	9400      	str	r4, [sp, #0]
 80017b2:	2396      	movs	r3, #150	@ 0x96
 80017b4:	f240 3203 	movw	r2, #771	@ 0x303
 80017b8:	2103      	movs	r1, #3
 80017ba:	488b      	ldr	r0, [pc, #556]	@ (80019e8 <ui_setup_gnss_page+0x30c>)
 80017bc:	f002 fb2c 	bl	8003e18 <ui_framework_addTextBox>
			&ui, // Inst
			GNSS_PAGE_ID, // Page ID
			ALTITUDE_LABEL_ID, // Widget ID
			10, // X
			STATUS_BAR_HEIGHT_PX + 10
					+ (2 * (ui_framework_getFontPixelSize(FONT_SIZE_2X) + 5)), // Y
 80017c0:	2001      	movs	r0, #1
 80017c2:	f002 fd06 	bl	80041d2 <ui_framework_getFontPixelSize>
 80017c6:	4603      	mov	r3, r0
 80017c8:	331a      	adds	r3, #26
	ui_framework_addTextBox(
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	b29c      	uxth	r4, r3
			140, // W
			ui_framework_getFontPixelSize(FONT_SIZE_2X), // H
 80017d0:	2001      	movs	r0, #1
 80017d2:	f002 fcfe 	bl	80041d2 <ui_framework_getFontPixelSize>
 80017d6:	4603      	mov	r3, r0
	ui_framework_addTextBox(
 80017d8:	461a      	mov	r2, r3
 80017da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017de:	9305      	str	r3, [sp, #20]
 80017e0:	2301      	movs	r3, #1
 80017e2:	9304      	str	r3, [sp, #16]
 80017e4:	4b84      	ldr	r3, [pc, #528]	@ (80019f8 <ui_setup_gnss_page+0x31c>)
 80017e6:	9303      	str	r3, [sp, #12]
 80017e8:	9202      	str	r2, [sp, #8]
 80017ea:	238c      	movs	r3, #140	@ 0x8c
 80017ec:	9301      	str	r3, [sp, #4]
 80017ee:	9400      	str	r4, [sp, #0]
 80017f0:	230a      	movs	r3, #10
 80017f2:	f44f 7241 	mov.w	r2, #772	@ 0x304
 80017f6:	2103      	movs	r1, #3
 80017f8:	487b      	ldr	r0, [pc, #492]	@ (80019e8 <ui_setup_gnss_page+0x30c>)
 80017fa:	f002 fb0d 	bl	8003e18 <ui_framework_addTextBox>
			&ui, // Inst
			GNSS_PAGE_ID, // Page ID
			ALTITUDE_TEXTBOX_ID, // Widget ID
			10 + 140, // X
			STATUS_BAR_HEIGHT_PX + 10
					+ (2 * (ui_framework_getFontPixelSize(FONT_SIZE_2X) + 5)), // Y
 80017fe:	2001      	movs	r0, #1
 8001800:	f002 fce7 	bl	80041d2 <ui_framework_getFontPixelSize>
 8001804:	4603      	mov	r3, r0
 8001806:	331a      	adds	r3, #26
	ui_framework_addTextBox(
 8001808:	b29b      	uxth	r3, r3
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	b29c      	uxth	r4, r3
			140, // W
			ui_framework_getFontPixelSize(FONT_SIZE_2X), // H
 800180e:	2001      	movs	r0, #1
 8001810:	f002 fcdf 	bl	80041d2 <ui_framework_getFontPixelSize>
 8001814:	4603      	mov	r3, r0
	ui_framework_addTextBox(
 8001816:	461a      	mov	r2, r3
 8001818:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800181c:	9305      	str	r3, [sp, #20]
 800181e:	2301      	movs	r3, #1
 8001820:	9304      	str	r3, [sp, #16]
 8001822:	4b76      	ldr	r3, [pc, #472]	@ (80019fc <ui_setup_gnss_page+0x320>)
 8001824:	9303      	str	r3, [sp, #12]
 8001826:	9202      	str	r2, [sp, #8]
 8001828:	238c      	movs	r3, #140	@ 0x8c
 800182a:	9301      	str	r3, [sp, #4]
 800182c:	9400      	str	r4, [sp, #0]
 800182e:	2396      	movs	r3, #150	@ 0x96
 8001830:	f240 3205 	movw	r2, #773	@ 0x305
 8001834:	2103      	movs	r1, #3
 8001836:	486c      	ldr	r0, [pc, #432]	@ (80019e8 <ui_setup_gnss_page+0x30c>)
 8001838:	f002 faee 	bl	8003e18 <ui_framework_addTextBox>
			&ui, // Inst
			GNSS_PAGE_ID, // Page ID
			SVS_LABEL_ID, // Widget ID
			10, // X
			STATUS_BAR_HEIGHT_PX + 10
					+ (3 * (ui_framework_getFontPixelSize(FONT_SIZE_2X) + 5)), // Y
 800183c:	2001      	movs	r0, #1
 800183e:	f002 fcc8 	bl	80041d2 <ui_framework_getFontPixelSize>
 8001842:	4603      	mov	r3, r0
 8001844:	3305      	adds	r3, #5
	ui_framework_addTextBox(
 8001846:	b29b      	uxth	r3, r3
 8001848:	461a      	mov	r2, r3
 800184a:	0052      	lsls	r2, r2, #1
 800184c:	4413      	add	r3, r2
 800184e:	b29b      	uxth	r3, r3
 8001850:	332a      	adds	r3, #42	@ 0x2a
 8001852:	b29b      	uxth	r3, r3
 8001854:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001858:	9205      	str	r2, [sp, #20]
 800185a:	2201      	movs	r2, #1
 800185c:	9204      	str	r2, [sp, #16]
 800185e:	4a68      	ldr	r2, [pc, #416]	@ (8001a00 <ui_setup_gnss_page+0x324>)
 8001860:	9203      	str	r2, [sp, #12]
 8001862:	220a      	movs	r2, #10
 8001864:	9202      	str	r2, [sp, #8]
 8001866:	228c      	movs	r2, #140	@ 0x8c
 8001868:	9201      	str	r2, [sp, #4]
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	230a      	movs	r3, #10
 800186e:	f240 3206 	movw	r2, #774	@ 0x306
 8001872:	2103      	movs	r1, #3
 8001874:	485c      	ldr	r0, [pc, #368]	@ (80019e8 <ui_setup_gnss_page+0x30c>)
 8001876:	f002 facf 	bl	8003e18 <ui_framework_addTextBox>
			&ui, // Inst
			GNSS_PAGE_ID, // Page ID
			SVS_TEXTBOX_ID, // Widget ID
			10 + 140, // X
			STATUS_BAR_HEIGHT_PX + 10
					+ (3 * (ui_framework_getFontPixelSize(FONT_SIZE_2X) + 5)), // Y
 800187a:	2001      	movs	r0, #1
 800187c:	f002 fca9 	bl	80041d2 <ui_framework_getFontPixelSize>
 8001880:	4603      	mov	r3, r0
 8001882:	3305      	adds	r3, #5
	ui_framework_addTextBox(
 8001884:	b29b      	uxth	r3, r3
 8001886:	461a      	mov	r2, r3
 8001888:	0052      	lsls	r2, r2, #1
 800188a:	4413      	add	r3, r2
 800188c:	b29b      	uxth	r3, r3
 800188e:	332a      	adds	r3, #42	@ 0x2a
 8001890:	b29c      	uxth	r4, r3
			140, // W
			ui_framework_getFontPixelSize(FONT_SIZE_2X), // H
 8001892:	2001      	movs	r0, #1
 8001894:	f002 fc9d 	bl	80041d2 <ui_framework_getFontPixelSize>
 8001898:	4603      	mov	r3, r0
	ui_framework_addTextBox(
 800189a:	461a      	mov	r2, r3
 800189c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018a0:	9305      	str	r3, [sp, #20]
 80018a2:	2301      	movs	r3, #1
 80018a4:	9304      	str	r3, [sp, #16]
 80018a6:	4b57      	ldr	r3, [pc, #348]	@ (8001a04 <ui_setup_gnss_page+0x328>)
 80018a8:	9303      	str	r3, [sp, #12]
 80018aa:	9202      	str	r2, [sp, #8]
 80018ac:	238c      	movs	r3, #140	@ 0x8c
 80018ae:	9301      	str	r3, [sp, #4]
 80018b0:	9400      	str	r4, [sp, #0]
 80018b2:	2396      	movs	r3, #150	@ 0x96
 80018b4:	f240 3207 	movw	r2, #775	@ 0x307
 80018b8:	2103      	movs	r1, #3
 80018ba:	484b      	ldr	r0, [pc, #300]	@ (80019e8 <ui_setup_gnss_page+0x30c>)
 80018bc:	f002 faac 	bl	8003e18 <ui_framework_addTextBox>
			&ui, // Inst
			GNSS_PAGE_ID, // Page ID
			HDOP_LABEL_ID, // Widget ID
			10, // X
			STATUS_BAR_HEIGHT_PX + 10
					+ (4 * (ui_framework_getFontPixelSize(FONT_SIZE_2X) + 5)), // Y
 80018c0:	2001      	movs	r0, #1
 80018c2:	f002 fc86 	bl	80041d2 <ui_framework_getFontPixelSize>
 80018c6:	4603      	mov	r3, r0
 80018c8:	3305      	adds	r3, #5
	ui_framework_addTextBox(
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	332a      	adds	r3, #42	@ 0x2a
 80018d2:	b29c      	uxth	r4, r3
			140, // W
			ui_framework_getFontPixelSize(FONT_SIZE_2X), // H
 80018d4:	2001      	movs	r0, #1
 80018d6:	f002 fc7c 	bl	80041d2 <ui_framework_getFontPixelSize>
 80018da:	4603      	mov	r3, r0
	ui_framework_addTextBox(
 80018dc:	461a      	mov	r2, r3
 80018de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018e2:	9305      	str	r3, [sp, #20]
 80018e4:	2301      	movs	r3, #1
 80018e6:	9304      	str	r3, [sp, #16]
 80018e8:	4b47      	ldr	r3, [pc, #284]	@ (8001a08 <ui_setup_gnss_page+0x32c>)
 80018ea:	9303      	str	r3, [sp, #12]
 80018ec:	9202      	str	r2, [sp, #8]
 80018ee:	238c      	movs	r3, #140	@ 0x8c
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	9400      	str	r4, [sp, #0]
 80018f4:	230a      	movs	r3, #10
 80018f6:	f44f 7242 	mov.w	r2, #776	@ 0x308
 80018fa:	2103      	movs	r1, #3
 80018fc:	483a      	ldr	r0, [pc, #232]	@ (80019e8 <ui_setup_gnss_page+0x30c>)
 80018fe:	f002 fa8b 	bl	8003e18 <ui_framework_addTextBox>
			&ui, // Inst
			GNSS_PAGE_ID, // Page ID
			HDOP_TEXTBOX_ID, // Widget ID
			10 + 140, // X
			STATUS_BAR_HEIGHT_PX + 10
					+ (4 * (ui_framework_getFontPixelSize(FONT_SIZE_2X) + 5)), // Y
 8001902:	2001      	movs	r0, #1
 8001904:	f002 fc65 	bl	80041d2 <ui_framework_getFontPixelSize>
 8001908:	4603      	mov	r3, r0
 800190a:	3305      	adds	r3, #5
	ui_framework_addTextBox(
 800190c:	b29b      	uxth	r3, r3
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	b29b      	uxth	r3, r3
 8001912:	332a      	adds	r3, #42	@ 0x2a
 8001914:	b29c      	uxth	r4, r3
			140, // W
			ui_framework_getFontPixelSize(FONT_SIZE_2X), // H
 8001916:	2001      	movs	r0, #1
 8001918:	f002 fc5b 	bl	80041d2 <ui_framework_getFontPixelSize>
 800191c:	4603      	mov	r3, r0
	ui_framework_addTextBox(
 800191e:	461a      	mov	r2, r3
 8001920:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001924:	9305      	str	r3, [sp, #20]
 8001926:	2301      	movs	r3, #1
 8001928:	9304      	str	r3, [sp, #16]
 800192a:	4b34      	ldr	r3, [pc, #208]	@ (80019fc <ui_setup_gnss_page+0x320>)
 800192c:	9303      	str	r3, [sp, #12]
 800192e:	9202      	str	r2, [sp, #8]
 8001930:	238c      	movs	r3, #140	@ 0x8c
 8001932:	9301      	str	r3, [sp, #4]
 8001934:	9400      	str	r4, [sp, #0]
 8001936:	2396      	movs	r3, #150	@ 0x96
 8001938:	f240 3209 	movw	r2, #777	@ 0x309
 800193c:	2103      	movs	r1, #3
 800193e:	482a      	ldr	r0, [pc, #168]	@ (80019e8 <ui_setup_gnss_page+0x30c>)
 8001940:	f002 fa6a 	bl	8003e18 <ui_framework_addTextBox>
			&ui, // Inst
			GNSS_PAGE_ID, // Page ID
			FIX_STATUS_LABEL_ID, // Widget ID
			10, // X
			STATUS_BAR_HEIGHT_PX + 10
					+ (5 * (ui_framework_getFontPixelSize(FONT_SIZE_2X) + 5)), // Y
 8001944:	2001      	movs	r0, #1
 8001946:	f002 fc44 	bl	80041d2 <ui_framework_getFontPixelSize>
 800194a:	4603      	mov	r3, r0
 800194c:	3305      	adds	r3, #5
	ui_framework_addTextBox(
 800194e:	b29b      	uxth	r3, r3
 8001950:	461a      	mov	r2, r3
 8001952:	0092      	lsls	r2, r2, #2
 8001954:	4413      	add	r3, r2
 8001956:	b29b      	uxth	r3, r3
 8001958:	332a      	adds	r3, #42	@ 0x2a
 800195a:	b29c      	uxth	r4, r3
			140, // W
			ui_framework_getFontPixelSize(FONT_SIZE_2X), // H
 800195c:	2001      	movs	r0, #1
 800195e:	f002 fc38 	bl	80041d2 <ui_framework_getFontPixelSize>
 8001962:	4603      	mov	r3, r0
	ui_framework_addTextBox(
 8001964:	461a      	mov	r2, r3
 8001966:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800196a:	9305      	str	r3, [sp, #20]
 800196c:	2301      	movs	r3, #1
 800196e:	9304      	str	r3, [sp, #16]
 8001970:	4b26      	ldr	r3, [pc, #152]	@ (8001a0c <ui_setup_gnss_page+0x330>)
 8001972:	9303      	str	r3, [sp, #12]
 8001974:	9202      	str	r2, [sp, #8]
 8001976:	238c      	movs	r3, #140	@ 0x8c
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	9400      	str	r4, [sp, #0]
 800197c:	230a      	movs	r3, #10
 800197e:	f44f 7244 	mov.w	r2, #784	@ 0x310
 8001982:	2103      	movs	r1, #3
 8001984:	4818      	ldr	r0, [pc, #96]	@ (80019e8 <ui_setup_gnss_page+0x30c>)
 8001986:	f002 fa47 	bl	8003e18 <ui_framework_addTextBox>
			&ui, // Inst
			GNSS_PAGE_ID, // Page ID
			FIX_STATUS_TEXTBOX_ID, // Widget ID
			10 + 140, // X
			STATUS_BAR_HEIGHT_PX + 10
					+ (5 * (ui_framework_getFontPixelSize(FONT_SIZE_2X) + 5)), // Y
 800198a:	2001      	movs	r0, #1
 800198c:	f002 fc21 	bl	80041d2 <ui_framework_getFontPixelSize>
 8001990:	4603      	mov	r3, r0
 8001992:	3305      	adds	r3, #5
	ui_framework_addTextBox(
 8001994:	b29b      	uxth	r3, r3
 8001996:	461a      	mov	r2, r3
 8001998:	0092      	lsls	r2, r2, #2
 800199a:	4413      	add	r3, r2
 800199c:	b29b      	uxth	r3, r3
 800199e:	332a      	adds	r3, #42	@ 0x2a
 80019a0:	b29c      	uxth	r4, r3
			140, // W
			ui_framework_getFontPixelSize(FONT_SIZE_2X), // H
 80019a2:	2001      	movs	r0, #1
 80019a4:	f002 fc15 	bl	80041d2 <ui_framework_getFontPixelSize>
 80019a8:	4603      	mov	r3, r0
	ui_framework_addTextBox(
 80019aa:	461a      	mov	r2, r3
 80019ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019b0:	9305      	str	r3, [sp, #20]
 80019b2:	2301      	movs	r3, #1
 80019b4:	9304      	str	r3, [sp, #16]
 80019b6:	4b16      	ldr	r3, [pc, #88]	@ (8001a10 <ui_setup_gnss_page+0x334>)
 80019b8:	9303      	str	r3, [sp, #12]
 80019ba:	9202      	str	r2, [sp, #8]
 80019bc:	238c      	movs	r3, #140	@ 0x8c
 80019be:	9301      	str	r3, [sp, #4]
 80019c0:	9400      	str	r4, [sp, #0]
 80019c2:	2396      	movs	r3, #150	@ 0x96
 80019c4:	f240 3211 	movw	r2, #785	@ 0x311
 80019c8:	2103      	movs	r1, #3
 80019ca:	4807      	ldr	r0, [pc, #28]	@ (80019e8 <ui_setup_gnss_page+0x30c>)
 80019cc:	f002 fa24 	bl	8003e18 <ui_framework_addTextBox>
			"false", // Text
			FONT_SIZE_2X,
			White);

	// Bottom row buttons
	ui_framework_addButton(&ui, // Inst
 80019d0:	2300      	movs	r3, #0
 80019d2:	9308      	str	r3, [sp, #32]
 80019d4:	2305      	movs	r3, #5
 80019d6:	9307      	str	r3, [sp, #28]
 80019d8:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80019dc:	9306      	str	r3, [sp, #24]
 80019de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019e2:	9305      	str	r3, [sp, #20]
 80019e4:	e016      	b.n	8001a14 <ui_setup_gnss_page+0x338>
 80019e6:	bf00      	nop
 80019e8:	2000048c 	.word	0x2000048c
 80019ec:	0801e7cc 	.word	0x0801e7cc
 80019f0:	0801e7d8 	.word	0x0801e7d8
 80019f4:	0801e7e0 	.word	0x0801e7e0
 80019f8:	0801e7ec 	.word	0x0801e7ec
 80019fc:	0801e7f8 	.word	0x0801e7f8
 8001a00:	0801e800 	.word	0x0801e800
 8001a04:	0801e810 	.word	0x0801e810
 8001a08:	0801e814 	.word	0x0801e814
 8001a0c:	0801e81c 	.word	0x0801e81c
 8001a10:	0801e82c 	.word	0x0801e82c
 8001a14:	2301      	movs	r3, #1
 8001a16:	9304      	str	r3, [sp, #16]
 8001a18:	4b09      	ldr	r3, [pc, #36]	@ (8001a40 <ui_setup_gnss_page+0x364>)
 8001a1a:	9303      	str	r3, [sp, #12]
 8001a1c:	2328      	movs	r3, #40	@ 0x28
 8001a1e:	9302      	str	r3, [sp, #8]
 8001a20:	2350      	movs	r3, #80	@ 0x50
 8001a22:	9301      	str	r3, [sp, #4]
 8001a24:	23c8      	movs	r3, #200	@ 0xc8
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	23b4      	movs	r3, #180	@ 0xb4
 8001a2a:	f240 3215 	movw	r2, #789	@ 0x315
 8001a2e:	2103      	movs	r1, #3
 8001a30:	4804      	ldr	r0, [pc, #16]	@ (8001a44 <ui_setup_gnss_page+0x368>)
 8001a32:	f002 fa95 	bl	8003f60 <ui_framework_addButton>
			"Back", // Text
			FONT_SIZE_2X,
			White,
			DarkGrey, 5,
			NULL);
}
 8001a36:	bf00      	nop
 8001a38:	3704      	adds	r7, #4
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd90      	pop	{r4, r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	0801e7c4 	.word	0x0801e7c4
 8001a44:	2000048c 	.word	0x2000048c

08001a48 <ui_setup_folder_page>:

void ui_setup_folder_page(void) {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
	ui_framework_newPage(&ui, FOLDER_PAGE_ID, Black);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2104      	movs	r1, #4
 8001a50:	4802      	ldr	r0, [pc, #8]	@ (8001a5c <ui_setup_folder_page+0x14>)
 8001a52:	f002 f999 	bl	8003d88 <ui_framework_newPage>

	// Create file tree like this
	// https://github.com/cbm80amiga/ST7735_SDMediaPlayer/blob/master/ST7735_SDMediaPlayer.ino#L334
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	2000048c 	.word	0x2000048c

08001a60 <ui_handle_event>:

void ui_handle_event(void) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
	if (uiEvent != NO_INPUT) {
 8001a64:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa0 <ui_handle_event+0x40>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d017      	beq.n	8001a9c <ui_handle_event+0x3c>
		switch (uiEvent) {
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa0 <ui_handle_event+0x40>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b03      	cmp	r3, #3
 8001a72:	d00c      	beq.n	8001a8e <ui_handle_event+0x2e>
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	dc0d      	bgt.n	8001a94 <ui_handle_event+0x34>
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d002      	beq.n	8001a82 <ui_handle_event+0x22>
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d003      	beq.n	8001a88 <ui_handle_event+0x28>
			break;
		case USER_BUTTON3:
			ui_handle_button3_press();
			break;
		default:
			break;
 8001a80:	e008      	b.n	8001a94 <ui_handle_event+0x34>
			ui_handle_button1_press();
 8001a82:	f000 f80f 	bl	8001aa4 <ui_handle_button1_press>
			break;
 8001a86:	e006      	b.n	8001a96 <ui_handle_event+0x36>
			ui_handle_button2_press();
 8001a88:	f000 f87e 	bl	8001b88 <ui_handle_button2_press>
			break;
 8001a8c:	e003      	b.n	8001a96 <ui_handle_event+0x36>
			ui_handle_button3_press();
 8001a8e:	f000 f8d3 	bl	8001c38 <ui_handle_button3_press>
			break;
 8001a92:	e000      	b.n	8001a96 <ui_handle_event+0x36>
			break;
 8001a94:	bf00      	nop
		}

		// Clear UI event
		uiEvent = NO_INPUT;
 8001a96:	4b02      	ldr	r3, [pc, #8]	@ (8001aa0 <ui_handle_event+0x40>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]
	}
}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20002c04 	.word	0x20002c04

08001aa4 <ui_handle_button1_press>:

void ui_handle_button1_press(void) {
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
	// If on main page, cycle through icons
	if (ui.activePageId == MAIN_PAGE_ID) {
 8001aa8:	4b36      	ldr	r3, [pc, #216]	@ (8001b84 <ui_handle_button1_press+0xe0>)
 8001aaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001aae:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	@ 0x530
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d151      	bne.n	8001b5a <ui_handle_button1_press+0xb6>
		switch (ui.selectedWidgetId) {
 8001ab6:	4b33      	ldr	r3, [pc, #204]	@ (8001b84 <ui_handle_button1_press+0xe0>)
 8001ab8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001abc:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	@ 0x532
 8001ac0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001ac4:	2b10      	cmp	r3, #16
 8001ac6:	d856      	bhi.n	8001b76 <ui_handle_button1_press+0xd2>
 8001ac8:	a201      	add	r2, pc, #4	@ (adr r2, 8001ad0 <ui_handle_button1_press+0x2c>)
 8001aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ace:	bf00      	nop
 8001ad0:	08001b15 	.word	0x08001b15
 8001ad4:	08001b23 	.word	0x08001b23
 8001ad8:	08001b31 	.word	0x08001b31
 8001adc:	08001b31 	.word	0x08001b31
 8001ae0:	08001b31 	.word	0x08001b31
 8001ae4:	08001b77 	.word	0x08001b77
 8001ae8:	08001b77 	.word	0x08001b77
 8001aec:	08001b77 	.word	0x08001b77
 8001af0:	08001b77 	.word	0x08001b77
 8001af4:	08001b77 	.word	0x08001b77
 8001af8:	08001b77 	.word	0x08001b77
 8001afc:	08001b77 	.word	0x08001b77
 8001b00:	08001b77 	.word	0x08001b77
 8001b04:	08001b77 	.word	0x08001b77
 8001b08:	08001b77 	.word	0x08001b77
 8001b0c:	08001b77 	.word	0x08001b77
 8001b10:	08001b4b 	.word	0x08001b4b
		case MESSAGE_BUTTON_WIDGET_ID:
			// TEMPORARY testing
			ui.newPageId = MESSAGE_PAGE_ID;
 8001b14:	4b1b      	ldr	r3, [pc, #108]	@ (8001b84 <ui_handle_button1_press+0xe0>)
 8001b16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	f8a3 2534 	strh.w	r2, [r3, #1332]	@ 0x534
			//ui.newSelectedWidgetId = ui.selectedWidgetId + 1;
			break;
 8001b20:	e02a      	b.n	8001b78 <ui_handle_button1_press+0xd4>
		case SATS_BUTTON_WIDGET_ID:
			// TEMPORARY testing
			ui.newPageId = GNSS_PAGE_ID;
 8001b22:	4b18      	ldr	r3, [pc, #96]	@ (8001b84 <ui_handle_button1_press+0xe0>)
 8001b24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b28:	2203      	movs	r2, #3
 8001b2a:	f8a3 2534 	strh.w	r2, [r3, #1332]	@ 0x534
			break;
 8001b2e:	e023      	b.n	8001b78 <ui_handle_button1_press+0xd4>
		case FOLDER_BUTTON_WIDGET_ID:
		case BUTTON5_WIDGET_ID:
		case BUTTON6_WIDGET_ID: {
			ui.newSelectedWidgetId = ui.selectedWidgetId + 1;
 8001b30:	4b14      	ldr	r3, [pc, #80]	@ (8001b84 <ui_handle_button1_press+0xe0>)
 8001b32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b36:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	@ 0x532
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	4b11      	ldr	r3, [pc, #68]	@ (8001b84 <ui_handle_button1_press+0xe0>)
 8001b40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b44:	f8a3 2536 	strh.w	r2, [r3, #1334]	@ 0x536
			break;
 8001b48:	e016      	b.n	8001b78 <ui_handle_button1_press+0xd4>
		}
		case CONFIG_BUTTON_WIDGET_ID: {
			ui.newSelectedWidgetId = MESSAGE_BUTTON_WIDGET_ID;
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b84 <ui_handle_button1_press+0xe0>)
 8001b4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b54:	f8a3 2536 	strh.w	r2, [r3, #1334]	@ 0x536
			break;
 8001b58:	e00e      	b.n	8001b78 <ui_handle_button1_press+0xd4>
		}
		default: {
			break;
		}
		}
	} else if (ui.activePageId == GNSS_PAGE_ID) {
 8001b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b84 <ui_handle_button1_press+0xe0>)
 8001b5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b60:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	@ 0x530
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d107      	bne.n	8001b78 <ui_handle_button1_press+0xd4>
		ui.newPageId = MAIN_PAGE_ID;
 8001b68:	4b06      	ldr	r3, [pc, #24]	@ (8001b84 <ui_handle_button1_press+0xe0>)
 8001b6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f8a3 2534 	strh.w	r2, [r3, #1332]	@ 0x534
	}
}
 8001b74:	e000      	b.n	8001b78 <ui_handle_button1_press+0xd4>
			break;
 8001b76:	bf00      	nop
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	2000048c 	.word	0x2000048c

08001b88 <ui_handle_button2_press>:

void ui_handle_button2_press(void) {
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
	// If on main page, cycle through icons
	if (ui.activePageId == MAIN_PAGE_ID) {
 8001b8c:	4b29      	ldr	r3, [pc, #164]	@ (8001c34 <ui_handle_button2_press+0xac>)
 8001b8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b92:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	@ 0x530
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d12a      	bne.n	8001bf0 <ui_handle_button2_press+0x68>
		switch (ui.selectedWidgetId) {
 8001b9a:	4b26      	ldr	r3, [pc, #152]	@ (8001c34 <ui_handle_button2_press+0xac>)
 8001b9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ba0:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	@ 0x532
 8001ba4:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8001ba8:	d015      	beq.n	8001bd6 <ui_handle_button2_press+0x4e>
 8001baa:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8001bae:	dc3b      	bgt.n	8001c28 <ui_handle_button2_press+0xa0>
 8001bb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001bb4:	d007      	beq.n	8001bc6 <ui_handle_button2_press+0x3e>
 8001bb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001bba:	db35      	blt.n	8001c28 <ui_handle_button2_press+0xa0>
 8001bbc:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8001bc0:	2b03      	cmp	r3, #3
 8001bc2:	d831      	bhi.n	8001c28 <ui_handle_button2_press+0xa0>
 8001bc4:	e007      	b.n	8001bd6 <ui_handle_button2_press+0x4e>
		case MESSAGE_BUTTON_WIDGET_ID: {
			ui.newSelectedWidgetId = CONFIG_BUTTON_WIDGET_ID;
 8001bc6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c34 <ui_handle_button2_press+0xac>)
 8001bc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bcc:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8001bd0:	f8a3 2536 	strh.w	r2, [r3, #1334]	@ 0x536
			break;
 8001bd4:	e029      	b.n	8001c2a <ui_handle_button2_press+0xa2>
		case SATS_BUTTON_WIDGET_ID:
		case FOLDER_BUTTON_WIDGET_ID:
		case BUTTON5_WIDGET_ID:
		case BUTTON6_WIDGET_ID:
		case CONFIG_BUTTON_WIDGET_ID: {
			ui.newSelectedWidgetId = ui.selectedWidgetId - 1;
 8001bd6:	4b17      	ldr	r3, [pc, #92]	@ (8001c34 <ui_handle_button2_press+0xac>)
 8001bd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bdc:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	@ 0x532
 8001be0:	3b01      	subs	r3, #1
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	4b13      	ldr	r3, [pc, #76]	@ (8001c34 <ui_handle_button2_press+0xac>)
 8001be6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bea:	f8a3 2536 	strh.w	r2, [r3, #1334]	@ 0x536
			break;
 8001bee:	e01c      	b.n	8001c2a <ui_handle_button2_press+0xa2>
		}
		default: {
			break;
		}
		}
	} else if (ui.activePageId == MESSAGE_PAGE_ID) {
 8001bf0:	4b10      	ldr	r3, [pc, #64]	@ (8001c34 <ui_handle_button2_press+0xac>)
 8001bf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bf6:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	@ 0x530
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d106      	bne.n	8001c0c <ui_handle_button2_press+0x84>
		ui.newPageId = MAIN_PAGE_ID;
 8001bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8001c34 <ui_handle_button2_press+0xac>)
 8001c00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c04:	2201      	movs	r2, #1
 8001c06:	f8a3 2534 	strh.w	r2, [r3, #1332]	@ 0x534
	} else if (ui.activePageId == GNSS_PAGE_ID) {
		ui.newPageId = MAIN_PAGE_ID;
	}
}
 8001c0a:	e00e      	b.n	8001c2a <ui_handle_button2_press+0xa2>
	} else if (ui.activePageId == GNSS_PAGE_ID) {
 8001c0c:	4b09      	ldr	r3, [pc, #36]	@ (8001c34 <ui_handle_button2_press+0xac>)
 8001c0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c12:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	@ 0x530
 8001c16:	2b03      	cmp	r3, #3
 8001c18:	d107      	bne.n	8001c2a <ui_handle_button2_press+0xa2>
		ui.newPageId = MAIN_PAGE_ID;
 8001c1a:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <ui_handle_button2_press+0xac>)
 8001c1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c20:	2201      	movs	r2, #1
 8001c22:	f8a3 2534 	strh.w	r2, [r3, #1332]	@ 0x534
}
 8001c26:	e000      	b.n	8001c2a <ui_handle_button2_press+0xa2>
			break;
 8001c28:	bf00      	nop
}
 8001c2a:	bf00      	nop
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	2000048c 	.word	0x2000048c

08001c38 <ui_handle_button3_press>:

void ui_handle_button3_press(void) {
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0

}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <ui_update_gnssPage>:

void ui_update_gnssPage(float lat, float lon) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c52:	edc7 0a00 	vstr	s1, [r7]
	ui_framework_updateWidgetText(&ui,
 8001c56:	4a08      	ldr	r2, [pc, #32]	@ (8001c78 <ui_update_gnssPage+0x30>)
 8001c58:	f240 3101 	movw	r1, #769	@ 0x301
 8001c5c:	4807      	ldr	r0, [pc, #28]	@ (8001c7c <ui_update_gnssPage+0x34>)
 8001c5e:	f002 fbbd 	bl	80043dc <ui_framework_updateWidgetText>
	LATITUDE_TEXTBOX_ID, "test");

	ui_framework_updateWidgetText(&ui,
 8001c62:	4a07      	ldr	r2, [pc, #28]	@ (8001c80 <ui_update_gnssPage+0x38>)
 8001c64:	f240 3103 	movw	r1, #771	@ 0x303
 8001c68:	4804      	ldr	r0, [pc, #16]	@ (8001c7c <ui_update_gnssPage+0x34>)
 8001c6a:	f002 fbb7 	bl	80043dc <ui_framework_updateWidgetText>
	LONGITUDE_TEXTBOX_ID, "78.000");
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	0801e834 	.word	0x0801e834
 8001c7c:	2000048c 	.word	0x2000048c
 8001c80:	0801e83c 	.word	0x0801e83c

08001c84 <GPS_Initialize>:

//-----------------------------------------------------------
// PUBLIC FUNCTIONS
//-----------------------------------------------------------

GPS_ReturnCode_e GPS_Initialize(GPS_positionData_t *inst) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	inst->comms.gpsComms = false;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
	inst->comms.nmeaPacketCount = 0;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	inst->comms.nmeaPacketCountPrev = 0;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	inst->comms.gpsCommsCntr = 0;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	inst->comms.modulePowered = false;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

#ifdef DEBUG_ENABLED
	DebugLogPrintf(__FUNCTION__, "Complete");
 8001cb4:	4904      	ldr	r1, [pc, #16]	@ (8001cc8 <GPS_Initialize+0x44>)
 8001cb6:	4805      	ldr	r0, [pc, #20]	@ (8001ccc <GPS_Initialize+0x48>)
 8001cb8:	f000 fc84 	bl	80025c4 <DebugLogPrintf>
#endif

	return GPS_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	0801e844 	.word	0x0801e844
 8001ccc:	0801ee18 	.word	0x0801ee18

08001cd0 <GPS_Update>:

GPS_ReturnCode_e GPS_Update(GPS_positionData_t *inst) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af02      	add	r7, sp, #8
 8001cd6:	6078      	str	r0, [r7, #4]
	uint8_t gpsChar;

	while (GPS_HAL_Available()) {
 8001cd8:	e008      	b.n	8001cec <GPS_Update+0x1c>
		gpsChar = GPS_HAL_Read();
 8001cda:	f000 fc63 	bl	80025a4 <GPS_HAL_Read>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	73fb      	strb	r3, [r7, #15]

		GPS_encode(inst, gpsChar);
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f868 	bl	8001dbc <GPS_encode>
	while (GPS_HAL_Available()) {
 8001cec:	f000 fc52 	bl	8002594 <GPS_HAL_Available>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f1      	bne.n	8001cda <GPS_Update+0xa>
	}

	// Checks GPS comms
	if (inst->comms.nmeaPacketCountPrev == inst->comms.nmeaPacketCount) {
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d10f      	bne.n	8001d26 <GPS_Update+0x56>
		if (GPS_HAL_GetMilliseconds() - inst->comms.gpsCommsCntr
 8001d06:	f000 fc55 	bl	80025b4 <GPS_HAL_GetMilliseconds>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d90e      	bls.n	8001d3a <GPS_Update+0x6a>
				> (GPS_COMMS_TIMEOUT_S * 1000)) {
			inst->comms.gpsComms = false;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 8001d24:	e009      	b.n	8001d3a <GPS_Update+0x6a>
		}
	} else {
		// Set comms to good and reset the timer
		inst->comms.gpsComms = true;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
		inst->comms.gpsCommsCntr = GPS_HAL_GetMilliseconds();
 8001d2e:	f000 fc41 	bl	80025b4 <GPS_HAL_GetMilliseconds>
 8001d32:	4602      	mov	r2, r0
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	}
	inst->comms.nmeaPacketCountPrev = inst->comms.nmeaPacketCount;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

#ifdef DEBUG_ENABLED
	if (GPS_HAL_GetMilliseconds() - inst->debugPrintCntr > 5000) {
 8001d46:	f000 fc35 	bl	80025b4 <GPS_HAL_GetMilliseconds>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d91e      	bls.n	8001d9a <GPS_Update+0xca>
		DebugLogPrintf(__FUNCTION__,
				"modulePowered: %d, gpsComms: %d, nmeaPacketCount: %d",
				inst->comms.modulePowered ? "ON" : "OFF",
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
		DebugLogPrintf(__FUNCTION__,
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <GPS_Update+0x9a>
 8001d66:	4a0f      	ldr	r2, [pc, #60]	@ (8001da4 <GPS_Update+0xd4>)
 8001d68:	e000      	b.n	8001d6c <GPS_Update+0x9c>
 8001d6a:	4a0f      	ldr	r2, [pc, #60]	@ (8001da8 <GPS_Update+0xd8>)
				inst->comms.gpsComms ? "GOOD" : "BAD",
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
		DebugLogPrintf(__FUNCTION__,
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <GPS_Update+0xaa>
 8001d76:	490d      	ldr	r1, [pc, #52]	@ (8001dac <GPS_Update+0xdc>)
 8001d78:	e000      	b.n	8001d7c <GPS_Update+0xac>
 8001d7a:	490d      	ldr	r1, [pc, #52]	@ (8001db0 <GPS_Update+0xe0>)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	460b      	mov	r3, r1
 8001d86:	490b      	ldr	r1, [pc, #44]	@ (8001db4 <GPS_Update+0xe4>)
 8001d88:	480b      	ldr	r0, [pc, #44]	@ (8001db8 <GPS_Update+0xe8>)
 8001d8a:	f000 fc1b 	bl	80025c4 <DebugLogPrintf>
				inst->comms.nmeaPacketCount);

		inst->debugPrintCntr = GPS_HAL_GetMilliseconds();
 8001d8e:	f000 fc11 	bl	80025b4 <GPS_HAL_GetMilliseconds>
 8001d92:	4602      	mov	r2, r0
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	}
#endif

	return GPS_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	0801e850 	.word	0x0801e850
 8001da8:	0801e854 	.word	0x0801e854
 8001dac:	0801e858 	.word	0x0801e858
 8001db0:	0801e860 	.word	0x0801e860
 8001db4:	0801e864 	.word	0x0801e864
 8001db8:	0801ee28 	.word	0x0801ee28

08001dbc <GPS_encode>:

//-----------------------------------------------------------
// PRIVATE FUNCTIONS
//-----------------------------------------------------------

void GPS_encode(GPS_positionData_t *inst, char inChar) {
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	70fb      	strb	r3, [r7, #3]
	if (inChar == '$') {
 8001dc8:	78fb      	ldrb	r3, [r7, #3]
 8001dca:	2b24      	cmp	r3, #36	@ 0x24
 8001dcc:	d10a      	bne.n	8001de4 <GPS_encode+0x28>
		inst->comms.nmeaPacketCount++;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001dd4:	1c5a      	adds	r2, r3, #1
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

		// reset buffer
		inst->nmeaCharBufferIndex = 0;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
	}

	if (inChar == '\n') {
 8001de4:	78fb      	ldrb	r3, [r7, #3]
 8001de6:	2b0a      	cmp	r3, #10
 8001de8:	d11f      	bne.n	8001e2a <GPS_encode+0x6e>
		inst->nmeaCharBuffer[inst->nmeaCharBufferIndex] = inChar;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 3194 	ldrb.w	r3, [r3, #404]	@ 0x194
 8001df0:	461a      	mov	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4413      	add	r3, r2
 8001df6:	78fa      	ldrb	r2, [r7, #3]
 8001df8:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94

		parseNmeaMessage(inst, (char*) &inst->nmeaCharBuffer,
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f103 0194 	add.w	r1, r3, #148	@ 0x94
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 3194 	ldrb.w	r3, [r3, #404]	@ 0x194
 8001e08:	461a      	mov	r2, r3
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f822 	bl	8001e54 <parseNmeaMessage>
				inst->nmeaCharBufferIndex);

		// reset buffer
		inst->nmeaCharBufferIndex = 0;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
		memset(&inst->nmeaCharBuffer, 0, sizeof(inst->nmeaCharBuffer));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3394      	adds	r3, #148	@ 0x94
 8001e1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e20:	2100      	movs	r1, #0
 8001e22:	4618      	mov	r0, r3
 8001e24:	f019 fa66 	bl	801b2f4 <memset>
	} else {
		inst->nmeaCharBuffer[inst->nmeaCharBufferIndex] = inChar;
		inst->nmeaCharBufferIndex++;
	}
}
 8001e28:	e010      	b.n	8001e4c <GPS_encode+0x90>
		inst->nmeaCharBuffer[inst->nmeaCharBufferIndex] = inChar;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 3194 	ldrb.w	r3, [r3, #404]	@ 0x194
 8001e30:	461a      	mov	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	78fa      	ldrb	r2, [r7, #3]
 8001e38:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
		inst->nmeaCharBufferIndex++;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3194 	ldrb.w	r3, [r3, #404]	@ 0x194
 8001e42:	3301      	adds	r3, #1
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <parseNmeaMessage>:

void parseNmeaMessage(GPS_positionData_t *inst, char *indata, uint8_t len) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	71fb      	strb	r3, [r7, #7]
	if ((strncmp((char*) indata, "$GPRMC", 6) == 0)
 8001e62:	2206      	movs	r2, #6
 8001e64:	4934      	ldr	r1, [pc, #208]	@ (8001f38 <parseNmeaMessage+0xe4>)
 8001e66:	68b8      	ldr	r0, [r7, #8]
 8001e68:	f019 fa4c 	bl	801b304 <strncmp>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d007      	beq.n	8001e82 <parseNmeaMessage+0x2e>
			|| (strncmp((char*) indata, "$GNRMC", 6) == 0)) {
 8001e72:	2206      	movs	r2, #6
 8001e74:	4931      	ldr	r1, [pc, #196]	@ (8001f3c <parseNmeaMessage+0xe8>)
 8001e76:	68b8      	ldr	r0, [r7, #8]
 8001e78:	f019 fa44 	bl	801b304 <strncmp>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10d      	bne.n	8001e9e <parseNmeaMessage+0x4a>
		if (parse_NMEA_RMC(indata, &inst->rmc_data)) {
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	3334      	adds	r3, #52	@ 0x34
 8001e86:	4619      	mov	r1, r3
 8001e88:	68b8      	ldr	r0, [r7, #8]
 8001e8a:	f000 f86d 	bl	8001f68 <parse_NMEA_RMC>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d14c      	bne.n	8001f2e <parseNmeaMessage+0xda>
					inst->rmc_data.longitude, inst->rmc_data.lon_dir);
			DebugLogPrintf(__FUNCTION__, "Speed: %.3f", inst->rmc_data.speed);
            #endif
		} else {
#ifdef DEBUG_ENABLED
			DebugLogPrintf(__FUNCTION__, "Error parsing NMEA RMC sentence");
 8001e94:	492a      	ldr	r1, [pc, #168]	@ (8001f40 <parseNmeaMessage+0xec>)
 8001e96:	482b      	ldr	r0, [pc, #172]	@ (8001f44 <parseNmeaMessage+0xf0>)
 8001e98:	f000 fb94 	bl	80025c4 <DebugLogPrintf>
		if (parse_NMEA_RMC(indata, &inst->rmc_data)) {
 8001e9c:	e047      	b.n	8001f2e <parseNmeaMessage+0xda>
#endif
		}
	} else if ((strncmp((char*) indata, "$GPGNS", 6) == 0)
 8001e9e:	2206      	movs	r2, #6
 8001ea0:	4929      	ldr	r1, [pc, #164]	@ (8001f48 <parseNmeaMessage+0xf4>)
 8001ea2:	68b8      	ldr	r0, [r7, #8]
 8001ea4:	f019 fa2e 	bl	801b304 <strncmp>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d007      	beq.n	8001ebe <parseNmeaMessage+0x6a>
			|| (strncmp((char*) indata, "$GNGNS", 6) == 0)) {
 8001eae:	2206      	movs	r2, #6
 8001eb0:	4926      	ldr	r1, [pc, #152]	@ (8001f4c <parseNmeaMessage+0xf8>)
 8001eb2:	68b8      	ldr	r0, [r7, #8]
 8001eb4:	f019 fa26 	bl	801b304 <strncmp>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10d      	bne.n	8001eda <parseNmeaMessage+0x86>
		if (parse_NMEA_GNS(indata, &inst->gns_data)) {
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	3308      	adds	r3, #8
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	68b8      	ldr	r0, [r7, #8]
 8001ec6:	f000 f970 	bl	80021aa <parse_NMEA_GNS>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d12e      	bne.n	8001f2e <parseNmeaMessage+0xda>
			DebugLogPrintf(__FUNCTION__, "Geoid separation: %.2f",
					inst->gns_data.geoid);
            #endif
		} else {
#ifdef DEBUG_ENABLED
			DebugLogPrintf(__FUNCTION__, "Error parsing NMEA GNS sentence");
 8001ed0:	491f      	ldr	r1, [pc, #124]	@ (8001f50 <parseNmeaMessage+0xfc>)
 8001ed2:	481c      	ldr	r0, [pc, #112]	@ (8001f44 <parseNmeaMessage+0xf0>)
 8001ed4:	f000 fb76 	bl	80025c4 <DebugLogPrintf>
		if (parse_NMEA_GNS(indata, &inst->gns_data)) {
 8001ed8:	e029      	b.n	8001f2e <parseNmeaMessage+0xda>
#endif
		}
	} else if ((strncmp((char*) indata, "$GPZDA", 6) == 0)
 8001eda:	2206      	movs	r2, #6
 8001edc:	491d      	ldr	r1, [pc, #116]	@ (8001f54 <parseNmeaMessage+0x100>)
 8001ede:	68b8      	ldr	r0, [r7, #8]
 8001ee0:	f019 fa10 	bl	801b304 <strncmp>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d007      	beq.n	8001efa <parseNmeaMessage+0xa6>
			|| (strncmp((char*) indata, "$GNZDA", 6) == 0)) {
 8001eea:	2206      	movs	r2, #6
 8001eec:	491a      	ldr	r1, [pc, #104]	@ (8001f58 <parseNmeaMessage+0x104>)
 8001eee:	68b8      	ldr	r0, [r7, #8]
 8001ef0:	f019 fa08 	bl	801b304 <strncmp>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d106      	bne.n	8001f08 <parseNmeaMessage+0xb4>
		parse_NMEA_ZDA(indata, &inst->zda_data);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	3358      	adds	r3, #88	@ 0x58
 8001efe:	4619      	mov	r1, r3
 8001f00:	68b8      	ldr	r0, [r7, #8]
 8001f02:	f000 fab4 	bl	800246e <parse_NMEA_ZDA>
 8001f06:	e012      	b.n	8001f2e <parseNmeaMessage+0xda>
	} else if (strncmp((char*) indata, "$GPGSV", 6) == 0) {
 8001f08:	2206      	movs	r2, #6
 8001f0a:	4914      	ldr	r1, [pc, #80]	@ (8001f5c <parseNmeaMessage+0x108>)
 8001f0c:	68b8      	ldr	r0, [r7, #8]
 8001f0e:	f019 f9f9 	bl	801b304 <strncmp>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d104      	bne.n	8001f22 <parseNmeaMessage+0xce>
		DebugLogPrintf(__FUNCTION__, "GSV-GNSS Satellites in View");
 8001f18:	4911      	ldr	r1, [pc, #68]	@ (8001f60 <parseNmeaMessage+0x10c>)
 8001f1a:	480a      	ldr	r0, [pc, #40]	@ (8001f44 <parseNmeaMessage+0xf0>)
 8001f1c:	f000 fb52 	bl	80025c4 <DebugLogPrintf>
	} else if (strncmp((char*) indata, "$GNTXT", 6) == 0) {

	} else {
		//Serial.printf("%s: Unsupported message \n", __FUNCTION__);
	}
}
 8001f20:	e005      	b.n	8001f2e <parseNmeaMessage+0xda>
	} else if (strncmp((char*) indata, "$GNTXT", 6) == 0) {
 8001f22:	2206      	movs	r2, #6
 8001f24:	490f      	ldr	r1, [pc, #60]	@ (8001f64 <parseNmeaMessage+0x110>)
 8001f26:	68b8      	ldr	r0, [r7, #8]
 8001f28:	f019 f9ec 	bl	801b304 <strncmp>
}
 8001f2c:	e7ff      	b.n	8001f2e <parseNmeaMessage+0xda>
 8001f2e:	bf00      	nop
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	0801e89c 	.word	0x0801e89c
 8001f3c:	0801e8a4 	.word	0x0801e8a4
 8001f40:	0801e8ac 	.word	0x0801e8ac
 8001f44:	0801ee34 	.word	0x0801ee34
 8001f48:	0801e8cc 	.word	0x0801e8cc
 8001f4c:	0801e8d4 	.word	0x0801e8d4
 8001f50:	0801e8dc 	.word	0x0801e8dc
 8001f54:	0801e8fc 	.word	0x0801e8fc
 8001f58:	0801e904 	.word	0x0801e904
 8001f5c:	0801e90c 	.word	0x0801e90c
 8001f60:	0801e914 	.word	0x0801e914
 8001f64:	0801e930 	.word	0x0801e930

08001f68 <parse_NMEA_RMC>:

int parse_NMEA_RMC(const char *sentence, NMEA_RMC_Data *data) {
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b0ec      	sub	sp, #432	@ 0x1b0
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001f72:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001f76:	6018      	str	r0, [r3, #0]
 8001f78:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001f7c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001f80:	6019      	str	r1, [r3, #0]
	char *field_start, *field_end;
	char fields[MAX_FIELDS][MAX_FIELD_LENGTH];
	int field_count = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
	int sentence_length = strlen(sentence);
 8001f88:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001f8c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001f90:	6818      	ldr	r0, [r3, #0]
 8001f92:	f7fe f91d 	bl	80001d0 <strlen>
 8001f96:	4603      	mov	r3, r0
 8001f98:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0

	// Iterate through the sentence and extract fields manually
	field_start = (char*) sentence;
 8001f9c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001fa0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
	for (int i = 0; i < sentence_length; i++) {
 8001faa:	2300      	movs	r3, #0
 8001fac:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001fb0:	e060      	b.n	8002074 <parse_NMEA_RMC+0x10c>
		if (sentence[i] == ',' || sentence[i] == '*'
 8001fb2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001fb6:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 8001fba:	f5a2 72d6 	sub.w	r2, r2, #428	@ 0x1ac
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b2c      	cmp	r3, #44	@ 0x2c
 8001fc6:	d011      	beq.n	8001fec <parse_NMEA_RMC+0x84>
 8001fc8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001fcc:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 8001fd0:	f5a2 72d6 	sub.w	r2, r2, #428	@ 0x1ac
 8001fd4:	6812      	ldr	r2, [r2, #0]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b2a      	cmp	r3, #42	@ 0x2a
 8001fdc:	d006      	beq.n	8001fec <parse_NMEA_RMC+0x84>
				|| i == sentence_length - 1) {
 8001fde:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d13e      	bne.n	800206a <parse_NMEA_RMC+0x102>
			field_end = (char*) &sentence[i];
 8001fec:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001ff0:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 8001ff4:	f5a2 72d6 	sub.w	r2, r2, #428	@ 0x1ac
 8001ff8:	6812      	ldr	r2, [r2, #0]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
			int field_length = field_end - field_start;
 8002000:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002004:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
			strncpy(fields[field_count], field_start, field_length);
 800200e:	f107 0108 	add.w	r1, r7, #8
 8002012:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	440b      	add	r3, r1
 8002020:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002024:	f8d7 11ac 	ldr.w	r1, [r7, #428]	@ 0x1ac
 8002028:	4618      	mov	r0, r3
 800202a:	f019 f97d 	bl	801b328 <strncpy>
			fields[field_count][field_length] = '\0';
 800202e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8002032:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
 8002036:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	18ca      	adds	r2, r1, r3
 8002044:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8002048:	4413      	add	r3, r2
 800204a:	2200      	movs	r2, #0
 800204c:	701a      	strb	r2, [r3, #0]
			field_start = field_end + 1;
 800204e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8002052:	3301      	adds	r3, #1
 8002054:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
			field_count++;
 8002058:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800205c:	3301      	adds	r3, #1
 800205e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
			if (field_count >= MAX_FIELDS)
 8002062:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002066:	2b13      	cmp	r3, #19
 8002068:	dc0b      	bgt.n	8002082 <parse_NMEA_RMC+0x11a>
	for (int i = 0; i < sentence_length; i++) {
 800206a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800206e:	3301      	adds	r3, #1
 8002070:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002074:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8002078:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800207c:	429a      	cmp	r2, r3
 800207e:	db98      	blt.n	8001fb2 <parse_NMEA_RMC+0x4a>
 8002080:	e000      	b.n	8002084 <parse_NMEA_RMC+0x11c>
				break;
 8002082:	bf00      	nop
		}
	}

	// Extract relevant fields from RMC sentence
	if (strlen(fields[1]) > 0)
 8002084:	f107 0308 	add.w	r3, r7, #8
 8002088:	3314      	adds	r3, #20
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00b      	beq.n	80020a8 <parse_NMEA_RMC+0x140>
		strcpy(data->time, fields[1]);
 8002090:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8002094:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	f107 0308 	add.w	r3, r7, #8
 800209e:	3314      	adds	r3, #20
 80020a0:	4619      	mov	r1, r3
 80020a2:	4610      	mov	r0, r2
 80020a4:	f019 fa1d 	bl	801b4e2 <strcpy>
	if (strlen(fields[2]) > 0)
 80020a8:	f107 0308 	add.w	r3, r7, #8
 80020ac:	3328      	adds	r3, #40	@ 0x28
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00b      	beq.n	80020cc <parse_NMEA_RMC+0x164>
		data->status = fields[2][0];
 80020b4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80020b8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80020bc:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 80020c0:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80020c4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	731a      	strb	r2, [r3, #12]
	if (strlen(fields[3]) > 0)
 80020cc:	f107 0308 	add.w	r3, r7, #8
 80020d0:	333c      	adds	r3, #60	@ 0x3c
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d010      	beq.n	80020fa <parse_NMEA_RMC+0x192>
		data->latitude = atof(fields[3]);
 80020d8:	f107 0308 	add.w	r3, r7, #8
 80020dc:	333c      	adds	r3, #60	@ 0x3c
 80020de:	4618      	mov	r0, r3
 80020e0:	f018 f8fc 	bl	801a2dc <atof>
 80020e4:	ee07 0a90 	vmov	s15, r0
 80020e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020ec:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80020f0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	edc3 7a04 	vstr	s15, [r3, #16]
	if (strlen(fields[4]) > 0)
 80020fa:	f107 0308 	add.w	r3, r7, #8
 80020fe:	3350      	adds	r3, #80	@ 0x50
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00b      	beq.n	800211e <parse_NMEA_RMC+0x1b6>
		data->lat_dir = fields[4][0];
 8002106:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800210a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800210e:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8002112:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8002116:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	751a      	strb	r2, [r3, #20]
	if (strlen(fields[5]) > 0)
 800211e:	f107 0308 	add.w	r3, r7, #8
 8002122:	3364      	adds	r3, #100	@ 0x64
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d010      	beq.n	800214c <parse_NMEA_RMC+0x1e4>
		data->longitude = atof(fields[5]);
 800212a:	f107 0308 	add.w	r3, r7, #8
 800212e:	3364      	adds	r3, #100	@ 0x64
 8002130:	4618      	mov	r0, r3
 8002132:	f018 f8d3 	bl	801a2dc <atof>
 8002136:	ee07 0a90 	vmov	s15, r0
 800213a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800213e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8002142:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	edc3 7a06 	vstr	s15, [r3, #24]
	if (strlen(fields[6]) > 0)
 800214c:	f107 0308 	add.w	r3, r7, #8
 8002150:	3378      	adds	r3, #120	@ 0x78
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00b      	beq.n	8002170 <parse_NMEA_RMC+0x208>
		data->lon_dir = fields[6][0];
 8002158:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800215c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002160:	f893 2078 	ldrb.w	r2, [r3, #120]	@ 0x78
 8002164:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8002168:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	771a      	strb	r2, [r3, #28]
	if (strlen(fields[7]) > 0)
 8002170:	f107 0308 	add.w	r3, r7, #8
 8002174:	338c      	adds	r3, #140	@ 0x8c
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d010      	beq.n	800219e <parse_NMEA_RMC+0x236>
		data->speed = atof(fields[7]);
 800217c:	f107 0308 	add.w	r3, r7, #8
 8002180:	338c      	adds	r3, #140	@ 0x8c
 8002182:	4618      	mov	r0, r3
 8002184:	f018 f8aa 	bl	801a2dc <atof>
 8002188:	ee07 0a90 	vmov	s15, r0
 800218c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002190:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8002194:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	edc3 7a08 	vstr	s15, [r3, #32]

	return 1; // Parsing successful
 800219e:	2301      	movs	r3, #1
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	f507 77d8 	add.w	r7, r7, #432	@ 0x1b0
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <parse_NMEA_GNS>:

int parse_NMEA_GNS(const char *sentence, NMEA_GNS_Data *data) {
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b0ec      	sub	sp, #432	@ 0x1b0
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80021b4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80021b8:	6018      	str	r0, [r3, #0]
 80021ba:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80021be:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80021c2:	6019      	str	r1, [r3, #0]
	char *field_start, *field_end;
	char fields[MAX_FIELDS][MAX_FIELD_LENGTH];
	int field_count = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
	int sentence_length = strlen(sentence);
 80021ca:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80021ce:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80021d2:	6818      	ldr	r0, [r3, #0]
 80021d4:	f7fd fffc 	bl	80001d0 <strlen>
 80021d8:	4603      	mov	r3, r0
 80021da:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0

	// Iterate through the sentence and extract fields manually
	field_start = (char*) sentence;
 80021de:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80021e2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
	for (int i = 0; i < sentence_length; i++) {
 80021ec:	2300      	movs	r3, #0
 80021ee:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80021f2:	e060      	b.n	80022b6 <parse_NMEA_GNS+0x10c>
		if (sentence[i] == ',' || sentence[i] == '*'
 80021f4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80021f8:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 80021fc:	f5a2 72d6 	sub.w	r2, r2, #428	@ 0x1ac
 8002200:	6812      	ldr	r2, [r2, #0]
 8002202:	4413      	add	r3, r2
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b2c      	cmp	r3, #44	@ 0x2c
 8002208:	d011      	beq.n	800222e <parse_NMEA_GNS+0x84>
 800220a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800220e:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 8002212:	f5a2 72d6 	sub.w	r2, r2, #428	@ 0x1ac
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	4413      	add	r3, r2
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b2a      	cmp	r3, #42	@ 0x2a
 800221e:	d006      	beq.n	800222e <parse_NMEA_GNS+0x84>
				|| i == sentence_length - 1) {
 8002220:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002224:	3b01      	subs	r3, #1
 8002226:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 800222a:	429a      	cmp	r2, r3
 800222c:	d13e      	bne.n	80022ac <parse_NMEA_GNS+0x102>
			field_end = (char*) &sentence[i];
 800222e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002232:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 8002236:	f5a2 72d6 	sub.w	r2, r2, #428	@ 0x1ac
 800223a:	6812      	ldr	r2, [r2, #0]
 800223c:	4413      	add	r3, r2
 800223e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
			int field_length = field_end - field_start;
 8002242:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002246:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
			strncpy(fields[field_count], field_start, field_length);
 8002250:	f107 0108 	add.w	r1, r7, #8
 8002254:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8002258:	4613      	mov	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002266:	f8d7 11ac 	ldr.w	r1, [r7, #428]	@ 0x1ac
 800226a:	4618      	mov	r0, r3
 800226c:	f019 f85c 	bl	801b328 <strncpy>
			fields[field_count][field_length] = '\0';
 8002270:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8002274:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
 8002278:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	18ca      	adds	r2, r1, r3
 8002286:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 800228a:	4413      	add	r3, r2
 800228c:	2200      	movs	r2, #0
 800228e:	701a      	strb	r2, [r3, #0]
			field_start = field_end + 1;
 8002290:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8002294:	3301      	adds	r3, #1
 8002296:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
			field_count++;
 800229a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800229e:	3301      	adds	r3, #1
 80022a0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
			if (field_count >= MAX_FIELDS)
 80022a4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80022a8:	2b13      	cmp	r3, #19
 80022aa:	dc0b      	bgt.n	80022c4 <parse_NMEA_GNS+0x11a>
	for (int i = 0; i < sentence_length; i++) {
 80022ac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80022b0:	3301      	adds	r3, #1
 80022b2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80022b6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80022ba:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80022be:	429a      	cmp	r2, r3
 80022c0:	db98      	blt.n	80021f4 <parse_NMEA_GNS+0x4a>
 80022c2:	e000      	b.n	80022c6 <parse_NMEA_GNS+0x11c>
				break;
 80022c4:	bf00      	nop
		}
	}

	// Extract relevant fields from GNS sentence
	if (strlen(fields[1]) > 0)
 80022c6:	f107 0308 	add.w	r3, r7, #8
 80022ca:	3314      	adds	r3, #20
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00b      	beq.n	80022ea <parse_NMEA_GNS+0x140>
		strcpy(data->time, fields[1]);
 80022d2:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80022d6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	f107 0308 	add.w	r3, r7, #8
 80022e0:	3314      	adds	r3, #20
 80022e2:	4619      	mov	r1, r3
 80022e4:	4610      	mov	r0, r2
 80022e6:	f019 f8fc 	bl	801b4e2 <strcpy>
	if (strlen(fields[2]) > 0)
 80022ea:	f107 0308 	add.w	r3, r7, #8
 80022ee:	3328      	adds	r3, #40	@ 0x28
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d010      	beq.n	8002318 <parse_NMEA_GNS+0x16e>
		data->latitude = atof(fields[2]);
 80022f6:	f107 0308 	add.w	r3, r7, #8
 80022fa:	3328      	adds	r3, #40	@ 0x28
 80022fc:	4618      	mov	r0, r3
 80022fe:	f017 ffed 	bl	801a2dc <atof>
 8002302:	ee07 0a90 	vmov	s15, r0
 8002306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800230a:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800230e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	edc3 7a03 	vstr	s15, [r3, #12]
	if (strlen(fields[3]) > 0)
 8002318:	f107 0308 	add.w	r3, r7, #8
 800231c:	333c      	adds	r3, #60	@ 0x3c
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00b      	beq.n	800233c <parse_NMEA_GNS+0x192>
		data->lat_dir = fields[3][0];
 8002324:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8002328:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800232c:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8002330:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8002334:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	741a      	strb	r2, [r3, #16]
	if (strlen(fields[4]) > 0)
 800233c:	f107 0308 	add.w	r3, r7, #8
 8002340:	3350      	adds	r3, #80	@ 0x50
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d010      	beq.n	800236a <parse_NMEA_GNS+0x1c0>
		data->longitude = atof(fields[4]);
 8002348:	f107 0308 	add.w	r3, r7, #8
 800234c:	3350      	adds	r3, #80	@ 0x50
 800234e:	4618      	mov	r0, r3
 8002350:	f017 ffc4 	bl	801a2dc <atof>
 8002354:	ee07 0a90 	vmov	s15, r0
 8002358:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800235c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8002360:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	edc3 7a05 	vstr	s15, [r3, #20]
	if (strlen(fields[5]) > 0)
 800236a:	f107 0308 	add.w	r3, r7, #8
 800236e:	3364      	adds	r3, #100	@ 0x64
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00b      	beq.n	800238e <parse_NMEA_GNS+0x1e4>
		data->lon_dir = fields[5][0];
 8002376:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800237a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800237e:	f893 2064 	ldrb.w	r2, [r3, #100]	@ 0x64
 8002382:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8002386:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	761a      	strb	r2, [r3, #24]
	if (strlen(fields[6]) > 0)
 800238e:	f107 0308 	add.w	r3, r7, #8
 8002392:	3378      	adds	r3, #120	@ 0x78
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00b      	beq.n	80023b2 <parse_NMEA_GNS+0x208>
		data->mode = fields[6][0];
 800239a:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800239e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80023a2:	f893 2078 	ldrb.w	r2, [r3, #120]	@ 0x78
 80023a6:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80023aa:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	765a      	strb	r2, [r3, #25]
	if (strlen(fields[7]) > 0)
 80023b2:	f107 0308 	add.w	r3, r7, #8
 80023b6:	338c      	adds	r3, #140	@ 0x8c
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00c      	beq.n	80023d8 <parse_NMEA_GNS+0x22e>
		data->satellites = atoi(fields[7]);
 80023be:	f107 0308 	add.w	r3, r7, #8
 80023c2:	338c      	adds	r3, #140	@ 0x8c
 80023c4:	4618      	mov	r0, r3
 80023c6:	f017 ff8c 	bl	801a2e2 <atoi>
 80023ca:	4602      	mov	r2, r0
 80023cc:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80023d0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	61da      	str	r2, [r3, #28]
	if (strlen(fields[8]) > 0)
 80023d8:	f107 0308 	add.w	r3, r7, #8
 80023dc:	33a0      	adds	r3, #160	@ 0xa0
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d010      	beq.n	8002406 <parse_NMEA_GNS+0x25c>
		data->hdop = atof(fields[8]);
 80023e4:	f107 0308 	add.w	r3, r7, #8
 80023e8:	33a0      	adds	r3, #160	@ 0xa0
 80023ea:	4618      	mov	r0, r3
 80023ec:	f017 ff76 	bl	801a2dc <atof>
 80023f0:	ee07 0a90 	vmov	s15, r0
 80023f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023f8:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80023fc:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	edc3 7a08 	vstr	s15, [r3, #32]
	if (strlen(fields[9]) > 0)
 8002406:	f107 0308 	add.w	r3, r7, #8
 800240a:	33b4      	adds	r3, #180	@ 0xb4
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d010      	beq.n	8002434 <parse_NMEA_GNS+0x28a>
		data->altitude = atof(fields[9]);
 8002412:	f107 0308 	add.w	r3, r7, #8
 8002416:	33b4      	adds	r3, #180	@ 0xb4
 8002418:	4618      	mov	r0, r3
 800241a:	f017 ff5f 	bl	801a2dc <atof>
 800241e:	ee07 0a90 	vmov	s15, r0
 8002422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002426:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800242a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	if (strlen(fields[11]) > 0)
 8002434:	f107 0308 	add.w	r3, r7, #8
 8002438:	33dc      	adds	r3, #220	@ 0xdc
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d010      	beq.n	8002462 <parse_NMEA_GNS+0x2b8>
		data->geoid = atof(fields[11]);
 8002440:	f107 0308 	add.w	r3, r7, #8
 8002444:	33dc      	adds	r3, #220	@ 0xdc
 8002446:	4618      	mov	r0, r3
 8002448:	f017 ff48 	bl	801a2dc <atof>
 800244c:	ee07 0a90 	vmov	s15, r0
 8002450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002454:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8002458:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	return 1; // Parsing successful
 8002462:	2301      	movs	r3, #1
}
 8002464:	4618      	mov	r0, r3
 8002466:	f507 77d8 	add.w	r7, r7, #432	@ 0x1b0
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <parse_NMEA_ZDA>:

void parse_NMEA_ZDA(const char *sentence, NMEA_ZDA_Data *data) {
 800246e:	b580      	push	{r7, lr}
 8002470:	b0ec      	sub	sp, #432	@ 0x1b0
 8002472:	af00      	add	r7, sp, #0
 8002474:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8002478:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800247c:	6018      	str	r0, [r3, #0]
 800247e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8002482:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002486:	6019      	str	r1, [r3, #0]
	char *field_start, *field_end;
	char fields[MAX_FIELDS][MAX_FIELD_LENGTH];
	int field_count = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
	int sentence_length = strlen(sentence);
 800248e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8002492:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002496:	6818      	ldr	r0, [r3, #0]
 8002498:	f7fd fe9a 	bl	80001d0 <strlen>
 800249c:	4603      	mov	r3, r0
 800249e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0

	// Iterate through the sentence and extract fields manually
	field_start = (char*) sentence;
 80024a2:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80024a6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
	for (int i = 0; i < sentence_length; i++) {
 80024b0:	2300      	movs	r3, #0
 80024b2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80024b6:	e060      	b.n	800257a <parse_NMEA_ZDA+0x10c>
		if (sentence[i] == ',' || sentence[i] == '*'
 80024b8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80024bc:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 80024c0:	f5a2 72d6 	sub.w	r2, r2, #428	@ 0x1ac
 80024c4:	6812      	ldr	r2, [r2, #0]
 80024c6:	4413      	add	r3, r2
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b2c      	cmp	r3, #44	@ 0x2c
 80024cc:	d011      	beq.n	80024f2 <parse_NMEA_ZDA+0x84>
 80024ce:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80024d2:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 80024d6:	f5a2 72d6 	sub.w	r2, r2, #428	@ 0x1ac
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	4413      	add	r3, r2
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80024e2:	d006      	beq.n	80024f2 <parse_NMEA_ZDA+0x84>
				|| i == sentence_length - 1) {
 80024e4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80024e8:	3b01      	subs	r3, #1
 80024ea:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d13e      	bne.n	8002570 <parse_NMEA_ZDA+0x102>
			field_end = (char*) &sentence[i];
 80024f2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80024f6:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 80024fa:	f5a2 72d6 	sub.w	r2, r2, #428	@ 0x1ac
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	4413      	add	r3, r2
 8002502:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
			int field_length = field_end - field_start;
 8002506:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800250a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
			strncpy(fields[field_count], field_start, field_length);
 8002514:	f107 0108 	add.w	r1, r7, #8
 8002518:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 800251c:	4613      	mov	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800252a:	f8d7 11ac 	ldr.w	r1, [r7, #428]	@ 0x1ac
 800252e:	4618      	mov	r0, r3
 8002530:	f018 fefa 	bl	801b328 <strncpy>
			fields[field_count][field_length] = '\0';
 8002534:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8002538:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
 800253c:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8002540:	4613      	mov	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4413      	add	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	18ca      	adds	r2, r1, r3
 800254a:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 800254e:	4413      	add	r3, r2
 8002550:	2200      	movs	r2, #0
 8002552:	701a      	strb	r2, [r3, #0]
			field_start = field_end + 1;
 8002554:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8002558:	3301      	adds	r3, #1
 800255a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
			field_count++;
 800255e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002562:	3301      	adds	r3, #1
 8002564:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
			if (field_count >= MAX_FIELDS)
 8002568:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800256c:	2b13      	cmp	r3, #19
 800256e:	dc0b      	bgt.n	8002588 <parse_NMEA_ZDA+0x11a>
	for (int i = 0; i < sentence_length; i++) {
 8002570:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002574:	3301      	adds	r3, #1
 8002576:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800257a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 800257e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002582:	429a      	cmp	r2, r3
 8002584:	db98      	blt.n	80024b8 <parse_NMEA_ZDA+0x4a>
//    tm.tm_mday = data->day; // Day of the month (1-31)
//    tm.tm_hour = data->hour; // Hours since midnight (0-23)
//    tm.tm_min = data->minute; // Minutes after the hour (0-59)
//    tm.tm_sec = data->second; // Seconds after the minute (0-59)
//    data->time = mktime(&tm); // Convert struct tm to time_t
}
 8002586:	e000      	b.n	800258a <parse_NMEA_ZDA+0x11c>
				break;
 8002588:	bf00      	nop
}
 800258a:	bf00      	nop
 800258c:	f507 77d8 	add.w	r7, r7, #432	@ 0x1b0
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <GPS_HAL_Available>:

    current_pwr_state = ctrl;
}

uint32_t GPS_HAL_Available(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
    return 0;//gnssSerial.available();
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <GPS_HAL_Read>:

uint32_t GPS_HAL_Read(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
    return 0;//gnssSerial.read();
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <GPS_HAL_GetMilliseconds>:

uint32_t GPS_HAL_GetMilliseconds(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
	return 0;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <DebugLogPrintf>:

#define LOG_BUFFER_SIZE 256
static char dbgBuf[LOG_BUFFER_SIZE];

void DebugLogPrintf(const char *function, const char *format, ...)
{
 80025c4:	b40e      	push	{r1, r2, r3}
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b089      	sub	sp, #36	@ 0x24
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
    osMutexAcquire(debugLockHandle, osWaitForever);
 80025ce:	4b32      	ldr	r3, [pc, #200]	@ (8002698 <DebugLogPrintf+0xd4>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f04f 31ff 	mov.w	r1, #4294967295
 80025d6:	4618      	mov	r0, r3
 80025d8:	f013 fbb2 	bl	8015d40 <osMutexAcquire>

    va_list argptr;
    // Start argument list processing
    va_start(argptr, format);
 80025dc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80025e0:	60fb      	str	r3, [r7, #12]
    // Include the function name in the log string and ensure buffer space is enough
    int cnt = snprintf(dbgBuf, LOG_BUFFER_SIZE, "%s: ", function);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a2d      	ldr	r2, [pc, #180]	@ (800269c <DebugLogPrintf+0xd8>)
 80025e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025ea:	482d      	ldr	r0, [pc, #180]	@ (80026a0 <DebugLogPrintf+0xdc>)
 80025ec:	f018 fdd2 	bl	801b194 <sniprintf>
 80025f0:	61f8      	str	r0, [r7, #28]
    // Ensure that the snprintf result is not larger than buffer size
    if (cnt >= LOG_BUFFER_SIZE) {
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	2bff      	cmp	r3, #255	@ 0xff
 80025f6:	dd03      	ble.n	8002600 <DebugLogPrintf+0x3c>
        dbgBuf[LOG_BUFFER_SIZE - 1] = '\0';  // Ensure null termination in case of overflow
 80025f8:	4b29      	ldr	r3, [pc, #164]	@ (80026a0 <DebugLogPrintf+0xdc>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
    }

    // Append the formatted log message to the buffer
    int remaining = LOG_BUFFER_SIZE - cnt;
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8002606:	617b      	str	r3, [r7, #20]
    cnt += vsnprintf(dbgBuf + cnt, remaining, format, argptr);
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	4a25      	ldr	r2, [pc, #148]	@ (80026a0 <DebugLogPrintf+0xdc>)
 800260c:	1898      	adds	r0, r3, r2
 800260e:	6979      	ldr	r1, [r7, #20]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002614:	f018 fe60 	bl	801b2d8 <vsniprintf>
 8002618:	4602      	mov	r2, r0
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	4413      	add	r3, r2
 800261e:	61fb      	str	r3, [r7, #28]
    va_end(argptr);

    // Check for overflow in vsnprintf
    if (cnt >= LOG_BUFFER_SIZE) {
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	2bff      	cmp	r3, #255	@ 0xff
 8002624:	dd04      	ble.n	8002630 <DebugLogPrintf+0x6c>
        dbgBuf[LOG_BUFFER_SIZE - 1] = '\0';  // Ensure null termination in case of overflow
 8002626:	4b1e      	ldr	r3, [pc, #120]	@ (80026a0 <DebugLogPrintf+0xdc>)
 8002628:	2200      	movs	r2, #0
 800262a:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
 800262e:	e00b      	b.n	8002648 <DebugLogPrintf+0x84>
    }
    else {
    	// Add new line
    	dbgBuf[cnt++] = '\r';
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	1c5a      	adds	r2, r3, #1
 8002634:	61fa      	str	r2, [r7, #28]
 8002636:	4a1a      	ldr	r2, [pc, #104]	@ (80026a0 <DebugLogPrintf+0xdc>)
 8002638:	210d      	movs	r1, #13
 800263a:	54d1      	strb	r1, [r2, r3]
    	dbgBuf[cnt++] = '\n';
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	61fa      	str	r2, [r7, #28]
 8002642:	4a17      	ldr	r2, [pc, #92]	@ (80026a0 <DebugLogPrintf+0xdc>)
 8002644:	210a      	movs	r1, #10
 8002646:	54d1      	strb	r1, [r2, r3]
    }

    // Send the log message via UART, transmit all at once
    uint16_t bytesSent = 0;
 8002648:	2300      	movs	r3, #0
 800264a:	837b      	strh	r3, [r7, #26]
    while (bytesSent < cnt) {
 800264c:	e013      	b.n	8002676 <DebugLogPrintf+0xb2>
        uint16_t bytesToSend = (cnt - bytesSent < 64) ? (cnt - bytesSent) : 64; // Send in chunks of 64 bytes
 800264e:	8b7b      	ldrh	r3, [r7, #26]
 8002650:	69fa      	ldr	r2, [r7, #28]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b40      	cmp	r3, #64	@ 0x40
 8002656:	bfa8      	it	ge
 8002658:	2340      	movge	r3, #64	@ 0x40
 800265a:	827b      	strh	r3, [r7, #18]
        HAL_UART_Transmit(&huart2, (uint8_t *)&dbgBuf[bytesSent], bytesToSend, 1000);
 800265c:	8b7b      	ldrh	r3, [r7, #26]
 800265e:	4a10      	ldr	r2, [pc, #64]	@ (80026a0 <DebugLogPrintf+0xdc>)
 8002660:	1899      	adds	r1, r3, r2
 8002662:	8a7a      	ldrh	r2, [r7, #18]
 8002664:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002668:	480e      	ldr	r0, [pc, #56]	@ (80026a4 <DebugLogPrintf+0xe0>)
 800266a:	f00a ffd7 	bl	800d61c <HAL_UART_Transmit>
        bytesSent += bytesToSend;
 800266e:	8b7a      	ldrh	r2, [r7, #26]
 8002670:	8a7b      	ldrh	r3, [r7, #18]
 8002672:	4413      	add	r3, r2
 8002674:	837b      	strh	r3, [r7, #26]
    while (bytesSent < cnt) {
 8002676:	8b7b      	ldrh	r3, [r7, #26]
 8002678:	69fa      	ldr	r2, [r7, #28]
 800267a:	429a      	cmp	r2, r3
 800267c:	dce7      	bgt.n	800264e <DebugLogPrintf+0x8a>
    }

    osMutexRelease(debugLockHandle);
 800267e:	4b06      	ldr	r3, [pc, #24]	@ (8002698 <DebugLogPrintf+0xd4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f013 fba7 	bl	8015dd6 <osMutexRelease>
}
 8002688:	bf00      	nop
 800268a:	3724      	adds	r7, #36	@ 0x24
 800268c:	46bd      	mov	sp, r7
 800268e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002692:	b003      	add	sp, #12
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	200031ac 	.word	0x200031ac
 800269c:	0801e938 	.word	0x0801e938
 80026a0:	20002c08 	.word	0x20002c08
 80026a4:	20003088 	.word	0x20003088

080026a8 <sdmmc_readBitmap>:

//------------------------------------------------------------------------
// Public Functions
//------------------------------------------------------------------------

sdmmc_return_e sdmmc_readBitmap(sdmmc_instance_t *inst, char *filename) {
 80026a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026ac:	b099      	sub	sp, #100	@ 0x64
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
 80026b2:	6039      	str	r1, [r7, #0]
	FRESULT res;

	osMutexAcquire(sdCardAccessLockHandle, osWaitForever);
 80026b4:	4ba6      	ldr	r3, [pc, #664]	@ (8002950 <sdmmc_readBitmap+0x2a8>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f04f 31ff 	mov.w	r1, #4294967295
 80026bc:	4618      	mov	r0, r3
 80026be:	f013 fb3f 	bl	8015d40 <osMutexAcquire>

	DebugLogPrintf(__FUNCTION__, "Opening %s", filename);
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	49a3      	ldr	r1, [pc, #652]	@ (8002954 <sdmmc_readBitmap+0x2ac>)
 80026c6:	48a4      	ldr	r0, [pc, #656]	@ (8002958 <sdmmc_readBitmap+0x2b0>)
 80026c8:	f7ff ff7c 	bl	80025c4 <DebugLogPrintf>

	if (!inst->mounted) {
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	f083 0301 	eor.w	r3, r3, #1
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d01c      	beq.n	8002714 <sdmmc_readBitmap+0x6c>
		// mount the default drive
		res = f_mount(&SDFatFS, "", 0);
 80026da:	2200      	movs	r2, #0
 80026dc:	499f      	ldr	r1, [pc, #636]	@ (800295c <sdmmc_readBitmap+0x2b4>)
 80026de:	48a0      	ldr	r0, [pc, #640]	@ (8002960 <sdmmc_readBitmap+0x2b8>)
 80026e0:	f012 f834 	bl	801474c <f_mount>
 80026e4:	4603      	mov	r3, r0
 80026e6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res != FR_OK) {
 80026ea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00d      	beq.n	800270e <sdmmc_readBitmap+0x66>
			DebugLogPrintf(__FUNCTION__, "f_mount() failed, res = %d", res);
 80026f2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80026f6:	461a      	mov	r2, r3
 80026f8:	499a      	ldr	r1, [pc, #616]	@ (8002964 <sdmmc_readBitmap+0x2bc>)
 80026fa:	4897      	ldr	r0, [pc, #604]	@ (8002958 <sdmmc_readBitmap+0x2b0>)
 80026fc:	f7ff ff62 	bl	80025c4 <DebugLogPrintf>
			osMutexRelease(sdCardAccessLockHandle);
 8002700:	4b93      	ldr	r3, [pc, #588]	@ (8002950 <sdmmc_readBitmap+0x2a8>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f013 fb66 	bl	8015dd6 <osMutexRelease>
			return SDMMC_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e18f      	b.n	8002a2e <sdmmc_readBitmap+0x386>
		}

		inst->mounted = true;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	701a      	strb	r2, [r3, #0]
	}

	// Open file for reading
	res = f_open(&SDFile, filename, FA_OPEN_EXISTING | FA_READ);
 8002714:	2201      	movs	r2, #1
 8002716:	6839      	ldr	r1, [r7, #0]
 8002718:	4893      	ldr	r0, [pc, #588]	@ (8002968 <sdmmc_readBitmap+0x2c0>)
 800271a:	f012 f87b 	bl	8014814 <f_open>
 800271e:	4603      	mov	r3, r0
 8002720:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (res != FR_OK) {
 8002724:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002728:	2b00      	cmp	r3, #0
 800272a:	d015      	beq.n	8002758 <sdmmc_readBitmap+0xb0>
		DebugLogPrintf(__FUNCTION__, "f_open error = %d", res);
 800272c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002730:	461a      	mov	r2, r3
 8002732:	498e      	ldr	r1, [pc, #568]	@ (800296c <sdmmc_readBitmap+0x2c4>)
 8002734:	4888      	ldr	r0, [pc, #544]	@ (8002958 <sdmmc_readBitmap+0x2b0>)
 8002736:	f7ff ff45 	bl	80025c4 <DebugLogPrintf>
		f_mount(&SDFatFS, (TCHAR const*) NULL, 0);
 800273a:	2200      	movs	r2, #0
 800273c:	2100      	movs	r1, #0
 800273e:	4888      	ldr	r0, [pc, #544]	@ (8002960 <sdmmc_readBitmap+0x2b8>)
 8002740:	f012 f804 	bl	801474c <f_mount>
		inst->mounted = false;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	701a      	strb	r2, [r3, #0]
		osMutexRelease(sdCardAccessLockHandle);
 800274a:	4b81      	ldr	r3, [pc, #516]	@ (8002950 <sdmmc_readBitmap+0x2a8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f013 fb41 	bl	8015dd6 <osMutexRelease>
		return SDMMC_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e16a      	b.n	8002a2e <sdmmc_readBitmap+0x386>
	}

	// Read the file header
	BITMAPFILEHEADER fileHeader;
	res = f_read(&SDFile, &fileHeader, sizeof(BITMAPFILEHEADER), NULL);
 8002758:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800275c:	2300      	movs	r3, #0
 800275e:	220e      	movs	r2, #14
 8002760:	4881      	ldr	r0, [pc, #516]	@ (8002968 <sdmmc_readBitmap+0x2c0>)
 8002762:	f012 fb12 	bl	8014d8a <f_read>
 8002766:	4603      	mov	r3, r0
 8002768:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (res != FR_OK) {
 800276c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002770:	2b00      	cmp	r3, #0
 8002772:	d015      	beq.n	80027a0 <sdmmc_readBitmap+0xf8>
		DebugLogPrintf(__FUNCTION__, "Error reading bitmap header");
 8002774:	497e      	ldr	r1, [pc, #504]	@ (8002970 <sdmmc_readBitmap+0x2c8>)
 8002776:	4878      	ldr	r0, [pc, #480]	@ (8002958 <sdmmc_readBitmap+0x2b0>)
 8002778:	f7ff ff24 	bl	80025c4 <DebugLogPrintf>
		f_close(&SDFile);
 800277c:	487a      	ldr	r0, [pc, #488]	@ (8002968 <sdmmc_readBitmap+0x2c0>)
 800277e:	f012 fcfb 	bl	8015178 <f_close>
		f_mount(&SDFatFS, (TCHAR const*) NULL, 0);
 8002782:	2200      	movs	r2, #0
 8002784:	2100      	movs	r1, #0
 8002786:	4876      	ldr	r0, [pc, #472]	@ (8002960 <sdmmc_readBitmap+0x2b8>)
 8002788:	f011 ffe0 	bl	801474c <f_mount>
		inst->mounted = false;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	701a      	strb	r2, [r3, #0]
		osMutexRelease(sdCardAccessLockHandle);
 8002792:	4b6f      	ldr	r3, [pc, #444]	@ (8002950 <sdmmc_readBitmap+0x2a8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f013 fb1d 	bl	8015dd6 <osMutexRelease>
		return SDMMC_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e146      	b.n	8002a2e <sdmmc_readBitmap+0x386>
	}

	// Check if the file is a valid BMP file
	if (fileHeader.bfType != 0x4D42) { // 'BM' in hexadecimal
 80027a0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80027a2:	f644 5242 	movw	r2, #19778	@ 0x4d42
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d015      	beq.n	80027d6 <sdmmc_readBitmap+0x12e>
		DebugLogPrintf(__FUNCTION__, "Error: Not a valid BMP file.");
 80027aa:	4972      	ldr	r1, [pc, #456]	@ (8002974 <sdmmc_readBitmap+0x2cc>)
 80027ac:	486a      	ldr	r0, [pc, #424]	@ (8002958 <sdmmc_readBitmap+0x2b0>)
 80027ae:	f7ff ff09 	bl	80025c4 <DebugLogPrintf>
		f_close(&SDFile);
 80027b2:	486d      	ldr	r0, [pc, #436]	@ (8002968 <sdmmc_readBitmap+0x2c0>)
 80027b4:	f012 fce0 	bl	8015178 <f_close>
		f_mount(&SDFatFS, (TCHAR const*) NULL, 0);
 80027b8:	2200      	movs	r2, #0
 80027ba:	2100      	movs	r1, #0
 80027bc:	4868      	ldr	r0, [pc, #416]	@ (8002960 <sdmmc_readBitmap+0x2b8>)
 80027be:	f011 ffc5 	bl	801474c <f_mount>
		inst->mounted = false;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	701a      	strb	r2, [r3, #0]
		osMutexRelease(sdCardAccessLockHandle);
 80027c8:	4b61      	ldr	r3, [pc, #388]	@ (8002950 <sdmmc_readBitmap+0x2a8>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f013 fb02 	bl	8015dd6 <osMutexRelease>
		return SDMMC_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e12b      	b.n	8002a2e <sdmmc_readBitmap+0x386>
	}

	// Read the info header
	BITMAPINFOHEADER infoHeader;
	res = f_read(&SDFile, &infoHeader, sizeof(BITMAPINFOHEADER), NULL);
 80027d6:	f107 010c 	add.w	r1, r7, #12
 80027da:	2300      	movs	r3, #0
 80027dc:	2228      	movs	r2, #40	@ 0x28
 80027de:	4862      	ldr	r0, [pc, #392]	@ (8002968 <sdmmc_readBitmap+0x2c0>)
 80027e0:	f012 fad3 	bl	8014d8a <f_read>
 80027e4:	4603      	mov	r3, r0
 80027e6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (res != FR_OK) {
 80027ea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d015      	beq.n	800281e <sdmmc_readBitmap+0x176>
		DebugLogPrintf(__FUNCTION__, "Error reading bitmap info header");
 80027f2:	4961      	ldr	r1, [pc, #388]	@ (8002978 <sdmmc_readBitmap+0x2d0>)
 80027f4:	4858      	ldr	r0, [pc, #352]	@ (8002958 <sdmmc_readBitmap+0x2b0>)
 80027f6:	f7ff fee5 	bl	80025c4 <DebugLogPrintf>
		f_close(&SDFile);
 80027fa:	485b      	ldr	r0, [pc, #364]	@ (8002968 <sdmmc_readBitmap+0x2c0>)
 80027fc:	f012 fcbc 	bl	8015178 <f_close>
		f_mount(&SDFatFS, (TCHAR const*) NULL, 0);
 8002800:	2200      	movs	r2, #0
 8002802:	2100      	movs	r1, #0
 8002804:	4856      	ldr	r0, [pc, #344]	@ (8002960 <sdmmc_readBitmap+0x2b8>)
 8002806:	f011 ffa1 	bl	801474c <f_mount>
		inst->mounted = false;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	701a      	strb	r2, [r3, #0]
		osMutexRelease(sdCardAccessLockHandle);
 8002810:	4b4f      	ldr	r3, [pc, #316]	@ (8002950 <sdmmc_readBitmap+0x2a8>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f013 fade 	bl	8015dd6 <osMutexRelease>
		return SDMMC_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e107      	b.n	8002a2e <sdmmc_readBitmap+0x386>
	}

	if (infoHeader.biBitCount != 24) {
 800281e:	8b7b      	ldrh	r3, [r7, #26]
 8002820:	2b18      	cmp	r3, #24
 8002822:	d015      	beq.n	8002850 <sdmmc_readBitmap+0x1a8>
		DebugLogPrintf(__FUNCTION__,
 8002824:	4955      	ldr	r1, [pc, #340]	@ (800297c <sdmmc_readBitmap+0x2d4>)
 8002826:	484c      	ldr	r0, [pc, #304]	@ (8002958 <sdmmc_readBitmap+0x2b0>)
 8002828:	f7ff fecc 	bl	80025c4 <DebugLogPrintf>
				"Error we only support 24bit pixel bitmap files");
		f_close(&SDFile);
 800282c:	484e      	ldr	r0, [pc, #312]	@ (8002968 <sdmmc_readBitmap+0x2c0>)
 800282e:	f012 fca3 	bl	8015178 <f_close>
		f_mount(&SDFatFS, (TCHAR const*) NULL, 0);
 8002832:	2200      	movs	r2, #0
 8002834:	2100      	movs	r1, #0
 8002836:	484a      	ldr	r0, [pc, #296]	@ (8002960 <sdmmc_readBitmap+0x2b8>)
 8002838:	f011 ff88 	bl	801474c <f_mount>
		inst->mounted = false;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	701a      	strb	r2, [r3, #0]
		osMutexRelease(sdCardAccessLockHandle);
 8002842:	4b43      	ldr	r3, [pc, #268]	@ (8002950 <sdmmc_readBitmap+0x2a8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f013 fac5 	bl	8015dd6 <osMutexRelease>
		return SDMMC_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0ee      	b.n	8002a2e <sdmmc_readBitmap+0x386>
	}

	// Store w/h
	inst->imgBuffer.widthPx = infoHeader.biWidth;
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	b2da      	uxtb	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	709a      	strb	r2, [r3, #2]
	inst->imgBuffer.heightPx = infoHeader.biHeight;
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	b2da      	uxtb	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	70da      	strb	r2, [r3, #3]
	// DebugLogPrintf(__FUNCTION__, "Bit Depth: %d", infoHeader.biBitCount);
	// DebugLogPrintf(__FUNCTION__, "Compression: %u", infoHeader.biCompression);
	// DebugLogPrintf(__FUNCTION__, "Image Size: %u bytes", infoHeader.biSizeImage);

	// Move the file pointer to the beginning of pixel data
	res = f_lseek(&SDFile, fileHeader.bfOffBits);
 8002860:	f8d7 303e 	ldr.w	r3, [r7, #62]	@ 0x3e
 8002864:	4619      	mov	r1, r3
 8002866:	4840      	ldr	r0, [pc, #256]	@ (8002968 <sdmmc_readBitmap+0x2c0>)
 8002868:	f012 fcb5 	bl	80151d6 <f_lseek>
 800286c:	4603      	mov	r3, r0
 800286e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (res != FR_OK) {
 8002872:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002876:	2b00      	cmp	r3, #0
 8002878:	d015      	beq.n	80028a6 <sdmmc_readBitmap+0x1fe>
		DebugLogPrintf(__FUNCTION__, "Error f_lseek");
 800287a:	4941      	ldr	r1, [pc, #260]	@ (8002980 <sdmmc_readBitmap+0x2d8>)
 800287c:	4836      	ldr	r0, [pc, #216]	@ (8002958 <sdmmc_readBitmap+0x2b0>)
 800287e:	f7ff fea1 	bl	80025c4 <DebugLogPrintf>
		f_close(&SDFile);
 8002882:	4839      	ldr	r0, [pc, #228]	@ (8002968 <sdmmc_readBitmap+0x2c0>)
 8002884:	f012 fc78 	bl	8015178 <f_close>
		f_mount(&SDFatFS, (TCHAR const*) NULL, 0);
 8002888:	2200      	movs	r2, #0
 800288a:	2100      	movs	r1, #0
 800288c:	4834      	ldr	r0, [pc, #208]	@ (8002960 <sdmmc_readBitmap+0x2b8>)
 800288e:	f011 ff5d 	bl	801474c <f_mount>
		inst->mounted = false;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	701a      	strb	r2, [r3, #0]
		osMutexRelease(sdCardAccessLockHandle);
 8002898:	4b2d      	ldr	r3, [pc, #180]	@ (8002950 <sdmmc_readBitmap+0x2a8>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f013 fa9a 	bl	8015dd6 <osMutexRelease>
		return SDMMC_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e0c3      	b.n	8002a2e <sdmmc_readBitmap+0x386>
	}

	// Read the pixel data and convert from 24bit to 16bit
	for (int row = 0; row < infoHeader.biHeight; row++) {
 80028a6:	2300      	movs	r3, #0
 80028a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80028aa:	e0aa      	b.n	8002a02 <sdmmc_readBitmap+0x35a>
 80028ac:	466b      	mov	r3, sp
 80028ae:	461e      	mov	r6, r3
		uint32_t rowSize = infoHeader.biWidth * 3;
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	4613      	mov	r3, r2
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	4413      	add	r3, r2
 80028b8:	653b      	str	r3, [r7, #80]	@ 0x50
		uint8_t rowData[rowSize];
 80028ba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80028bc:	460b      	mov	r3, r1
 80028be:	3b01      	subs	r3, #1
 80028c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028c2:	2300      	movs	r3, #0
 80028c4:	460c      	mov	r4, r1
 80028c6:	461d      	mov	r5, r3
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	f04f 0300 	mov.w	r3, #0
 80028d0:	00eb      	lsls	r3, r5, #3
 80028d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028d6:	00e2      	lsls	r2, r4, #3
 80028d8:	2300      	movs	r3, #0
 80028da:	4688      	mov	r8, r1
 80028dc:	4699      	mov	r9, r3
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	f04f 0300 	mov.w	r3, #0
 80028e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028f2:	1dcb      	adds	r3, r1, #7
 80028f4:	08db      	lsrs	r3, r3, #3
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	ebad 0d03 	sub.w	sp, sp, r3
 80028fc:	466b      	mov	r3, sp
 80028fe:	3300      	adds	r3, #0
 8002900:	64bb      	str	r3, [r7, #72]	@ 0x48
		res = f_read(&SDFile, &rowData, rowSize, NULL);
 8002902:	2300      	movs	r3, #0
 8002904:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002906:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002908:	4817      	ldr	r0, [pc, #92]	@ (8002968 <sdmmc_readBitmap+0x2c0>)
 800290a:	f012 fa3e 	bl	8014d8a <f_read>
 800290e:	4603      	mov	r3, r0
 8002910:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res != FR_OK) {
 8002914:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002918:	2b00      	cmp	r3, #0
 800291a:	d016      	beq.n	800294a <sdmmc_readBitmap+0x2a2>
			DebugLogPrintf(__FUNCTION__, "Error reading bitmap pixel data");
 800291c:	4919      	ldr	r1, [pc, #100]	@ (8002984 <sdmmc_readBitmap+0x2dc>)
 800291e:	480e      	ldr	r0, [pc, #56]	@ (8002958 <sdmmc_readBitmap+0x2b0>)
 8002920:	f7ff fe50 	bl	80025c4 <DebugLogPrintf>
			f_close(&SDFile);
 8002924:	4810      	ldr	r0, [pc, #64]	@ (8002968 <sdmmc_readBitmap+0x2c0>)
 8002926:	f012 fc27 	bl	8015178 <f_close>
			f_mount(&SDFatFS, (TCHAR const*) NULL, 0);
 800292a:	2200      	movs	r2, #0
 800292c:	2100      	movs	r1, #0
 800292e:	480c      	ldr	r0, [pc, #48]	@ (8002960 <sdmmc_readBitmap+0x2b8>)
 8002930:	f011 ff0c 	bl	801474c <f_mount>
			inst->mounted = false;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	701a      	strb	r2, [r3, #0]
			osMutexRelease(sdCardAccessLockHandle);
 800293a:	4b05      	ldr	r3, [pc, #20]	@ (8002950 <sdmmc_readBitmap+0x2a8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f013 fa49 	bl	8015dd6 <osMutexRelease>
			return SDMMC_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	46b5      	mov	sp, r6
 8002948:	e071      	b.n	8002a2e <sdmmc_readBitmap+0x386>
		}

		for (int col = 0; col < infoHeader.biWidth; col++) {
 800294a:	2300      	movs	r3, #0
 800294c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800294e:	e050      	b.n	80029f2 <sdmmc_readBitmap+0x34a>
 8002950:	200031b0 	.word	0x200031b0
 8002954:	0801e940 	.word	0x0801e940
 8002958:	0801ee48 	.word	0x0801ee48
 800295c:	0801e94c 	.word	0x0801e94c
 8002960:	20003214 	.word	0x20003214
 8002964:	0801e950 	.word	0x0801e950
 8002968:	2000344c 	.word	0x2000344c
 800296c:	0801e96c 	.word	0x0801e96c
 8002970:	0801e980 	.word	0x0801e980
 8002974:	0801e99c 	.word	0x0801e99c
 8002978:	0801e9bc 	.word	0x0801e9bc
 800297c:	0801e9e0 	.word	0x0801e9e0
 8002980:	0801ea10 	.word	0x0801ea10
 8002984:	0801ea20 	.word	0x0801ea20
			unsigned char blue = rowData[col * 3];
 8002988:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800298a:	4613      	mov	r3, r2
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	4413      	add	r3, r2
 8002990:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002992:	5cd3      	ldrb	r3, [r2, r3]
 8002994:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			unsigned char green = rowData[(col * 3) + 1];
 8002998:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800299a:	4613      	mov	r3, r2
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	4413      	add	r3, r2
 80029a0:	3301      	adds	r3, #1
 80029a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80029a4:	5cd3      	ldrb	r3, [r2, r3]
 80029a6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
			unsigned char red = rowData[(col * 3) + 2];
 80029aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80029ac:	4613      	mov	r3, r2
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	4413      	add	r3, r2
 80029b2:	3302      	adds	r3, #2
 80029b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80029b6:	5cd3      	ldrb	r3, [r2, r3]
 80029b8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

			// Convert the 24-bit RGB pixel to 16-bit color
			unsigned short color16 = convert24to16(red, green, blue);
 80029bc:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80029c0:	f897 1046 	ldrb.w	r1, [r7, #70]	@ 0x46
 80029c4:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 f83b 	bl	8002a44 <convert24to16>
 80029ce:	4603      	mov	r3, r0
 80029d0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

			// Store converted pixel color
			inst->imgBuffer.buffer[(row * infoHeader.biWidth) + col] = color16;
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80029d8:	fb03 f202 	mul.w	r2, r3, r2
 80029dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029de:	4413      	add	r3, r2
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	4413      	add	r3, r2
 80029e6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80029ea:	809a      	strh	r2, [r3, #4]
		for (int col = 0; col < infoHeader.biWidth; col++) {
 80029ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029ee:	3301      	adds	r3, #1
 80029f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80029f6:	429a      	cmp	r2, r3
 80029f8:	dbc6      	blt.n	8002988 <sdmmc_readBitmap+0x2e0>
 80029fa:	46b5      	mov	sp, r6
	for (int row = 0; row < infoHeader.biHeight; row++) {
 80029fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029fe:	3301      	adds	r3, #1
 8002a00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002a06:	429a      	cmp	r2, r3
 8002a08:	f6ff af50 	blt.w	80028ac <sdmmc_readBitmap+0x204>
		}
	}

	f_close(&SDFile);
 8002a0c:	480a      	ldr	r0, [pc, #40]	@ (8002a38 <sdmmc_readBitmap+0x390>)
 8002a0e:	f012 fbb3 	bl	8015178 <f_close>
	f_mount(&SDFatFS, (TCHAR const*) NULL, 0);
 8002a12:	2200      	movs	r2, #0
 8002a14:	2100      	movs	r1, #0
 8002a16:	4809      	ldr	r0, [pc, #36]	@ (8002a3c <sdmmc_readBitmap+0x394>)
 8002a18:	f011 fe98 	bl	801474c <f_mount>
	inst->mounted = false;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	701a      	strb	r2, [r3, #0]
	osMutexRelease(sdCardAccessLockHandle);
 8002a22:	4b07      	ldr	r3, [pc, #28]	@ (8002a40 <sdmmc_readBitmap+0x398>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f013 f9d5 	bl	8015dd6 <osMutexRelease>

	return SDMMC_SUCCESS;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3764      	adds	r7, #100	@ 0x64
 8002a32:	46bd      	mov	sp, r7
 8002a34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002a38:	2000344c 	.word	0x2000344c
 8002a3c:	20003214 	.word	0x20003214
 8002a40:	200031b0 	.word	0x200031b0

08002a44 <convert24to16>:

// Function to convert a 24-bit RGB pixel to a 16-bit RGB (5-6-5) pixel
unsigned short convert24to16(unsigned char r, unsigned char g, unsigned char b) {
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	71fb      	strb	r3, [r7, #7]
 8002a4e:	460b      	mov	r3, r1
 8002a50:	71bb      	strb	r3, [r7, #6]
 8002a52:	4613      	mov	r3, r2
 8002a54:	717b      	strb	r3, [r7, #5]
	// Red (8-bit -> 5-bit)
	unsigned short red = (r >> 3) & 0x1F; // 5 bits for red
 8002a56:	79fb      	ldrb	r3, [r7, #7]
 8002a58:	08db      	lsrs	r3, r3, #3
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	f003 031f 	and.w	r3, r3, #31
 8002a60:	81fb      	strh	r3, [r7, #14]
	// Green (8-bit -> 6-bit)
	unsigned short green = (g >> 2) & 0x3F; // 6 bits for green
 8002a62:	79bb      	ldrb	r3, [r7, #6]
 8002a64:	089b      	lsrs	r3, r3, #2
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a6c:	81bb      	strh	r3, [r7, #12]
	// Blue (8-bit -> 5-bit)
	unsigned short blue = (b >> 3) & 0x1F; // 5 bits for blue
 8002a6e:	797b      	ldrb	r3, [r7, #5]
 8002a70:	08db      	lsrs	r3, r3, #3
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	817b      	strh	r3, [r7, #10]

	// Combine into a 16-bit value (5-6-5 format)
	unsigned short pixel16 = (red << 11) | (green << 5) | blue;
 8002a7a:	89fb      	ldrh	r3, [r7, #14]
 8002a7c:	02db      	lsls	r3, r3, #11
 8002a7e:	b21a      	sxth	r2, r3
 8002a80:	89bb      	ldrh	r3, [r7, #12]
 8002a82:	015b      	lsls	r3, r3, #5
 8002a84:	b21b      	sxth	r3, r3
 8002a86:	4313      	orrs	r3, r2
 8002a88:	b21a      	sxth	r2, r3
 8002a8a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	b21b      	sxth	r3, r3
 8002a92:	813b      	strh	r3, [r7, #8]

	return pixel16;
 8002a94:	893b      	ldrh	r3, [r7, #8]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
	...

08002aa4 <tft_hal_init>:
//------------------------------------------------------------------------
// Public Functions
//------------------------------------------------------------------------

void tft_hal_init(tft_hal_t *inst)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
    // Setup HAL function pointers
    inst->pwrCtrl = &tft_pwr_ctrl;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a11      	ldr	r2, [pc, #68]	@ (8002af4 <tft_hal_init+0x50>)
 8002ab0:	601a      	str	r2, [r3, #0]
    inst->spiBegin = &tft_cs_begin;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a10      	ldr	r2, [pc, #64]	@ (8002af8 <tft_hal_init+0x54>)
 8002ab6:	605a      	str	r2, [r3, #4]
    inst->spiEnd = &tft_cs_end;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a10      	ldr	r2, [pc, #64]	@ (8002afc <tft_hal_init+0x58>)
 8002abc:	609a      	str	r2, [r3, #8]
    inst->spiCmd = &tft_sendCommand;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a0f      	ldr	r2, [pc, #60]	@ (8002b00 <tft_hal_init+0x5c>)
 8002ac2:	60da      	str	r2, [r3, #12]
    inst->spiData8 = &tft_sendData8;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a0f      	ldr	r2, [pc, #60]	@ (8002b04 <tft_hal_init+0x60>)
 8002ac8:	611a      	str	r2, [r3, #16]
    inst->spiData16 = &tft_sendData16;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a0e      	ldr	r2, [pc, #56]	@ (8002b08 <tft_hal_init+0x64>)
 8002ace:	615a      	str	r2, [r3, #20]
    inst->spiData32 = &tft_sendData32;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a0e      	ldr	r2, [pc, #56]	@ (8002b0c <tft_hal_init+0x68>)
 8002ad4:	619a      	str	r2, [r3, #24]
    inst->spiDataDma = &tft_sendDataDma;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a0d      	ldr	r2, [pc, #52]	@ (8002b10 <tft_hal_init+0x6c>)
 8002ada:	61da      	str	r2, [r3, #28]
    inst->delay = &tft_delay;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a0d      	ldr	r2, [pc, #52]	@ (8002b14 <tft_hal_init+0x70>)
 8002ae0:	621a      	str	r2, [r3, #32]

    // Keep CS always enabled
    HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_RESET);
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2140      	movs	r1, #64	@ 0x40
 8002ae6:	480c      	ldr	r0, [pc, #48]	@ (8002b18 <tft_hal_init+0x74>)
 8002ae8:	f004 fa76 	bl	8006fd8 <HAL_GPIO_WritePin>
}
 8002aec:	bf00      	nop
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	08002b1d 	.word	0x08002b1d
 8002af8:	08002b59 	.word	0x08002b59
 8002afc:	08002b69 	.word	0x08002b69
 8002b00:	08002b79 	.word	0x08002b79
 8002b04:	08002bc9 	.word	0x08002bc9
 8002b08:	08002bfd 	.word	0x08002bfd
 8002b0c:	08002c45 	.word	0x08002c45
 8002b10:	08002c99 	.word	0x08002c99
 8002b14:	08002ccd 	.word	0x08002ccd
 8002b18:	48000800 	.word	0x48000800

08002b1c <tft_pwr_ctrl>:
//------------------------------------------------------------------------
// Private Functions
//------------------------------------------------------------------------

static tft_hal_return_e tft_pwr_ctrl(bool enable)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, GPIO_PIN_RESET);
 8002b26:	2200      	movs	r2, #0
 8002b28:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002b2c:	4809      	ldr	r0, [pc, #36]	@ (8002b54 <tft_pwr_ctrl+0x38>)
 8002b2e:	f004 fa53 	bl	8006fd8 <HAL_GPIO_WritePin>

    if (enable)
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d008      	beq.n	8002b4a <tft_pwr_ctrl+0x2e>
    {
        HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, GPIO_PIN_SET);
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002b3e:	4805      	ldr	r0, [pc, #20]	@ (8002b54 <tft_pwr_ctrl+0x38>)
 8002b40:	f004 fa4a 	bl	8006fd8 <HAL_GPIO_WritePin>
        //HAL_Delay(100);
        osDelay(100);
 8002b44:	2064      	movs	r0, #100	@ 0x64
 8002b46:	f013 f85a 	bl	8015bfe <osDelay>
    }

    return TFT_HAL_SUCCESS;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	48000400 	.word	0x48000400

08002b58 <tft_cs_begin>:

static tft_hal_return_e tft_cs_begin(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
    // Enabling chip select breaks the screen
    //HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_RESET);
    //HAL_Delay(10);

	return TFT_HAL_SUCCESS;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <tft_cs_end>:

static tft_hal_return_e tft_cs_end(void)
{    
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
    // Enabling chip select breaks the screen
    //HAL_Delay(10);
    //HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_SET);

	return TFT_HAL_SUCCESS;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <tft_sendCommand>:

static tft_hal_return_e tft_sendCommand(uint8_t cmd)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	71fb      	strb	r3, [r7, #7]
	// DC line - Command = 0
    HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_RESET);
 8002b82:	2200      	movs	r2, #0
 8002b84:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002b88:	480d      	ldr	r0, [pc, #52]	@ (8002bc0 <tft_sendCommand+0x48>)
 8002b8a:	f004 fa25 	bl	8006fd8 <HAL_GPIO_WritePin>

    HAL_StatusTypeDef respStat = HAL_SPI_Transmit(&hspi2, (uint8_t *)&cmd, 1, HAL_MAX_DELAY);
 8002b8e:	1df9      	adds	r1, r7, #7
 8002b90:	f04f 33ff 	mov.w	r3, #4294967295
 8002b94:	2201      	movs	r2, #1
 8002b96:	480b      	ldr	r0, [pc, #44]	@ (8002bc4 <tft_sendCommand+0x4c>)
 8002b98:	f009 fdc3 	bl	800c722 <HAL_SPI_Transmit>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	73fb      	strb	r3, [r7, #15]
    if (respStat != HAL_OK)
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <tft_sendCommand+0x32>
    {
        return TFT_HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e006      	b.n	8002bb8 <tft_sendCommand+0x40>
    }

    // DC line - Data = 1
    HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_SET);
 8002baa:	2201      	movs	r2, #1
 8002bac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002bb0:	4803      	ldr	r0, [pc, #12]	@ (8002bc0 <tft_sendCommand+0x48>)
 8002bb2:	f004 fa11 	bl	8006fd8 <HAL_GPIO_WritePin>

    return TFT_HAL_SUCCESS;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	48000400 	.word	0x48000400
 8002bc4:	20002f54 	.word	0x20002f54

08002bc8 <tft_sendData8>:

static tft_hal_return_e tft_sendData8(uint8_t data)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef respStat = HAL_SPI_Transmit(&hspi2, (uint8_t *)&data, 1, HAL_MAX_DELAY);
 8002bd2:	1df9      	adds	r1, r7, #7
 8002bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd8:	2201      	movs	r2, #1
 8002bda:	4807      	ldr	r0, [pc, #28]	@ (8002bf8 <tft_sendData8+0x30>)
 8002bdc:	f009 fda1 	bl	800c722 <HAL_SPI_Transmit>
 8002be0:	4603      	mov	r3, r0
 8002be2:	73fb      	strb	r3, [r7, #15]
    if (respStat != HAL_OK)
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <tft_sendData8+0x26>
    {
        return TFT_HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <tft_sendData8+0x28>
    }

    return TFT_HAL_SUCCESS;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	20002f54 	.word	0x20002f54

08002bfc <tft_sendData16>:

static tft_hal_return_e tft_sendData16(uint16_t data)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	80fb      	strh	r3, [r7, #6]
    uint8_t u8buff[2];
    u8buff[0] = data >> 8;
 8002c06:	88fb      	ldrh	r3, [r7, #6]
 8002c08:	0a1b      	lsrs	r3, r3, #8
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	733b      	strb	r3, [r7, #12]
    u8buff[1] = data & 0xff;
 8002c10:	88fb      	ldrh	r3, [r7, #6]
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	737b      	strb	r3, [r7, #13]

    HAL_StatusTypeDef respStat = HAL_SPI_Transmit(&hspi2, (uint8_t *)&u8buff, 2, HAL_MAX_DELAY);
 8002c16:	f107 010c 	add.w	r1, r7, #12
 8002c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c1e:	2202      	movs	r2, #2
 8002c20:	4807      	ldr	r0, [pc, #28]	@ (8002c40 <tft_sendData16+0x44>)
 8002c22:	f009 fd7e 	bl	800c722 <HAL_SPI_Transmit>
 8002c26:	4603      	mov	r3, r0
 8002c28:	73fb      	strb	r3, [r7, #15]
    if (respStat != HAL_OK)
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <tft_sendData16+0x38>
    {
        return TFT_HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e000      	b.n	8002c36 <tft_sendData16+0x3a>
    }

    return TFT_HAL_SUCCESS;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20002f54 	.word	0x20002f54

08002c44 <tft_sendData32>:

static tft_hal_return_e tft_sendData32(uint32_t data)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
    uint8_t u8buff[4];
    u8buff[0] = data >> 24;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	0e1b      	lsrs	r3, r3, #24
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	723b      	strb	r3, [r7, #8]
    u8buff[1] = data >> 16;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	0c1b      	lsrs	r3, r3, #16
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	727b      	strb	r3, [r7, #9]
    u8buff[2] = data >> 8;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	0a1b      	lsrs	r3, r3, #8
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	72bb      	strb	r3, [r7, #10]
    u8buff[3] = data & 0xff;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	72fb      	strb	r3, [r7, #11]

    HAL_StatusTypeDef respStat = HAL_SPI_Transmit(&hspi2, (uint8_t *)&u8buff, 4, HAL_MAX_DELAY);
 8002c6a:	f107 0108 	add.w	r1, r7, #8
 8002c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c72:	2204      	movs	r2, #4
 8002c74:	4807      	ldr	r0, [pc, #28]	@ (8002c94 <tft_sendData32+0x50>)
 8002c76:	f009 fd54 	bl	800c722 <HAL_SPI_Transmit>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	73fb      	strb	r3, [r7, #15]
    if (respStat != HAL_OK)
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <tft_sendData32+0x44>
    {
        return TFT_HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e000      	b.n	8002c8a <tft_sendData32+0x46>
    }

    return TFT_HAL_SUCCESS;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	20002f54 	.word	0x20002f54

08002c98 <tft_sendDataDma>:

static tft_hal_return_e tft_sendDataDma(uint8_t *data, uint16_t len)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	807b      	strh	r3, [r7, #2]
    HAL_StatusTypeDef respStat = HAL_SPI_Transmit_DMA(&hspi2, data, len);
 8002ca4:	887b      	ldrh	r3, [r7, #2]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	4807      	ldr	r0, [pc, #28]	@ (8002cc8 <tft_sendDataDma+0x30>)
 8002cac:	f009 feb0 	bl	800ca10 <HAL_SPI_Transmit_DMA>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	73fb      	strb	r3, [r7, #15]
    if (respStat != HAL_OK)
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <tft_sendDataDma+0x26>
    {
        return TFT_HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <tft_sendDataDma+0x28>
    }

    return TFT_HAL_SUCCESS;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	20002f54 	.word	0x20002f54

08002ccc <tft_delay>:

static tft_hal_return_e tft_delay(uint32_t msec)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
    osDelay(msec);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f012 ff92 	bl	8015bfe <osDelay>
}
 8002cda:	bf00      	nop
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <tft_st7789_init>:
//------------------------------------------------------------------------
// Public Functions
//------------------------------------------------------------------------

ST77XX_Return_e tft_st7789_init(tft_st7789_instance_t *inst, uint16_t width, uint16_t height)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	807b      	strh	r3, [r7, #2]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	803b      	strh	r3, [r7, #0]
    inst->_rowstart = 0; // inst->_rowstart2 = (int)((320 - height) / 2);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	725a      	strb	r2, [r3, #9]
    inst->_colstart = 0; // inst->_colstart2 = (int)((240 - width) / 2);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	721a      	strb	r2, [r3, #8]

    inst->windowWidth = width;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	887a      	ldrh	r2, [r7, #2]
 8002d04:	801a      	strh	r2, [r3, #0]
    inst->windowHeight = height;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	883a      	ldrh	r2, [r7, #0]
 8002d0a:	805a      	strh	r2, [r3, #2]

    // Link HAL
    tft_hal_init((tft_hal_t *)&(inst->hal));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3318      	adds	r3, #24
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff fec7 	bl	8002aa4 <tft_hal_init>

    // Take device out of reset
    if (inst->hal.pwrCtrl == 0)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <tft_st7789_init+0x3e>
        return ST77XX_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e015      	b.n	8002d4e <tft_st7789_init+0x6a>
    inst->hal.pwrCtrl(true);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	2001      	movs	r0, #1
 8002d28:	4798      	blx	r3

    // Execute init commands for ST7789 screen
    if (tft_st7789_startupConfig(inst) != ST77XX_SUCCESS)
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 fc6c 	bl	8003608 <tft_st7789_startupConfig>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <tft_st7789_init+0x56>
    {
        return ST77XX_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e009      	b.n	8002d4e <tft_st7789_init+0x6a>
    }

    if (tft_st7789_setRotation(inst, 0) != ST77XX_SUCCESS)
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f80b 	bl	8002d58 <tft_st7789_setRotation>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <tft_st7789_init+0x68>
    {
        return ST77XX_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e000      	b.n	8002d4e <tft_st7789_init+0x6a>
    }

    return ST77XX_SUCCESS;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
	...

08002d58 <tft_st7789_setRotation>:

ST77XX_Return_e tft_st7789_setRotation(tft_st7789_instance_t *inst, uint8_t m)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	460b      	mov	r3, r1
 8002d62:	70fb      	strb	r3, [r7, #3]
    uint8_t madctl = 0;
 8002d64:	2300      	movs	r3, #0
 8002d66:	73fb      	strb	r3, [r7, #15]

    inst->rotation = m & 3; // can't be higher than 3
 8002d68:	78fb      	ldrb	r3, [r7, #3]
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	731a      	strb	r2, [r3, #12]

    switch (inst->rotation)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	7b1b      	ldrb	r3, [r3, #12]
 8002d78:	2b03      	cmp	r3, #3
 8002d7a:	d857      	bhi.n	8002e2c <tft_st7789_setRotation+0xd4>
 8002d7c:	a201      	add	r2, pc, #4	@ (adr r2, 8002d84 <tft_st7789_setRotation+0x2c>)
 8002d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d82:	bf00      	nop
 8002d84:	08002d95 	.word	0x08002d95
 8002d88:	08002dbb 	.word	0x08002dbb
 8002d8c:	08002de1 	.word	0x08002de1
 8002d90:	08002e07 	.word	0x08002e07
    {
    case 0:
        madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 8002d94:	23c0      	movs	r3, #192	@ 0xc0
 8002d96:	73fb      	strb	r3, [r7, #15]
        inst->xstart = inst->_colstart;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	7a1a      	ldrb	r2, [r3, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	735a      	strb	r2, [r3, #13]
        inst->ystart = inst->_rowstart;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	7a5a      	ldrb	r2, [r3, #9]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	739a      	strb	r2, [r3, #14]
        inst->width = inst->windowWidth;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	881a      	ldrh	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	809a      	strh	r2, [r3, #4]
        inst->height = inst->windowHeight;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	885a      	ldrh	r2, [r3, #2]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	80da      	strh	r2, [r3, #6]
        break;
 8002db8:	e038      	b.n	8002e2c <tft_st7789_setRotation+0xd4>
    case 1:
        madctl = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 8002dba:	23a0      	movs	r3, #160	@ 0xa0
 8002dbc:	73fb      	strb	r3, [r7, #15]
        inst->xstart = inst->_rowstart;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	7a5a      	ldrb	r2, [r3, #9]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	735a      	strb	r2, [r3, #13]
        inst->ystart = inst->_colstart2;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	7a9a      	ldrb	r2, [r3, #10]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	739a      	strb	r2, [r3, #14]
        inst->height = inst->windowWidth;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	881a      	ldrh	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	80da      	strh	r2, [r3, #6]
        inst->width = inst->windowHeight;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	885a      	ldrh	r2, [r3, #2]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	809a      	strh	r2, [r3, #4]
        break;
 8002dde:	e025      	b.n	8002e2c <tft_st7789_setRotation+0xd4>
    case 2:
        madctl = ST77XX_MADCTL_RGB;
 8002de0:	2300      	movs	r3, #0
 8002de2:	73fb      	strb	r3, [r7, #15]
        inst->xstart = inst->_colstart2;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	7a9a      	ldrb	r2, [r3, #10]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	735a      	strb	r2, [r3, #13]
        inst->ystart = inst->_rowstart2;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	7ada      	ldrb	r2, [r3, #11]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	739a      	strb	r2, [r3, #14]
        inst->width = inst->windowWidth;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	881a      	ldrh	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	809a      	strh	r2, [r3, #4]
        inst->height = inst->windowHeight;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	885a      	ldrh	r2, [r3, #2]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	80da      	strh	r2, [r3, #6]
        break;
 8002e04:	e012      	b.n	8002e2c <tft_st7789_setRotation+0xd4>
    case 3:
        madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 8002e06:	2360      	movs	r3, #96	@ 0x60
 8002e08:	73fb      	strb	r3, [r7, #15]
        inst->xstart = inst->_rowstart2;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	7ada      	ldrb	r2, [r3, #11]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	735a      	strb	r2, [r3, #13]
        inst->ystart = inst->_colstart;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	7a1a      	ldrb	r2, [r3, #8]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	739a      	strb	r2, [r3, #14]
        inst->height = inst->windowWidth;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	881a      	ldrh	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	80da      	strh	r2, [r3, #6]
        inst->width = inst->windowHeight;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	885a      	ldrh	r2, [r3, #2]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	809a      	strh	r2, [r3, #4]
        break;
 8002e2a:	bf00      	nop
    }

    if ((inst->hal.spiBegin == 0) ||
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	69db      	ldr	r3, [r3, #28]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00b      	beq.n	8002e4c <tft_st7789_setRotation+0xf4>
        (inst->hal.spiCmd == 0) ||
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    if ((inst->hal.spiBegin == 0) ||
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d007      	beq.n	8002e4c <tft_st7789_setRotation+0xf4>
        (inst->hal.spiData8 == 0) ||
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        (inst->hal.spiCmd == 0) ||
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <tft_st7789_setRotation+0xf4>
        (inst->hal.spiEnd == 0))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
        (inst->hal.spiData8 == 0) ||
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <tft_st7789_setRotation+0xf8>
        return ST77XX_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e00f      	b.n	8002e70 <tft_st7789_setRotation+0x118>

    inst->hal.spiBegin();
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	4798      	blx	r3
    inst->hal.spiCmd(ST77XX_MADCTL);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5a:	2036      	movs	r0, #54	@ 0x36
 8002e5c:	4798      	blx	r3
    inst->hal.spiData8(madctl);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e62:	7bfa      	ldrb	r2, [r7, #15]
 8002e64:	4610      	mov	r0, r2
 8002e66:	4798      	blx	r3
    inst->hal.spiEnd();
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	4798      	blx	r3

    return ST77XX_SUCCESS;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <tft_st7789_drawPixel>:

    return ST77XX_SUCCESS;
}

ST77XX_Return_e tft_st7789_drawPixel(tft_st7789_instance_t *inst, int16_t x, int16_t y, uint16_t color)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	4608      	mov	r0, r1
 8002e82:	4611      	mov	r1, r2
 8002e84:	461a      	mov	r2, r3
 8002e86:	4603      	mov	r3, r0
 8002e88:	817b      	strh	r3, [r7, #10]
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	813b      	strh	r3, [r7, #8]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	80fb      	strh	r3, [r7, #6]
    if ((inst->hal.spiBegin == 0) ||
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d007      	beq.n	8002eaa <tft_st7789_drawPixel+0x32>
        (inst->hal.spiData16 == 0) ||
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    if ((inst->hal.spiBegin == 0) ||
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <tft_st7789_drawPixel+0x32>
        (inst->hal.spiEnd == 0))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
        (inst->hal.spiData16 == 0) ||
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <tft_st7789_drawPixel+0x36>
        return ST77XX_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e029      	b.n	8002f02 <tft_st7789_drawPixel+0x8a>

    // Clip first...
    if ((x >= 0) && (x < inst->width) && (y >= 0) && (y < inst->height))
 8002eae:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	db24      	blt.n	8002f00 <tft_st7789_drawPixel+0x88>
 8002eb6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	8892      	ldrh	r2, [r2, #4]
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	da1e      	bge.n	8002f00 <tft_st7789_drawPixel+0x88>
 8002ec2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	db1a      	blt.n	8002f00 <tft_st7789_drawPixel+0x88>
 8002eca:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	88d2      	ldrh	r2, [r2, #6]
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	da14      	bge.n	8002f00 <tft_st7789_drawPixel+0x88>
    {
        // THEN set up transaction (if needed) and draw...

        inst->hal.spiBegin();
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	4798      	blx	r3
        tft_st7789_setAddrWindow(inst, x, y, 1, 1);
 8002edc:	8979      	ldrh	r1, [r7, #10]
 8002ede:	893a      	ldrh	r2, [r7, #8]
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 fc51 	bl	800378e <tft_st7789_setAddrWindow>
        inst->hal.spiData16(color);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef0:	88fa      	ldrh	r2, [r7, #6]
 8002ef2:	4610      	mov	r0, r2
 8002ef4:	4798      	blx	r3
        inst->hal.spiEnd();
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	4798      	blx	r3

        return ST77XX_SUCCESS;
 8002efc:	2300      	movs	r3, #0
 8002efe:	e000      	b.n	8002f02 <tft_st7789_drawPixel+0x8a>
    }

    return ST77XX_ERROR;
 8002f00:	2301      	movs	r3, #1
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <tft_st7789_fillRect>:

ST77XX_Return_e tft_st7789_fillRect(tft_st7789_instance_t *inst, int16_t x,
                                    int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b088      	sub	sp, #32
 8002f0e:	af02      	add	r7, sp, #8
 8002f10:	60f8      	str	r0, [r7, #12]
 8002f12:	4608      	mov	r0, r1
 8002f14:	4611      	mov	r1, r2
 8002f16:	461a      	mov	r2, r3
 8002f18:	4603      	mov	r3, r0
 8002f1a:	817b      	strh	r3, [r7, #10]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	813b      	strh	r3, [r7, #8]
 8002f20:	4613      	mov	r3, r2
 8002f22:	80fb      	strh	r3, [r7, #6]
    ST77XX_Return_e returnResult;

    if (w && h)
 8002f24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 8096 	beq.w	800305a <tft_st7789_fillRect+0x150>
 8002f2e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 8091 	beq.w	800305a <tft_st7789_fillRect+0x150>
    { // Nonzero width and height?
        if (w < 0)
 8002f38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	da0a      	bge.n	8002f56 <tft_st7789_fillRect+0x4c>
        {               // If negative width...
            x += w + 1; //   Move X to left edge
 8002f40:	88fa      	ldrh	r2, [r7, #6]
 8002f42:	897b      	ldrh	r3, [r7, #10]
 8002f44:	4413      	add	r3, r2
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3301      	adds	r3, #1
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	817b      	strh	r3, [r7, #10]
            w = -w;     //   Use positive width
 8002f4e:	88fb      	ldrh	r3, [r7, #6]
 8002f50:	425b      	negs	r3, r3
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	80fb      	strh	r3, [r7, #6]
        }
        if (x < inst->width)
 8002f56:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	8892      	ldrh	r2, [r2, #4]
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	da7b      	bge.n	800305a <tft_st7789_fillRect+0x150>
        { // Not off right
            if (h < 0)
 8002f62:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	da0a      	bge.n	8002f80 <tft_st7789_fillRect+0x76>
            {               // If negative height...
                y += h + 1; //   Move Y to top edge
 8002f6a:	8c3a      	ldrh	r2, [r7, #32]
 8002f6c:	893b      	ldrh	r3, [r7, #8]
 8002f6e:	4413      	add	r3, r2
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	3301      	adds	r3, #1
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	813b      	strh	r3, [r7, #8]
                h = -h;     //   Use positive height
 8002f78:	8c3b      	ldrh	r3, [r7, #32]
 8002f7a:	425b      	negs	r3, r3
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	843b      	strh	r3, [r7, #32]
            }
            if (y < inst->height)
 8002f80:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	88d2      	ldrh	r2, [r2, #6]
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	da66      	bge.n	800305a <tft_st7789_fillRect+0x150>
            { // Not off bottom
                int16_t x2 = x + w - 1;
 8002f8c:	897a      	ldrh	r2, [r7, #10]
 8002f8e:	88fb      	ldrh	r3, [r7, #6]
 8002f90:	4413      	add	r3, r2
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	3b01      	subs	r3, #1
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	82fb      	strh	r3, [r7, #22]
                if (x2 >= 0)
 8002f9a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	db5b      	blt.n	800305a <tft_st7789_fillRect+0x150>
                { // Not off left
                    int16_t y2 = y + h - 1;
 8002fa2:	893a      	ldrh	r2, [r7, #8]
 8002fa4:	8c3b      	ldrh	r3, [r7, #32]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	82bb      	strh	r3, [r7, #20]
                    if (y2 >= 0)
 8002fb0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	db50      	blt.n	800305a <tft_st7789_fillRect+0x150>
                    { // Not off top
                        // Rectangle partly or fully overlaps screen
                        if (x < 0)
 8002fb8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	da05      	bge.n	8002fcc <tft_st7789_fillRect+0xc2>
                        {
                            x = 0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	817b      	strh	r3, [r7, #10]
                            w = x2 + 1;
 8002fc4:	8afb      	ldrh	r3, [r7, #22]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	80fb      	strh	r3, [r7, #6]
                        } // Clip left
                        if (y < 0)
 8002fcc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	da05      	bge.n	8002fe0 <tft_st7789_fillRect+0xd6>
                        {
                            y = 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	813b      	strh	r3, [r7, #8]
                            h = y2 + 1;
 8002fd8:	8abb      	ldrh	r3, [r7, #20]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	843b      	strh	r3, [r7, #32]
                        } // Clip top
                        if (x2 >= inst->width)
 8002fe0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	8892      	ldrh	r2, [r2, #4]
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	db05      	blt.n	8002ff8 <tft_st7789_fillRect+0xee>
                        {
                            w = inst->width - x;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	889a      	ldrh	r2, [r3, #4]
 8002ff0:	897b      	ldrh	r3, [r7, #10]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	80fb      	strh	r3, [r7, #6]
                        } // Clip right
                        if (y2 >= inst->height)
 8002ff8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	88d2      	ldrh	r2, [r2, #6]
 8003000:	4293      	cmp	r3, r2
 8003002:	db05      	blt.n	8003010 <tft_st7789_fillRect+0x106>
                        {
                            h = inst->height - y;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	88da      	ldrh	r2, [r3, #6]
 8003008:	893b      	ldrh	r3, [r7, #8]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	b29b      	uxth	r3, r3
 800300e:	843b      	strh	r3, [r7, #32]
                        } // Clip bottom

                        if (inst->hal.spiBegin == 0)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <tft_st7789_fillRect+0x112>
                            return ST77XX_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e01f      	b.n	800305c <tft_st7789_fillRect+0x152>
                        inst->hal.spiBegin();
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	4798      	blx	r3

                        returnResult = tft_st7789_writeFillRectPreclipped(inst, x, y, w, h, color);
 8003022:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003026:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800302a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800302e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003030:	9301      	str	r3, [sp, #4]
 8003032:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	4603      	mov	r3, r0
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 f901 	bl	8003242 <tft_st7789_writeFillRectPreclipped>
 8003040:	4603      	mov	r3, r0
 8003042:	74fb      	strb	r3, [r7, #19]

                        if (inst->hal.spiEnd == 0)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <tft_st7789_fillRect+0x146>
                            return ST77XX_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e005      	b.n	800305c <tft_st7789_fillRect+0x152>
                        inst->hal.spiEnd();
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	4798      	blx	r3

                        return returnResult;
 8003056:	7cfb      	ldrb	r3, [r7, #19]
 8003058:	e000      	b.n	800305c <tft_st7789_fillRect+0x152>
                }
            }
        }
    }

    return ST77XX_ERROR;
 800305a:	2301      	movs	r3, #1
}
 800305c:	4618      	mov	r0, r3
 800305e:	3718      	adds	r7, #24
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <tft_st7789_drawFastHLine>:

ST77XX_Return_e tft_st7789_drawFastHLine(tft_st7789_instance_t *inst, int16_t x,
                                         int16_t y, int16_t w, uint16_t color)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b088      	sub	sp, #32
 8003068:	af02      	add	r7, sp, #8
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	4608      	mov	r0, r1
 800306e:	4611      	mov	r1, r2
 8003070:	461a      	mov	r2, r3
 8003072:	4603      	mov	r3, r0
 8003074:	817b      	strh	r3, [r7, #10]
 8003076:	460b      	mov	r3, r1
 8003078:	813b      	strh	r3, [r7, #8]
 800307a:	4613      	mov	r3, r2
 800307c:	80fb      	strh	r3, [r7, #6]
    if ((y >= 0) && (y < inst->height) && w)
 800307e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	db61      	blt.n	800314a <tft_st7789_drawFastHLine+0xe6>
 8003086:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	88d2      	ldrh	r2, [r2, #6]
 800308e:	4293      	cmp	r3, r2
 8003090:	da5b      	bge.n	800314a <tft_st7789_drawFastHLine+0xe6>
 8003092:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d057      	beq.n	800314a <tft_st7789_drawFastHLine+0xe6>
    { // Y on screen, nonzero width
        if (w < 0)
 800309a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	da0a      	bge.n	80030b8 <tft_st7789_drawFastHLine+0x54>
        {               // If negative width...
            x += w + 1; //   Move X to left edge
 80030a2:	88fa      	ldrh	r2, [r7, #6]
 80030a4:	897b      	ldrh	r3, [r7, #10]
 80030a6:	4413      	add	r3, r2
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	3301      	adds	r3, #1
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	817b      	strh	r3, [r7, #10]
            w = -w;     //   Use positive width
 80030b0:	88fb      	ldrh	r3, [r7, #6]
 80030b2:	425b      	negs	r3, r3
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	80fb      	strh	r3, [r7, #6]
        }
        if (x < inst->width)
 80030b8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	8892      	ldrh	r2, [r2, #4]
 80030c0:	4293      	cmp	r3, r2
 80030c2:	da42      	bge.n	800314a <tft_st7789_drawFastHLine+0xe6>
        { // Not off right
            int16_t x2 = x + w - 1;
 80030c4:	897a      	ldrh	r2, [r7, #10]
 80030c6:	88fb      	ldrh	r3, [r7, #6]
 80030c8:	4413      	add	r3, r2
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	3b01      	subs	r3, #1
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	82fb      	strh	r3, [r7, #22]
            if (x2 >= 0)
 80030d2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	db37      	blt.n	800314a <tft_st7789_drawFastHLine+0xe6>
            { // Not off left
                // Line partly or fully overlaps screen
                if (x < 0)
 80030da:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	da05      	bge.n	80030ee <tft_st7789_drawFastHLine+0x8a>
                {
                    x = 0;
 80030e2:	2300      	movs	r3, #0
 80030e4:	817b      	strh	r3, [r7, #10]
                    w = x2 + 1;
 80030e6:	8afb      	ldrh	r3, [r7, #22]
 80030e8:	3301      	adds	r3, #1
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	80fb      	strh	r3, [r7, #6]
                } // Clip left
                if (x2 >= inst->width)
 80030ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	8892      	ldrh	r2, [r2, #4]
 80030f6:	4293      	cmp	r3, r2
 80030f8:	db05      	blt.n	8003106 <tft_st7789_drawFastHLine+0xa2>
                {
                    w = inst->width - x;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	889a      	ldrh	r2, [r3, #4]
 80030fe:	897b      	ldrh	r3, [r7, #10]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	b29b      	uxth	r3, r3
 8003104:	80fb      	strh	r3, [r7, #6]
                } // Clip right

                if (inst->hal.spiBegin == 0)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <tft_st7789_drawFastHLine+0xae>
                    return ST77XX_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e01c      	b.n	800314c <tft_st7789_drawFastHLine+0xe8>
                inst->hal.spiBegin();
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	4798      	blx	r3

                tft_st7789_writeFillRectPreclipped(inst, x, y, w, 1, color);
 8003118:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800311c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003120:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003124:	8c3b      	ldrh	r3, [r7, #32]
 8003126:	9301      	str	r3, [sp, #4]
 8003128:	2301      	movs	r3, #1
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	4603      	mov	r3, r0
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f000 f887 	bl	8003242 <tft_st7789_writeFillRectPreclipped>

                if (inst->hal.spiEnd == 0)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <tft_st7789_drawFastHLine+0xdc>
                    return ST77XX_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e005      	b.n	800314c <tft_st7789_drawFastHLine+0xe8>
                inst->hal.spiEnd();
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	4798      	blx	r3

                return ST77XX_SUCCESS;
 8003146:	2300      	movs	r3, #0
 8003148:	e000      	b.n	800314c <tft_st7789_drawFastHLine+0xe8>
            }
        }
    }

    return ST77XX_ERROR;
 800314a:	2301      	movs	r3, #1
}
 800314c:	4618      	mov	r0, r3
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <tft_st7789_drawFastVLine>:

ST77XX_Return_e tft_st7789_drawFastVLine(tft_st7789_instance_t *inst, int16_t x,
                                         int16_t y, int16_t h, uint16_t color)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b088      	sub	sp, #32
 8003158:	af02      	add	r7, sp, #8
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	4608      	mov	r0, r1
 800315e:	4611      	mov	r1, r2
 8003160:	461a      	mov	r2, r3
 8003162:	4603      	mov	r3, r0
 8003164:	817b      	strh	r3, [r7, #10]
 8003166:	460b      	mov	r3, r1
 8003168:	813b      	strh	r3, [r7, #8]
 800316a:	4613      	mov	r3, r2
 800316c:	80fb      	strh	r3, [r7, #6]
    if ((x >= 0) && (x < inst->width) && h)
 800316e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003172:	2b00      	cmp	r3, #0
 8003174:	db60      	blt.n	8003238 <tft_st7789_drawFastVLine+0xe4>
 8003176:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	8892      	ldrh	r2, [r2, #4]
 800317e:	4293      	cmp	r3, r2
 8003180:	da5a      	bge.n	8003238 <tft_st7789_drawFastVLine+0xe4>
 8003182:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d056      	beq.n	8003238 <tft_st7789_drawFastVLine+0xe4>
    { // X on screen, nonzero height
        if (h < 0)
 800318a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800318e:	2b00      	cmp	r3, #0
 8003190:	da0a      	bge.n	80031a8 <tft_st7789_drawFastVLine+0x54>
        {               // If negative height...
            y += h + 1; //   Move Y to top edge
 8003192:	88fa      	ldrh	r2, [r7, #6]
 8003194:	893b      	ldrh	r3, [r7, #8]
 8003196:	4413      	add	r3, r2
 8003198:	b29b      	uxth	r3, r3
 800319a:	3301      	adds	r3, #1
 800319c:	b29b      	uxth	r3, r3
 800319e:	813b      	strh	r3, [r7, #8]
            h = -h;     //   Use positive height
 80031a0:	88fb      	ldrh	r3, [r7, #6]
 80031a2:	425b      	negs	r3, r3
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	80fb      	strh	r3, [r7, #6]
        }
        if (y < inst->height)
 80031a8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	88d2      	ldrh	r2, [r2, #6]
 80031b0:	4293      	cmp	r3, r2
 80031b2:	da41      	bge.n	8003238 <tft_st7789_drawFastVLine+0xe4>
        { // Not off bottom
            int16_t y2 = y + h - 1;
 80031b4:	893a      	ldrh	r2, [r7, #8]
 80031b6:	88fb      	ldrh	r3, [r7, #6]
 80031b8:	4413      	add	r3, r2
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	3b01      	subs	r3, #1
 80031be:	b29b      	uxth	r3, r3
 80031c0:	82fb      	strh	r3, [r7, #22]
            if (y2 >= 0)
 80031c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	db36      	blt.n	8003238 <tft_st7789_drawFastVLine+0xe4>
            { // Not off top
                // Line partly or fully overlaps screen
                if (y < 0)
 80031ca:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	da05      	bge.n	80031de <tft_st7789_drawFastVLine+0x8a>
                {
                    y = 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	813b      	strh	r3, [r7, #8]
                    h = y2 + 1;
 80031d6:	8afb      	ldrh	r3, [r7, #22]
 80031d8:	3301      	adds	r3, #1
 80031da:	b29b      	uxth	r3, r3
 80031dc:	80fb      	strh	r3, [r7, #6]
                } // Clip top
                if (y2 >= inst->height)
 80031de:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	88d2      	ldrh	r2, [r2, #6]
 80031e6:	4293      	cmp	r3, r2
 80031e8:	db05      	blt.n	80031f6 <tft_st7789_drawFastVLine+0xa2>
                {
                    h = inst->height - y;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	88da      	ldrh	r2, [r3, #6]
 80031ee:	893b      	ldrh	r3, [r7, #8]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	80fb      	strh	r3, [r7, #6]
                } // Clip bottom

                if (inst->hal.spiBegin == 0)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <tft_st7789_drawFastVLine+0xae>
                    return ST77XX_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e01b      	b.n	800323a <tft_st7789_drawFastVLine+0xe6>
                inst->hal.spiBegin();
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	4798      	blx	r3

                tft_st7789_writeFillRectPreclipped(inst, x, y, 1, h, color);
 8003208:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800320c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003210:	8c3b      	ldrh	r3, [r7, #32]
 8003212:	9301      	str	r3, [sp, #4]
 8003214:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	2301      	movs	r3, #1
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 f810 	bl	8003242 <tft_st7789_writeFillRectPreclipped>

                if (inst->hal.spiEnd == 0)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <tft_st7789_drawFastVLine+0xda>
                    return ST77XX_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e005      	b.n	800323a <tft_st7789_drawFastVLine+0xe6>
                inst->hal.spiEnd();
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	4798      	blx	r3

                return ST77XX_SUCCESS;
 8003234:	2300      	movs	r3, #0
 8003236:	e000      	b.n	800323a <tft_st7789_drawFastVLine+0xe6>
            }
        }
    }

    return ST77XX_ERROR;
 8003238:	2301      	movs	r3, #1
}
 800323a:	4618      	mov	r0, r3
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <tft_st7789_writeFillRectPreclipped>:

ST77XX_Return_e tft_st7789_writeFillRectPreclipped(tft_st7789_instance_t *inst,
                                                   int16_t x, int16_t y,
                                                   int16_t w, int16_t h,
                                                   uint16_t color)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b088      	sub	sp, #32
 8003246:	af02      	add	r7, sp, #8
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	4608      	mov	r0, r1
 800324c:	4611      	mov	r1, r2
 800324e:	461a      	mov	r2, r3
 8003250:	4603      	mov	r3, r0
 8003252:	817b      	strh	r3, [r7, #10]
 8003254:	460b      	mov	r3, r1
 8003256:	813b      	strh	r3, [r7, #8]
 8003258:	4613      	mov	r3, r2
 800325a:	80fb      	strh	r3, [r7, #6]
    ST77XX_Return_e returnResult;

    returnResult = tft_st7789_setAddrWindow(inst, x, y, w, h);
 800325c:	8979      	ldrh	r1, [r7, #10]
 800325e:	893a      	ldrh	r2, [r7, #8]
 8003260:	88f8      	ldrh	r0, [r7, #6]
 8003262:	8c3b      	ldrh	r3, [r7, #32]
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	4603      	mov	r3, r0
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f000 fa90 	bl	800378e <tft_st7789_setAddrWindow>
 800326e:	4603      	mov	r3, r0
 8003270:	75fb      	strb	r3, [r7, #23]
    if (returnResult != ST77XX_SUCCESS)
 8003272:	7dfb      	ldrb	r3, [r7, #23]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <tft_st7789_writeFillRectPreclipped+0x3a>
        return returnResult;
 8003278:	7dfb      	ldrb	r3, [r7, #23]
 800327a:	e012      	b.n	80032a2 <tft_st7789_writeFillRectPreclipped+0x60>

    returnResult = tft_st7789_writeColor(inst, color, (uint32_t)w * h);
 800327c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003280:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003284:	fb03 f202 	mul.w	r2, r3, r2
 8003288:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800328a:	4619      	mov	r1, r3
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 fade 	bl	800384e <tft_st7789_writeColor>
 8003292:	4603      	mov	r3, r0
 8003294:	75fb      	strb	r3, [r7, #23]
    if (returnResult != ST77XX_SUCCESS)
 8003296:	7dfb      	ldrb	r3, [r7, #23]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <tft_st7789_writeFillRectPreclipped+0x5e>
        return returnResult;
 800329c:	7dfb      	ldrb	r3, [r7, #23]
 800329e:	e000      	b.n	80032a2 <tft_st7789_writeFillRectPreclipped+0x60>

    // DebugLogPrintf(__FUNCTION__, "w=%d, h=%d", w, h);

    return ST77XX_SUCCESS;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	0000      	movs	r0, r0
 80032ac:	0000      	movs	r0, r0
	...

080032b0 <tft_st7789_drawArc>:
    int start_angle,
    int end_angle,
    uint16_t color,
    int8_t thicknessPx
)
{
 80032b0:	b5b0      	push	{r4, r5, r7, lr}
 80032b2:	b08a      	sub	sp, #40	@ 0x28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	4608      	mov	r0, r1
 80032ba:	4611      	mov	r1, r2
 80032bc:	461a      	mov	r2, r3
 80032be:	4603      	mov	r3, r0
 80032c0:	817b      	strh	r3, [r7, #10]
 80032c2:	460b      	mov	r3, r1
 80032c4:	813b      	strh	r3, [r7, #8]
 80032c6:	4613      	mov	r3, r2
 80032c8:	80fb      	strh	r3, [r7, #6]
    // Convert angles from degrees to radians for math functions
    float start_rad = start_angle * PI / 180.0f;
 80032ca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80032cc:	f7fd f92a 	bl	8000524 <__aeabi_i2d>
 80032d0:	a353      	add	r3, pc, #332	@ (adr r3, 8003420 <tft_st7789_drawArc+0x170>)
 80032d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d6:	f7fd f98f 	bl	80005f8 <__aeabi_dmul>
 80032da:	4602      	mov	r2, r0
 80032dc:	460b      	mov	r3, r1
 80032de:	4610      	mov	r0, r2
 80032e0:	4619      	mov	r1, r3
 80032e2:	f04f 0200 	mov.w	r2, #0
 80032e6:	4b50      	ldr	r3, [pc, #320]	@ (8003428 <tft_st7789_drawArc+0x178>)
 80032e8:	f7fd fab0 	bl	800084c <__aeabi_ddiv>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4610      	mov	r0, r2
 80032f2:	4619      	mov	r1, r3
 80032f4:	f7fd fc62 	bl	8000bbc <__aeabi_d2f>
 80032f8:	4603      	mov	r3, r0
 80032fa:	61fb      	str	r3, [r7, #28]
    float end_rad = end_angle * PI / 180.0f;
 80032fc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80032fe:	f7fd f911 	bl	8000524 <__aeabi_i2d>
 8003302:	a347      	add	r3, pc, #284	@ (adr r3, 8003420 <tft_st7789_drawArc+0x170>)
 8003304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003308:	f7fd f976 	bl	80005f8 <__aeabi_dmul>
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	4610      	mov	r0, r2
 8003312:	4619      	mov	r1, r3
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	4b43      	ldr	r3, [pc, #268]	@ (8003428 <tft_st7789_drawArc+0x178>)
 800331a:	f7fd fa97 	bl	800084c <__aeabi_ddiv>
 800331e:	4602      	mov	r2, r0
 8003320:	460b      	mov	r3, r1
 8003322:	4610      	mov	r0, r2
 8003324:	4619      	mov	r1, r3
 8003326:	f7fd fc49 	bl	8000bbc <__aeabi_d2f>
 800332a:	4603      	mov	r3, r0
 800332c:	61bb      	str	r3, [r7, #24]

    // Loop over the thickness, from radius-thickness/2 to radius+thickness/2
    for (int t = 0; t <= thicknessPx; t++)
 800332e:	2300      	movs	r3, #0
 8003330:	627b      	str	r3, [r7, #36]	@ 0x24
 8003332:	e06b      	b.n	800340c <tft_st7789_drawArc+0x15c>
    {
        // Adjust radius for the current thickness level
        int16_t current_radius = radius - t;
 8003334:	88fa      	ldrh	r2, [r7, #6]
 8003336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003338:	b29b      	uxth	r3, r3
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	b29b      	uxth	r3, r3
 800333e:	82fb      	strh	r3, [r7, #22]

        // Draw pixels along the arc by iterating over angles
        for (float angle = start_rad; angle <= end_rad; angle += 0.1f)
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	623b      	str	r3, [r7, #32]
 8003344:	e056      	b.n	80033f4 <tft_st7789_drawArc+0x144>
        {
            int16_t x = center_x + (int16_t)(current_radius * cos(angle));
 8003346:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800334a:	4618      	mov	r0, r3
 800334c:	f7fd f8ea 	bl	8000524 <__aeabi_i2d>
 8003350:	4604      	mov	r4, r0
 8003352:	460d      	mov	r5, r1
 8003354:	6a38      	ldr	r0, [r7, #32]
 8003356:	f7fd f8f7 	bl	8000548 <__aeabi_f2d>
 800335a:	4602      	mov	r2, r0
 800335c:	460b      	mov	r3, r1
 800335e:	ec43 2b10 	vmov	d0, r2, r3
 8003362:	f01a f8c1 	bl	801d4e8 <cos>
 8003366:	ec53 2b10 	vmov	r2, r3, d0
 800336a:	4620      	mov	r0, r4
 800336c:	4629      	mov	r1, r5
 800336e:	f7fd f943 	bl	80005f8 <__aeabi_dmul>
 8003372:	4602      	mov	r2, r0
 8003374:	460b      	mov	r3, r1
 8003376:	4610      	mov	r0, r2
 8003378:	4619      	mov	r1, r3
 800337a:	f7fd fbd7 	bl	8000b2c <__aeabi_d2iz>
 800337e:	4603      	mov	r3, r0
 8003380:	b21b      	sxth	r3, r3
 8003382:	b29a      	uxth	r2, r3
 8003384:	897b      	ldrh	r3, [r7, #10]
 8003386:	4413      	add	r3, r2
 8003388:	b29b      	uxth	r3, r3
 800338a:	82bb      	strh	r3, [r7, #20]
            int16_t y = center_y + (int16_t)(current_radius * sin(angle));
 800338c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003390:	4618      	mov	r0, r3
 8003392:	f7fd f8c7 	bl	8000524 <__aeabi_i2d>
 8003396:	4604      	mov	r4, r0
 8003398:	460d      	mov	r5, r1
 800339a:	6a38      	ldr	r0, [r7, #32]
 800339c:	f7fd f8d4 	bl	8000548 <__aeabi_f2d>
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	ec43 2b10 	vmov	d0, r2, r3
 80033a8:	f01a f8f2 	bl	801d590 <sin>
 80033ac:	ec53 2b10 	vmov	r2, r3, d0
 80033b0:	4620      	mov	r0, r4
 80033b2:	4629      	mov	r1, r5
 80033b4:	f7fd f920 	bl	80005f8 <__aeabi_dmul>
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	4610      	mov	r0, r2
 80033be:	4619      	mov	r1, r3
 80033c0:	f7fd fbb4 	bl	8000b2c <__aeabi_d2iz>
 80033c4:	4603      	mov	r3, r0
 80033c6:	b21b      	sxth	r3, r3
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	893b      	ldrh	r3, [r7, #8]
 80033cc:	4413      	add	r3, r2
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	827b      	strh	r3, [r7, #18]

            // Plot the pixel on the LCD
            tft_st7789_drawPixel(inst, x, y, color);
 80033d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80033d6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80033da:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f7ff fd4a 	bl	8002e78 <tft_st7789_drawPixel>
        for (float angle = start_rad; angle <= end_rad; angle += 0.1f)
 80033e4:	edd7 7a08 	vldr	s15, [r7, #32]
 80033e8:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800342c <tft_st7789_drawArc+0x17c>
 80033ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80033f0:	edc7 7a08 	vstr	s15, [r7, #32]
 80033f4:	ed97 7a08 	vldr	s14, [r7, #32]
 80033f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80033fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003404:	d99f      	bls.n	8003346 <tft_st7789_drawArc+0x96>
    for (int t = 0; t <= thicknessPx; t++)
 8003406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003408:	3301      	adds	r3, #1
 800340a:	627b      	str	r3, [r7, #36]	@ 0x24
 800340c:	f997 3044 	ldrsb.w	r3, [r7, #68]	@ 0x44
 8003410:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003412:	429a      	cmp	r2, r3
 8003414:	dd8e      	ble.n	8003334 <tft_st7789_drawArc+0x84>
        }
    }

    return ST77XX_SUCCESS;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3728      	adds	r7, #40	@ 0x28
 800341c:	46bd      	mov	sp, r7
 800341e:	bdb0      	pop	{r4, r5, r7, pc}
 8003420:	54442d18 	.word	0x54442d18
 8003424:	400921fb 	.word	0x400921fb
 8003428:	40668000 	.word	0x40668000
 800342c:	3dcccccd 	.word	0x3dcccccd

08003430 <tft_st7789_fillArc>:
    int16_t radius,
    int start_angle,
    int end_angle,
    uint16_t color
)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b088      	sub	sp, #32
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	4608      	mov	r0, r1
 800343a:	4611      	mov	r1, r2
 800343c:	461a      	mov	r2, r3
 800343e:	4603      	mov	r3, r0
 8003440:	817b      	strh	r3, [r7, #10]
 8003442:	460b      	mov	r3, r1
 8003444:	813b      	strh	r3, [r7, #8]
 8003446:	4613      	mov	r3, r2
 8003448:	80fb      	strh	r3, [r7, #6]
    // Draw the filled sector
    for (int16_t angle = start_angle; angle < end_angle; angle++)
 800344a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800344c:	83fb      	strh	r3, [r7, #30]
 800344e:	e080      	b.n	8003552 <tft_st7789_fillArc+0x122>
    {
        // Calculate sin and cos for the current angle
        float rad = angle * (PI / 180.0);
 8003450:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003454:	4618      	mov	r0, r3
 8003456:	f7fd f865 	bl	8000524 <__aeabi_i2d>
 800345a:	a345      	add	r3, pc, #276	@ (adr r3, 8003570 <tft_st7789_fillArc+0x140>)
 800345c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003460:	f7fd f8ca 	bl	80005f8 <__aeabi_dmul>
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	4610      	mov	r0, r2
 800346a:	4619      	mov	r1, r3
 800346c:	f7fd fba6 	bl	8000bbc <__aeabi_d2f>
 8003470:	4603      	mov	r3, r0
 8003472:	61bb      	str	r3, [r7, #24]
        int16_t cos_val = (int16_t)(cos(rad) * 1000);  // scale to avoid floating-point operations
 8003474:	69b8      	ldr	r0, [r7, #24]
 8003476:	f7fd f867 	bl	8000548 <__aeabi_f2d>
 800347a:	4602      	mov	r2, r0
 800347c:	460b      	mov	r3, r1
 800347e:	ec43 2b10 	vmov	d0, r2, r3
 8003482:	f01a f831 	bl	801d4e8 <cos>
 8003486:	ec51 0b10 	vmov	r0, r1, d0
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	4b36      	ldr	r3, [pc, #216]	@ (8003568 <tft_st7789_fillArc+0x138>)
 8003490:	f7fd f8b2 	bl	80005f8 <__aeabi_dmul>
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	4610      	mov	r0, r2
 800349a:	4619      	mov	r1, r3
 800349c:	f7fd fb46 	bl	8000b2c <__aeabi_d2iz>
 80034a0:	4603      	mov	r3, r0
 80034a2:	82fb      	strh	r3, [r7, #22]
        int16_t sin_val = (int16_t)(sin(rad) * 1000);  // scale to avoid floating-point operations
 80034a4:	69b8      	ldr	r0, [r7, #24]
 80034a6:	f7fd f84f 	bl	8000548 <__aeabi_f2d>
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	ec43 2b10 	vmov	d0, r2, r3
 80034b2:	f01a f86d 	bl	801d590 <sin>
 80034b6:	ec51 0b10 	vmov	r0, r1, d0
 80034ba:	f04f 0200 	mov.w	r2, #0
 80034be:	4b2a      	ldr	r3, [pc, #168]	@ (8003568 <tft_st7789_fillArc+0x138>)
 80034c0:	f7fd f89a 	bl	80005f8 <__aeabi_dmul>
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4610      	mov	r0, r2
 80034ca:	4619      	mov	r1, r3
 80034cc:	f7fd fb2e 	bl	8000b2c <__aeabi_d2iz>
 80034d0:	4603      	mov	r3, r0
 80034d2:	82bb      	strh	r3, [r7, #20]

        // Draw the radial lines
        for (int16_t r = 0; r < radius; r++)
 80034d4:	2300      	movs	r3, #0
 80034d6:	83bb      	strh	r3, [r7, #28]
 80034d8:	e02f      	b.n	800353a <tft_st7789_fillArc+0x10a>
        {
            // Calculate x and y for each pixel along the radial line
            int16_t x0 = center_x + (cos_val * r) / 1000;
 80034da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80034de:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80034e2:	fb02 f303 	mul.w	r3, r2, r3
 80034e6:	4a21      	ldr	r2, [pc, #132]	@ (800356c <tft_st7789_fillArc+0x13c>)
 80034e8:	fb82 1203 	smull	r1, r2, r2, r3
 80034ec:	1192      	asrs	r2, r2, #6
 80034ee:	17db      	asrs	r3, r3, #31
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	897b      	ldrh	r3, [r7, #10]
 80034f6:	4413      	add	r3, r2
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	827b      	strh	r3, [r7, #18]
            int16_t y0 = center_y + (sin_val * r) / 1000;
 80034fc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003500:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003504:	fb02 f303 	mul.w	r3, r2, r3
 8003508:	4a18      	ldr	r2, [pc, #96]	@ (800356c <tft_st7789_fillArc+0x13c>)
 800350a:	fb82 1203 	smull	r1, r2, r2, r3
 800350e:	1192      	asrs	r2, r2, #6
 8003510:	17db      	asrs	r3, r3, #31
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	b29a      	uxth	r2, r3
 8003516:	893b      	ldrh	r3, [r7, #8]
 8003518:	4413      	add	r3, r2
 800351a:	b29b      	uxth	r3, r3
 800351c:	823b      	strh	r3, [r7, #16]
            tft_st7789_drawPixel(inst, x0, y0, color);
 800351e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003520:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003524:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f7ff fca5 	bl	8002e78 <tft_st7789_drawPixel>
        for (int16_t r = 0; r < radius; r++)
 800352e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003532:	b29b      	uxth	r3, r3
 8003534:	3301      	adds	r3, #1
 8003536:	b29b      	uxth	r3, r3
 8003538:	83bb      	strh	r3, [r7, #28]
 800353a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800353e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003542:	429a      	cmp	r2, r3
 8003544:	dbc9      	blt.n	80034da <tft_st7789_fillArc+0xaa>
    for (int16_t angle = start_angle; angle < end_angle; angle++)
 8003546:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800354a:	b29b      	uxth	r3, r3
 800354c:	3301      	adds	r3, #1
 800354e:	b29b      	uxth	r3, r3
 8003550:	83fb      	strh	r3, [r7, #30]
 8003552:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003556:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003558:	429a      	cmp	r2, r3
 800355a:	f73f af79 	bgt.w	8003450 <tft_st7789_fillArc+0x20>
        }
    }

    return ST77XX_SUCCESS;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3720      	adds	r7, #32
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	408f4000 	.word	0x408f4000
 800356c:	10624dd3 	.word	0x10624dd3
 8003570:	a2529d39 	.word	0xa2529d39
 8003574:	3f91df46 	.word	0x3f91df46

08003578 <tft_st7789_drawImage>:
    int16_t xOffset,
    int16_t yOffset,
    int16_t width,
    int16_t height,
    uint16_t *imageBuffer)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	4608      	mov	r0, r1
 8003582:	4611      	mov	r1, r2
 8003584:	461a      	mov	r2, r3
 8003586:	4603      	mov	r3, r0
 8003588:	817b      	strh	r3, [r7, #10]
 800358a:	460b      	mov	r3, r1
 800358c:	813b      	strh	r3, [r7, #8]
 800358e:	4613      	mov	r3, r2
 8003590:	80fb      	strh	r3, [r7, #6]
    // Iterate over each row of pixels (BMP images are stored bottom-to-top)
    for (int y = height - 1; y >= 0; --y)
 8003592:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003596:	3b01      	subs	r3, #1
 8003598:	617b      	str	r3, [r7, #20]
 800359a:	e02d      	b.n	80035f8 <tft_st7789_drawImage+0x80>
    {
        // Iterate over each pixel in the row (BMP is stored as BGR, not RGB)
        for (int x = 0; x < width; ++x)
 800359c:	2300      	movs	r3, #0
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	e022      	b.n	80035e8 <tft_st7789_drawImage+0x70>
        {
            // Draw the pixel on the screen at the appropriate offset
            tft_st7789_drawPixel(inst,
                                 xOffset + x,                // X
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	897b      	ldrh	r3, [r7, #10]
 80035a8:	4413      	add	r3, r2
 80035aa:	b29b      	uxth	r3, r3
            tft_st7789_drawPixel(inst,
 80035ac:	b219      	sxth	r1, r3
                                 yOffset + (height - 1 - y), // Y
 80035ae:	8c3a      	ldrh	r2, [r7, #32]
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	893b      	ldrh	r3, [r7, #8]
 80035ba:	4413      	add	r3, r2
 80035bc:	b29b      	uxth	r3, r3
 80035be:	3b01      	subs	r3, #1
 80035c0:	b29b      	uxth	r3, r3
            tft_st7789_drawPixel(inst,
 80035c2:	b218      	sxth	r0, r3
								 imageBuffer[((y * width) + x)]);
 80035c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	fb03 f202 	mul.w	r2, r3, r2
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	4413      	add	r3, r2
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035d6:	4413      	add	r3, r2
            tft_st7789_drawPixel(inst,
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	4602      	mov	r2, r0
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f7ff fc4b 	bl	8002e78 <tft_st7789_drawPixel>
        for (int x = 0; x < width; ++x)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	3301      	adds	r3, #1
 80035e6:	613b      	str	r3, [r7, #16]
 80035e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	dbd7      	blt.n	80035a2 <tft_st7789_drawImage+0x2a>
    for (int y = height - 1; y >= 0; --y)
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	3b01      	subs	r3, #1
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	dace      	bge.n	800359c <tft_st7789_drawImage+0x24>
        }
    }

    return ST77XX_SUCCESS;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3718      	adds	r7, #24
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <tft_st7789_startupConfig>:
//------------------------------------------------------------------------
// Private Functions
//------------------------------------------------------------------------

ST77XX_Return_e tft_st7789_startupConfig(tft_st7789_instance_t *inst)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
    if ((inst->hal.spiBegin == 0) ||
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	69db      	ldr	r3, [r3, #28]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d013      	beq.n	8003640 <tft_st7789_startupConfig+0x38>
        (inst->hal.spiCmd == 0) ||
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    if ((inst->hal.spiBegin == 0) ||
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00f      	beq.n	8003640 <tft_st7789_startupConfig+0x38>
        (inst->hal.spiData8 == 0) ||
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        (inst->hal.spiCmd == 0) ||
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00b      	beq.n	8003640 <tft_st7789_startupConfig+0x38>
        (inst->hal.spiData16 == 0) ||
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        (inst->hal.spiData8 == 0) ||
 800362c:	2b00      	cmp	r3, #0
 800362e:	d007      	beq.n	8003640 <tft_st7789_startupConfig+0x38>
        (inst->hal.spiEnd == 0) ||
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a1b      	ldr	r3, [r3, #32]
        (inst->hal.spiData16 == 0) ||
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <tft_st7789_startupConfig+0x38>
        (inst->hal.delay == 0))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
        (inst->hal.spiEnd == 0) ||
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <tft_st7789_startupConfig+0x3c>
        return ST77XX_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e0a0      	b.n	8003786 <tft_st7789_startupConfig+0x17e>

    // Init commands for 7789 screens
    inst->hal.spiBegin();
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	4798      	blx	r3
    inst->hal.spiCmd(ST77XX_SWRESET); //  1: Software reset, no args, w/delay
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364e:	2001      	movs	r0, #1
 8003650:	4798      	blx	r3
    inst->hal.spiEnd();
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	4798      	blx	r3
    inst->hal.delay(150); // ~150 ms delay
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800365c:	2096      	movs	r0, #150	@ 0x96
 800365e:	4798      	blx	r3

    inst->hal.spiBegin();
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	4798      	blx	r3
    inst->hal.spiCmd(ST77XX_SLPOUT); //  2: Out of sleep mode, no args, w/delay
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366a:	2011      	movs	r0, #17
 800366c:	4798      	blx	r3
    inst->hal.spiEnd();
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	4798      	blx	r3
    inst->hal.delay(10); // ~10 ms delay
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003678:	200a      	movs	r0, #10
 800367a:	4798      	blx	r3
    // Note1: In 12-bit/Pixel, 16-bit/Pixel or 18-bit/Pixel mode, the LUT is applied
    // 	to transfer data into the Frame Memory.
    // Note2: The Command 3Ah should be set at 55h when writing 16-bit/pixel data into
    //	frame memory, but 3Ah should be re-set to 66h when reading pixel data from
    // 	frame memory.
    inst->hal.spiBegin();
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	69db      	ldr	r3, [r3, #28]
 8003680:	4798      	blx	r3
    inst->hal.spiCmd(ST77XX_COLMOD); //  3: Set color mode, 1 arg + delay:
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003686:	203a      	movs	r0, #58	@ 0x3a
 8003688:	4798      	blx	r3
    inst->hal.spiData8(0x55);        //     16-bit color
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800368e:	2055      	movs	r0, #85	@ 0x55
 8003690:	4798      	blx	r3
    inst->hal.spiEnd();
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	4798      	blx	r3
    inst->hal.delay(10); // ~10 ms delay
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800369c:	200a      	movs	r0, #10
 800369e:	4798      	blx	r3
	//    	“0” = RGB (When MADCTL D3=”0”)
	//    	“1” = BGR (When MADCTL D3=”1”)
	//    Bit D2- Display Data Latch Data Order
	//    	“0” = LCD Refresh Left to Right (When MADCTL D2=”0”)
	//    	“1” = LCD Refresh Right to Left (When MADCTL D2=”1”)
    inst->hal.spiBegin();
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	4798      	blx	r3
    inst->hal.spiCmd(ST77XX_MADCTL); //  4: Mem access ctrl (directions), 1 arg:
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036aa:	2036      	movs	r0, #54	@ 0x36
 80036ac:	4798      	blx	r3
    inst->hal.spiData8(0x08);        //     Row/col addr, bottom-top refresh
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b2:	2008      	movs	r0, #8
 80036b4:	4798      	blx	r3
    inst->hal.spiEnd();
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	4798      	blx	r3

    inst->hal.spiBegin();
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	4798      	blx	r3
    inst->hal.spiCmd(ST77XX_CASET);   //  5: Column addr set, 4 args, no delay:
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c6:	202a      	movs	r0, #42	@ 0x2a
 80036c8:	4798      	blx	r3
    inst->hal.spiData16(0);           //     XSTART = 0
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ce:	2000      	movs	r0, #0
 80036d0:	4798      	blx	r3
    inst->hal.spiData16(inst->width); //     XEND = 240
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	8892      	ldrh	r2, [r2, #4]
 80036da:	4610      	mov	r0, r2
 80036dc:	4798      	blx	r3
    inst->hal.spiEnd();
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	4798      	blx	r3

    inst->hal.spiBegin();
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	4798      	blx	r3
    inst->hal.spiCmd(ST77XX_RASET);    //  6: Row addr set, 4 args, no delay:
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ee:	202b      	movs	r0, #43	@ 0x2b
 80036f0:	4798      	blx	r3
    inst->hal.spiData16(0);            //     YSTART = 0
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f6:	2000      	movs	r0, #0
 80036f8:	4798      	blx	r3
    inst->hal.spiData16(inst->height); //     YEND = 280
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	88d2      	ldrh	r2, [r2, #6]
 8003702:	4610      	mov	r0, r2
 8003704:	4798      	blx	r3
    inst->hal.spiEnd();
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	4798      	blx	r3

    inst->hal.spiBegin();
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	4798      	blx	r3
    inst->hal.spiCmd(ST77XX_INVON); //  7: hack
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003716:	2021      	movs	r0, #33	@ 0x21
 8003718:	4798      	blx	r3
    inst->hal.spiEnd();
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	4798      	blx	r3
    inst->hal.delay(10); // ~10 ms delay
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003724:	200a      	movs	r0, #10
 8003726:	4798      	blx	r3

    inst->hal.spiBegin();
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	4798      	blx	r3
	inst->hal.spiCmd(0xC6); // attempt to increase frame rate
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003732:	20c6      	movs	r0, #198	@ 0xc6
 8003734:	4798      	blx	r3
	inst->hal.spiData8(0x00);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800373a:	2000      	movs	r0, #0
 800373c:	4798      	blx	r3
	//inst->hal.spiData8(0x00);
	//inst->hal.spiData8(0x00);
	inst->hal.spiEnd();
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	4798      	blx	r3
	inst->hal.delay(10); // ~10 ms delay
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003748:	200a      	movs	r0, #10
 800374a:	4798      	blx	r3

    inst->hal.spiBegin();
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	4798      	blx	r3
    inst->hal.spiCmd(ST77XX_NORON); //  8: Normal display on, no args, w/delay
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003756:	2013      	movs	r0, #19
 8003758:	4798      	blx	r3
    inst->hal.spiEnd();
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	4798      	blx	r3
    inst->hal.delay(10); // ~10 ms delay
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003764:	200a      	movs	r0, #10
 8003766:	4798      	blx	r3

    inst->hal.spiBegin();
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	4798      	blx	r3
    inst->hal.spiCmd(ST77XX_DISPON); //  9: Main screen turn on, no args, delay
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003772:	2029      	movs	r0, #41	@ 0x29
 8003774:	4798      	blx	r3
    inst->hal.spiEnd();
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	4798      	blx	r3
    inst->hal.delay(10); // ~10 ms delay
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003780:	200a      	movs	r0, #10
 8003782:	4798      	blx	r3

    return ST77XX_SUCCESS;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <tft_st7789_setAddrWindow>:

ST77XX_Return_e tft_st7789_setAddrWindow(tft_st7789_instance_t *inst, uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b084      	sub	sp, #16
 8003792:	af00      	add	r7, sp, #0
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	4608      	mov	r0, r1
 8003798:	4611      	mov	r1, r2
 800379a:	461a      	mov	r2, r3
 800379c:	4603      	mov	r3, r0
 800379e:	817b      	strh	r3, [r7, #10]
 80037a0:	460b      	mov	r3, r1
 80037a2:	813b      	strh	r3, [r7, #8]
 80037a4:	4613      	mov	r3, r2
 80037a6:	80fb      	strh	r3, [r7, #6]
    x += inst->xstart;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	7b5b      	ldrb	r3, [r3, #13]
 80037ac:	461a      	mov	r2, r3
 80037ae:	897b      	ldrh	r3, [r7, #10]
 80037b0:	4413      	add	r3, r2
 80037b2:	817b      	strh	r3, [r7, #10]
    y += inst->ystart;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	7b9b      	ldrb	r3, [r3, #14]
 80037b8:	461a      	mov	r2, r3
 80037ba:	893b      	ldrh	r3, [r7, #8]
 80037bc:	4413      	add	r3, r2
 80037be:	813b      	strh	r3, [r7, #8]

    if ((inst->hal.spiBegin == 0) ||
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00b      	beq.n	80037e0 <tft_st7789_setAddrWindow+0x52>
        (inst->hal.spiCmd == 0) ||
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    if ((inst->hal.spiBegin == 0) ||
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d007      	beq.n	80037e0 <tft_st7789_setAddrWindow+0x52>
        (inst->hal.spiData16 == 0) ||
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        (inst->hal.spiCmd == 0) ||
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d003      	beq.n	80037e0 <tft_st7789_setAddrWindow+0x52>
        (inst->hal.spiEnd == 0))
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a1b      	ldr	r3, [r3, #32]
        (inst->hal.spiData16 == 0) ||
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <tft_st7789_setAddrWindow+0x56>
        return ST77XX_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e030      	b.n	8003846 <tft_st7789_setAddrWindow+0xb8>

    inst->hal.spiBegin();
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	4798      	blx	r3

    // Column addr set
    inst->hal.spiCmd(ST77XX_CASET);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ee:	202a      	movs	r0, #42	@ 0x2a
 80037f0:	4798      	blx	r3
    inst->hal.spiData16(x);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f6:	897a      	ldrh	r2, [r7, #10]
 80037f8:	4610      	mov	r0, r2
 80037fa:	4798      	blx	r3
    inst->hal.spiData16(x + w - 1);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003800:	8979      	ldrh	r1, [r7, #10]
 8003802:	88fa      	ldrh	r2, [r7, #6]
 8003804:	440a      	add	r2, r1
 8003806:	b292      	uxth	r2, r2
 8003808:	3a01      	subs	r2, #1
 800380a:	b292      	uxth	r2, r2
 800380c:	4610      	mov	r0, r2
 800380e:	4798      	blx	r3

    // Column addr set
    inst->hal.spiCmd(ST77XX_RASET);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003814:	202b      	movs	r0, #43	@ 0x2b
 8003816:	4798      	blx	r3
    inst->hal.spiData16(y);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800381c:	893a      	ldrh	r2, [r7, #8]
 800381e:	4610      	mov	r0, r2
 8003820:	4798      	blx	r3
    inst->hal.spiData16(y + h - 1);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003826:	8939      	ldrh	r1, [r7, #8]
 8003828:	8b3a      	ldrh	r2, [r7, #24]
 800382a:	440a      	add	r2, r1
 800382c:	b292      	uxth	r2, r2
 800382e:	3a01      	subs	r2, #1
 8003830:	b292      	uxth	r2, r2
 8003832:	4610      	mov	r0, r2
 8003834:	4798      	blx	r3

    // write to RAM
    inst->hal.spiCmd(ST77XX_RAMWR);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383a:	202c      	movs	r0, #44	@ 0x2c
 800383c:	4798      	blx	r3

    inst->hal.spiEnd();
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	4798      	blx	r3

    return ST77XX_SUCCESS;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <tft_st7789_writeColor>:

ST77XX_Return_e tft_st7789_writeColor(tft_st7789_instance_t *inst, uint16_t color, uint32_t len)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b086      	sub	sp, #24
 8003852:	af00      	add	r7, sp, #0
 8003854:	60f8      	str	r0, [r7, #12]
 8003856:	460b      	mov	r3, r1
 8003858:	607a      	str	r2, [r7, #4]
 800385a:	817b      	strh	r3, [r7, #10]
    // //memset(&test, color, len);
    // for(int i=0;i<len;i++)
    //     test[i] = color;
    // inst->hal.spiDataDma((uint8_t *) &test, len);

    if ((inst->hal.spiData16 == 0) ||
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003860:	2b00      	cmp	r3, #0
 8003862:	d003      	beq.n	800386c <tft_st7789_writeColor+0x1e>
        (inst->hal.delay == 0))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    if ((inst->hal.spiData16 == 0) ||
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <tft_st7789_writeColor+0x22>
        return ST77XX_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e014      	b.n	800389a <tft_st7789_writeColor+0x4c>

    do
    {
        uint32_t pixelsThisPass = len;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	617b      	str	r3, [r7, #20]
//        if (pixelsThisPass > 256)
//        {
//            pixelsThisPass = 256;
//            inst->hal.delay(1); // Periodic delay on long fills
//        }
        len -= pixelsThisPass;
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	607b      	str	r3, [r7, #4]
        while (pixelsThisPass--)
 800387c:	e004      	b.n	8003888 <tft_st7789_writeColor+0x3a>
        {
            inst->hal.spiData16(color);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003882:	897a      	ldrh	r2, [r7, #10]
 8003884:	4610      	mov	r0, r2
 8003886:	4798      	blx	r3
        while (pixelsThisPass--)
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	1e5a      	subs	r2, r3, #1
 800388c:	617a      	str	r2, [r7, #20]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1f5      	bne.n	800387e <tft_st7789_writeColor+0x30>
        }
    } while (len);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1eb      	bne.n	8003870 <tft_st7789_writeColor+0x22>

    return ST77XX_SUCCESS;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3718      	adds	r7, #24
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <tft_st7789_setPosition>:
    {0x10, 0x08, 0x08, 0x10, 0x08}, // 7e ~
    {0x00, 0x00, 0x00, 0x00, 0x00}  // 7f
};

ST77XX_Return_e tft_st7789_setPosition(tft_st7789_instance_t *inst, uint8_t x, uint8_t y)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
 80038aa:	460b      	mov	r3, r1
 80038ac:	70fb      	strb	r3, [r7, #3]
 80038ae:	4613      	mov	r3, r2
 80038b0:	70bb      	strb	r3, [r7, #2]
    if ((x > inst->width) && (y > inst->height))
 80038b2:	78fb      	ldrb	r3, [r7, #3]
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	889b      	ldrh	r3, [r3, #4]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d907      	bls.n	80038ce <tft_st7789_setPosition+0x2c>
 80038be:	78bb      	ldrb	r3, [r7, #2]
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	88db      	ldrh	r3, [r3, #6]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d901      	bls.n	80038ce <tft_st7789_setPosition+0x2c>
    {
        return ST77XX_ERROR; // check if coordinates is out of range
 80038ca:	2301      	movs	r3, #1
 80038cc:	e01c      	b.n	8003908 <tft_st7789_setPosition+0x66>
    }
    else if ((x > inst->width) && (y <= inst->height))
 80038ce:	78fb      	ldrb	r3, [r7, #3]
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	889b      	ldrh	r3, [r3, #4]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d90d      	bls.n	80038f6 <tft_st7789_setPosition+0x54>
 80038da:	78bb      	ldrb	r3, [r7, #2]
 80038dc:	b29a      	uxth	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	88db      	ldrh	r3, [r3, #6]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d807      	bhi.n	80038f6 <tft_st7789_setPosition+0x54>
    {
        inst->cacheIndexRow = y; // set position y
 80038e6:	78bb      	ldrb	r3, [r7, #2]
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	821a      	strh	r2, [r3, #16]
        inst->cacheIndexCol = 2; // set position x
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2202      	movs	r2, #2
 80038f2:	825a      	strh	r2, [r3, #18]
 80038f4:	e007      	b.n	8003906 <tft_st7789_setPosition+0x64>
    }
    else
    {
        inst->cacheIndexRow = y; // set position y
 80038f6:	78bb      	ldrb	r3, [r7, #2]
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	821a      	strh	r2, [r3, #16]
        inst->cacheIndexCol = x; // set position x
 80038fe:	78fb      	ldrb	r3, [r7, #3]
 8003900:	b29a      	uxth	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	825a      	strh	r2, [r3, #18]
    }

    return ST77XX_SUCCESS;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <tft_st7789_setFontSize>:

ST77XX_Return_e tft_st7789_setFontSize( tft_st7789_instance_t *inst, uint8_t size)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	70fb      	strb	r3, [r7, #3]
    inst->fontSize = size;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	78fa      	ldrb	r2, [r7, #3]
 8003924:	751a      	strb	r2, [r3, #20]

    return ST77XX_SUCCESS;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <tft_st7789_drawString>:

ST77XX_Return_e tft_st7789_drawString(tft_st7789_instance_t *inst, char *str, uint16_t color)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	4613      	mov	r3, r2
 8003940:	80fb      	strh	r3, [r7, #6]
    uint16_t i = 0;
 8003942:	2300      	movs	r3, #0
 8003944:	82fb      	strh	r3, [r7, #22]
    uint16_t x;
    uint16_t y;

    while (str[i] != '\0')
 8003946:	e028      	b.n	800399a <tft_st7789_drawString+0x66>
    {
        x = inst->cacheIndexCol + CHARS_COLS_LENGTH;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8a5b      	ldrh	r3, [r3, #18]
 800394c:	3305      	adds	r3, #5
 800394e:	82bb      	strh	r3, [r7, #20]
        y = inst->cacheIndexRow + CHARS_ROWS_LENGTH;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8a1b      	ldrh	r3, [r3, #16]
 8003954:	3308      	adds	r3, #8
 8003956:	827b      	strh	r3, [r7, #18]
        if (x > inst->width)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	889b      	ldrh	r3, [r3, #4]
 800395c:	8aba      	ldrh	r2, [r7, #20]
 800395e:	429a      	cmp	r2, r3
 8003960:	d90f      	bls.n	8003982 <tft_st7789_drawString+0x4e>
        {
            if (y > inst->height)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	88db      	ldrh	r3, [r3, #6]
 8003966:	8a7a      	ldrh	r2, [r7, #18]
 8003968:	429a      	cmp	r2, r3
 800396a:	d901      	bls.n	8003970 <tft_st7789_drawString+0x3c>
            {
                return ST77XX_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e01b      	b.n	80039a8 <tft_st7789_drawString+0x74>
            }
            else
            {
                inst->cacheIndexRow += CHARS_ROWS_LENGTH;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8a1b      	ldrh	r3, [r3, #16]
 8003974:	3308      	adds	r3, #8
 8003976:	b29a      	uxth	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	821a      	strh	r2, [r3, #16]
                inst->cacheIndexCol = 0;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	825a      	strh	r2, [r3, #18]
            }
        }

        tft_st7789_drawChar(inst, str[i++], color);
 8003982:	8afb      	ldrh	r3, [r7, #22]
 8003984:	1c5a      	adds	r2, r3, #1
 8003986:	82fa      	strh	r2, [r7, #22]
 8003988:	461a      	mov	r2, r3
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	4413      	add	r3, r2
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	88fa      	ldrh	r2, [r7, #6]
 8003992:	4619      	mov	r1, r3
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 f80b 	bl	80039b0 <tft_st7789_drawChar>
    while (str[i] != '\0')
 800399a:	8afb      	ldrh	r3, [r7, #22]
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	4413      	add	r3, r2
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1d0      	bne.n	8003948 <tft_st7789_drawString+0x14>
    }

    return ST77XX_SUCCESS;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3718      	adds	r7, #24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <tft_st7789_drawChar>:

ST77XX_Return_e tft_st7789_drawChar(tft_st7789_instance_t *inst, char character, uint16_t color)
{
 80039b0:	b590      	push	{r4, r7, lr}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af02      	add	r7, sp, #8
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	460b      	mov	r3, r1
 80039ba:	70fb      	strb	r3, [r7, #3]
 80039bc:	4613      	mov	r3, r2
 80039be:	803b      	strh	r3, [r7, #0]
    uint8_t letter, idxCol, idxRow; // variables

    if ((character < 0x20) &&
 80039c0:	78fb      	ldrb	r3, [r7, #3]
 80039c2:	2b1f      	cmp	r3, #31
 80039c4:	d805      	bhi.n	80039d2 <tft_st7789_drawChar+0x22>
        (character > 0x7f))
 80039c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
    if ((character < 0x20) &&
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	da01      	bge.n	80039d2 <tft_st7789_drawChar+0x22>
    {
        return ST77XX_ERROR; // out of range
 80039ce:	2301      	movs	r3, #1
 80039d0:	e08e      	b.n	8003af0 <tft_st7789_drawChar+0x140>
    }

    idxCol = CHARS_COLS_LENGTH; // last column of character array - 5 columns
 80039d2:	2305      	movs	r3, #5
 80039d4:	73fb      	strb	r3, [r7, #15]
    idxRow = CHARS_ROWS_LENGTH; // last row of character array - 8 rows / bits
 80039d6:	2308      	movs	r3, #8
 80039d8:	73bb      	strb	r3, [r7, #14]

    if (inst->hal.spiBegin == 0)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <tft_st7789_drawChar+0x36>
        return ST77XX_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e084      	b.n	8003af0 <tft_st7789_drawChar+0x140>
    inst->hal.spiBegin();
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	4798      	blx	r3

    while (idxCol--)
 80039ec:	e061      	b.n	8003ab2 <tft_st7789_drawChar+0x102>
    {
        letter = FONTS[character - 32][idxCol];
 80039ee:	78fb      	ldrb	r3, [r7, #3]
 80039f0:	f1a3 0220 	sub.w	r2, r3, #32
 80039f4:	7bf9      	ldrb	r1, [r7, #15]
 80039f6:	4840      	ldr	r0, [pc, #256]	@ (8003af8 <tft_st7789_drawChar+0x148>)
 80039f8:	4613      	mov	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	4403      	add	r3, r0
 8003a00:	440b      	add	r3, r1
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	737b      	strb	r3, [r7, #13]
        while (idxRow--)
 8003a06:	e04d      	b.n	8003aa4 <tft_st7789_drawChar+0xf4>
        {
            if (letter & (1 << idxRow))
 8003a08:	7b7a      	ldrb	r2, [r7, #13]
 8003a0a:	7bbb      	ldrb	r3, [r7, #14]
 8003a0c:	fa42 f303 	asr.w	r3, r2, r3
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d045      	beq.n	8003aa4 <tft_st7789_drawChar+0xf4>
            {
                if (inst->fontSize == 0)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	7d1b      	ldrb	r3, [r3, #20]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d112      	bne.n	8003a46 <tft_st7789_drawChar+0x96>
                {
                    tft_st7789_drawPixel(inst,
                        inst->cacheIndexCol + idxCol, // X
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	8a5a      	ldrh	r2, [r3, #18]
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	4413      	add	r3, r2
 8003a2a:	b29b      	uxth	r3, r3
                    tft_st7789_drawPixel(inst,
 8003a2c:	b219      	sxth	r1, r3
                        inst->cacheIndexRow + idxRow, // Y
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	8a1a      	ldrh	r2, [r3, #16]
 8003a32:	7bbb      	ldrb	r3, [r7, #14]
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	4413      	add	r3, r2
 8003a38:	b29b      	uxth	r3, r3
                    tft_st7789_drawPixel(inst,
 8003a3a:	b21a      	sxth	r2, r3
 8003a3c:	883b      	ldrh	r3, [r7, #0]
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7ff fa1a 	bl	8002e78 <tft_st7789_drawPixel>
 8003a44:	e02e      	b.n	8003aa4 <tft_st7789_drawChar+0xf4>
                }
                else
                {
                    tft_st7789_writeFillRectPreclipped(
                        inst,
                        inst->cacheIndexCol + (idxCol * (1+inst->fontSize)), // X
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	8a5a      	ldrh	r2, [r3, #18]
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
 8003a4c:	b299      	uxth	r1, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	7d1b      	ldrb	r3, [r3, #20]
 8003a52:	3301      	adds	r3, #1
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	fb11 f303 	smulbb	r3, r1, r3
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	4413      	add	r3, r2
 8003a5e:	b29b      	uxth	r3, r3
                    tft_st7789_writeFillRectPreclipped(
 8003a60:	b218      	sxth	r0, r3
                        inst->cacheIndexRow + (idxRow * (1+inst->fontSize)), // Y
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	8a1a      	ldrh	r2, [r3, #16]
 8003a66:	7bbb      	ldrb	r3, [r7, #14]
 8003a68:	b299      	uxth	r1, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	7d1b      	ldrb	r3, [r3, #20]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	fb11 f303 	smulbb	r3, r1, r3
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	4413      	add	r3, r2
 8003a7a:	b29b      	uxth	r3, r3
                    tft_st7789_writeFillRectPreclipped(
 8003a7c:	b219      	sxth	r1, r3
                        1 + inst->fontSize, // W
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	7d1b      	ldrb	r3, [r3, #20]
 8003a82:	3301      	adds	r3, #1
 8003a84:	b29b      	uxth	r3, r3
                    tft_st7789_writeFillRectPreclipped(
 8003a86:	b21c      	sxth	r4, r3
                        1 + inst->fontSize, // H
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	7d1b      	ldrb	r3, [r3, #20]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	b29b      	uxth	r3, r3
                    tft_st7789_writeFillRectPreclipped(
 8003a90:	b21b      	sxth	r3, r3
 8003a92:	883a      	ldrh	r2, [r7, #0]
 8003a94:	9201      	str	r2, [sp, #4]
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	4623      	mov	r3, r4
 8003a9a:	460a      	mov	r2, r1
 8003a9c:	4601      	mov	r1, r0
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7ff fbcf 	bl	8003242 <tft_st7789_writeFillRectPreclipped>
        while (idxRow--)
 8003aa4:	7bbb      	ldrb	r3, [r7, #14]
 8003aa6:	1e5a      	subs	r2, r3, #1
 8003aa8:	73ba      	strb	r2, [r7, #14]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1ac      	bne.n	8003a08 <tft_st7789_drawChar+0x58>
                        color
                    );
                }
            }
        }
        idxRow = CHARS_ROWS_LENGTH;
 8003aae:	2308      	movs	r3, #8
 8003ab0:	73bb      	strb	r3, [r7, #14]
    while (idxCol--)
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
 8003ab4:	1e5a      	subs	r2, r3, #1
 8003ab6:	73fa      	strb	r2, [r7, #15]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d198      	bne.n	80039ee <tft_st7789_drawChar+0x3e>
    }
    inst->cacheIndexCol += (CHARS_COLS_LENGTH * (1+inst->fontSize)) + 1;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	8a5a      	ldrh	r2, [r3, #18]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	7d1b      	ldrb	r3, [r3, #20]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	4619      	mov	r1, r3
 8003aca:	0089      	lsls	r1, r1, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	4413      	add	r3, r2
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	825a      	strh	r2, [r3, #18]

    if (inst->hal.spiEnd == 0)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d101      	bne.n	8003ae8 <tft_st7789_drawChar+0x138>
        return ST77XX_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e003      	b.n	8003af0 <tft_st7789_drawChar+0x140>
    inst->hal.spiEnd();
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	4798      	blx	r3

    return ST77XX_SUCCESS;
 8003aee:	2300      	movs	r3, #0
 8003af0:	4618      	mov	r0, r3
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd90      	pop	{r4, r7, pc}
 8003af8:	0801ee5c 	.word	0x0801ee5c

08003afc <ui_framework_init>:
ui_framework_return_e ui_framework_init
(
    ui_framework_instance_t *inst,
    void *sdmmcInstance
)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
    ST77XX_Return_e returnVal;

    // Note: width height are swapped since 
    returnVal = tft_st7789_init(&tft, SCREEN_WDTH, SCREEN_HEIGHT);
 8003b06:	23f0      	movs	r3, #240	@ 0xf0
 8003b08:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4814      	ldr	r0, [pc, #80]	@ (8003b60 <ui_framework_init+0x64>)
 8003b10:	f7ff f8e8 	bl	8002ce4 <tft_st7789_init>
 8003b14:	4603      	mov	r3, r0
 8003b16:	73fb      	strb	r3, [r7, #15]
    if (returnVal != ST77XX_SUCCESS)
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d005      	beq.n	8003b2a <ui_framework_init+0x2e>
    {
        DebugLogPrintf(__FUNCTION__, "tft_st7789_init error");
 8003b1e:	4911      	ldr	r1, [pc, #68]	@ (8003b64 <ui_framework_init+0x68>)
 8003b20:	4811      	ldr	r0, [pc, #68]	@ (8003b68 <ui_framework_init+0x6c>)
 8003b22:	f7fe fd4f 	bl	80025c4 <DebugLogPrintf>
        return UI_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e016      	b.n	8003b58 <ui_framework_init+0x5c>
    }        

    // Rotate screen
    returnVal = tft_st7789_setRotation(&tft, 3);
 8003b2a:	2103      	movs	r1, #3
 8003b2c:	480c      	ldr	r0, [pc, #48]	@ (8003b60 <ui_framework_init+0x64>)
 8003b2e:	f7ff f913 	bl	8002d58 <tft_st7789_setRotation>
 8003b32:	4603      	mov	r3, r0
 8003b34:	73fb      	strb	r3, [r7, #15]
    if (returnVal != ST77XX_SUCCESS)
 8003b36:	7bfb      	ldrb	r3, [r7, #15]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d005      	beq.n	8003b48 <ui_framework_init+0x4c>
    {
        DebugLogPrintf(__FUNCTION__, "tft_st7789_setRotation error");
 8003b3c:	490b      	ldr	r1, [pc, #44]	@ (8003b6c <ui_framework_init+0x70>)
 8003b3e:	480a      	ldr	r0, [pc, #40]	@ (8003b68 <ui_framework_init+0x6c>)
 8003b40:	f7fe fd40 	bl	80025c4 <DebugLogPrintf>
        return UI_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e007      	b.n	8003b58 <ui_framework_init+0x5c>
    }

    // Store pointer to SDMMC instance
    inst->sdmmcInstance = sdmmcInstance; 
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b4e:	461a      	mov	r2, r3
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	f8c2 3570 	str.w	r3, [r2, #1392]	@ 0x570

    return UI_SUCCESS;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	20002d08 	.word	0x20002d08
 8003b64:	0801ea40 	.word	0x0801ea40
 8003b68:	0801f040 	.word	0x0801f040
 8003b6c:	0801ea58 	.word	0x0801ea58

08003b70 <ui_framework_update>:

ui_framework_return_e ui_framework_update
(
    ui_framework_instance_t *inst
)
{
 8003b70:	b590      	push	{r4, r7, lr}
 8003b72:	b089      	sub	sp, #36	@ 0x24
 8003b74:	af02      	add	r7, sp, #8
 8003b76:	6078      	str	r0, [r7, #4]
	// Draw new page
	if (inst->newPageId != INVALID_UI_FRAMEWORK_ID)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b7e:	f8b3 3534 	ldrh.w	r3, [r3, #1332]	@ 0x534
 8003b82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d019      	beq.n	8003bbe <ui_framework_update+0x4e>
	{
		inst->activePageId = inst->newPageId;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b90:	f8b3 2534 	ldrh.w	r2, [r3, #1332]	@ 0x534
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b9a:	f8a3 2530 	strh.w	r2, [r3, #1328]	@ 0x530
		inst->newPageId = INVALID_UI_FRAMEWORK_ID;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ba4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ba8:	f8a3 2534 	strh.w	r2, [r3, #1332]	@ 0x534

		ui_framework_drawPage(inst, inst->activePageId);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bb2:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	@ 0x530
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 fb1f 	bl	80041fc <ui_framework_drawPage>
	}

	// Update widget selection
	if (inst->newSelectedWidgetId != INVALID_UI_FRAMEWORK_ID)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bc4:	f8b3 3536 	ldrh.w	r3, [r3, #1334]	@ 0x536
 8003bc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d018      	beq.n	8003c02 <ui_framework_update+0x92>
	{
		// Deselect current widget
		ui_framework_deselectWidget(inst, inst->selectedWidgetId);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bd6:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	@ 0x532
 8003bda:	4619      	mov	r1, r3
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 fbb7 	bl	8004350 <ui_framework_deselectWidget>
		// Select new widget id
		ui_framework_selectWidget(inst, inst->newSelectedWidgetId);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003be8:	f8b3 3536 	ldrh.w	r3, [r3, #1334]	@ 0x536
 8003bec:	4619      	mov	r1, r3
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 fb5c 	bl	80042ac <ui_framework_selectWidget>
		// Clear flag
		inst->newSelectedWidgetId = INVALID_UI_FRAMEWORK_ID;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bfa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003bfe:	f8a3 2536 	strh.w	r2, [r3, #1334]	@ 0x536
	}

	// Go through list of widgets to update
	uint16_t updateId = ui_framework_popWidgetIdUpdate(inst);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 fd24 	bl	8004650 <ui_framework_popWidgetIdUpdate>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	82fb      	strh	r3, [r7, #22]
	while (updateId != INVALID_UI_FRAMEWORK_ID)
 8003c0c:	e042      	b.n	8003c94 <ui_framework_update+0x124>
	{
		// Get widget by ID
		ui_framework_widtget_t *widget = ui_framework_findWidgetById(inst, updateId);
 8003c0e:	8afb      	ldrh	r3, [r7, #22]
 8003c10:	4619      	mov	r1, r3
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 fab0 	bl	8004178 <ui_framework_findWidgetById>
 8003c18:	6138      	str	r0, [r7, #16]
		if (widget == NULL)
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d105      	bne.n	8003c2c <ui_framework_update+0xbc>
		{
			DebugLogPrintf(__FUNCTION__, "ERROR invalid widget id");
 8003c20:	4921      	ldr	r1, [pc, #132]	@ (8003ca8 <ui_framework_update+0x138>)
 8003c22:	4822      	ldr	r0, [pc, #136]	@ (8003cac <ui_framework_update+0x13c>)
 8003c24:	f7fe fcce 	bl	80025c4 <DebugLogPrintf>
			return UI_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e038      	b.n	8003c9e <ui_framework_update+0x12e>
		}

		// Clear widget contents, Fill background color for page
		ST77XX_Return_e returnVal = tft_st7789_fillRect(
			&tft,
			widget->x,
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	885b      	ldrh	r3, [r3, #2]
		ST77XX_Return_e returnVal = tft_st7789_fillRect(
 8003c30:	b219      	sxth	r1, r3
			widget->y,
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	889b      	ldrh	r3, [r3, #4]
		ST77XX_Return_e returnVal = tft_st7789_fillRect(
 8003c36:	b218      	sxth	r0, r3
			widget->w,
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	88db      	ldrh	r3, [r3, #6]
		ST77XX_Return_e returnVal = tft_st7789_fillRect(
 8003c3c:	b21c      	sxth	r4, r3
			widget->h,
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	891b      	ldrh	r3, [r3, #8]
		ST77XX_Return_e returnVal = tft_st7789_fillRect(
 8003c42:	b21b      	sxth	r3, r3
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8003c48:	9201      	str	r2, [sp, #4]
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	4623      	mov	r3, r4
 8003c4e:	4602      	mov	r2, r0
 8003c50:	4817      	ldr	r0, [pc, #92]	@ (8003cb0 <ui_framework_update+0x140>)
 8003c52:	f7ff f95a 	bl	8002f0a <tft_st7789_fillRect>
 8003c56:	4603      	mov	r3, r0
 8003c58:	73fb      	strb	r3, [r7, #15]
			widget->textbox.backgroundColor
		);
		if (returnVal != ST77XX_SUCCESS)
 8003c5a:	7bfb      	ldrb	r3, [r7, #15]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d005      	beq.n	8003c6c <ui_framework_update+0xfc>
		{
			DebugLogPrintf(__FUNCTION__, "tft_st7789_fillRect error");
 8003c60:	4914      	ldr	r1, [pc, #80]	@ (8003cb4 <ui_framework_update+0x144>)
 8003c62:	4812      	ldr	r0, [pc, #72]	@ (8003cac <ui_framework_update+0x13c>)
 8003c64:	f7fe fcae 	bl	80025c4 <DebugLogPrintf>
			return UI_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e018      	b.n	8003c9e <ui_framework_update+0x12e>
		}

		// Draw widget
		ui_framework_return_e retVal = ui_framework_drawWidgetPriv(inst, widget);
 8003c6c:	6939      	ldr	r1, [r7, #16]
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 fc5c 	bl	800452c <ui_framework_drawWidgetPriv>
 8003c74:	4603      	mov	r3, r0
 8003c76:	73bb      	strb	r3, [r7, #14]
		if (retVal != UI_SUCCESS)
 8003c78:	7bbb      	ldrb	r3, [r7, #14]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d005      	beq.n	8003c8a <ui_framework_update+0x11a>
		{
			DebugLogPrintf(__FUNCTION__, "ERROR drawing widget");
 8003c7e:	490e      	ldr	r1, [pc, #56]	@ (8003cb8 <ui_framework_update+0x148>)
 8003c80:	480a      	ldr	r0, [pc, #40]	@ (8003cac <ui_framework_update+0x13c>)
 8003c82:	f7fe fc9f 	bl	80025c4 <DebugLogPrintf>
			return UI_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e009      	b.n	8003c9e <ui_framework_update+0x12e>
		}

		// Get next widget to update
		updateId = ui_framework_popWidgetIdUpdate(inst);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 fce0 	bl	8004650 <ui_framework_popWidgetIdUpdate>
 8003c90:	4603      	mov	r3, r0
 8003c92:	82fb      	strh	r3, [r7, #22]
	while (updateId != INVALID_UI_FRAMEWORK_ID)
 8003c94:	8afb      	ldrh	r3, [r7, #22]
 8003c96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d1b7      	bne.n	8003c0e <ui_framework_update+0x9e>
	}
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	371c      	adds	r7, #28
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd90      	pop	{r4, r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	0801ea78 	.word	0x0801ea78
 8003cac:	0801f054 	.word	0x0801f054
 8003cb0:	20002d08 	.word	0x20002d08
 8003cb4:	0801ea90 	.word	0x0801ea90
 8003cb8:	0801eaac 	.word	0x0801eaac

08003cbc <ui_framework_configureStatsBar>:
    char *bat3ImageFilename,
    char *sdImageFilename,
    char *satImageFilename,
    char *locImageFilename
)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	607b      	str	r3, [r7, #4]
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	817b      	strh	r3, [r7, #10]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	813b      	strh	r3, [r7, #8]
    if (height > tft.height)
 8003cce:	4b2b      	ldr	r3, [pc, #172]	@ (8003d7c <ui_framework_configureStatsBar+0xc0>)
 8003cd0:	88db      	ldrh	r3, [r3, #6]
 8003cd2:	897a      	ldrh	r2, [r7, #10]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d905      	bls.n	8003ce4 <ui_framework_configureStatsBar+0x28>
    {
        DebugLogPrintf(__FUNCTION__, "param error");
 8003cd8:	4929      	ldr	r1, [pc, #164]	@ (8003d80 <ui_framework_configureStatsBar+0xc4>)
 8003cda:	482a      	ldr	r0, [pc, #168]	@ (8003d84 <ui_framework_configureStatsBar+0xc8>)
 8003cdc:	f7fe fc72 	bl	80025c4 <DebugLogPrintf>
        return UI_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e046      	b.n	8003d72 <ui_framework_configureStatsBar+0xb6>
    }

    inst->status.x = 0;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	811a      	strh	r2, [r3, #8]
    inst->status.y = 0;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	815a      	strh	r2, [r3, #10]
    inst->status.w = tft.width;
 8003cf0:	4b22      	ldr	r3, [pc, #136]	@ (8003d7c <ui_framework_configureStatsBar+0xc0>)
 8003cf2:	889a      	ldrh	r2, [r3, #4]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	819a      	strh	r2, [r3, #12]
    inst->status.h = height;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	897a      	ldrh	r2, [r7, #10]
 8003cfc:	81da      	strh	r2, [r3, #14]
    inst->status.backgroundColor = backgroundColor;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	893a      	ldrh	r2, [r7, #8]
 8003d02:	821a      	strh	r2, [r3, #16]

    // Configure icons
    if ((bat1ImageFilename != NULL) &&
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d011      	beq.n	8003d2e <ui_framework_configureStatsBar+0x72>
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00e      	beq.n	8003d2e <ui_framework_configureStatsBar+0x72>
        (bat2ImageFilename != NULL) &&
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00b      	beq.n	8003d2e <ui_framework_configureStatsBar+0x72>
        (bat3ImageFilename != NULL))
    {
        inst->status.batteryIconEnabled = true;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	749a      	strb	r2, [r3, #18]
        inst->status.bat1ImageFilename = bat1ImageFilename;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	615a      	str	r2, [r3, #20]
        inst->status.bat2ImageFilename = bat2ImageFilename;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	619a      	str	r2, [r3, #24]
        inst->status.bat3ImageFilename = bat3ImageFilename;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	69fa      	ldr	r2, [r7, #28]
 8003d2c:	61da      	str	r2, [r3, #28]
    }

    if (sdImageFilename != NULL)
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d006      	beq.n	8003d42 <ui_framework_configureStatsBar+0x86>
    {
        inst->status.sdCardIconEnabled = true;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2020 	strb.w	r2, [r3, #32]
        inst->status.sdImageFilename = sdImageFilename;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6a3a      	ldr	r2, [r7, #32]
 8003d40:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    if (satImageFilename != NULL)
 8003d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d006      	beq.n	8003d56 <ui_framework_configureStatsBar+0x9a>
    {
        inst->status.satIconEnabled = true;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        inst->status.satImageFilename = satImageFilename;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d54:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    if (locImageFilename != NULL)
 8003d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d006      	beq.n	8003d6a <ui_framework_configureStatsBar+0xae>
    {
        inst->status.locationIconEnabled = true;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        inst->status.locImageFilename = locImageFilename;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d68:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    return ui_framework_drawStatusBar(inst);
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 fcbc 	bl	80046e8 <ui_framework_drawStatusBar>
 8003d70:	4603      	mov	r3, r0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	20002d08 	.word	0x20002d08
 8003d80:	0801eac4 	.word	0x0801eac4
 8003d84:	0801f068 	.word	0x0801f068

08003d88 <ui_framework_newPage>:
(
    ui_framework_instance_t *inst,
    uint16_t pageId,
    ui_color backgroundColor
)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	460b      	mov	r3, r1
 8003d92:	807b      	strh	r3, [r7, #2]
 8003d94:	4613      	mov	r3, r2
 8003d96:	803b      	strh	r3, [r7, #0]
    // Check if page exists
    ui_framework_page_t *page = ui_framework_findPageById(inst, pageId);
 8003d98:	887b      	ldrh	r3, [r7, #2]
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 f9c1 	bl	8004124 <ui_framework_findPageById>
 8003da2:	60f8      	str	r0, [r7, #12]
    if (page != NULL)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d005      	beq.n	8003db6 <ui_framework_newPage+0x2e>
    {
        DebugLogPrintf(__FUNCTION__, "page id already exists");
 8003daa:	4918      	ldr	r1, [pc, #96]	@ (8003e0c <ui_framework_newPage+0x84>)
 8003dac:	4818      	ldr	r0, [pc, #96]	@ (8003e10 <ui_framework_newPage+0x88>)
 8003dae:	f7fe fc09 	bl	80025c4 <DebugLogPrintf>
        return UI_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e025      	b.n	8003e02 <ui_framework_newPage+0x7a>
    }

    // Allocate page on to stack
    page = ui_framework_getNextAvilablePageBuffer(inst);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 fb66 	bl	8004488 <ui_framework_getNextAvilablePageBuffer>
 8003dbc:	60f8      	str	r0, [r7, #12]
    if (page == NULL)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d105      	bne.n	8003dd0 <ui_framework_newPage+0x48>
    {
        DebugLogPrintf(__FUNCTION__, "error allocating page buffer");
 8003dc4:	4913      	ldr	r1, [pc, #76]	@ (8003e14 <ui_framework_newPage+0x8c>)
 8003dc6:	4812      	ldr	r0, [pc, #72]	@ (8003e10 <ui_framework_newPage+0x88>)
 8003dc8:	f7fe fbfc 	bl	80025c4 <DebugLogPrintf>
        return UI_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e018      	b.n	8003e02 <ui_framework_newPage+0x7a>
    }

    // Setup page data
    page->id = pageId;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	887a      	ldrh	r2, [r7, #2]
 8003dd4:	801a      	strh	r2, [r3, #0]
    page->backgroundColor = backgroundColor;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	883a      	ldrh	r2, [r7, #0]
 8003dda:	805a      	strh	r2, [r3, #2]
    page->widgetCount = 0;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

    // If no active page, make this the active page
    if (inst->activePageId == 0)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dea:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	@ 0x530
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d106      	bne.n	8003e00 <ui_framework_newPage+0x78>
    {
        inst->activePageId = pageId;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003df8:	461a      	mov	r2, r3
 8003dfa:	887b      	ldrh	r3, [r7, #2]
 8003dfc:	f8a2 3530 	strh.w	r3, [r2, #1328]	@ 0x530
    }

    return UI_SUCCESS;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	0801ead0 	.word	0x0801ead0
 8003e10:	0801f088 	.word	0x0801f088
 8003e14:	0801eae8 	.word	0x0801eae8

08003e18 <ui_framework_addTextBox>:
    uint16_t height,
    char *text,
    uint8_t size,
    ui_color textColor
)
{
 8003e18:	b590      	push	{r4, r7, lr}
 8003e1a:	b087      	sub	sp, #28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	4608      	mov	r0, r1
 8003e22:	4611      	mov	r1, r2
 8003e24:	461a      	mov	r2, r3
 8003e26:	4603      	mov	r3, r0
 8003e28:	817b      	strh	r3, [r7, #10]
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	813b      	strh	r3, [r7, #8]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	80fb      	strh	r3, [r7, #6]
    // Check if its valid page id
    ui_framework_page_t *page = ui_framework_findPageById(inst, pageId);
 8003e32:	897b      	ldrh	r3, [r7, #10]
 8003e34:	4619      	mov	r1, r3
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 f974 	bl	8004124 <ui_framework_findPageById>
 8003e3c:	6178      	str	r0, [r7, #20]
    if (page == NULL)
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d105      	bne.n	8003e50 <ui_framework_addTextBox+0x38>
    {
        DebugLogPrintf(__FUNCTION__, "invalid page id");
 8003e44:	493f      	ldr	r1, [pc, #252]	@ (8003f44 <ui_framework_addTextBox+0x12c>)
 8003e46:	4840      	ldr	r0, [pc, #256]	@ (8003f48 <ui_framework_addTextBox+0x130>)
 8003e48:	f7fe fbbc 	bl	80025c4 <DebugLogPrintf>
        return UI_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e075      	b.n	8003f3c <ui_framework_addTextBox+0x124>
    }

    // Check if page can support any more widgets
    if (page->widgetCount >= UI_MAX_WIDGETS_PER_PAGE)
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8003e56:	2b18      	cmp	r3, #24
 8003e58:	d905      	bls.n	8003e66 <ui_framework_addTextBox+0x4e>
    {
        DebugLogPrintf(__FUNCTION__, "cannot support any additional widgets");
 8003e5a:	493c      	ldr	r1, [pc, #240]	@ (8003f4c <ui_framework_addTextBox+0x134>)
 8003e5c:	483a      	ldr	r0, [pc, #232]	@ (8003f48 <ui_framework_addTextBox+0x130>)
 8003e5e:	f7fe fbb1 	bl	80025c4 <DebugLogPrintf>
        return UI_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e06a      	b.n	8003f3c <ui_framework_addTextBox+0x124>
    }

    // veirfy widget does not already exist
    ui_framework_widtget_t *widget = ui_framework_findWidgetById(inst, widgetId);
 8003e66:	893b      	ldrh	r3, [r7, #8]
 8003e68:	4619      	mov	r1, r3
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 f984 	bl	8004178 <ui_framework_findWidgetById>
 8003e70:	6138      	str	r0, [r7, #16]
    if (widget != NULL)
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d005      	beq.n	8003e84 <ui_framework_addTextBox+0x6c>
    {
        DebugLogPrintf(__FUNCTION__, "widget already exists");
 8003e78:	4935      	ldr	r1, [pc, #212]	@ (8003f50 <ui_framework_addTextBox+0x138>)
 8003e7a:	4833      	ldr	r0, [pc, #204]	@ (8003f48 <ui_framework_addTextBox+0x130>)
 8003e7c:	f7fe fba2 	bl	80025c4 <DebugLogPrintf>
        return UI_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e05b      	b.n	8003f3c <ui_framework_addTextBox+0x124>
    }

    // Check bounds
    if (((xStart + width) > tft.width) ||
 8003e84:	88fa      	ldrh	r2, [r7, #6]
 8003e86:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003e88:	4413      	add	r3, r2
 8003e8a:	4a32      	ldr	r2, [pc, #200]	@ (8003f54 <ui_framework_addTextBox+0x13c>)
 8003e8c:	8892      	ldrh	r2, [r2, #4]
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	dc06      	bgt.n	8003ea0 <ui_framework_addTextBox+0x88>
        ((yStart + height) > tft.height))
 8003e92:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003e94:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003e96:	4413      	add	r3, r2
 8003e98:	4a2e      	ldr	r2, [pc, #184]	@ (8003f54 <ui_framework_addTextBox+0x13c>)
 8003e9a:	88d2      	ldrh	r2, [r2, #6]
    if (((xStart + width) > tft.width) ||
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	dd05      	ble.n	8003eac <ui_framework_addTextBox+0x94>
    {
        DebugLogPrintf(__FUNCTION__, "error out of bounds");
 8003ea0:	492d      	ldr	r1, [pc, #180]	@ (8003f58 <ui_framework_addTextBox+0x140>)
 8003ea2:	4829      	ldr	r0, [pc, #164]	@ (8003f48 <ui_framework_addTextBox+0x130>)
 8003ea4:	f7fe fb8e 	bl	80025c4 <DebugLogPrintf>
        return UI_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e047      	b.n	8003f3c <ui_framework_addTextBox+0x124>
    }

    // Add widget on stack
    widget = ui_framework_getNextAvilableWidgetBuffer(inst);
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 fb12 	bl	80044d6 <ui_framework_getNextAvilableWidgetBuffer>
 8003eb2:	6138      	str	r0, [r7, #16]
    if (widget == NULL)
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d105      	bne.n	8003ec6 <ui_framework_addTextBox+0xae>
    {
        DebugLogPrintf(__FUNCTION__, "error allocating widget buffer");
 8003eba:	4928      	ldr	r1, [pc, #160]	@ (8003f5c <ui_framework_addTextBox+0x144>)
 8003ebc:	4822      	ldr	r0, [pc, #136]	@ (8003f48 <ui_framework_addTextBox+0x130>)
 8003ebe:	f7fe fb81 	bl	80025c4 <DebugLogPrintf>
        return UI_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e03a      	b.n	8003f3c <ui_framework_addTextBox+0x124>
    }
    widget->id = widgetId;
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	893a      	ldrh	r2, [r7, #8]
 8003eca:	801a      	strh	r2, [r3, #0]
    widget->x = xStart;
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	88fa      	ldrh	r2, [r7, #6]
 8003ed0:	805a      	strh	r2, [r3, #2]
    widget->y = yStart;
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003ed6:	809a      	strh	r2, [r3, #4]
    widget->w = width;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8003edc:	80da      	strh	r2, [r3, #6]
    widget->h = height;
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8003ee2:	811a      	strh	r2, [r3, #8]
    widget->type = TEXTBOX;
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	729a      	strb	r2, [r3, #10]
    memcpy(&widget->textbox.text, text, strlen(text));
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f103 040c 	add.w	r4, r3, #12
 8003ef0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003ef2:	f7fc f96d 	bl	80001d0 <strlen>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	461a      	mov	r2, r3
 8003efa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003efc:	4620      	mov	r0, r4
 8003efe:	f017 faf8 	bl	801b4f2 <memcpy>
    widget->textbox.textColor = textColor;
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8003f06:	84da      	strh	r2, [r3, #38]	@ 0x26
    widget->textbox.fontSize = size;
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003f0e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    widget->textbox.backgroundColor = page->backgroundColor;
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	885a      	ldrh	r2, [r3, #2]
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	855a      	strh	r2, [r3, #42]	@ 0x2a

    // Link widget to page
    page->widgetPtrs[page->widgetCount] = widget;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	605a      	str	r2, [r3, #4]
    page->widgetCount++;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8003f30:	3301      	adds	r3, #1
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

    return UI_SUCCESS;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	371c      	adds	r7, #28
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd90      	pop	{r4, r7, pc}
 8003f44:	0801eb08 	.word	0x0801eb08
 8003f48:	0801f0a0 	.word	0x0801f0a0
 8003f4c:	0801eb18 	.word	0x0801eb18
 8003f50:	0801eb40 	.word	0x0801eb40
 8003f54:	20002d08 	.word	0x20002d08
 8003f58:	0801eb58 	.word	0x0801eb58
 8003f5c:	0801eb6c 	.word	0x0801eb6c

08003f60 <ui_framework_addButton>:
    ui_color textColor,
    ui_color backgroundColor,
    uint8_t cornerRadius,
    void (*callback)
)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b08e      	sub	sp, #56	@ 0x38
 8003f64:	af0a      	add	r7, sp, #40	@ 0x28
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	4608      	mov	r0, r1
 8003f6a:	4611      	mov	r1, r2
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	4603      	mov	r3, r0
 8003f70:	817b      	strh	r3, [r7, #10]
 8003f72:	460b      	mov	r3, r1
 8003f74:	813b      	strh	r3, [r7, #8]
 8003f76:	4613      	mov	r3, r2
 8003f78:	80fb      	strh	r3, [r7, #6]
    return ui_framework_addImageButton(
 8003f7a:	88f8      	ldrh	r0, [r7, #6]
 8003f7c:	893a      	ldrh	r2, [r7, #8]
 8003f7e:	8979      	ldrh	r1, [r7, #10]
 8003f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f82:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f84:	2300      	movs	r3, #0
 8003f86:	9308      	str	r3, [sp, #32]
 8003f88:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003f8c:	9307      	str	r3, [sp, #28]
 8003f8e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003f90:	9306      	str	r3, [sp, #24]
 8003f92:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003f94:	9305      	str	r3, [sp, #20]
 8003f96:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003f9a:	9304      	str	r3, [sp, #16]
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9e:	9303      	str	r3, [sp, #12]
 8003fa0:	8c3b      	ldrh	r3, [r7, #32]
 8003fa2:	9302      	str	r3, [sp, #8]
 8003fa4:	8bbb      	ldrh	r3, [r7, #28]
 8003fa6:	9301      	str	r3, [sp, #4]
 8003fa8:	8b3b      	ldrh	r3, [r7, #24]
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	4603      	mov	r3, r0
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 f806 	bl	8003fc0 <ui_framework_addImageButton>
 8003fb4:	4603      	mov	r3, r0
        backgroundColor,
        cornerRadius,
        NULL,
        callback
    );
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
	...

08003fc0 <ui_framework_addImageButton>:
    ui_color backgroundColor,
    uint8_t cornerRadius,
    char *imageFilename,
    void (*callback)
)
{
 8003fc0:	b590      	push	{r4, r7, lr}
 8003fc2:	b087      	sub	sp, #28
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	4608      	mov	r0, r1
 8003fca:	4611      	mov	r1, r2
 8003fcc:	461a      	mov	r2, r3
 8003fce:	4603      	mov	r3, r0
 8003fd0:	817b      	strh	r3, [r7, #10]
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	813b      	strh	r3, [r7, #8]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	80fb      	strh	r3, [r7, #6]
    // Check if its valid page id
    ui_framework_page_t *page = ui_framework_findPageById(inst, pageId);
 8003fda:	897b      	ldrh	r3, [r7, #10]
 8003fdc:	4619      	mov	r1, r3
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 f8a0 	bl	8004124 <ui_framework_findPageById>
 8003fe4:	6178      	str	r0, [r7, #20]
    if (page == NULL)
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d105      	bne.n	8003ff8 <ui_framework_addImageButton+0x38>
    {
        DebugLogPrintf(__FUNCTION__, "invalid page id");
 8003fec:	4946      	ldr	r1, [pc, #280]	@ (8004108 <ui_framework_addImageButton+0x148>)
 8003fee:	4847      	ldr	r0, [pc, #284]	@ (800410c <ui_framework_addImageButton+0x14c>)
 8003ff0:	f7fe fae8 	bl	80025c4 <DebugLogPrintf>
        return UI_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e083      	b.n	8004100 <ui_framework_addImageButton+0x140>
    }

    // Check if page can support any more widgets
    if (page->widgetCount >= UI_MAX_WIDGETS_PER_PAGE)
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8003ffe:	2b18      	cmp	r3, #24
 8004000:	d905      	bls.n	800400e <ui_framework_addImageButton+0x4e>
    {
        DebugLogPrintf(__FUNCTION__, "cannot support any additional widgets");
 8004002:	4943      	ldr	r1, [pc, #268]	@ (8004110 <ui_framework_addImageButton+0x150>)
 8004004:	4841      	ldr	r0, [pc, #260]	@ (800410c <ui_framework_addImageButton+0x14c>)
 8004006:	f7fe fadd 	bl	80025c4 <DebugLogPrintf>
        return UI_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e078      	b.n	8004100 <ui_framework_addImageButton+0x140>
    }

    // veirfy widget does not already exist
    ui_framework_widtget_t *widget = ui_framework_findWidgetById(inst, widgetId);
 800400e:	893b      	ldrh	r3, [r7, #8]
 8004010:	4619      	mov	r1, r3
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f000 f8b0 	bl	8004178 <ui_framework_findWidgetById>
 8004018:	6138      	str	r0, [r7, #16]
    if (widget != NULL)
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d005      	beq.n	800402c <ui_framework_addImageButton+0x6c>
    {
        DebugLogPrintf(__FUNCTION__, "widget already exists");
 8004020:	493c      	ldr	r1, [pc, #240]	@ (8004114 <ui_framework_addImageButton+0x154>)
 8004022:	483a      	ldr	r0, [pc, #232]	@ (800410c <ui_framework_addImageButton+0x14c>)
 8004024:	f7fe face 	bl	80025c4 <DebugLogPrintf>
        return UI_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e069      	b.n	8004100 <ui_framework_addImageButton+0x140>
    }

    // Check bounds
    if (((xStart + width) > tft.width) ||
 800402c:	88fa      	ldrh	r2, [r7, #6]
 800402e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004030:	4413      	add	r3, r2
 8004032:	4a39      	ldr	r2, [pc, #228]	@ (8004118 <ui_framework_addImageButton+0x158>)
 8004034:	8892      	ldrh	r2, [r2, #4]
 8004036:	4293      	cmp	r3, r2
 8004038:	dc06      	bgt.n	8004048 <ui_framework_addImageButton+0x88>
        ((yStart + height) > tft.height))
 800403a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800403c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800403e:	4413      	add	r3, r2
 8004040:	4a35      	ldr	r2, [pc, #212]	@ (8004118 <ui_framework_addImageButton+0x158>)
 8004042:	88d2      	ldrh	r2, [r2, #6]
    if (((xStart + width) > tft.width) ||
 8004044:	4293      	cmp	r3, r2
 8004046:	dd05      	ble.n	8004054 <ui_framework_addImageButton+0x94>
    {
        DebugLogPrintf(__FUNCTION__, "error out of bounds");
 8004048:	4934      	ldr	r1, [pc, #208]	@ (800411c <ui_framework_addImageButton+0x15c>)
 800404a:	4830      	ldr	r0, [pc, #192]	@ (800410c <ui_framework_addImageButton+0x14c>)
 800404c:	f7fe faba 	bl	80025c4 <DebugLogPrintf>
        return UI_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e055      	b.n	8004100 <ui_framework_addImageButton+0x140>
    }

    // Add widget on stack
    widget = ui_framework_getNextAvilableWidgetBuffer(inst);
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 fa3e 	bl	80044d6 <ui_framework_getNextAvilableWidgetBuffer>
 800405a:	6138      	str	r0, [r7, #16]
    if (widget == NULL)
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d105      	bne.n	800406e <ui_framework_addImageButton+0xae>
    {
        DebugLogPrintf(__FUNCTION__, "error allocating widget buffer");
 8004062:	492f      	ldr	r1, [pc, #188]	@ (8004120 <ui_framework_addImageButton+0x160>)
 8004064:	4829      	ldr	r0, [pc, #164]	@ (800410c <ui_framework_addImageButton+0x14c>)
 8004066:	f7fe faad 	bl	80025c4 <DebugLogPrintf>
        return UI_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e048      	b.n	8004100 <ui_framework_addImageButton+0x140>
    }
    widget->id = widgetId;
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	893a      	ldrh	r2, [r7, #8]
 8004072:	801a      	strh	r2, [r3, #0]
    widget->x = xStart;
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	88fa      	ldrh	r2, [r7, #6]
 8004078:	805a      	strh	r2, [r3, #2]
    widget->y = yStart;
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800407e:	809a      	strh	r2, [r3, #4]
    widget->w = width;
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8004084:	80da      	strh	r2, [r3, #6]
    widget->h = height;
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800408a:	811a      	strh	r2, [r3, #8]
    widget->type = BUTTON;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	2201      	movs	r2, #1
 8004090:	729a      	strb	r2, [r3, #10]
    memcpy(&widget->button.text, text, strlen(text));
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f103 040c 	add.w	r4, r3, #12
 8004098:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800409a:	f7fc f899 	bl	80001d0 <strlen>
 800409e:	4603      	mov	r3, r0
 80040a0:	461a      	mov	r2, r3
 80040a2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80040a4:	4620      	mov	r0, r4
 80040a6:	f017 fa24 	bl	801b4f2 <memcpy>
    widget->button.textColor = textColor;
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80040ae:	831a      	strh	r2, [r3, #24]
    widget->button.fontSize = fontSize;
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80040b6:	759a      	strb	r2, [r3, #22]
    widget->button.backgroundColor = backgroundColor;
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80040be:	839a      	strh	r2, [r3, #28]
    widget->button.cornerRadius = cornerRadius;
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 80040c6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    widget->button.imageFilename = imageFilename;
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040ce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (imageFilename != NULL)
 80040d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <ui_framework_addImageButton+0x11e>
    	widget->button.drawImage = true;
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

    // Link widget to page
    page->widgetPtrs[page->widgetCount] = widget;
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	605a      	str	r2, [r3, #4]
    page->widgetCount++;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80040f4:	3301      	adds	r3, #1
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

    return UI_SUCCESS;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	371c      	adds	r7, #28
 8004104:	46bd      	mov	sp, r7
 8004106:	bd90      	pop	{r4, r7, pc}
 8004108:	0801eb08 	.word	0x0801eb08
 800410c:	0801f0b8 	.word	0x0801f0b8
 8004110:	0801eb18 	.word	0x0801eb18
 8004114:	0801eb40 	.word	0x0801eb40
 8004118:	20002d08 	.word	0x20002d08
 800411c:	0801eb58 	.word	0x0801eb58
 8004120:	0801eb6c 	.word	0x0801eb6c

08004124 <ui_framework_findPageById>:

ui_framework_page_t* ui_framework_findPageById(ui_framework_instance_t *inst, uint16_t id)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	460b      	mov	r3, r1
 800412e:	807b      	strh	r3, [r7, #2]
    for (int i = 0; i < UI_MAX_SUPPORTED_PAGES; i++)
 8004130:	2300      	movs	r3, #0
 8004132:	60fb      	str	r3, [r7, #12]
 8004134:	e016      	b.n	8004164 <ui_framework_findPageById+0x40>
    {
        if (inst->uiPageStack[i].id == id)
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	216c      	movs	r1, #108	@ 0x6c
 800413c:	fb01 f303 	mul.w	r3, r1, r3
 8004140:	4413      	add	r3, r2
 8004142:	3354      	adds	r3, #84	@ 0x54
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	887a      	ldrh	r2, [r7, #2]
 8004148:	429a      	cmp	r2, r3
 800414a:	d108      	bne.n	800415e <ui_framework_findPageById+0x3a>
        {
            return &inst->uiPageStack[i];
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	226c      	movs	r2, #108	@ 0x6c
 8004150:	fb02 f303 	mul.w	r3, r2, r3
 8004154:	3350      	adds	r3, #80	@ 0x50
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	4413      	add	r3, r2
 800415a:	3304      	adds	r3, #4
 800415c:	e006      	b.n	800416c <ui_framework_findPageById+0x48>
    for (int i = 0; i < UI_MAX_SUPPORTED_PAGES; i++)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	3301      	adds	r3, #1
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2b04      	cmp	r3, #4
 8004168:	dde5      	ble.n	8004136 <ui_framework_findPageById+0x12>
        }
    }
    return NULL;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <ui_framework_findWidgetById>:

ui_framework_widtget_t* ui_framework_findWidgetById(ui_framework_instance_t *inst, uint16_t id)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	460b      	mov	r3, r1
 8004182:	807b      	strh	r3, [r7, #2]
    for (int i = 0; i < UI_MAX_SUPPORTED_WIDGETS; i++)
 8004184:	2300      	movs	r3, #0
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	e019      	b.n	80041be <ui_framework_findWidgetById+0x46>
    {
        if (inst->uiWidgetStack[i].id == id)
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4613      	mov	r3, r2
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	4413      	add	r3, r2
 8004194:	011b      	lsls	r3, r3, #4
 8004196:	440b      	add	r3, r1
 8004198:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	887a      	ldrh	r2, [r7, #2]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d109      	bne.n	80041b8 <ui_framework_findWidgetById+0x40>
        {
            return &inst->uiWidgetStack[i];
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	4613      	mov	r3, r2
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	4413      	add	r3, r2
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	4413      	add	r3, r2
 80041b6:	e006      	b.n	80041c6 <ui_framework_findWidgetById+0x4e>
    for (int i = 0; i < UI_MAX_SUPPORTED_WIDGETS; i++)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	3301      	adds	r3, #1
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2b63      	cmp	r3, #99	@ 0x63
 80041c2:	dde2      	ble.n	800418a <ui_framework_findWidgetById+0x12>
        }
    }
    return NULL;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <ui_framework_getFontPixelSize>:

uint8_t ui_framework_getFontPixelSize
(
    ui_framework_fontSize_e fontSize
)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	4603      	mov	r3, r0
 80041da:	71fb      	strb	r3, [r7, #7]
    if (fontSize > FONT_SIZE_8X)
 80041dc:	79fb      	ldrb	r3, [r7, #7]
 80041de:	2b03      	cmp	r3, #3
 80041e0:	d901      	bls.n	80041e6 <ui_framework_getFontPixelSize+0x14>
        return 0;
 80041e2:	2300      	movs	r3, #0
 80041e4:	e004      	b.n	80041f0 <ui_framework_getFontPixelSize+0x1e>

    return ((1 + fontSize) * CHARS_ROWS_LENGTH);
 80041e6:	79fb      	ldrb	r3, [r7, #7]
 80041e8:	3301      	adds	r3, #1
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	b2db      	uxtb	r3, r3
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <ui_framework_drawPage>:

ui_framework_return_e ui_framework_drawPage(
    ui_framework_instance_t *inst,
    uint16_t id
)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b088      	sub	sp, #32
 8004200:	af02      	add	r7, sp, #8
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	460b      	mov	r3, r1
 8004206:	807b      	strh	r3, [r7, #2]
    ui_framework_page_t *page = ui_framework_findPageById(inst, id);
 8004208:	887b      	ldrh	r3, [r7, #2]
 800420a:	4619      	mov	r1, r3
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f7ff ff89 	bl	8004124 <ui_framework_findPageById>
 8004212:	6138      	str	r0, [r7, #16]
    if (page == NULL)
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d105      	bne.n	8004226 <ui_framework_drawPage+0x2a>
    {
        DebugLogPrintf(__FUNCTION__, "invalid page id");
 800421a:	4920      	ldr	r1, [pc, #128]	@ (800429c <ui_framework_drawPage+0xa0>)
 800421c:	4820      	ldr	r0, [pc, #128]	@ (80042a0 <ui_framework_drawPage+0xa4>)
 800421e:	f7fe f9d1 	bl	80025c4 <DebugLogPrintf>
        return UI_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e036      	b.n	8004294 <ui_framework_drawPage+0x98>

    // Fill background color for page
    ST77XX_Return_e returnVal = tft_st7789_fillRect(
        &tft, 
        0, 
        inst->status.h + 1, // Start after status bar
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	89db      	ldrh	r3, [r3, #14]
 800422a:	3301      	adds	r3, #1
 800422c:	b29b      	uxth	r3, r3
    ST77XX_Return_e returnVal = tft_st7789_fillRect(
 800422e:	b219      	sxth	r1, r3
        tft.width, 
 8004230:	4b1c      	ldr	r3, [pc, #112]	@ (80042a4 <ui_framework_drawPage+0xa8>)
 8004232:	889b      	ldrh	r3, [r3, #4]
    ST77XX_Return_e returnVal = tft_st7789_fillRect(
 8004234:	b218      	sxth	r0, r3
        tft.height, 
 8004236:	4b1b      	ldr	r3, [pc, #108]	@ (80042a4 <ui_framework_drawPage+0xa8>)
 8004238:	88db      	ldrh	r3, [r3, #6]
    ST77XX_Return_e returnVal = tft_st7789_fillRect(
 800423a:	b21b      	sxth	r3, r3
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	8852      	ldrh	r2, [r2, #2]
 8004240:	9201      	str	r2, [sp, #4]
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	4603      	mov	r3, r0
 8004246:	460a      	mov	r2, r1
 8004248:	2100      	movs	r1, #0
 800424a:	4816      	ldr	r0, [pc, #88]	@ (80042a4 <ui_framework_drawPage+0xa8>)
 800424c:	f7fe fe5d 	bl	8002f0a <tft_st7789_fillRect>
 8004250:	4603      	mov	r3, r0
 8004252:	73fb      	strb	r3, [r7, #15]
        page->backgroundColor
    );
    if (returnVal != ST77XX_SUCCESS)
 8004254:	7bfb      	ldrb	r3, [r7, #15]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d005      	beq.n	8004266 <ui_framework_drawPage+0x6a>
    {
        DebugLogPrintf(__FUNCTION__, "tft_st7789_fillRect error");
 800425a:	4913      	ldr	r1, [pc, #76]	@ (80042a8 <ui_framework_drawPage+0xac>)
 800425c:	4810      	ldr	r0, [pc, #64]	@ (80042a0 <ui_framework_drawPage+0xa4>)
 800425e:	f7fe f9b1 	bl	80025c4 <DebugLogPrintf>
        return UI_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e016      	b.n	8004294 <ui_framework_drawPage+0x98>
    }

    // Loop through all widgets in page and draw them
    for (int i = 0; i < page->widgetCount; i++)
 8004266:	2300      	movs	r3, #0
 8004268:	617b      	str	r3, [r7, #20]
 800426a:	e00b      	b.n	8004284 <ui_framework_drawPage+0x88>
    {
        ui_framework_drawWidgetPriv(inst, page->widgetPtrs[i]);
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	4619      	mov	r1, r3
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f957 	bl	800452c <ui_framework_drawWidgetPriv>
    for (int i = 0; i < page->widgetCount; i++)
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	3301      	adds	r3, #1
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800428a:	461a      	mov	r2, r3
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	4293      	cmp	r3, r2
 8004290:	dbec      	blt.n	800426c <ui_framework_drawPage+0x70>
    }

    return UI_SUCCESS;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3718      	adds	r7, #24
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	0801eb08 	.word	0x0801eb08
 80042a0:	0801f0d4 	.word	0x0801f0d4
 80042a4:	20002d08 	.word	0x20002d08
 80042a8:	0801ea90 	.word	0x0801ea90

080042ac <ui_framework_selectWidget>:

ui_framework_return_e ui_framework_selectWidget(
    ui_framework_instance_t *inst,
    uint16_t id
)
{
 80042ac:	b5b0      	push	{r4, r5, r7, lr}
 80042ae:	b088      	sub	sp, #32
 80042b0:	af04      	add	r7, sp, #16
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	460b      	mov	r3, r1
 80042b6:	807b      	strh	r3, [r7, #2]
    // Get widget by ID
    ui_framework_widtget_t *widget = ui_framework_findWidgetById(inst, id);
 80042b8:	887b      	ldrh	r3, [r7, #2]
 80042ba:	4619      	mov	r1, r3
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f7ff ff5b 	bl	8004178 <ui_framework_findWidgetById>
 80042c2:	60f8      	str	r0, [r7, #12]
    if (widget == NULL)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d105      	bne.n	80042d6 <ui_framework_selectWidget+0x2a>
    {
        DebugLogPrintf(__FUNCTION__, "ERROR invalid widget id");
 80042ca:	491e      	ldr	r1, [pc, #120]	@ (8004344 <ui_framework_selectWidget+0x98>)
 80042cc:	481e      	ldr	r0, [pc, #120]	@ (8004348 <ui_framework_selectWidget+0x9c>)
 80042ce:	f7fe f979 	bl	80025c4 <DebugLogPrintf>
        return UI_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e031      	b.n	800433a <ui_framework_selectWidget+0x8e>
    }

    if (widget->type == BUTTON)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	7a9b      	ldrb	r3, [r3, #10]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d122      	bne.n	8004324 <ui_framework_selectWidget+0x78>
    {
		// Draw black line around widget
		ui_framework_drawRoundedBox(
 80042de:	2314      	movs	r3, #20
 80042e0:	461a      	mov	r2, r3
			inst,
			xOffset + widget->x,
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	885b      	ldrh	r3, [r3, #2]
		ui_framework_drawRoundedBox(
 80042e6:	4413      	add	r3, r2
 80042e8:	b299      	uxth	r1, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8898      	ldrh	r0, [r3, #4]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	88dc      	ldrh	r4, [r3, #6]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	891b      	ldrh	r3, [r3, #8]
			widget->y,
			widget->w,
			widget->h,
			widget->button.cornerRadius, // TODO - handle other widgets
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
		ui_framework_drawRoundedBox(
 80042fc:	4615      	mov	r5, r2
 80042fe:	2205      	movs	r2, #5
 8004300:	9203      	str	r2, [sp, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	9202      	str	r2, [sp, #8]
 8004306:	9501      	str	r5, [sp, #4]
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	4623      	mov	r3, r4
 800430c:	4602      	mov	r2, r0
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 fe60 	bl	8004fd4 <ui_framework_drawRoundedBox>
			Black,
			5
		);

		// Set selected id
		inst->selectedWidgetId = id;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800431a:	461a      	mov	r2, r3
 800431c:	887b      	ldrh	r3, [r7, #2]
 800431e:	f8a2 3532 	strh.w	r3, [r2, #1330]	@ 0x532
 8004322:	e009      	b.n	8004338 <ui_framework_selectWidget+0x8c>
    }
    else if (widget->type == TEXTBOX)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	7a9b      	ldrb	r3, [r3, #10]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d105      	bne.n	8004338 <ui_framework_selectWidget+0x8c>
    {
    	DebugLogPrintf(__FUNCTION__, "ERROR not implemented");
 800432c:	4907      	ldr	r1, [pc, #28]	@ (800434c <ui_framework_selectWidget+0xa0>)
 800432e:	4806      	ldr	r0, [pc, #24]	@ (8004348 <ui_framework_selectWidget+0x9c>)
 8004330:	f7fe f948 	bl	80025c4 <DebugLogPrintf>
    	return UI_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e000      	b.n	800433a <ui_framework_selectWidget+0x8e>
    }

    return UI_SUCCESS;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bdb0      	pop	{r4, r5, r7, pc}
 8004342:	bf00      	nop
 8004344:	0801ea78 	.word	0x0801ea78
 8004348:	0801f0ec 	.word	0x0801f0ec
 800434c:	0801eb8c 	.word	0x0801eb8c

08004350 <ui_framework_deselectWidget>:

ui_framework_return_e ui_framework_deselectWidget(
    ui_framework_instance_t *inst,
    uint16_t id
)
{
 8004350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004352:	b089      	sub	sp, #36	@ 0x24
 8004354:	af04      	add	r7, sp, #16
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	460b      	mov	r3, r1
 800435a:	807b      	strh	r3, [r7, #2]
    // Get widget by ID
    ui_framework_widtget_t *widget = ui_framework_findWidgetById(inst, id);
 800435c:	887b      	ldrh	r3, [r7, #2]
 800435e:	4619      	mov	r1, r3
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7ff ff09 	bl	8004178 <ui_framework_findWidgetById>
 8004366:	60f8      	str	r0, [r7, #12]
    if (widget == NULL)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d105      	bne.n	800437a <ui_framework_deselectWidget+0x2a>
    {
        DebugLogPrintf(__FUNCTION__, "ERROR invalid widget id");
 800436e:	4919      	ldr	r1, [pc, #100]	@ (80043d4 <ui_framework_deselectWidget+0x84>)
 8004370:	4819      	ldr	r0, [pc, #100]	@ (80043d8 <ui_framework_deselectWidget+0x88>)
 8004372:	f7fe f927 	bl	80025c4 <DebugLogPrintf>
        return UI_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e027      	b.n	80043ca <ui_framework_deselectWidget+0x7a>
    }

    if (widget->type == BUTTON)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	7a9b      	ldrb	r3, [r3, #10]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d11b      	bne.n	80043ba <ui_framework_deselectWidget+0x6a>
    {
		// Clear black line around widget
		ui_framework_drawRoundedBox(
 8004382:	2314      	movs	r3, #20
 8004384:	461a      	mov	r2, r3
			inst,
			xOffset + widget->x,
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	885b      	ldrh	r3, [r3, #2]
		ui_framework_drawRoundedBox(
 800438a:	4413      	add	r3, r2
 800438c:	b299      	uxth	r1, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8898      	ldrh	r0, [r3, #4]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	88dc      	ldrh	r4, [r3, #6]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	891b      	ldrh	r3, [r3, #8]
			widget->y,
			widget->w,
			widget->h,
			widget->button.cornerRadius,
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
		ui_framework_drawRoundedBox(
 80043a0:	4616      	mov	r6, r2
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	8b92      	ldrh	r2, [r2, #28]
 80043a6:	2505      	movs	r5, #5
 80043a8:	9503      	str	r5, [sp, #12]
 80043aa:	9202      	str	r2, [sp, #8]
 80043ac:	9601      	str	r6, [sp, #4]
 80043ae:	9300      	str	r3, [sp, #0]
 80043b0:	4623      	mov	r3, r4
 80043b2:	4602      	mov	r2, r0
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 fe0d 	bl	8004fd4 <ui_framework_drawRoundedBox>
			5
		);
    }

    // Clear selected id
    inst->selectedWidgetId = INVALID_UI_FRAMEWORK_ID;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80043c4:	f8a3 2532 	strh.w	r2, [r3, #1330]	@ 0x532

    return UI_SUCCESS;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043d2:	bf00      	nop
 80043d4:	0801ea78 	.word	0x0801ea78
 80043d8:	0801f108 	.word	0x0801f108

080043dc <ui_framework_updateWidgetText>:
ui_framework_return_e ui_framework_updateWidgetText(
    ui_framework_instance_t *inst,
    uint16_t id,
    const char *text
)
{
 80043dc:	b590      	push	{r4, r7, lr}
 80043de:	b087      	sub	sp, #28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	460b      	mov	r3, r1
 80043e6:	607a      	str	r2, [r7, #4]
 80043e8:	817b      	strh	r3, [r7, #10]
	if (strlen(text) > UI_MAX_TEXTBOX_LEN)
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7fb fef0 	bl	80001d0 <strlen>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b19      	cmp	r3, #25
 80043f4:	d905      	bls.n	8004402 <ui_framework_updateWidgetText+0x26>
	{
		DebugLogPrintf(__FUNCTION__, "ERROR invalid text length");
 80043f6:	4921      	ldr	r1, [pc, #132]	@ (800447c <ui_framework_updateWidgetText+0xa0>)
 80043f8:	4821      	ldr	r0, [pc, #132]	@ (8004480 <ui_framework_updateWidgetText+0xa4>)
 80043fa:	f7fe f8e3 	bl	80025c4 <DebugLogPrintf>
		return UI_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e038      	b.n	8004474 <ui_framework_updateWidgetText+0x98>
	}

	// Get widget by ID
	ui_framework_widtget_t *widget = ui_framework_findWidgetById(inst, id);
 8004402:	897b      	ldrh	r3, [r7, #10]
 8004404:	4619      	mov	r1, r3
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f7ff feb6 	bl	8004178 <ui_framework_findWidgetById>
 800440c:	6178      	str	r0, [r7, #20]
	if (widget == NULL)
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d105      	bne.n	8004420 <ui_framework_updateWidgetText+0x44>
	{
		DebugLogPrintf(__FUNCTION__, "ERROR invalid widget id");
 8004414:	491b      	ldr	r1, [pc, #108]	@ (8004484 <ui_framework_updateWidgetText+0xa8>)
 8004416:	481a      	ldr	r0, [pc, #104]	@ (8004480 <ui_framework_updateWidgetText+0xa4>)
 8004418:	f7fe f8d4 	bl	80025c4 <DebugLogPrintf>
		return UI_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e029      	b.n	8004474 <ui_framework_updateWidgetText+0x98>
	}

	if (widget->type == TEXTBOX)
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	7a9b      	ldrb	r3, [r3, #10]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d124      	bne.n	8004472 <ui_framework_updateWidgetText+0x96>
	{
		// Compare new text to existing text
		if (strncmp((char *)&widget->textbox.text, text, strlen(text)) != 0)
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f103 040c 	add.w	r4, r3, #12
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7fb fece 	bl	80001d0 <strlen>
 8004434:	4603      	mov	r3, r0
 8004436:	461a      	mov	r2, r3
 8004438:	6879      	ldr	r1, [r7, #4]
 800443a:	4620      	mov	r0, r4
 800443c:	f016 ff62 	bl	801b304 <strncmp>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d015      	beq.n	8004472 <ui_framework_updateWidgetText+0x96>
		{
			// Copy new text
			uint8_t stringLen = strlen(text);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7fb fec2 	bl	80001d0 <strlen>
 800444c:	4603      	mov	r3, r0
 800444e:	74fb      	strb	r3, [r7, #19]
		    memcpy(&widget->textbox.text, text, stringLen);
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	330c      	adds	r3, #12
 8004454:	7cfa      	ldrb	r2, [r7, #19]
 8004456:	6879      	ldr	r1, [r7, #4]
 8004458:	4618      	mov	r0, r3
 800445a:	f017 f84a 	bl	801b4f2 <memcpy>
		    widget->textbox.text[stringLen] = '\0';
 800445e:	7cfb      	ldrb	r3, [r7, #19]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	4413      	add	r3, r2
 8004464:	2200      	movs	r2, #0
 8004466:	731a      	strb	r2, [r3, #12]

		    // Mark widget to get redrawn
		    ui_framework_pushWidgetIdUpdate(inst, id);
 8004468:	897b      	ldrh	r3, [r7, #10]
 800446a:	4619      	mov	r1, r3
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f000 f88b 	bl	8004588 <ui_framework_pushWidgetIdUpdate>
		}
	}

	return UI_SUCCESS;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	371c      	adds	r7, #28
 8004478:	46bd      	mov	sp, r7
 800447a:	bd90      	pop	{r4, r7, pc}
 800447c:	0801eba4 	.word	0x0801eba4
 8004480:	0801f124 	.word	0x0801f124
 8004484:	0801ea78 	.word	0x0801ea78

08004488 <ui_framework_getNextAvilablePageBuffer>:
//------------------------------------------------------------------------
// Private Functions
//------------------------------------------------------------------------

ui_framework_page_t* ui_framework_getNextAvilablePageBuffer(ui_framework_instance_t *inst)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < UI_MAX_SUPPORTED_PAGES; i++)
 8004490:	2300      	movs	r3, #0
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	e015      	b.n	80044c2 <ui_framework_getNextAvilablePageBuffer+0x3a>
    {
        if (inst->uiPageStack[i].id == NULL)
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	216c      	movs	r1, #108	@ 0x6c
 800449c:	fb01 f303 	mul.w	r3, r1, r3
 80044a0:	4413      	add	r3, r2
 80044a2:	3354      	adds	r3, #84	@ 0x54
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d108      	bne.n	80044bc <ui_framework_getNextAvilablePageBuffer+0x34>
        {
            return &inst->uiPageStack[i];
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	226c      	movs	r2, #108	@ 0x6c
 80044ae:	fb02 f303 	mul.w	r3, r2, r3
 80044b2:	3350      	adds	r3, #80	@ 0x50
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	4413      	add	r3, r2
 80044b8:	3304      	adds	r3, #4
 80044ba:	e006      	b.n	80044ca <ui_framework_getNextAvilablePageBuffer+0x42>
    for (int i = 0; i < UI_MAX_SUPPORTED_PAGES; i++)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	3301      	adds	r3, #1
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2b04      	cmp	r3, #4
 80044c6:	dde6      	ble.n	8004496 <ui_framework_getNextAvilablePageBuffer+0xe>
        }
    }
    return NULL;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <ui_framework_getNextAvilableWidgetBuffer>:

ui_framework_widtget_t* ui_framework_getNextAvilableWidgetBuffer(ui_framework_instance_t *inst)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b085      	sub	sp, #20
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < UI_MAX_SUPPORTED_WIDGETS; i++)
 80044de:	2300      	movs	r3, #0
 80044e0:	60fb      	str	r3, [r7, #12]
 80044e2:	e018      	b.n	8004516 <ui_framework_getNextAvilableWidgetBuffer+0x40>
    {
        if (inst->uiWidgetStack[i].id == NULL)
 80044e4:	6879      	ldr	r1, [r7, #4]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	4613      	mov	r3, r2
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	4413      	add	r3, r2
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	440b      	add	r3, r1
 80044f2:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d109      	bne.n	8004510 <ui_framework_getNextAvilableWidgetBuffer+0x3a>
        {
            return &inst->uiWidgetStack[i];
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	4613      	mov	r3, r2
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	4413      	add	r3, r2
 8004504:	011b      	lsls	r3, r3, #4
 8004506:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	4413      	add	r3, r2
 800450e:	e006      	b.n	800451e <ui_framework_getNextAvilableWidgetBuffer+0x48>
    for (int i = 0; i < UI_MAX_SUPPORTED_WIDGETS; i++)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	3301      	adds	r3, #1
 8004514:	60fb      	str	r3, [r7, #12]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2b63      	cmp	r3, #99	@ 0x63
 800451a:	dde3      	ble.n	80044e4 <ui_framework_getNextAvilableWidgetBuffer+0xe>
        }
    }
    return NULL;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
	...

0800452c <ui_framework_drawWidgetPriv>:

ui_framework_return_e ui_framework_drawWidgetPriv(
    ui_framework_instance_t *inst,
    ui_framework_widtget_t *widget
)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
    switch (widget->type)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	7a9b      	ldrb	r3, [r3, #10]
 800453a:	2b03      	cmp	r3, #3
 800453c:	d010      	beq.n	8004560 <ui_framework_drawWidgetPriv+0x34>
 800453e:	2b03      	cmp	r3, #3
 8004540:	dc13      	bgt.n	800456a <ui_framework_drawWidgetPriv+0x3e>
 8004542:	2b00      	cmp	r3, #0
 8004544:	d002      	beq.n	800454c <ui_framework_drawWidgetPriv+0x20>
 8004546:	2b01      	cmp	r3, #1
 8004548:	d005      	beq.n	8004556 <ui_framework_drawWidgetPriv+0x2a>
 800454a:	e00e      	b.n	800456a <ui_framework_drawWidgetPriv+0x3e>
    {
        case TEXTBOX:
        {
            ui_framework_drawTextBox(inst, widget);
 800454c:	6839      	ldr	r1, [r7, #0]
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 fa7e 	bl	8004a50 <ui_framework_drawTextBox>
            break;
 8004554:	e00f      	b.n	8004576 <ui_framework_drawWidgetPriv+0x4a>
        }
        case BUTTON:
        {
            ui_framework_drawButton(inst, widget);
 8004556:	6839      	ldr	r1, [r7, #0]
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 fac9 	bl	8004af0 <ui_framework_drawButton>
            break;
 800455e:	e00a      	b.n	8004576 <ui_framework_drawWidgetPriv+0x4a>
        }
        case GROUPBOX:
        {
            ui_framework_drawGroupBox(inst, widget);
 8004560:	6839      	ldr	r1, [r7, #0]
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 fc46 	bl	8004df4 <ui_framework_drawGroupBox>
            break;
 8004568:	e005      	b.n	8004576 <ui_framework_drawWidgetPriv+0x4a>
        }
        default:
            DebugLogPrintf(__FUNCTION__, "WARN unsupported widget type");
 800456a:	4905      	ldr	r1, [pc, #20]	@ (8004580 <ui_framework_drawWidgetPriv+0x54>)
 800456c:	4805      	ldr	r0, [pc, #20]	@ (8004584 <ui_framework_drawWidgetPriv+0x58>)
 800456e:	f7fe f829 	bl	80025c4 <DebugLogPrintf>
            return UI_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e000      	b.n	8004578 <ui_framework_drawWidgetPriv+0x4c>
    }

    return UI_SUCCESS;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	0801ebc0 	.word	0x0801ebc0
 8004584:	0801f144 	.word	0x0801f144

08004588 <ui_framework_pushWidgetIdUpdate>:
void ui_framework_pushWidgetIdUpdate
(
    ui_framework_instance_t *inst,
	uint16_t id
)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	460b      	mov	r3, r1
 8004592:	807b      	strh	r3, [r7, #2]
	// Copy new id
	inst->updateList[inst->updateListHead] = id;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800459a:	f893 356a 	ldrb.w	r3, [r3, #1386]	@ 0x56a
 800459e:	461a      	mov	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f602 229c 	addw	r2, r2, #2716	@ 0xa9c
 80045a6:	8879      	ldrh	r1, [r7, #2]
 80045a8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	// Bump head pointer
	inst->updateListHead = ((inst->updateListHead + 1) % (UI_MAX_WIDGETS_PER_PAGE));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045b2:	f893 356a 	ldrb.w	r3, [r3, #1386]	@ 0x56a
 80045b6:	1c5a      	adds	r2, r3, #1
 80045b8:	4b24      	ldr	r3, [pc, #144]	@ (800464c <ui_framework_pushWidgetIdUpdate+0xc4>)
 80045ba:	fb83 1302 	smull	r1, r3, r3, r2
 80045be:	10d9      	asrs	r1, r3, #3
 80045c0:	17d3      	asrs	r3, r2, #31
 80045c2:	1ac9      	subs	r1, r1, r3
 80045c4:	460b      	mov	r3, r1
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	440b      	add	r3, r1
 80045ca:	0099      	lsls	r1, r3, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	1ad1      	subs	r1, r2, r3
 80045d0:	b2ca      	uxtb	r2, r1
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045d8:	f883 256a 	strb.w	r2, [r3, #1386]	@ 0x56a

	// If circular buffer is full, drop oldest packet
	if (inst->updateListHead == inst->updateListTail)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045e2:	f893 256a 	ldrb.w	r2, [r3, #1386]	@ 0x56a
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045ec:	f893 356b 	ldrb.w	r3, [r3, #1387]	@ 0x56b
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d118      	bne.n	8004626 <ui_framework_pushWidgetIdUpdate+0x9e>
	{
		// Bump tail pointer up 1(overwrite oldest)
		inst->updateListTail = ((inst->updateListTail + 1) % (UI_MAX_WIDGETS_PER_PAGE));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045fa:	f893 356b 	ldrb.w	r3, [r3, #1387]	@ 0x56b
 80045fe:	1c5a      	adds	r2, r3, #1
 8004600:	4b12      	ldr	r3, [pc, #72]	@ (800464c <ui_framework_pushWidgetIdUpdate+0xc4>)
 8004602:	fb83 1302 	smull	r1, r3, r3, r2
 8004606:	10d9      	asrs	r1, r3, #3
 8004608:	17d3      	asrs	r3, r2, #31
 800460a:	1ac9      	subs	r1, r1, r3
 800460c:	460b      	mov	r3, r1
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	440b      	add	r3, r1
 8004612:	0099      	lsls	r1, r3, #2
 8004614:	440b      	add	r3, r1
 8004616:	1ad1      	subs	r1, r2, r3
 8004618:	b2ca      	uxtb	r2, r1
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004620:	f883 256b 	strb.w	r2, [r3, #1387]	@ 0x56b
	}
	else
	{
		inst->updateListCount++;
	}
}
 8004624:	e00b      	b.n	800463e <ui_framework_pushWidgetIdUpdate+0xb6>
		inst->updateListCount++;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800462c:	f893 356c 	ldrb.w	r3, [r3, #1388]	@ 0x56c
 8004630:	3301      	adds	r3, #1
 8004632:	b2da      	uxtb	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800463a:	f883 256c 	strb.w	r2, [r3, #1388]	@ 0x56c
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	51eb851f 	.word	0x51eb851f

08004650 <ui_framework_popWidgetIdUpdate>:

uint16_t ui_framework_popWidgetIdUpdate
(
    ui_framework_instance_t *inst
)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
	uint16_t returnWidgetId = INVALID_UI_FRAMEWORK_ID;
 8004658:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800465c:	81fb      	strh	r3, [r7, #14]

	// If circular buffer is not empty
	if (inst->updateListHead != inst->updateListTail)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004664:	f893 256a 	ldrb.w	r2, [r3, #1386]	@ 0x56a
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800466e:	f893 356b 	ldrb.w	r3, [r3, #1387]	@ 0x56b
 8004672:	429a      	cmp	r2, r3
 8004674:	d02f      	beq.n	80046d6 <ui_framework_popWidgetIdUpdate+0x86>
	{
		returnWidgetId = inst->updateList[inst->updateListTail];
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800467c:	f893 356b 	ldrb.w	r3, [r3, #1387]	@ 0x56b
 8004680:	461a      	mov	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f602 229c 	addw	r2, r2, #2716	@ 0xa9c
 8004688:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800468c:	81fb      	strh	r3, [r7, #14]

		// Bump tail pointer up 1
		inst->updateListTail = ((inst->updateListTail + 1) % (UI_MAX_WIDGETS_PER_PAGE));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004694:	f893 356b 	ldrb.w	r3, [r3, #1387]	@ 0x56b
 8004698:	1c5a      	adds	r2, r3, #1
 800469a:	4b12      	ldr	r3, [pc, #72]	@ (80046e4 <ui_framework_popWidgetIdUpdate+0x94>)
 800469c:	fb83 1302 	smull	r1, r3, r3, r2
 80046a0:	10d9      	asrs	r1, r3, #3
 80046a2:	17d3      	asrs	r3, r2, #31
 80046a4:	1ac9      	subs	r1, r1, r3
 80046a6:	460b      	mov	r3, r1
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	440b      	add	r3, r1
 80046ac:	0099      	lsls	r1, r3, #2
 80046ae:	440b      	add	r3, r1
 80046b0:	1ad1      	subs	r1, r2, r3
 80046b2:	b2ca      	uxtb	r2, r1
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046ba:	f883 256b 	strb.w	r2, [r3, #1387]	@ 0x56b
		inst->updateListCount--;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046c4:	f893 356c 	ldrb.w	r3, [r3, #1388]	@ 0x56c
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046d2:	f883 256c 	strb.w	r2, [r3, #1388]	@ 0x56c
	}

	return returnWidgetId;
 80046d6:	89fb      	ldrh	r3, [r7, #14]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr
 80046e4:	51eb851f 	.word	0x51eb851f

080046e8 <ui_framework_drawStatusBar>:

//------------------------------------------------------------------------
// Public Functions
//------------------------------------------------------------------------

ui_framework_return_e ui_framework_drawStatusBar(ui_framework_instance_t *inst) {
 80046e8:	b590      	push	{r4, r7, lr}
 80046ea:	b087      	sub	sp, #28
 80046ec:	af02      	add	r7, sp, #8
 80046ee:	6078      	str	r0, [r7, #4]
	// +--------------------------------+
	// | SAT  SD   LOC       TIME  BATT |
	// | ICON ICON ICON            ICON |
	// +--------------------------------+

	returnVal = tft_st7789_fillRect(&tft, inst->status.x, inst->status.y,
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	891b      	ldrh	r3, [r3, #8]
 80046f4:	b219      	sxth	r1, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	895b      	ldrh	r3, [r3, #10]
 80046fa:	b218      	sxth	r0, r3
			inst->status.w, inst->status.h, inst->status.backgroundColor);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	899b      	ldrh	r3, [r3, #12]
	returnVal = tft_st7789_fillRect(&tft, inst->status.x, inst->status.y,
 8004700:	b21c      	sxth	r4, r3
			inst->status.w, inst->status.h, inst->status.backgroundColor);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	89db      	ldrh	r3, [r3, #14]
	returnVal = tft_st7789_fillRect(&tft, inst->status.x, inst->status.y,
 8004706:	b21b      	sxth	r3, r3
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	8a12      	ldrh	r2, [r2, #16]
 800470c:	9201      	str	r2, [sp, #4]
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	4623      	mov	r3, r4
 8004712:	4602      	mov	r2, r0
 8004714:	48a2      	ldr	r0, [pc, #648]	@ (80049a0 <ui_framework_drawStatusBar+0x2b8>)
 8004716:	f7fe fbf8 	bl	8002f0a <tft_st7789_fillRect>
 800471a:	4603      	mov	r3, r0
 800471c:	73fb      	strb	r3, [r7, #15]
	if (returnVal != ST77XX_SUCCESS) {
 800471e:	7bfb      	ldrb	r3, [r7, #15]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d005      	beq.n	8004730 <ui_framework_drawStatusBar+0x48>
		DebugLogPrintf(__FUNCTION__, "tft_st7789_fillRect error");
 8004724:	499f      	ldr	r1, [pc, #636]	@ (80049a4 <ui_framework_drawStatusBar+0x2bc>)
 8004726:	48a0      	ldr	r0, [pc, #640]	@ (80049a8 <ui_framework_drawStatusBar+0x2c0>)
 8004728:	f7fd ff4c 	bl	80025c4 <DebugLogPrintf>
		return UI_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e183      	b.n	8004a38 <ui_framework_drawStatusBar+0x350>
	}

	if (inst->status.satIconEnabled) {
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004736:	2b00      	cmp	r3, #0
 8004738:	d038      	beq.n	80047ac <ui_framework_drawStatusBar+0xc4>
		sdmmc_return_e returnVal = sdmmc_readBitmap(inst->sdmmcInstance,
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004740:	f8d3 2570 	ldr.w	r2, [r3, #1392]	@ 0x570
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004748:	4619      	mov	r1, r3
 800474a:	4610      	mov	r0, r2
 800474c:	f7fd ffac 	bl	80026a8 <sdmmc_readBitmap>
 8004750:	4603      	mov	r3, r0
 8004752:	73bb      	strb	r3, [r7, #14]
				inst->status.satImageFilename);
		if (returnVal != SDMMC_SUCCESS) {
 8004754:	7bbb      	ldrb	r3, [r7, #14]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d008      	beq.n	800476c <ui_framework_drawStatusBar+0x84>
			DebugLogPrintf(__FUNCTION__, "sdmmc_readFile(%s) error",
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800475e:	461a      	mov	r2, r3
 8004760:	4992      	ldr	r1, [pc, #584]	@ (80049ac <ui_framework_drawStatusBar+0x2c4>)
 8004762:	4891      	ldr	r0, [pc, #580]	@ (80049a8 <ui_framework_drawStatusBar+0x2c0>)
 8004764:	f7fd ff2e 	bl	80025c4 <DebugLogPrintf>
					inst->status.satImageFilename);
			return UI_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e165      	b.n	8004a38 <ui_framework_drawStatusBar+0x350>
		}

		tft_st7789_drawImage(&tft, xOffset + 20, // X
 800476c:	4b90      	ldr	r3, [pc, #576]	@ (80049b0 <ui_framework_drawStatusBar+0x2c8>)
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	3314      	adds	r3, #20
 8004772:	b29b      	uxth	r3, r3
 8004774:	b219      	sxth	r1, r3
				0,            // Y
				((sdmmc_instance_t*) inst->sdmmcInstance)->imgBuffer.widthPx, // W
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800477c:	f8d3 3570 	ldr.w	r3, [r3, #1392]	@ 0x570
 8004780:	789b      	ldrb	r3, [r3, #2]
		tft_st7789_drawImage(&tft, xOffset + 20, // X
 8004782:	b218      	sxth	r0, r3
				((sdmmc_instance_t*) inst->sdmmcInstance)->imgBuffer.heightPx, // H
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800478a:	f8d3 3570 	ldr.w	r3, [r3, #1392]	@ 0x570
 800478e:	78db      	ldrb	r3, [r3, #3]
		tft_st7789_drawImage(&tft, xOffset + 20, // X
 8004790:	b21b      	sxth	r3, r3
				(uint8_t*) ((sdmmc_instance_t*) inst->sdmmcInstance)->imgBuffer.buffer);
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004798:	f8d2 2570 	ldr.w	r2, [r2, #1392]	@ 0x570
 800479c:	3204      	adds	r2, #4
		tft_st7789_drawImage(&tft, xOffset + 20, // X
 800479e:	9201      	str	r2, [sp, #4]
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	4603      	mov	r3, r0
 80047a4:	2200      	movs	r2, #0
 80047a6:	487e      	ldr	r0, [pc, #504]	@ (80049a0 <ui_framework_drawStatusBar+0x2b8>)
 80047a8:	f7fe fee6 	bl	8003578 <tft_st7789_drawImage>
	}

	if (inst->status.sdCardIconEnabled) {
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d038      	beq.n	8004828 <ui_framework_drawStatusBar+0x140>
		sdmmc_return_e returnVal = sdmmc_readBitmap(inst->sdmmcInstance,
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047bc:	f8d3 2570 	ldr.w	r2, [r3, #1392]	@ 0x570
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c4:	4619      	mov	r1, r3
 80047c6:	4610      	mov	r0, r2
 80047c8:	f7fd ff6e 	bl	80026a8 <sdmmc_readBitmap>
 80047cc:	4603      	mov	r3, r0
 80047ce:	737b      	strb	r3, [r7, #13]
				inst->status.sdImageFilename);
		if (returnVal != SDMMC_SUCCESS) {
 80047d0:	7b7b      	ldrb	r3, [r7, #13]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d008      	beq.n	80047e8 <ui_framework_drawStatusBar+0x100>
			DebugLogPrintf(__FUNCTION__, "sdmmc_readFile(%s) error",
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047da:	461a      	mov	r2, r3
 80047dc:	4973      	ldr	r1, [pc, #460]	@ (80049ac <ui_framework_drawStatusBar+0x2c4>)
 80047de:	4872      	ldr	r0, [pc, #456]	@ (80049a8 <ui_framework_drawStatusBar+0x2c0>)
 80047e0:	f7fd fef0 	bl	80025c4 <DebugLogPrintf>
					inst->status.sdImageFilename);
			return UI_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e127      	b.n	8004a38 <ui_framework_drawStatusBar+0x350>
		}

		tft_st7789_drawImage(&tft, xOffset + 20 + 32, // X
 80047e8:	4b71      	ldr	r3, [pc, #452]	@ (80049b0 <ui_framework_drawStatusBar+0x2c8>)
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	3334      	adds	r3, #52	@ 0x34
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	b219      	sxth	r1, r3
				0,            // Y
				((sdmmc_instance_t*) inst->sdmmcInstance)->imgBuffer.widthPx, // W
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047f8:	f8d3 3570 	ldr.w	r3, [r3, #1392]	@ 0x570
 80047fc:	789b      	ldrb	r3, [r3, #2]
		tft_st7789_drawImage(&tft, xOffset + 20 + 32, // X
 80047fe:	b218      	sxth	r0, r3
				((sdmmc_instance_t*) inst->sdmmcInstance)->imgBuffer.heightPx, // H
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004806:	f8d3 3570 	ldr.w	r3, [r3, #1392]	@ 0x570
 800480a:	78db      	ldrb	r3, [r3, #3]
		tft_st7789_drawImage(&tft, xOffset + 20 + 32, // X
 800480c:	b21b      	sxth	r3, r3
				(uint8_t*) ((sdmmc_instance_t*) inst->sdmmcInstance)->imgBuffer.buffer);
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004814:	f8d2 2570 	ldr.w	r2, [r2, #1392]	@ 0x570
 8004818:	3204      	adds	r2, #4
		tft_st7789_drawImage(&tft, xOffset + 20 + 32, // X
 800481a:	9201      	str	r2, [sp, #4]
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	4603      	mov	r3, r0
 8004820:	2200      	movs	r2, #0
 8004822:	485f      	ldr	r0, [pc, #380]	@ (80049a0 <ui_framework_drawStatusBar+0x2b8>)
 8004824:	f7fe fea8 	bl	8003578 <tft_st7789_drawImage>
	}

	if (inst->status.locationIconEnabled) {
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800482e:	2b00      	cmp	r3, #0
 8004830:	d038      	beq.n	80048a4 <ui_framework_drawStatusBar+0x1bc>
		sdmmc_return_e returnVal = sdmmc_readBitmap(inst->sdmmcInstance,
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004838:	f8d3 2570 	ldr.w	r2, [r3, #1392]	@ 0x570
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004840:	4619      	mov	r1, r3
 8004842:	4610      	mov	r0, r2
 8004844:	f7fd ff30 	bl	80026a8 <sdmmc_readBitmap>
 8004848:	4603      	mov	r3, r0
 800484a:	733b      	strb	r3, [r7, #12]
				inst->status.locImageFilename);
		if (returnVal != SDMMC_SUCCESS) {
 800484c:	7b3b      	ldrb	r3, [r7, #12]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d008      	beq.n	8004864 <ui_framework_drawStatusBar+0x17c>
			DebugLogPrintf(__FUNCTION__, "sdmmc_readFile(%s) error",
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004856:	461a      	mov	r2, r3
 8004858:	4954      	ldr	r1, [pc, #336]	@ (80049ac <ui_framework_drawStatusBar+0x2c4>)
 800485a:	4853      	ldr	r0, [pc, #332]	@ (80049a8 <ui_framework_drawStatusBar+0x2c0>)
 800485c:	f7fd feb2 	bl	80025c4 <DebugLogPrintf>
					inst->status.locImageFilename);
			return UI_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e0e9      	b.n	8004a38 <ui_framework_drawStatusBar+0x350>
		}

		tft_st7789_drawImage(&tft, xOffset + 20 + 32 + 32,                  // X
 8004864:	4b52      	ldr	r3, [pc, #328]	@ (80049b0 <ui_framework_drawStatusBar+0x2c8>)
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	3354      	adds	r3, #84	@ 0x54
 800486a:	b29b      	uxth	r3, r3
 800486c:	b219      	sxth	r1, r3
				0,                                                          // Y
				((sdmmc_instance_t*) inst->sdmmcInstance)->imgBuffer.widthPx, // W
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004874:	f8d3 3570 	ldr.w	r3, [r3, #1392]	@ 0x570
 8004878:	789b      	ldrb	r3, [r3, #2]
		tft_st7789_drawImage(&tft, xOffset + 20 + 32 + 32,                  // X
 800487a:	b218      	sxth	r0, r3
				((sdmmc_instance_t*) inst->sdmmcInstance)->imgBuffer.heightPx, // H
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004882:	f8d3 3570 	ldr.w	r3, [r3, #1392]	@ 0x570
 8004886:	78db      	ldrb	r3, [r3, #3]
		tft_st7789_drawImage(&tft, xOffset + 20 + 32 + 32,                  // X
 8004888:	b21b      	sxth	r3, r3
				(uint8_t*) ((sdmmc_instance_t*) inst->sdmmcInstance)->imgBuffer.buffer); // draw battery icon
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004890:	f8d2 2570 	ldr.w	r2, [r2, #1392]	@ 0x570
 8004894:	3204      	adds	r2, #4
		tft_st7789_drawImage(&tft, xOffset + 20 + 32 + 32,                  // X
 8004896:	9201      	str	r2, [sp, #4]
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	4603      	mov	r3, r0
 800489c:	2200      	movs	r2, #0
 800489e:	4840      	ldr	r0, [pc, #256]	@ (80049a0 <ui_framework_drawStatusBar+0x2b8>)
 80048a0:	f7fe fe6a 	bl	8003578 <tft_st7789_drawImage>
	}

	//  Get RTC

	// Clear previous time
	returnVal = tft_st7789_fillRect(&tft, inst->status.w / 2 - 10, 0, 100,
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	899b      	ldrh	r3, [r3, #12]
 80048a8:	085b      	lsrs	r3, r3, #1
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	3b0a      	subs	r3, #10
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	b21c      	sxth	r4, r3
			ui_framework_getFontPixelSize(FONT_SIZE_2X),
 80048b2:	2001      	movs	r0, #1
 80048b4:	f7ff fc8d 	bl	80041d2 <ui_framework_getFontPixelSize>
 80048b8:	4603      	mov	r3, r0
	returnVal = tft_st7789_fillRect(&tft, inst->status.w / 2 - 10, 0, 100,
 80048ba:	b21b      	sxth	r3, r3
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	8a12      	ldrh	r2, [r2, #16]
 80048c0:	9201      	str	r2, [sp, #4]
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	2364      	movs	r3, #100	@ 0x64
 80048c6:	2200      	movs	r2, #0
 80048c8:	4621      	mov	r1, r4
 80048ca:	4835      	ldr	r0, [pc, #212]	@ (80049a0 <ui_framework_drawStatusBar+0x2b8>)
 80048cc:	f7fe fb1d 	bl	8002f0a <tft_st7789_fillRect>
 80048d0:	4603      	mov	r3, r0
 80048d2:	73fb      	strb	r3, [r7, #15]
			inst->status.backgroundColor);
	if (returnVal != ST77XX_SUCCESS) {
 80048d4:	7bfb      	ldrb	r3, [r7, #15]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d005      	beq.n	80048e6 <ui_framework_drawStatusBar+0x1fe>
		DebugLogPrintf(__FUNCTION__, "tft_st7789_fillRect error");
 80048da:	4932      	ldr	r1, [pc, #200]	@ (80049a4 <ui_framework_drawStatusBar+0x2bc>)
 80048dc:	4832      	ldr	r0, [pc, #200]	@ (80049a8 <ui_framework_drawStatusBar+0x2c0>)
 80048de:	f7fd fe71 	bl	80025c4 <DebugLogPrintf>
		return UI_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e0a8      	b.n	8004a38 <ui_framework_drawStatusBar+0x350>
	}
	// Draw new time text
	returnVal = tft_st7789_setFontSize(&tft, FONT_SIZE_2X);
 80048e6:	2101      	movs	r1, #1
 80048e8:	482d      	ldr	r0, [pc, #180]	@ (80049a0 <ui_framework_drawStatusBar+0x2b8>)
 80048ea:	f7ff f813 	bl	8003914 <tft_st7789_setFontSize>
 80048ee:	4603      	mov	r3, r0
 80048f0:	73fb      	strb	r3, [r7, #15]
	if (returnVal != ST77XX_SUCCESS) {
 80048f2:	7bfb      	ldrb	r3, [r7, #15]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d005      	beq.n	8004904 <ui_framework_drawStatusBar+0x21c>
		DebugLogPrintf(__FUNCTION__, "error - tft_st7789_setFontSize");
 80048f8:	492e      	ldr	r1, [pc, #184]	@ (80049b4 <ui_framework_drawStatusBar+0x2cc>)
 80048fa:	482b      	ldr	r0, [pc, #172]	@ (80049a8 <ui_framework_drawStatusBar+0x2c0>)
 80048fc:	f7fd fe62 	bl	80025c4 <DebugLogPrintf>
		return UI_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e099      	b.n	8004a38 <ui_framework_drawStatusBar+0x350>
	}

	returnVal = tft_st7789_setPosition(&tft, inst->status.w / 2 - 10,
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	899b      	ldrh	r3, [r3, #12]
 8004908:	085b      	lsrs	r3, r3, #1
 800490a:	b29b      	uxth	r3, r3
 800490c:	b2db      	uxtb	r3, r3
 800490e:	3b0a      	subs	r3, #10
 8004910:	b2dc      	uxtb	r4, r3
			(32 - ui_framework_getFontPixelSize(FONT_SIZE_2X)) / 2);
 8004912:	2001      	movs	r0, #1
 8004914:	f7ff fc5d 	bl	80041d2 <ui_framework_getFontPixelSize>
 8004918:	4603      	mov	r3, r0
 800491a:	f1c3 0320 	rsb	r3, r3, #32
 800491e:	0fda      	lsrs	r2, r3, #31
 8004920:	4413      	add	r3, r2
 8004922:	105b      	asrs	r3, r3, #1
	returnVal = tft_st7789_setPosition(&tft, inst->status.w / 2 - 10,
 8004924:	b2db      	uxtb	r3, r3
 8004926:	461a      	mov	r2, r3
 8004928:	4621      	mov	r1, r4
 800492a:	481d      	ldr	r0, [pc, #116]	@ (80049a0 <ui_framework_drawStatusBar+0x2b8>)
 800492c:	f7fe ffb9 	bl	80038a2 <tft_st7789_setPosition>
 8004930:	4603      	mov	r3, r0
 8004932:	73fb      	strb	r3, [r7, #15]
	if (returnVal != ST77XX_SUCCESS) {
 8004934:	7bfb      	ldrb	r3, [r7, #15]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d005      	beq.n	8004946 <ui_framework_drawStatusBar+0x25e>
		DebugLogPrintf(__FUNCTION__, "error - tft_st7789_setFontSize");
 800493a:	491e      	ldr	r1, [pc, #120]	@ (80049b4 <ui_framework_drawStatusBar+0x2cc>)
 800493c:	481a      	ldr	r0, [pc, #104]	@ (80049a8 <ui_framework_drawStatusBar+0x2c0>)
 800493e:	f7fd fe41 	bl	80025c4 <DebugLogPrintf>
		return UI_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e078      	b.n	8004a38 <ui_framework_drawStatusBar+0x350>
	}

	returnVal = tft_st7789_drawString(&tft, "00:00:00", Blue);
 8004946:	221f      	movs	r2, #31
 8004948:	491b      	ldr	r1, [pc, #108]	@ (80049b8 <ui_framework_drawStatusBar+0x2d0>)
 800494a:	4815      	ldr	r0, [pc, #84]	@ (80049a0 <ui_framework_drawStatusBar+0x2b8>)
 800494c:	f7fe fff2 	bl	8003934 <tft_st7789_drawString>
 8004950:	4603      	mov	r3, r0
 8004952:	73fb      	strb	r3, [r7, #15]
	if (returnVal != ST77XX_SUCCESS) {
 8004954:	7bfb      	ldrb	r3, [r7, #15]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d005      	beq.n	8004966 <ui_framework_drawStatusBar+0x27e>
		DebugLogPrintf(__FUNCTION__, "error - tft_st7789_setFontSize");
 800495a:	4916      	ldr	r1, [pc, #88]	@ (80049b4 <ui_framework_drawStatusBar+0x2cc>)
 800495c:	4812      	ldr	r0, [pc, #72]	@ (80049a8 <ui_framework_drawStatusBar+0x2c0>)
 800495e:	f7fd fe31 	bl	80025c4 <DebugLogPrintf>
		return UI_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e068      	b.n	8004a38 <ui_framework_drawStatusBar+0x350>
	}

	if (inst->status.batteryIconEnabled) {
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	7c9b      	ldrb	r3, [r3, #18]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d04a      	beq.n	8004a04 <ui_framework_drawStatusBar+0x31c>
		sdmmc_return_e returnVal = sdmmc_readBitmap(inst->sdmmcInstance,
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004974:	f8d3 2570 	ldr.w	r2, [r3, #1392]	@ 0x570
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	4619      	mov	r1, r3
 800497e:	4610      	mov	r0, r2
 8004980:	f7fd fe92 	bl	80026a8 <sdmmc_readBitmap>
 8004984:	4603      	mov	r3, r0
 8004986:	72fb      	strb	r3, [r7, #11]
				inst->status.bat1ImageFilename);
		if (returnVal != SDMMC_SUCCESS) {
 8004988:	7afb      	ldrb	r3, [r7, #11]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d016      	beq.n	80049bc <ui_framework_drawStatusBar+0x2d4>
			DebugLogPrintf(__FUNCTION__, "sdmmc_readFile(%s) error",
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	461a      	mov	r2, r3
 8004994:	4905      	ldr	r1, [pc, #20]	@ (80049ac <ui_framework_drawStatusBar+0x2c4>)
 8004996:	4804      	ldr	r0, [pc, #16]	@ (80049a8 <ui_framework_drawStatusBar+0x2c0>)
 8004998:	f7fd fe14 	bl	80025c4 <DebugLogPrintf>
					inst->status.bat1ImageFilename);
			return UI_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e04b      	b.n	8004a38 <ui_framework_drawStatusBar+0x350>
 80049a0:	20002d08 	.word	0x20002d08
 80049a4:	0801ebe0 	.word	0x0801ebe0
 80049a8:	0801f160 	.word	0x0801f160
 80049ac:	0801ebfc 	.word	0x0801ebfc
 80049b0:	0801f03c 	.word	0x0801f03c
 80049b4:	0801ec18 	.word	0x0801ec18
 80049b8:	0801ec38 	.word	0x0801ec38
		}

		tft_st7789_drawImage(&tft, tft.width - 54 - xOffset,                // X
 80049bc:	4b20      	ldr	r3, [pc, #128]	@ (8004a40 <ui_framework_drawStatusBar+0x358>)
 80049be:	889b      	ldrh	r3, [r3, #4]
 80049c0:	4a20      	ldr	r2, [pc, #128]	@ (8004a44 <ui_framework_drawStatusBar+0x35c>)
 80049c2:	7812      	ldrb	r2, [r2, #0]
 80049c4:	1a9b      	subs	r3, r3, r2
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	3b36      	subs	r3, #54	@ 0x36
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	b219      	sxth	r1, r3
				0,                                                          // Y
				((sdmmc_instance_t*) inst->sdmmcInstance)->imgBuffer.widthPx, // W
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049d4:	f8d3 3570 	ldr.w	r3, [r3, #1392]	@ 0x570
 80049d8:	789b      	ldrb	r3, [r3, #2]
		tft_st7789_drawImage(&tft, tft.width - 54 - xOffset,                // X
 80049da:	b218      	sxth	r0, r3
				((sdmmc_instance_t*) inst->sdmmcInstance)->imgBuffer.heightPx, // H
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049e2:	f8d3 3570 	ldr.w	r3, [r3, #1392]	@ 0x570
 80049e6:	78db      	ldrb	r3, [r3, #3]
		tft_st7789_drawImage(&tft, tft.width - 54 - xOffset,                // X
 80049e8:	b21b      	sxth	r3, r3
				(uint8_t*) ((sdmmc_instance_t*) inst->sdmmcInstance)->imgBuffer.buffer); // draw battery icon
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80049f0:	f8d2 2570 	ldr.w	r2, [r2, #1392]	@ 0x570
 80049f4:	3204      	adds	r2, #4
		tft_st7789_drawImage(&tft, tft.width - 54 - xOffset,                // X
 80049f6:	9201      	str	r2, [sp, #4]
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	4603      	mov	r3, r0
 80049fc:	2200      	movs	r2, #0
 80049fe:	4810      	ldr	r0, [pc, #64]	@ (8004a40 <ui_framework_drawStatusBar+0x358>)
 8004a00:	f7fe fdba 	bl	8003578 <tft_st7789_drawImage>
	}

	// Draw black line seperator
	returnVal = tft_st7789_drawFastHLine(&tft, inst->status.x, inst->status.h,
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	891b      	ldrh	r3, [r3, #8]
 8004a08:	b219      	sxth	r1, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	89db      	ldrh	r3, [r3, #14]
 8004a0e:	b21a      	sxth	r2, r3
			inst->status.w,
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	899b      	ldrh	r3, [r3, #12]
	returnVal = tft_st7789_drawFastHLine(&tft, inst->status.x, inst->status.h,
 8004a14:	b21b      	sxth	r3, r3
 8004a16:	2000      	movs	r0, #0
 8004a18:	9000      	str	r0, [sp, #0]
 8004a1a:	4809      	ldr	r0, [pc, #36]	@ (8004a40 <ui_framework_drawStatusBar+0x358>)
 8004a1c:	f7fe fb22 	bl	8003064 <tft_st7789_drawFastHLine>
 8004a20:	4603      	mov	r3, r0
 8004a22:	73fb      	strb	r3, [r7, #15]
			Black);
	if (returnVal != ST77XX_SUCCESS) {
 8004a24:	7bfb      	ldrb	r3, [r7, #15]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d005      	beq.n	8004a36 <ui_framework_drawStatusBar+0x34e>
		DebugLogPrintf(__FUNCTION__, "tft_st7789_drawFastHLine error");
 8004a2a:	4907      	ldr	r1, [pc, #28]	@ (8004a48 <ui_framework_drawStatusBar+0x360>)
 8004a2c:	4807      	ldr	r0, [pc, #28]	@ (8004a4c <ui_framework_drawStatusBar+0x364>)
 8004a2e:	f7fd fdc9 	bl	80025c4 <DebugLogPrintf>
		return UI_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e000      	b.n	8004a38 <ui_framework_drawStatusBar+0x350>
	}

	return UI_SUCCESS;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd90      	pop	{r4, r7, pc}
 8004a40:	20002d08 	.word	0x20002d08
 8004a44:	0801f03c 	.word	0x0801f03c
 8004a48:	0801ec44 	.word	0x0801ec44
 8004a4c:	0801f160 	.word	0x0801f160

08004a50 <ui_framework_drawTextBox>:

ui_framework_return_e ui_framework_drawTextBox(ui_framework_instance_t *inst,
		ui_framework_widtget_t *widget) {
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
	ST77XX_Return_e retValue;

	retValue = tft_st7789_setFontSize(&tft, widget->textbox.fontSize);
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004a60:	4619      	mov	r1, r3
 8004a62:	481f      	ldr	r0, [pc, #124]	@ (8004ae0 <ui_framework_drawTextBox+0x90>)
 8004a64:	f7fe ff56 	bl	8003914 <tft_st7789_setFontSize>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	73fb      	strb	r3, [r7, #15]
	if (retValue != ST77XX_SUCCESS) {
 8004a6c:	7bfb      	ldrb	r3, [r7, #15]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d005      	beq.n	8004a7e <ui_framework_drawTextBox+0x2e>
		DebugLogPrintf(__FUNCTION__, "error - tft_st7789_setFontSize");
 8004a72:	491c      	ldr	r1, [pc, #112]	@ (8004ae4 <ui_framework_drawTextBox+0x94>)
 8004a74:	481c      	ldr	r0, [pc, #112]	@ (8004ae8 <ui_framework_drawTextBox+0x98>)
 8004a76:	f7fd fda5 	bl	80025c4 <DebugLogPrintf>
		return UI_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e02c      	b.n	8004ad8 <ui_framework_drawTextBox+0x88>
	}

	retValue = tft_st7789_setPosition(&tft, xOffset + widget->x, widget->y);
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	885b      	ldrh	r3, [r3, #2]
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	4b19      	ldr	r3, [pc, #100]	@ (8004aec <ui_framework_drawTextBox+0x9c>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	4413      	add	r3, r2
 8004a8a:	b2d9      	uxtb	r1, r3
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	889b      	ldrh	r3, [r3, #4]
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	461a      	mov	r2, r3
 8004a94:	4812      	ldr	r0, [pc, #72]	@ (8004ae0 <ui_framework_drawTextBox+0x90>)
 8004a96:	f7fe ff04 	bl	80038a2 <tft_st7789_setPosition>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	73fb      	strb	r3, [r7, #15]
	if (retValue != ST77XX_SUCCESS) {
 8004a9e:	7bfb      	ldrb	r3, [r7, #15]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d005      	beq.n	8004ab0 <ui_framework_drawTextBox+0x60>
		DebugLogPrintf(__FUNCTION__, "error - tft_st7789_setFontSize");
 8004aa4:	490f      	ldr	r1, [pc, #60]	@ (8004ae4 <ui_framework_drawTextBox+0x94>)
 8004aa6:	4810      	ldr	r0, [pc, #64]	@ (8004ae8 <ui_framework_drawTextBox+0x98>)
 8004aa8:	f7fd fd8c 	bl	80025c4 <DebugLogPrintf>
		return UI_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e013      	b.n	8004ad8 <ui_framework_drawTextBox+0x88>
	}

	retValue = tft_st7789_drawString(&tft, &widget->textbox.text,
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	f103 010c 	add.w	r1, r3, #12
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004aba:	461a      	mov	r2, r3
 8004abc:	4808      	ldr	r0, [pc, #32]	@ (8004ae0 <ui_framework_drawTextBox+0x90>)
 8004abe:	f7fe ff39 	bl	8003934 <tft_st7789_drawString>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	73fb      	strb	r3, [r7, #15]
			widget->textbox.textColor);
	if (retValue != ST77XX_SUCCESS) {
 8004ac6:	7bfb      	ldrb	r3, [r7, #15]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d005      	beq.n	8004ad8 <ui_framework_drawTextBox+0x88>
		DebugLogPrintf(__FUNCTION__, "error - tft_st7789_setFontSize");
 8004acc:	4905      	ldr	r1, [pc, #20]	@ (8004ae4 <ui_framework_drawTextBox+0x94>)
 8004ace:	4806      	ldr	r0, [pc, #24]	@ (8004ae8 <ui_framework_drawTextBox+0x98>)
 8004ad0:	f7fd fd78 	bl	80025c4 <DebugLogPrintf>
		return UI_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e7ff      	b.n	8004ad8 <ui_framework_drawTextBox+0x88>
	}
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	20002d08 	.word	0x20002d08
 8004ae4:	0801ec18 	.word	0x0801ec18
 8004ae8:	0801f17c 	.word	0x0801f17c
 8004aec:	0801f03c 	.word	0x0801f03c

08004af0 <ui_framework_drawButton>:

ui_framework_return_e ui_framework_drawButton(ui_framework_instance_t *inst,
		ui_framework_widtget_t *widget) {
 8004af0:	b5b0      	push	{r4, r5, r7, lr}
 8004af2:	b088      	sub	sp, #32
 8004af4:	af04      	add	r7, sp, #16
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
	ST77XX_Return_e retValue;

	// Draw button background
	if (widget->button.cornerRadius == 0) {
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d124      	bne.n	8004b4e <ui_framework_drawButton+0x5e>
		// Just draw regular box
		retValue = tft_st7789_fillRect(&tft, xOffset + widget->x, widget->y,
 8004b04:	4b9d      	ldr	r3, [pc, #628]	@ (8004d7c <ui_framework_drawButton+0x28c>)
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	461a      	mov	r2, r3
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	885b      	ldrh	r3, [r3, #2]
 8004b0e:	4413      	add	r3, r2
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	b219      	sxth	r1, r3
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	889b      	ldrh	r3, [r3, #4]
 8004b18:	b218      	sxth	r0, r3
				widget->w, widget->h, widget->button.backgroundColor);
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	88db      	ldrh	r3, [r3, #6]
		retValue = tft_st7789_fillRect(&tft, xOffset + widget->x, widget->y,
 8004b1e:	b21c      	sxth	r4, r3
				widget->w, widget->h, widget->button.backgroundColor);
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	891b      	ldrh	r3, [r3, #8]
		retValue = tft_st7789_fillRect(&tft, xOffset + widget->x, widget->y,
 8004b24:	b21b      	sxth	r3, r3
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	8b92      	ldrh	r2, [r2, #28]
 8004b2a:	9201      	str	r2, [sp, #4]
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	4623      	mov	r3, r4
 8004b30:	4602      	mov	r2, r0
 8004b32:	4893      	ldr	r0, [pc, #588]	@ (8004d80 <ui_framework_drawButton+0x290>)
 8004b34:	f7fe f9e9 	bl	8002f0a <tft_st7789_fillRect>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	73bb      	strb	r3, [r7, #14]
		if (retValue != ST77XX_SUCCESS) {
 8004b3c:	7bbb      	ldrb	r3, [r7, #14]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d02b      	beq.n	8004b9a <ui_framework_drawButton+0xaa>
			DebugLogPrintf(__FUNCTION__, "tft_st7789_fillRect error");
 8004b42:	4990      	ldr	r1, [pc, #576]	@ (8004d84 <ui_framework_drawButton+0x294>)
 8004b44:	4890      	ldr	r0, [pc, #576]	@ (8004d88 <ui_framework_drawButton+0x298>)
 8004b46:	f7fd fd3d 	bl	80025c4 <DebugLogPrintf>
			return UI_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e14c      	b.n	8004de8 <ui_framework_drawButton+0x2f8>
		}
	} else // Draw box with rounded corners
	{
		ui_framework_return_e retVal = ui_framework_drawFilledRoundedBox(inst,
 8004b4e:	4b8b      	ldr	r3, [pc, #556]	@ (8004d7c <ui_framework_drawButton+0x28c>)
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	461a      	mov	r2, r3
				xOffset + widget->x, widget->y, widget->w, widget->h,
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	885b      	ldrh	r3, [r3, #2]
		ui_framework_return_e retVal = ui_framework_drawFilledRoundedBox(inst,
 8004b58:	4413      	add	r3, r2
 8004b5a:	b299      	uxth	r1, r3
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	8898      	ldrh	r0, [r3, #4]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	88dc      	ldrh	r4, [r3, #6]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	891b      	ldrh	r3, [r3, #8]
				widget->button.cornerRadius, widget->button.backgroundColor);
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
		ui_framework_return_e retVal = ui_framework_drawFilledRoundedBox(inst,
 8004b6e:	4615      	mov	r5, r2
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	8b92      	ldrh	r2, [r2, #28]
 8004b74:	9202      	str	r2, [sp, #8]
 8004b76:	9501      	str	r5, [sp, #4]
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	4623      	mov	r3, r4
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 fb24 	bl	80051cc <ui_framework_drawFilledRoundedBox>
 8004b84:	4603      	mov	r3, r0
 8004b86:	73fb      	strb	r3, [r7, #15]
		if (retVal != UI_SUCCESS) {
 8004b88:	7bfb      	ldrb	r3, [r7, #15]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d005      	beq.n	8004b9a <ui_framework_drawButton+0xaa>
			DebugLogPrintf(__FUNCTION__,
 8004b8e:	497f      	ldr	r1, [pc, #508]	@ (8004d8c <ui_framework_drawButton+0x29c>)
 8004b90:	487d      	ldr	r0, [pc, #500]	@ (8004d88 <ui_framework_drawButton+0x298>)
 8004b92:	f7fd fd17 	bl	80025c4 <DebugLogPrintf>
					"ui_framework_drawFilledRoundedBox error");
			return UI_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e126      	b.n	8004de8 <ui_framework_drawButton+0x2f8>
		}
	}

	// If the button is an image-button, draw image
	if (widget->button.imageFilename != NULL) {
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d06c      	beq.n	8004c7c <ui_framework_drawButton+0x18c>
		// Read bitmap file from filesystem
		sdmmc_return_e returnVal = sdmmc_readBitmap(inst->sdmmcInstance,
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ba8:	f8d3 2570 	ldr.w	r2, [r3, #1392]	@ 0x570
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	4610      	mov	r0, r2
 8004bb4:	f7fd fd78 	bl	80026a8 <sdmmc_readBitmap>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	737b      	strb	r3, [r7, #13]
				widget->button.imageFilename);
		if (returnVal != SDMMC_SUCCESS) {
 8004bbc:	7b7b      	ldrb	r3, [r7, #13]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d008      	beq.n	8004bd4 <ui_framework_drawButton+0xe4>
			DebugLogPrintf(__FUNCTION__, "sdmmc_readFile(%s) error",
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	4971      	ldr	r1, [pc, #452]	@ (8004d90 <ui_framework_drawButton+0x2a0>)
 8004bca:	486f      	ldr	r0, [pc, #444]	@ (8004d88 <ui_framework_drawButton+0x298>)
 8004bcc:	f7fd fcfa 	bl	80025c4 <DebugLogPrintf>
					widget->button.imageFilename);
			return UI_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e109      	b.n	8004de8 <ui_framework_drawButton+0x2f8>
		}

		// Draw image in upper center
		retValue =
				tft_st7789_drawImage(&tft,
						xOffset + widget->x
 8004bd4:	4b69      	ldr	r3, [pc, #420]	@ (8004d7c <ui_framework_drawButton+0x28c>)
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	461a      	mov	r2, r3
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	885b      	ldrh	r3, [r3, #2]
 8004bde:	4413      	add	r3, r2
 8004be0:	b29a      	uxth	r2, r3
								+ ((widget->w
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	88db      	ldrh	r3, [r3, #6]
 8004be6:	4619      	mov	r1, r3
										- ((sdmmc_instance_t*) inst->sdmmcInstance)->imgBuffer.widthPx)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bee:	f8d3 3570 	ldr.w	r3, [r3, #1392]	@ 0x570
 8004bf2:	789b      	ldrb	r3, [r3, #2]
 8004bf4:	1acb      	subs	r3, r1, r3
										/ 2),
 8004bf6:	0fd9      	lsrs	r1, r3, #31
 8004bf8:	440b      	add	r3, r1
 8004bfa:	105b      	asrs	r3, r3, #1
								+ ((widget->w
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	4413      	add	r3, r2
 8004c00:	b29b      	uxth	r3, r3
				tft_st7789_drawImage(&tft,
 8004c02:	b218      	sxth	r0, r3
						widget->y
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	889a      	ldrh	r2, [r3, #4]
								+ ((widget->h
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	891b      	ldrh	r3, [r3, #8]
 8004c0c:	4619      	mov	r1, r3
										- ((sdmmc_instance_t*) inst->sdmmcInstance)->imgBuffer.heightPx)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c14:	f8d3 3570 	ldr.w	r3, [r3, #1392]	@ 0x570
 8004c18:	78db      	ldrb	r3, [r3, #3]
 8004c1a:	1acb      	subs	r3, r1, r3
										/ 2) - 10,
 8004c1c:	0fd9      	lsrs	r1, r3, #31
 8004c1e:	440b      	add	r3, r1
 8004c20:	105b      	asrs	r3, r3, #1
								+ ((widget->h
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	4413      	add	r3, r2
 8004c26:	b29b      	uxth	r3, r3
										/ 2) - 10,
 8004c28:	3b0a      	subs	r3, #10
 8004c2a:	b29b      	uxth	r3, r3
				tft_st7789_drawImage(&tft,
 8004c2c:	b219      	sxth	r1, r3
						((sdmmc_instance_t*) inst->sdmmcInstance)->imgBuffer.widthPx, // W
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c34:	f8d3 3570 	ldr.w	r3, [r3, #1392]	@ 0x570
 8004c38:	789b      	ldrb	r3, [r3, #2]
				tft_st7789_drawImage(&tft,
 8004c3a:	b21c      	sxth	r4, r3
						((sdmmc_instance_t*) inst->sdmmcInstance)->imgBuffer.heightPx, // H
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c42:	f8d3 3570 	ldr.w	r3, [r3, #1392]	@ 0x570
 8004c46:	78db      	ldrb	r3, [r3, #3]
				tft_st7789_drawImage(&tft,
 8004c48:	b21b      	sxth	r3, r3
						(uint8_t*) ((sdmmc_instance_t*) inst->sdmmcInstance)->imgBuffer.buffer);
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004c50:	f8d2 2570 	ldr.w	r2, [r2, #1392]	@ 0x570
 8004c54:	3204      	adds	r2, #4
				tft_st7789_drawImage(&tft,
 8004c56:	9201      	str	r2, [sp, #4]
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	4623      	mov	r3, r4
 8004c5c:	460a      	mov	r2, r1
 8004c5e:	4601      	mov	r1, r0
 8004c60:	4847      	ldr	r0, [pc, #284]	@ (8004d80 <ui_framework_drawButton+0x290>)
 8004c62:	f7fe fc89 	bl	8003578 <tft_st7789_drawImage>
 8004c66:	4603      	mov	r3, r0
 8004c68:	73bb      	strb	r3, [r7, #14]
		if (retValue != ST77XX_SUCCESS) {
 8004c6a:	7bbb      	ldrb	r3, [r7, #14]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d005      	beq.n	8004c7c <ui_framework_drawButton+0x18c>
			DebugLogPrintf(__FUNCTION__, "tft_st7789_drawImage error");
 8004c70:	4948      	ldr	r1, [pc, #288]	@ (8004d94 <ui_framework_drawButton+0x2a4>)
 8004c72:	4845      	ldr	r0, [pc, #276]	@ (8004d88 <ui_framework_drawButton+0x298>)
 8004c74:	f7fd fca6 	bl	80025c4 <DebugLogPrintf>
			return UI_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e0b5      	b.n	8004de8 <ui_framework_drawButton+0x2f8>
		}
	}

	retValue = tft_st7789_setFontSize(&tft, widget->button.fontSize);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	7d9b      	ldrb	r3, [r3, #22]
 8004c80:	4619      	mov	r1, r3
 8004c82:	483f      	ldr	r0, [pc, #252]	@ (8004d80 <ui_framework_drawButton+0x290>)
 8004c84:	f7fe fe46 	bl	8003914 <tft_st7789_setFontSize>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	73bb      	strb	r3, [r7, #14]
	if (retValue != ST77XX_SUCCESS) {
 8004c8c:	7bbb      	ldrb	r3, [r7, #14]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d005      	beq.n	8004c9e <ui_framework_drawButton+0x1ae>
		DebugLogPrintf(__FUNCTION__, "error - tft_st7789_setFontSize");
 8004c92:	4941      	ldr	r1, [pc, #260]	@ (8004d98 <ui_framework_drawButton+0x2a8>)
 8004c94:	483c      	ldr	r0, [pc, #240]	@ (8004d88 <ui_framework_drawButton+0x298>)
 8004c96:	f7fd fc95 	bl	80025c4 <DebugLogPrintf>
		return UI_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e0a4      	b.n	8004de8 <ui_framework_drawButton+0x2f8>
	}

	// Dynamically calc the start position for the text.
	// Note: font size starts at 0
	uint16_t xTextStart = (xOffset + widget->x + (widget->w / 2)
 8004c9e:	4b37      	ldr	r3, [pc, #220]	@ (8004d7c <ui_framework_drawButton+0x28c>)
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	885b      	ldrh	r3, [r3, #2]
 8004ca8:	4413      	add	r3, r2
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	88db      	ldrh	r3, [r3, #6]
 8004cb0:	085b      	lsrs	r3, r3, #1
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	4413      	add	r3, r2
 8004cb6:	b29c      	uxth	r4, r3
			- ((strlen(widget->button.text) * (widget->button.fontSize + 1)
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	330c      	adds	r3, #12
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7fb fa87 	bl	80001d0 <strlen>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	7d9b      	ldrb	r3, [r3, #22]
 8004cc8:	3301      	adds	r3, #1
 8004cca:	fb03 f202 	mul.w	r2, r3, r2
					* CHARS_COLS_LENGTH) / 2));
 8004cce:	4613      	mov	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4413      	add	r3, r2
 8004cd4:	085b      	lsrs	r3, r3, #1
			- ((strlen(widget->button.text) * (widget->button.fontSize + 1)
 8004cd6:	b29b      	uxth	r3, r3
	uint16_t xTextStart = (xOffset + widget->x + (widget->w / 2)
 8004cd8:	1ae3      	subs	r3, r4, r3
 8004cda:	817b      	strh	r3, [r7, #10]
	uint16_t yTextStart =
			widget->button.drawImage ?
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
	uint16_t yTextStart =
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d010      	beq.n	8004d08 <ui_framework_drawButton+0x218>
					(widget->y + widget->h
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	889a      	ldrh	r2, [r3, #4]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	891b      	ldrh	r3, [r3, #8]
 8004cee:	4413      	add	r3, r2
 8004cf0:	b29c      	uxth	r4, r3
							- ui_framework_getFontPixelSize(
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	7d9b      	ldrb	r3, [r3, #22]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7ff fa6b 	bl	80041d2 <ui_framework_getFontPixelSize>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	1ae3      	subs	r3, r4, r3
 8004d00:	b29b      	uxth	r3, r3
	uint16_t yTextStart =
 8004d02:	3b0a      	subs	r3, #10
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	e011      	b.n	8004d2c <ui_framework_drawButton+0x23c>
									widget->button.fontSize) - 10) :
					widget->y
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	889c      	ldrh	r4, [r3, #4]
							+ (widget->h
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	891b      	ldrh	r3, [r3, #8]
 8004d10:	461d      	mov	r5, r3
									- ui_framework_getFontPixelSize(
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	7d9b      	ldrb	r3, [r3, #22]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7ff fa5b 	bl	80041d2 <ui_framework_getFontPixelSize>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	1aeb      	subs	r3, r5, r3
											widget->button.fontSize)) / 2;
 8004d20:	0fda      	lsrs	r2, r3, #31
 8004d22:	4413      	add	r3, r2
 8004d24:	105b      	asrs	r3, r3, #1
							+ (widget->h
 8004d26:	b29b      	uxth	r3, r3
	uint16_t yTextStart =
 8004d28:	4423      	add	r3, r4
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	813b      	strh	r3, [r7, #8]

	retValue = tft_st7789_setPosition(&tft, xTextStart, yTextStart);
 8004d2e:	897b      	ldrh	r3, [r7, #10]
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	893a      	ldrh	r2, [r7, #8]
 8004d34:	b2d2      	uxtb	r2, r2
 8004d36:	4619      	mov	r1, r3
 8004d38:	4811      	ldr	r0, [pc, #68]	@ (8004d80 <ui_framework_drawButton+0x290>)
 8004d3a:	f7fe fdb2 	bl	80038a2 <tft_st7789_setPosition>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	73bb      	strb	r3, [r7, #14]
	if (retValue != ST77XX_SUCCESS) {
 8004d42:	7bbb      	ldrb	r3, [r7, #14]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d005      	beq.n	8004d54 <ui_framework_drawButton+0x264>
		DebugLogPrintf(__FUNCTION__, "error - tft_st7789_setFontSize");
 8004d48:	4913      	ldr	r1, [pc, #76]	@ (8004d98 <ui_framework_drawButton+0x2a8>)
 8004d4a:	480f      	ldr	r0, [pc, #60]	@ (8004d88 <ui_framework_drawButton+0x298>)
 8004d4c:	f7fd fc3a 	bl	80025c4 <DebugLogPrintf>
		return UI_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e049      	b.n	8004de8 <ui_framework_drawButton+0x2f8>
	}

	retValue = tft_st7789_drawString(&tft, (char*) &widget->button.text,
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	f103 010c 	add.w	r1, r3, #12
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	8b1b      	ldrh	r3, [r3, #24]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	4807      	ldr	r0, [pc, #28]	@ (8004d80 <ui_framework_drawButton+0x290>)
 8004d62:	f7fe fde7 	bl	8003934 <tft_st7789_drawString>
 8004d66:	4603      	mov	r3, r0
 8004d68:	73bb      	strb	r3, [r7, #14]
			widget->button.textColor);
	if (retValue != ST77XX_SUCCESS) {
 8004d6a:	7bbb      	ldrb	r3, [r7, #14]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d015      	beq.n	8004d9c <ui_framework_drawButton+0x2ac>
		DebugLogPrintf(__FUNCTION__, "error - tft_st7789_setFontSize");
 8004d70:	4909      	ldr	r1, [pc, #36]	@ (8004d98 <ui_framework_drawButton+0x2a8>)
 8004d72:	4805      	ldr	r0, [pc, #20]	@ (8004d88 <ui_framework_drawButton+0x298>)
 8004d74:	f7fd fc26 	bl	80025c4 <DebugLogPrintf>
		return UI_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e035      	b.n	8004de8 <ui_framework_drawButton+0x2f8>
 8004d7c:	0801f03c 	.word	0x0801f03c
 8004d80:	20002d08 	.word	0x20002d08
 8004d84:	0801ebe0 	.word	0x0801ebe0
 8004d88:	0801f198 	.word	0x0801f198
 8004d8c:	0801ec64 	.word	0x0801ec64
 8004d90:	0801ebfc 	.word	0x0801ebfc
 8004d94:	0801ec8c 	.word	0x0801ec8c
 8004d98:	0801ec18 	.word	0x0801ec18
	}

	// If the widget is selected, draw outline
	if (inst->selectedWidgetId == widget->id) {
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004da2:	f8b3 2532 	ldrh.w	r2, [r3, #1330]	@ 0x532
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	881b      	ldrh	r3, [r3, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d11b      	bne.n	8004de6 <ui_framework_drawButton+0x2f6>
		ui_framework_drawRoundedBox(inst, xOffset + widget->x, widget->y,
 8004dae:	4b10      	ldr	r3, [pc, #64]	@ (8004df0 <ui_framework_drawButton+0x300>)
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	461a      	mov	r2, r3
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	885b      	ldrh	r3, [r3, #2]
 8004db8:	4413      	add	r3, r2
 8004dba:	b299      	uxth	r1, r3
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	8898      	ldrh	r0, [r3, #4]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	88dc      	ldrh	r4, [r3, #6]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	891b      	ldrh	r3, [r3, #8]
				widget->w, widget->h, widget->button.cornerRadius,
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
		ui_framework_drawRoundedBox(inst, xOffset + widget->x, widget->y,
 8004dce:	4615      	mov	r5, r2
 8004dd0:	2205      	movs	r2, #5
 8004dd2:	9203      	str	r2, [sp, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	9202      	str	r2, [sp, #8]
 8004dd8:	9501      	str	r5, [sp, #4]
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	4623      	mov	r3, r4
 8004dde:	4602      	mov	r2, r0
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 f8f7 	bl	8004fd4 <ui_framework_drawRoundedBox>
				Black, 5);
	}

	return UI_SUCCESS;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bdb0      	pop	{r4, r5, r7, pc}
 8004df0:	0801f03c 	.word	0x0801f03c

08004df4 <ui_framework_drawGroupBox>:

ui_framework_return_e ui_framework_drawGroupBox(ui_framework_instance_t *inst,
		ui_framework_widtget_t *widget) {
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af02      	add	r7, sp, #8
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
	ST77XX_Return_e retValue;

	// Draw the rectangle edges connecting the corners
	tft_st7789_drawFastHLine(&tft, widget->x + widget->groupbox.cornerRadius,
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	885b      	ldrh	r3, [r3, #2]
 8004e02:	683a      	ldr	r2, [r7, #0]
 8004e04:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 8004e08:	4413      	add	r3, r2
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	b219      	sxth	r1, r3
			widget->y + CHARS_ROWS_LENGTH, // CHAR_HEIGHT_PX + VERTICAL_MARGIN,
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	889b      	ldrh	r3, [r3, #4]
 8004e12:	3308      	adds	r3, #8
 8004e14:	b29b      	uxth	r3, r3
	tft_st7789_drawFastHLine(&tft, widget->x + widget->groupbox.cornerRadius,
 8004e16:	b218      	sxth	r0, r3
			widget->x + widget->w - widget->groupbox.cornerRadius,
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	885a      	ldrh	r2, [r3, #2]
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	88db      	ldrh	r3, [r3, #6]
 8004e20:	4413      	add	r3, r2
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 8004e2a:	1a9b      	subs	r3, r3, r2
 8004e2c:	b29b      	uxth	r3, r3
	tft_st7789_drawFastHLine(&tft, widget->x + widget->groupbox.cornerRadius,
 8004e2e:	b21a      	sxth	r2, r3
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	4613      	mov	r3, r2
 8004e38:	4602      	mov	r2, r0
 8004e3a:	4862      	ldr	r0, [pc, #392]	@ (8004fc4 <ui_framework_drawGroupBox+0x1d0>)
 8004e3c:	f7fe f912 	bl	8003064 <tft_st7789_drawFastHLine>
			widget->groupbox.outlineColor); // Top edge
	tft_st7789_drawFastVLine(&tft, widget->x + widget->w,
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	885a      	ldrh	r2, [r3, #2]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	88db      	ldrh	r3, [r3, #6]
 8004e48:	4413      	add	r3, r2
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	b219      	sxth	r1, r3
			widget->y + CHARS_ROWS_LENGTH + widget->groupbox.cornerRadius, // + VERTICAL_MARGIN,
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	889b      	ldrh	r3, [r3, #4]
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 8004e58:	4413      	add	r3, r2
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	3308      	adds	r3, #8
 8004e5e:	b29b      	uxth	r3, r3
	tft_st7789_drawFastVLine(&tft, widget->x + widget->w,
 8004e60:	b218      	sxth	r0, r3
			widget->y + CHARS_ROWS_LENGTH + widget->h
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	889a      	ldrh	r2, [r3, #4]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	891b      	ldrh	r3, [r3, #8]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	b29b      	uxth	r3, r3
					- widget->groupbox.cornerRadius, // + VERTICAL_MARGIN,
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 8004e74:	1a9b      	subs	r3, r3, r2
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	3308      	adds	r3, #8
 8004e7a:	b29b      	uxth	r3, r3
	tft_st7789_drawFastVLine(&tft, widget->x + widget->w,
 8004e7c:	b21a      	sxth	r2, r3
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	4613      	mov	r3, r2
 8004e86:	4602      	mov	r2, r0
 8004e88:	484e      	ldr	r0, [pc, #312]	@ (8004fc4 <ui_framework_drawGroupBox+0x1d0>)
 8004e8a:	f7fe f963 	bl	8003154 <tft_st7789_drawFastVLine>
			widget->groupbox.outlineColor);                        // Right edge
	tft_st7789_drawFastHLine(&tft, widget->x + widget->groupbox.cornerRadius,
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	885b      	ldrh	r3, [r3, #2]
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 8004e98:	4413      	add	r3, r2
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	b219      	sxth	r1, r3
			widget->y + CHARS_ROWS_LENGTH + widget->h, // + VERTICAL_MARGIN,
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	889a      	ldrh	r2, [r3, #4]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	891b      	ldrh	r3, [r3, #8]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	3308      	adds	r3, #8
 8004eac:	b29b      	uxth	r3, r3
	tft_st7789_drawFastHLine(&tft, widget->x + widget->groupbox.cornerRadius,
 8004eae:	b218      	sxth	r0, r3
			widget->x + widget->w - widget->groupbox.cornerRadius,
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	885a      	ldrh	r2, [r3, #2]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	88db      	ldrh	r3, [r3, #6]
 8004eb8:	4413      	add	r3, r2
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 8004ec2:	1a9b      	subs	r3, r3, r2
 8004ec4:	b29b      	uxth	r3, r3
	tft_st7789_drawFastHLine(&tft, widget->x + widget->groupbox.cornerRadius,
 8004ec6:	b21a      	sxth	r2, r3
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ecc:	9300      	str	r3, [sp, #0]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	483c      	ldr	r0, [pc, #240]	@ (8004fc4 <ui_framework_drawGroupBox+0x1d0>)
 8004ed4:	f7fe f8c6 	bl	8003064 <tft_st7789_drawFastHLine>
			widget->groupbox.outlineColor); // Bottom edge
	tft_st7789_drawFastVLine(&tft, widget->x,
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	885b      	ldrh	r3, [r3, #2]
 8004edc:	b219      	sxth	r1, r3
			widget->y + CHARS_ROWS_LENGTH + widget->groupbox.cornerRadius, // + VERTICAL_MARGIN,
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	889b      	ldrh	r3, [r3, #4]
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 8004ee8:	4413      	add	r3, r2
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	3308      	adds	r3, #8
 8004eee:	b29b      	uxth	r3, r3
	tft_st7789_drawFastVLine(&tft, widget->x,
 8004ef0:	b218      	sxth	r0, r3
			widget->y + CHARS_ROWS_LENGTH + widget->h
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	889a      	ldrh	r2, [r3, #4]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	891b      	ldrh	r3, [r3, #8]
 8004efa:	4413      	add	r3, r2
 8004efc:	b29b      	uxth	r3, r3
					- widget->groupbox.cornerRadius, // + VERTICAL_MARGIN,
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 8004f04:	1a9b      	subs	r3, r3, r2
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	3308      	adds	r3, #8
 8004f0a:	b29b      	uxth	r3, r3
	tft_st7789_drawFastVLine(&tft, widget->x,
 8004f0c:	b21a      	sxth	r2, r3
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	4613      	mov	r3, r2
 8004f16:	4602      	mov	r2, r0
 8004f18:	482a      	ldr	r0, [pc, #168]	@ (8004fc4 <ui_framework_drawGroupBox+0x1d0>)
 8004f1a:	f7fe f91b 	bl	8003154 <tft_st7789_drawFastVLine>
	//                     y + CHAR_HEIGHT_PX + height - radius + VERTICAL_MARGIN,
	//                     x + width - radius,
	//                     y + CHAR_HEIGHT_PX + height + VERTICAL_MARGIN,
	//                     boxColor); // Bottom-right corner

	retValue = tft_st7789_setFontSize(&tft, widget->button.fontSize);
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	7d9b      	ldrb	r3, [r3, #22]
 8004f22:	4619      	mov	r1, r3
 8004f24:	4827      	ldr	r0, [pc, #156]	@ (8004fc4 <ui_framework_drawGroupBox+0x1d0>)
 8004f26:	f7fe fcf5 	bl	8003914 <tft_st7789_setFontSize>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	73fb      	strb	r3, [r7, #15]
	if (retValue != ST77XX_SUCCESS) {
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d005      	beq.n	8004f40 <ui_framework_drawGroupBox+0x14c>
		DebugLogPrintf(__FUNCTION__, "error - tft_st7789_setFontSize");
 8004f34:	4924      	ldr	r1, [pc, #144]	@ (8004fc8 <ui_framework_drawGroupBox+0x1d4>)
 8004f36:	4825      	ldr	r0, [pc, #148]	@ (8004fcc <ui_framework_drawGroupBox+0x1d8>)
 8004f38:	f7fd fb44 	bl	80025c4 <DebugLogPrintf>
		return UI_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e03d      	b.n	8004fbc <ui_framework_drawGroupBox+0x1c8>
	}

	retValue = tft_st7789_setPosition(&tft,
			xOffset + widget->x + (widget->w / 2) - 25, // todo adjust this for font size and num chars
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	885b      	ldrh	r3, [r3, #2]
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	4b22      	ldr	r3, [pc, #136]	@ (8004fd0 <ui_framework_drawGroupBox+0x1dc>)
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	b2da      	uxtb	r2, r3
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	88db      	ldrh	r3, [r3, #6]
 8004f52:	085b      	lsrs	r3, r3, #1
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	4413      	add	r3, r2
 8004f5a:	b2db      	uxtb	r3, r3
	retValue = tft_st7789_setPosition(&tft,
 8004f5c:	3b19      	subs	r3, #25
 8004f5e:	b2d9      	uxtb	r1, r3
			widget->y + widget->h - 26);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	889b      	ldrh	r3, [r3, #4]
 8004f64:	b2da      	uxtb	r2, r3
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	891b      	ldrh	r3, [r3, #8]
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	4413      	add	r3, r2
 8004f6e:	b2db      	uxtb	r3, r3
	retValue = tft_st7789_setPosition(&tft,
 8004f70:	3b1a      	subs	r3, #26
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	461a      	mov	r2, r3
 8004f76:	4813      	ldr	r0, [pc, #76]	@ (8004fc4 <ui_framework_drawGroupBox+0x1d0>)
 8004f78:	f7fe fc93 	bl	80038a2 <tft_st7789_setPosition>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	73fb      	strb	r3, [r7, #15]
	if (retValue != ST77XX_SUCCESS) {
 8004f80:	7bfb      	ldrb	r3, [r7, #15]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d005      	beq.n	8004f92 <ui_framework_drawGroupBox+0x19e>
		DebugLogPrintf(__FUNCTION__, "error - tft_st7789_setFontSize");
 8004f86:	4910      	ldr	r1, [pc, #64]	@ (8004fc8 <ui_framework_drawGroupBox+0x1d4>)
 8004f88:	4810      	ldr	r0, [pc, #64]	@ (8004fcc <ui_framework_drawGroupBox+0x1d8>)
 8004f8a:	f7fd fb1b 	bl	80025c4 <DebugLogPrintf>
		return UI_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e014      	b.n	8004fbc <ui_framework_drawGroupBox+0x1c8>
	}

	retValue = tft_st7789_drawString(&tft, (char*) &widget->button.text,
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	f103 010c 	add.w	r1, r3, #12
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	8b1b      	ldrh	r3, [r3, #24]
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	4809      	ldr	r0, [pc, #36]	@ (8004fc4 <ui_framework_drawGroupBox+0x1d0>)
 8004fa0:	f7fe fcc8 	bl	8003934 <tft_st7789_drawString>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	73fb      	strb	r3, [r7, #15]
			widget->button.textColor);
	if (retValue != ST77XX_SUCCESS) {
 8004fa8:	7bfb      	ldrb	r3, [r7, #15]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d005      	beq.n	8004fba <ui_framework_drawGroupBox+0x1c6>
		DebugLogPrintf(__FUNCTION__, "error - tft_st7789_setFontSize");
 8004fae:	4906      	ldr	r1, [pc, #24]	@ (8004fc8 <ui_framework_drawGroupBox+0x1d4>)
 8004fb0:	4806      	ldr	r0, [pc, #24]	@ (8004fcc <ui_framework_drawGroupBox+0x1d8>)
 8004fb2:	f7fd fb07 	bl	80025c4 <DebugLogPrintf>
		return UI_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e000      	b.n	8004fbc <ui_framework_drawGroupBox+0x1c8>
	}

	return UI_SUCCESS;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	20002d08 	.word	0x20002d08
 8004fc8:	0801ec18 	.word	0x0801ec18
 8004fcc:	0801f1b0 	.word	0x0801f1b0
 8004fd0:	0801f03c 	.word	0x0801f03c

08004fd4 <ui_framework_drawRoundedBox>:
// Private Functions
//------------------------------------------------------------------------

ui_framework_return_e ui_framework_drawRoundedBox(ui_framework_instance_t *inst,
		uint16_t x, uint16_t y, uint16_t width, uint16_t height,
		uint16_t radius, ui_color color, uint8_t lineThicknessPx) {
 8004fd4:	b590      	push	{r4, r7, lr}
 8004fd6:	b089      	sub	sp, #36	@ 0x24
 8004fd8:	af04      	add	r7, sp, #16
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	4608      	mov	r0, r1
 8004fde:	4611      	mov	r1, r2
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	817b      	strh	r3, [r7, #10]
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	813b      	strh	r3, [r7, #8]
 8004fea:	4613      	mov	r3, r2
 8004fec:	80fb      	strh	r3, [r7, #6]
	// Top Left Corner Arc
	tft_st7789_drawArc(&tft, x + radius, y + radius, radius, 180, 270, color,
 8004fee:	897a      	ldrh	r2, [r7, #10]
 8004ff0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004ff2:	4413      	add	r3, r2
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	b219      	sxth	r1, r3
 8004ff8:	893a      	ldrh	r2, [r7, #8]
 8004ffa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004ffc:	4413      	add	r3, r2
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	b21a      	sxth	r2, r3
 8005002:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	@ 0x24
 8005006:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 800500a:	9303      	str	r3, [sp, #12]
 800500c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800500e:	9302      	str	r3, [sp, #8]
 8005010:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 8005014:	9301      	str	r3, [sp, #4]
 8005016:	23b4      	movs	r3, #180	@ 0xb4
 8005018:	9300      	str	r3, [sp, #0]
 800501a:	4603      	mov	r3, r0
 800501c:	486a      	ldr	r0, [pc, #424]	@ (80051c8 <ui_framework_drawRoundedBox+0x1f4>)
 800501e:	f7fe f947 	bl	80032b0 <tft_st7789_drawArc>
			lineThicknessPx);
	// Top Right Corner Arc
	tft_st7789_drawArc(&tft, x + width - radius, y + radius, radius, 270, 360,
 8005022:	897a      	ldrh	r2, [r7, #10]
 8005024:	88fb      	ldrh	r3, [r7, #6]
 8005026:	4413      	add	r3, r2
 8005028:	b29a      	uxth	r2, r3
 800502a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	b29b      	uxth	r3, r3
 8005030:	b219      	sxth	r1, r3
 8005032:	893a      	ldrh	r2, [r7, #8]
 8005034:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005036:	4413      	add	r3, r2
 8005038:	b29b      	uxth	r3, r3
 800503a:	b21a      	sxth	r2, r3
 800503c:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	@ 0x24
 8005040:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 8005044:	9303      	str	r3, [sp, #12]
 8005046:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005048:	9302      	str	r3, [sp, #8]
 800504a:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 800504e:	9301      	str	r3, [sp, #4]
 8005050:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	4603      	mov	r3, r0
 8005058:	485b      	ldr	r0, [pc, #364]	@ (80051c8 <ui_framework_drawRoundedBox+0x1f4>)
 800505a:	f7fe f929 	bl	80032b0 <tft_st7789_drawArc>
			color, lineThicknessPx);
	// Bottom Right Corner Arc
	tft_st7789_drawArc(&tft, x + width - radius, y + height - radius, radius, 0,
 800505e:	897a      	ldrh	r2, [r7, #10]
 8005060:	88fb      	ldrh	r3, [r7, #6]
 8005062:	4413      	add	r3, r2
 8005064:	b29a      	uxth	r2, r3
 8005066:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	b29b      	uxth	r3, r3
 800506c:	b219      	sxth	r1, r3
 800506e:	893a      	ldrh	r2, [r7, #8]
 8005070:	8c3b      	ldrh	r3, [r7, #32]
 8005072:	4413      	add	r3, r2
 8005074:	b29a      	uxth	r2, r3
 8005076:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	b29b      	uxth	r3, r3
 800507c:	b21a      	sxth	r2, r3
 800507e:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	@ 0x24
 8005082:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 8005086:	9303      	str	r3, [sp, #12]
 8005088:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800508a:	9302      	str	r3, [sp, #8]
 800508c:	235a      	movs	r3, #90	@ 0x5a
 800508e:	9301      	str	r3, [sp, #4]
 8005090:	2300      	movs	r3, #0
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	4603      	mov	r3, r0
 8005096:	484c      	ldr	r0, [pc, #304]	@ (80051c8 <ui_framework_drawRoundedBox+0x1f4>)
 8005098:	f7fe f90a 	bl	80032b0 <tft_st7789_drawArc>
			90, color, lineThicknessPx);
	// Bottom Left Corner Arc
	tft_st7789_drawArc(&tft, x + radius, y + height - radius, radius, 90, 180,
 800509c:	897a      	ldrh	r2, [r7, #10]
 800509e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80050a0:	4413      	add	r3, r2
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	b219      	sxth	r1, r3
 80050a6:	893a      	ldrh	r2, [r7, #8]
 80050a8:	8c3b      	ldrh	r3, [r7, #32]
 80050aa:	4413      	add	r3, r2
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	b21a      	sxth	r2, r3
 80050b6:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	@ 0x24
 80050ba:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 80050be:	9303      	str	r3, [sp, #12]
 80050c0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80050c2:	9302      	str	r3, [sp, #8]
 80050c4:	23b4      	movs	r3, #180	@ 0xb4
 80050c6:	9301      	str	r3, [sp, #4]
 80050c8:	235a      	movs	r3, #90	@ 0x5a
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	4603      	mov	r3, r0
 80050ce:	483e      	ldr	r0, [pc, #248]	@ (80051c8 <ui_framework_drawRoundedBox+0x1f4>)
 80050d0:	f7fe f8ee 	bl	80032b0 <tft_st7789_drawArc>
			color, lineThicknessPx);

	// Top Horizontal Line
	tft_st7789_fillRect(&tft, x + radius, y, width - (2 * radius),
 80050d4:	897a      	ldrh	r2, [r7, #10]
 80050d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80050d8:	4413      	add	r3, r2
 80050da:	b29b      	uxth	r3, r3
 80050dc:	b219      	sxth	r1, r3
 80050de:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 80050e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	88fa      	ldrh	r2, [r7, #6]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	b21c      	sxth	r4, r3
 80050f0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80050f4:	b21b      	sxth	r3, r3
 80050f6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80050f8:	9201      	str	r2, [sp, #4]
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	4623      	mov	r3, r4
 80050fe:	4602      	mov	r2, r0
 8005100:	4831      	ldr	r0, [pc, #196]	@ (80051c8 <ui_framework_drawRoundedBox+0x1f4>)
 8005102:	f7fd ff02 	bl	8002f0a <tft_st7789_fillRect>
			lineThicknessPx, color);
	// Right Vertical Line
	tft_st7789_fillRect(&tft, x + width - lineThicknessPx, y + radius,
 8005106:	897a      	ldrh	r2, [r7, #10]
 8005108:	88fb      	ldrh	r3, [r7, #6]
 800510a:	4413      	add	r3, r2
 800510c:	b29a      	uxth	r2, r3
 800510e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005112:	b29b      	uxth	r3, r3
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	b29b      	uxth	r3, r3
 8005118:	b219      	sxth	r1, r3
 800511a:	893a      	ldrh	r2, [r7, #8]
 800511c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800511e:	4413      	add	r3, r2
 8005120:	b29b      	uxth	r3, r3
 8005122:	b218      	sxth	r0, r3
 8005124:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005128:	b21c      	sxth	r4, r3
			lineThicknessPx, height - (2 * radius), color);
 800512a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	b29b      	uxth	r3, r3
 8005130:	8c3a      	ldrh	r2, [r7, #32]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	b29b      	uxth	r3, r3
	tft_st7789_fillRect(&tft, x + width - lineThicknessPx, y + radius,
 8005136:	b21b      	sxth	r3, r3
 8005138:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800513a:	9201      	str	r2, [sp, #4]
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	4623      	mov	r3, r4
 8005140:	4602      	mov	r2, r0
 8005142:	4821      	ldr	r0, [pc, #132]	@ (80051c8 <ui_framework_drawRoundedBox+0x1f4>)
 8005144:	f7fd fee1 	bl	8002f0a <tft_st7789_fillRect>
	// Left Vertical Line
	tft_st7789_fillRect(&tft, x, y + radius, lineThicknessPx,
 8005148:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800514c:	893a      	ldrh	r2, [r7, #8]
 800514e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005150:	4413      	add	r3, r2
 8005152:	b29b      	uxth	r3, r3
 8005154:	b218      	sxth	r0, r3
 8005156:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800515a:	b21c      	sxth	r4, r3
			height - (2 * radius), color);
 800515c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800515e:	005b      	lsls	r3, r3, #1
 8005160:	b29b      	uxth	r3, r3
 8005162:	8c3a      	ldrh	r2, [r7, #32]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	b29b      	uxth	r3, r3
	tft_st7789_fillRect(&tft, x, y + radius, lineThicknessPx,
 8005168:	b21b      	sxth	r3, r3
 800516a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800516c:	9201      	str	r2, [sp, #4]
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	4623      	mov	r3, r4
 8005172:	4602      	mov	r2, r0
 8005174:	4814      	ldr	r0, [pc, #80]	@ (80051c8 <ui_framework_drawRoundedBox+0x1f4>)
 8005176:	f7fd fec8 	bl	8002f0a <tft_st7789_fillRect>
	// Bottom Horizontal Line
	tft_st7789_fillRect(&tft, x + radius, y + height - lineThicknessPx,
 800517a:	897a      	ldrh	r2, [r7, #10]
 800517c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800517e:	4413      	add	r3, r2
 8005180:	b29b      	uxth	r3, r3
 8005182:	b219      	sxth	r1, r3
 8005184:	893a      	ldrh	r2, [r7, #8]
 8005186:	8c3b      	ldrh	r3, [r7, #32]
 8005188:	4413      	add	r3, r2
 800518a:	b29a      	uxth	r2, r3
 800518c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005190:	b29b      	uxth	r3, r3
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	b29b      	uxth	r3, r3
 8005196:	b218      	sxth	r0, r3
			width - (2 * radius), lineThicknessPx, color);
 8005198:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	b29b      	uxth	r3, r3
 800519e:	88fa      	ldrh	r2, [r7, #6]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	b29b      	uxth	r3, r3
	tft_st7789_fillRect(&tft, x + radius, y + height - lineThicknessPx,
 80051a4:	b21c      	sxth	r4, r3
 80051a6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80051aa:	b21b      	sxth	r3, r3
 80051ac:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80051ae:	9201      	str	r2, [sp, #4]
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	4623      	mov	r3, r4
 80051b4:	4602      	mov	r2, r0
 80051b6:	4804      	ldr	r0, [pc, #16]	@ (80051c8 <ui_framework_drawRoundedBox+0x1f4>)
 80051b8:	f7fd fea7 	bl	8002f0a <tft_st7789_fillRect>

	return UI_SUCCESS;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd90      	pop	{r4, r7, pc}
 80051c6:	bf00      	nop
 80051c8:	20002d08 	.word	0x20002d08

080051cc <ui_framework_drawFilledRoundedBox>:

ui_framework_return_e ui_framework_drawFilledRoundedBox(
		ui_framework_instance_t *inst, uint16_t x, uint16_t y, uint16_t width,
		uint16_t height, uint16_t radius, ui_color color) {
 80051cc:	b590      	push	{r4, r7, lr}
 80051ce:	b089      	sub	sp, #36	@ 0x24
 80051d0:	af04      	add	r7, sp, #16
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	4608      	mov	r0, r1
 80051d6:	4611      	mov	r1, r2
 80051d8:	461a      	mov	r2, r3
 80051da:	4603      	mov	r3, r0
 80051dc:	817b      	strh	r3, [r7, #10]
 80051de:	460b      	mov	r3, r1
 80051e0:	813b      	strh	r3, [r7, #8]
 80051e2:	4613      	mov	r3, r2
 80051e4:	80fb      	strh	r3, [r7, #6]
	// Fill the four corners using drawArc
	// Top Left Corner Arc (Fill the corner with a solid color)
	tft_st7789_fillArc(&tft, x + radius, y + radius, radius, 180, 270, color);
 80051e6:	897a      	ldrh	r2, [r7, #10]
 80051e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80051ea:	4413      	add	r3, r2
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	b219      	sxth	r1, r3
 80051f0:	893a      	ldrh	r2, [r7, #8]
 80051f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80051f4:	4413      	add	r3, r2
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	b21a      	sxth	r2, r3
 80051fa:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	@ 0x24
 80051fe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005200:	9302      	str	r3, [sp, #8]
 8005202:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 8005206:	9301      	str	r3, [sp, #4]
 8005208:	23b4      	movs	r3, #180	@ 0xb4
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	4603      	mov	r3, r0
 800520e:	4853      	ldr	r0, [pc, #332]	@ (800535c <ui_framework_drawFilledRoundedBox+0x190>)
 8005210:	f7fe f90e 	bl	8003430 <tft_st7789_fillArc>
	// Top Right Corner Arc
	tft_st7789_fillArc(&tft, x + width - radius, y + radius, radius, 270, 360,
 8005214:	897a      	ldrh	r2, [r7, #10]
 8005216:	88fb      	ldrh	r3, [r7, #6]
 8005218:	4413      	add	r3, r2
 800521a:	b29a      	uxth	r2, r3
 800521c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	b29b      	uxth	r3, r3
 8005222:	b219      	sxth	r1, r3
 8005224:	893a      	ldrh	r2, [r7, #8]
 8005226:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005228:	4413      	add	r3, r2
 800522a:	b29b      	uxth	r3, r3
 800522c:	b21a      	sxth	r2, r3
 800522e:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	@ 0x24
 8005232:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005234:	9302      	str	r3, [sp, #8]
 8005236:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 800523a:	9301      	str	r3, [sp, #4]
 800523c:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 8005240:	9300      	str	r3, [sp, #0]
 8005242:	4603      	mov	r3, r0
 8005244:	4845      	ldr	r0, [pc, #276]	@ (800535c <ui_framework_drawFilledRoundedBox+0x190>)
 8005246:	f7fe f8f3 	bl	8003430 <tft_st7789_fillArc>
			color);
	// Bottom Right Corner Arc
	tft_st7789_fillArc(&tft, x + width - radius, y + height - radius, radius, 0,
 800524a:	897a      	ldrh	r2, [r7, #10]
 800524c:	88fb      	ldrh	r3, [r7, #6]
 800524e:	4413      	add	r3, r2
 8005250:	b29a      	uxth	r2, r3
 8005252:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	b29b      	uxth	r3, r3
 8005258:	b219      	sxth	r1, r3
 800525a:	893a      	ldrh	r2, [r7, #8]
 800525c:	8c3b      	ldrh	r3, [r7, #32]
 800525e:	4413      	add	r3, r2
 8005260:	b29a      	uxth	r2, r3
 8005262:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	b29b      	uxth	r3, r3
 8005268:	b21a      	sxth	r2, r3
 800526a:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	@ 0x24
 800526e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005270:	9302      	str	r3, [sp, #8]
 8005272:	235a      	movs	r3, #90	@ 0x5a
 8005274:	9301      	str	r3, [sp, #4]
 8005276:	2300      	movs	r3, #0
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	4603      	mov	r3, r0
 800527c:	4837      	ldr	r0, [pc, #220]	@ (800535c <ui_framework_drawFilledRoundedBox+0x190>)
 800527e:	f7fe f8d7 	bl	8003430 <tft_st7789_fillArc>
			90, color);
	// Bottom Left Corner Arc
	tft_st7789_fillArc(&tft, x + radius, y + height - radius, radius, 90, 180,
 8005282:	897a      	ldrh	r2, [r7, #10]
 8005284:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005286:	4413      	add	r3, r2
 8005288:	b29b      	uxth	r3, r3
 800528a:	b219      	sxth	r1, r3
 800528c:	893a      	ldrh	r2, [r7, #8]
 800528e:	8c3b      	ldrh	r3, [r7, #32]
 8005290:	4413      	add	r3, r2
 8005292:	b29a      	uxth	r2, r3
 8005294:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	b29b      	uxth	r3, r3
 800529a:	b21a      	sxth	r2, r3
 800529c:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	@ 0x24
 80052a0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80052a2:	9302      	str	r3, [sp, #8]
 80052a4:	23b4      	movs	r3, #180	@ 0xb4
 80052a6:	9301      	str	r3, [sp, #4]
 80052a8:	235a      	movs	r3, #90	@ 0x5a
 80052aa:	9300      	str	r3, [sp, #0]
 80052ac:	4603      	mov	r3, r0
 80052ae:	482b      	ldr	r0, [pc, #172]	@ (800535c <ui_framework_drawFilledRoundedBox+0x190>)
 80052b0:	f7fe f8be 	bl	8003430 <tft_st7789_fillArc>
			color);

	// Fill the horizontal area inside the box (between the rounded corners)
	tft_st7789_fillRect(&tft, x + radius, y, width - (2 * radius), height,
 80052b4:	897a      	ldrh	r2, [r7, #10]
 80052b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80052b8:	4413      	add	r3, r2
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	b219      	sxth	r1, r3
 80052be:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 80052c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80052c4:	005b      	lsls	r3, r3, #1
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	88fa      	ldrh	r2, [r7, #6]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	b21c      	sxth	r4, r3
 80052d0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80052d4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80052d6:	9201      	str	r2, [sp, #4]
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	4623      	mov	r3, r4
 80052dc:	4602      	mov	r2, r0
 80052de:	481f      	ldr	r0, [pc, #124]	@ (800535c <ui_framework_drawFilledRoundedBox+0x190>)
 80052e0:	f7fd fe13 	bl	8002f0a <tft_st7789_fillRect>
			color);

	// Fill the left and right vertical parts of the box (excluding the corners)
	tft_st7789_fillRect(&tft, x, y + radius, radius, height - (2 * radius),
 80052e4:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80052e8:	893a      	ldrh	r2, [r7, #8]
 80052ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80052ec:	4413      	add	r3, r2
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	b218      	sxth	r0, r3
 80052f2:	f9b7 4024 	ldrsh.w	r4, [r7, #36]	@ 0x24
 80052f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80052f8:	005b      	lsls	r3, r3, #1
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	8c3a      	ldrh	r2, [r7, #32]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	b29b      	uxth	r3, r3
 8005302:	b21b      	sxth	r3, r3
 8005304:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005306:	9201      	str	r2, [sp, #4]
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	4623      	mov	r3, r4
 800530c:	4602      	mov	r2, r0
 800530e:	4813      	ldr	r0, [pc, #76]	@ (800535c <ui_framework_drawFilledRoundedBox+0x190>)
 8005310:	f7fd fdfb 	bl	8002f0a <tft_st7789_fillRect>
			color);
	tft_st7789_fillRect(&tft, x + width - radius, y + radius, radius,
 8005314:	897a      	ldrh	r2, [r7, #10]
 8005316:	88fb      	ldrh	r3, [r7, #6]
 8005318:	4413      	add	r3, r2
 800531a:	b29a      	uxth	r2, r3
 800531c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	b29b      	uxth	r3, r3
 8005322:	b219      	sxth	r1, r3
 8005324:	893a      	ldrh	r2, [r7, #8]
 8005326:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005328:	4413      	add	r3, r2
 800532a:	b29b      	uxth	r3, r3
 800532c:	b218      	sxth	r0, r3
 800532e:	f9b7 4024 	ldrsh.w	r4, [r7, #36]	@ 0x24
			height - (2 * radius), color);
 8005332:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	b29b      	uxth	r3, r3
 8005338:	8c3a      	ldrh	r2, [r7, #32]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	b29b      	uxth	r3, r3
	tft_st7789_fillRect(&tft, x + width - radius, y + radius, radius,
 800533e:	b21b      	sxth	r3, r3
 8005340:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005342:	9201      	str	r2, [sp, #4]
 8005344:	9300      	str	r3, [sp, #0]
 8005346:	4623      	mov	r3, r4
 8005348:	4602      	mov	r2, r0
 800534a:	4804      	ldr	r0, [pc, #16]	@ (800535c <ui_framework_drawFilledRoundedBox+0x190>)
 800534c:	f7fd fddd 	bl	8002f0a <tft_st7789_fillRect>

	return UI_SUCCESS;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	bd90      	pop	{r4, r7, pc}
 800535a:	bf00      	nop
 800535c:	20002d08 	.word	0x20002d08

08005360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005364:	f001 f938 	bl	80065d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005368:	f000 f870 	bl	800544c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800536c:	f000 f8d2 	bl	8005514 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005370:	f000 fafa 	bl	8005968 <MX_GPIO_Init>
  MX_DMA_Init();
 8005374:	f000 fabe 	bl	80058f4 <MX_DMA_Init>
  MX_SAI1_Init();
 8005378:	f000 f996 	bl	80056a8 <MX_SAI1_Init>
  MX_USART2_UART_Init();
 800537c:	f000 fa5a 	bl	8005834 <MX_USART2_UART_Init>
  MX_SDMMC1_SD_Init();
 8005380:	f000 f9c8 	bl	8005714 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8005384:	f000 f9e8 	bl	8005758 <MX_SPI2_Init>
  MX_FATFS_Init();
 8005388:	f00a fe74 	bl	8010074 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 800538c:	f000 fa22 	bl	80057d4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8005390:	f000 fa80 	bl	8005894 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8005394:	f000 f92c 	bl	80055f0 <MX_RTC_Init>
  MX_I2C1_Init();
 8005398:	f000 f8ea 	bl	8005570 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800539c:	f010 fb1c 	bl	80159d8 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of gnssDataLock */
  gnssDataLockHandle = osMutexNew(&gnssDataLock_attributes);
 80053a0:	4819      	ldr	r0, [pc, #100]	@ (8005408 <main+0xa8>)
 80053a2:	f010 fc47 	bl	8015c34 <osMutexNew>
 80053a6:	4603      	mov	r3, r0
 80053a8:	4a18      	ldr	r2, [pc, #96]	@ (800540c <main+0xac>)
 80053aa:	6013      	str	r3, [r2, #0]

  /* creation of uiDataLock */
  uiDataLockHandle = osMutexNew(&uiDataLock_attributes);
 80053ac:	4818      	ldr	r0, [pc, #96]	@ (8005410 <main+0xb0>)
 80053ae:	f010 fc41 	bl	8015c34 <osMutexNew>
 80053b2:	4603      	mov	r3, r0
 80053b4:	4a17      	ldr	r2, [pc, #92]	@ (8005414 <main+0xb4>)
 80053b6:	6013      	str	r3, [r2, #0]

  /* creation of debugLock */
  debugLockHandle = osMutexNew(&debugLock_attributes);
 80053b8:	4817      	ldr	r0, [pc, #92]	@ (8005418 <main+0xb8>)
 80053ba:	f010 fc3b 	bl	8015c34 <osMutexNew>
 80053be:	4603      	mov	r3, r0
 80053c0:	4a16      	ldr	r2, [pc, #88]	@ (800541c <main+0xbc>)
 80053c2:	6013      	str	r3, [r2, #0]

  /* creation of sdCardAccessLock */
  sdCardAccessLockHandle = osMutexNew(&sdCardAccessLock_attributes);
 80053c4:	4816      	ldr	r0, [pc, #88]	@ (8005420 <main+0xc0>)
 80053c6:	f010 fc35 	bl	8015c34 <osMutexNew>
 80053ca:	4603      	mov	r3, r0
 80053cc:	4a15      	ldr	r2, [pc, #84]	@ (8005424 <main+0xc4>)
 80053ce:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mainTask */
  mainTaskHandle = osThreadNew(StartDefaultTask, NULL, &mainTask_attributes);
 80053d0:	4a15      	ldr	r2, [pc, #84]	@ (8005428 <main+0xc8>)
 80053d2:	2100      	movs	r1, #0
 80053d4:	4815      	ldr	r0, [pc, #84]	@ (800542c <main+0xcc>)
 80053d6:	f010 fb80 	bl	8015ada <osThreadNew>
 80053da:	4603      	mov	r3, r0
 80053dc:	4a14      	ldr	r2, [pc, #80]	@ (8005430 <main+0xd0>)
 80053de:	6013      	str	r3, [r2, #0]

  /* creation of gnssTask */
  gnssTaskHandle = osThreadNew(startGnssTask, NULL, &gnssTask_attributes);
 80053e0:	4a14      	ldr	r2, [pc, #80]	@ (8005434 <main+0xd4>)
 80053e2:	2100      	movs	r1, #0
 80053e4:	4814      	ldr	r0, [pc, #80]	@ (8005438 <main+0xd8>)
 80053e6:	f010 fb78 	bl	8015ada <osThreadNew>
 80053ea:	4603      	mov	r3, r0
 80053ec:	4a13      	ldr	r2, [pc, #76]	@ (800543c <main+0xdc>)
 80053ee:	6013      	str	r3, [r2, #0]

  /* creation of uiTask */
  uiTaskHandle = osThreadNew(startUiTask, NULL, &uiTask_attributes);
 80053f0:	4a13      	ldr	r2, [pc, #76]	@ (8005440 <main+0xe0>)
 80053f2:	2100      	movs	r1, #0
 80053f4:	4813      	ldr	r0, [pc, #76]	@ (8005444 <main+0xe4>)
 80053f6:	f010 fb70 	bl	8015ada <osThreadNew>
 80053fa:	4603      	mov	r3, r0
 80053fc:	4a12      	ldr	r2, [pc, #72]	@ (8005448 <main+0xe8>)
 80053fe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8005400:	f010 fb30 	bl	8015a64 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8005404:	bf00      	nop
 8005406:	e7fd      	b.n	8005404 <main+0xa4>
 8005408:	0801f238 	.word	0x0801f238
 800540c:	200031a4 	.word	0x200031a4
 8005410:	0801f248 	.word	0x0801f248
 8005414:	200031a8 	.word	0x200031a8
 8005418:	0801f258 	.word	0x0801f258
 800541c:	200031ac 	.word	0x200031ac
 8005420:	0801f268 	.word	0x0801f268
 8005424:	200031b0 	.word	0x200031b0
 8005428:	0801f1cc 	.word	0x0801f1cc
 800542c:	08005ae9 	.word	0x08005ae9
 8005430:	20003198 	.word	0x20003198
 8005434:	0801f1f0 	.word	0x0801f1f0
 8005438:	08005aff 	.word	0x08005aff
 800543c:	2000319c 	.word	0x2000319c
 8005440:	0801f214 	.word	0x0801f214
 8005444:	08005b11 	.word	0x08005b11
 8005448:	200031a0 	.word	0x200031a0

0800544c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b096      	sub	sp, #88	@ 0x58
 8005450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005452:	f107 0314 	add.w	r3, r7, #20
 8005456:	2244      	movs	r2, #68	@ 0x44
 8005458:	2100      	movs	r1, #0
 800545a:	4618      	mov	r0, r3
 800545c:	f015 ff4a 	bl	801b2f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005460:	463b      	mov	r3, r7
 8005462:	2200      	movs	r2, #0
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	605a      	str	r2, [r3, #4]
 8005468:	609a      	str	r2, [r3, #8]
 800546a:	60da      	str	r2, [r3, #12]
 800546c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800546e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8005472:	f003 f8e1 	bl	8008638 <HAL_PWREx_ControlVoltageScaling>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800547c:	f000 fb64 	bl	8005b48 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8005480:	f003 f8bc 	bl	80085fc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8005484:	4b22      	ldr	r3, [pc, #136]	@ (8005510 <SystemClock_Config+0xc4>)
 8005486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800548a:	4a21      	ldr	r2, [pc, #132]	@ (8005510 <SystemClock_Config+0xc4>)
 800548c:	f023 0318 	bic.w	r3, r3, #24
 8005490:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8005494:	231c      	movs	r3, #28
 8005496:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005498:	2301      	movs	r3, #1
 800549a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800549c:	2301      	movs	r3, #1
 800549e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80054a0:	2301      	movs	r3, #1
 80054a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80054a4:	2300      	movs	r3, #0
 80054a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80054a8:	2360      	movs	r3, #96	@ 0x60
 80054aa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80054ac:	2302      	movs	r3, #2
 80054ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80054b0:	2301      	movs	r3, #1
 80054b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80054b4:	2301      	movs	r3, #1
 80054b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80054b8:	2328      	movs	r3, #40	@ 0x28
 80054ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80054bc:	2307      	movs	r3, #7
 80054be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80054c0:	2302      	movs	r3, #2
 80054c2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80054c4:	2302      	movs	r3, #2
 80054c6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80054c8:	f107 0314 	add.w	r3, r7, #20
 80054cc:	4618      	mov	r0, r3
 80054ce:	f003 f919 	bl	8008704 <HAL_RCC_OscConfig>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d001      	beq.n	80054dc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80054d8:	f000 fb36 	bl	8005b48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80054dc:	230f      	movs	r3, #15
 80054de:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80054e0:	2303      	movs	r3, #3
 80054e2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80054e4:	2300      	movs	r3, #0
 80054e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80054e8:	2300      	movs	r3, #0
 80054ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80054ec:	2300      	movs	r3, #0
 80054ee:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80054f0:	463b      	mov	r3, r7
 80054f2:	2104      	movs	r1, #4
 80054f4:	4618      	mov	r0, r3
 80054f6:	f003 fce1 	bl	8008ebc <HAL_RCC_ClockConfig>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8005500:	f000 fb22 	bl	8005b48 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8005504:	f004 ff88 	bl	800a418 <HAL_RCCEx_EnableMSIPLLMode>
}
 8005508:	bf00      	nop
 800550a:	3758      	adds	r7, #88	@ 0x58
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	40021000 	.word	0x40021000

08005514 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b0a2      	sub	sp, #136	@ 0x88
 8005518:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800551a:	463b      	mov	r3, r7
 800551c:	2288      	movs	r2, #136	@ 0x88
 800551e:	2100      	movs	r1, #0
 8005520:	4618      	mov	r0, r3
 8005522:	f015 fee7 	bl	801b2f4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SDMMC1;
 8005526:	f44f 2302 	mov.w	r3, #532480	@ 0x82000
 800552a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800552c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005530:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 8005532:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005536:	673b      	str	r3, [r7, #112]	@ 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8005538:	2301      	movs	r3, #1
 800553a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800553c:	2301      	movs	r3, #1
 800553e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8005540:	2318      	movs	r3, #24
 8005542:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8005544:	2307      	movs	r3, #7
 8005546:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8005548:	2302      	movs	r3, #2
 800554a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800554c:	2302      	movs	r3, #2
 800554e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8005550:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005554:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005556:	463b      	mov	r3, r7
 8005558:	4618      	mov	r0, r3
 800555a:	f003 ff05 	bl	8009368 <HAL_RCCEx_PeriphCLKConfig>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8005564:	f000 faf0 	bl	8005b48 <Error_Handler>
  }
}
 8005568:	bf00      	nop
 800556a:	3788      	adds	r7, #136	@ 0x88
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005574:	4b1b      	ldr	r3, [pc, #108]	@ (80055e4 <MX_I2C1_Init+0x74>)
 8005576:	4a1c      	ldr	r2, [pc, #112]	@ (80055e8 <MX_I2C1_Init+0x78>)
 8005578:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 800557a:	4b1a      	ldr	r3, [pc, #104]	@ (80055e4 <MX_I2C1_Init+0x74>)
 800557c:	4a1b      	ldr	r2, [pc, #108]	@ (80055ec <MX_I2C1_Init+0x7c>)
 800557e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005580:	4b18      	ldr	r3, [pc, #96]	@ (80055e4 <MX_I2C1_Init+0x74>)
 8005582:	2200      	movs	r2, #0
 8005584:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005586:	4b17      	ldr	r3, [pc, #92]	@ (80055e4 <MX_I2C1_Init+0x74>)
 8005588:	2201      	movs	r2, #1
 800558a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800558c:	4b15      	ldr	r3, [pc, #84]	@ (80055e4 <MX_I2C1_Init+0x74>)
 800558e:	2200      	movs	r2, #0
 8005590:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005592:	4b14      	ldr	r3, [pc, #80]	@ (80055e4 <MX_I2C1_Init+0x74>)
 8005594:	2200      	movs	r2, #0
 8005596:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005598:	4b12      	ldr	r3, [pc, #72]	@ (80055e4 <MX_I2C1_Init+0x74>)
 800559a:	2200      	movs	r2, #0
 800559c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800559e:	4b11      	ldr	r3, [pc, #68]	@ (80055e4 <MX_I2C1_Init+0x74>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80055a4:	4b0f      	ldr	r3, [pc, #60]	@ (80055e4 <MX_I2C1_Init+0x74>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80055aa:	480e      	ldr	r0, [pc, #56]	@ (80055e4 <MX_I2C1_Init+0x74>)
 80055ac:	f001 fd5e 	bl	800706c <HAL_I2C_Init>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80055b6:	f000 fac7 	bl	8005b48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80055ba:	2100      	movs	r1, #0
 80055bc:	4809      	ldr	r0, [pc, #36]	@ (80055e4 <MX_I2C1_Init+0x74>)
 80055be:	f001 fdf0 	bl	80071a2 <HAL_I2CEx_ConfigAnalogFilter>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80055c8:	f000 fabe 	bl	8005b48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80055cc:	2100      	movs	r1, #0
 80055ce:	4805      	ldr	r0, [pc, #20]	@ (80055e4 <MX_I2C1_Init+0x74>)
 80055d0:	f001 fe32 	bl	8007238 <HAL_I2CEx_ConfigDigitalFilter>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80055da:	f000 fab5 	bl	8005b48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80055de:	bf00      	nop
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	20002d44 	.word	0x20002d44
 80055e8:	40005400 	.word	0x40005400
 80055ec:	10d19ce4 	.word	0x10d19ce4

080055f0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80055f6:	1d3b      	adds	r3, r7, #4
 80055f8:	2200      	movs	r2, #0
 80055fa:	601a      	str	r2, [r3, #0]
 80055fc:	605a      	str	r2, [r3, #4]
 80055fe:	609a      	str	r2, [r3, #8]
 8005600:	60da      	str	r2, [r3, #12]
 8005602:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8005604:	2300      	movs	r3, #0
 8005606:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8005608:	4b25      	ldr	r3, [pc, #148]	@ (80056a0 <MX_RTC_Init+0xb0>)
 800560a:	4a26      	ldr	r2, [pc, #152]	@ (80056a4 <MX_RTC_Init+0xb4>)
 800560c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800560e:	4b24      	ldr	r3, [pc, #144]	@ (80056a0 <MX_RTC_Init+0xb0>)
 8005610:	2200      	movs	r2, #0
 8005612:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8005614:	4b22      	ldr	r3, [pc, #136]	@ (80056a0 <MX_RTC_Init+0xb0>)
 8005616:	227f      	movs	r2, #127	@ 0x7f
 8005618:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800561a:	4b21      	ldr	r3, [pc, #132]	@ (80056a0 <MX_RTC_Init+0xb0>)
 800561c:	22ff      	movs	r2, #255	@ 0xff
 800561e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005620:	4b1f      	ldr	r3, [pc, #124]	@ (80056a0 <MX_RTC_Init+0xb0>)
 8005622:	2200      	movs	r2, #0
 8005624:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8005626:	4b1e      	ldr	r3, [pc, #120]	@ (80056a0 <MX_RTC_Init+0xb0>)
 8005628:	2200      	movs	r2, #0
 800562a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800562c:	4b1c      	ldr	r3, [pc, #112]	@ (80056a0 <MX_RTC_Init+0xb0>)
 800562e:	2200      	movs	r2, #0
 8005630:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005632:	4b1b      	ldr	r3, [pc, #108]	@ (80056a0 <MX_RTC_Init+0xb0>)
 8005634:	2200      	movs	r2, #0
 8005636:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005638:	4819      	ldr	r0, [pc, #100]	@ (80056a0 <MX_RTC_Init+0xb0>)
 800563a:	f005 f9bf 	bl	800a9bc <HAL_RTC_Init>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d001      	beq.n	8005648 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8005644:	f000 fa80 	bl	8005b48 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8005648:	2300      	movs	r3, #0
 800564a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800564c:	2300      	movs	r3, #0
 800564e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8005650:	2300      	movs	r3, #0
 8005652:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005654:	2300      	movs	r3, #0
 8005656:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005658:	2300      	movs	r3, #0
 800565a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800565c:	1d3b      	adds	r3, r7, #4
 800565e:	2201      	movs	r2, #1
 8005660:	4619      	mov	r1, r3
 8005662:	480f      	ldr	r0, [pc, #60]	@ (80056a0 <MX_RTC_Init+0xb0>)
 8005664:	f005 fa32 	bl	800aacc <HAL_RTC_SetTime>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d001      	beq.n	8005672 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800566e:	f000 fa6b 	bl	8005b48 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8005672:	2301      	movs	r3, #1
 8005674:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8005676:	2301      	movs	r3, #1
 8005678:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800567a:	2301      	movs	r3, #1
 800567c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800567e:	2300      	movs	r3, #0
 8005680:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8005682:	463b      	mov	r3, r7
 8005684:	2201      	movs	r2, #1
 8005686:	4619      	mov	r1, r3
 8005688:	4805      	ldr	r0, [pc, #20]	@ (80056a0 <MX_RTC_Init+0xb0>)
 800568a:	f005 fabc 	bl	800ac06 <HAL_RTC_SetDate>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d001      	beq.n	8005698 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8005694:	f000 fa58 	bl	8005b48 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8005698:	bf00      	nop
 800569a:	3718      	adds	r7, #24
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	20002d98 	.word	0x20002d98
 80056a4:	40002800 	.word	0x40002800

080056a8 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80056ac:	4b17      	ldr	r3, [pc, #92]	@ (800570c <MX_SAI1_Init+0x64>)
 80056ae:	4a18      	ldr	r2, [pc, #96]	@ (8005710 <MX_SAI1_Init+0x68>)
 80056b0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80056b2:	4b16      	ldr	r3, [pc, #88]	@ (800570c <MX_SAI1_Init+0x64>)
 80056b4:	2200      	movs	r2, #0
 80056b6:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80056b8:	4b14      	ldr	r3, [pc, #80]	@ (800570c <MX_SAI1_Init+0x64>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80056be:	4b13      	ldr	r3, [pc, #76]	@ (800570c <MX_SAI1_Init+0x64>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80056c4:	4b11      	ldr	r3, [pc, #68]	@ (800570c <MX_SAI1_Init+0x64>)
 80056c6:	2200      	movs	r2, #0
 80056c8:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80056ca:	4b10      	ldr	r3, [pc, #64]	@ (800570c <MX_SAI1_Init+0x64>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_32K;
 80056d0:	4b0e      	ldr	r3, [pc, #56]	@ (800570c <MX_SAI1_Init+0x64>)
 80056d2:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80056d6:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80056d8:	4b0c      	ldr	r3, [pc, #48]	@ (800570c <MX_SAI1_Init+0x64>)
 80056da:	2200      	movs	r2, #0
 80056dc:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80056de:	4b0b      	ldr	r3, [pc, #44]	@ (800570c <MX_SAI1_Init+0x64>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80056e4:	4b09      	ldr	r3, [pc, #36]	@ (800570c <MX_SAI1_Init+0x64>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80056ea:	4b08      	ldr	r3, [pc, #32]	@ (800570c <MX_SAI1_Init+0x64>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 80056f0:	2302      	movs	r3, #2
 80056f2:	2200      	movs	r2, #0
 80056f4:	2100      	movs	r1, #0
 80056f6:	4805      	ldr	r0, [pc, #20]	@ (800570c <MX_SAI1_Init+0x64>)
 80056f8:	f005 fbc2 	bl	800ae80 <HAL_SAI_InitProtocol>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 8005702:	f000 fa21 	bl	8005b48 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8005706:	bf00      	nop
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	20002dbc 	.word	0x20002dbc
 8005710:	40015404 	.word	0x40015404

08005714 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8005714:	b480      	push	{r7}
 8005716:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8005718:	4b0d      	ldr	r3, [pc, #52]	@ (8005750 <MX_SDMMC1_SD_Init+0x3c>)
 800571a:	4a0e      	ldr	r2, [pc, #56]	@ (8005754 <MX_SDMMC1_SD_Init+0x40>)
 800571c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800571e:	4b0c      	ldr	r3, [pc, #48]	@ (8005750 <MX_SDMMC1_SD_Init+0x3c>)
 8005720:	2200      	movs	r2, #0
 8005722:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8005724:	4b0a      	ldr	r3, [pc, #40]	@ (8005750 <MX_SDMMC1_SD_Init+0x3c>)
 8005726:	2200      	movs	r2, #0
 8005728:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800572a:	4b09      	ldr	r3, [pc, #36]	@ (8005750 <MX_SDMMC1_SD_Init+0x3c>)
 800572c:	2200      	movs	r2, #0
 800572e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8005730:	4b07      	ldr	r3, [pc, #28]	@ (8005750 <MX_SDMMC1_SD_Init+0x3c>)
 8005732:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005736:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005738:	4b05      	ldr	r3, [pc, #20]	@ (8005750 <MX_SDMMC1_SD_Init+0x3c>)
 800573a:	2200      	movs	r2, #0
 800573c:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800573e:	4b04      	ldr	r3, [pc, #16]	@ (8005750 <MX_SDMMC1_SD_Init+0x3c>)
 8005740:	2200      	movs	r2, #0
 8005742:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8005744:	bf00      	nop
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	20002e88 	.word	0x20002e88
 8005754:	40012800 	.word	0x40012800

08005758 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800575c:	4b1b      	ldr	r3, [pc, #108]	@ (80057cc <MX_SPI2_Init+0x74>)
 800575e:	4a1c      	ldr	r2, [pc, #112]	@ (80057d0 <MX_SPI2_Init+0x78>)
 8005760:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005762:	4b1a      	ldr	r3, [pc, #104]	@ (80057cc <MX_SPI2_Init+0x74>)
 8005764:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005768:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800576a:	4b18      	ldr	r3, [pc, #96]	@ (80057cc <MX_SPI2_Init+0x74>)
 800576c:	2200      	movs	r2, #0
 800576e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005770:	4b16      	ldr	r3, [pc, #88]	@ (80057cc <MX_SPI2_Init+0x74>)
 8005772:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005776:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005778:	4b14      	ldr	r3, [pc, #80]	@ (80057cc <MX_SPI2_Init+0x74>)
 800577a:	2202      	movs	r2, #2
 800577c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800577e:	4b13      	ldr	r3, [pc, #76]	@ (80057cc <MX_SPI2_Init+0x74>)
 8005780:	2200      	movs	r2, #0
 8005782:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005784:	4b11      	ldr	r3, [pc, #68]	@ (80057cc <MX_SPI2_Init+0x74>)
 8005786:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800578a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800578c:	4b0f      	ldr	r3, [pc, #60]	@ (80057cc <MX_SPI2_Init+0x74>)
 800578e:	2200      	movs	r2, #0
 8005790:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005792:	4b0e      	ldr	r3, [pc, #56]	@ (80057cc <MX_SPI2_Init+0x74>)
 8005794:	2200      	movs	r2, #0
 8005796:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005798:	4b0c      	ldr	r3, [pc, #48]	@ (80057cc <MX_SPI2_Init+0x74>)
 800579a:	2200      	movs	r2, #0
 800579c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800579e:	4b0b      	ldr	r3, [pc, #44]	@ (80057cc <MX_SPI2_Init+0x74>)
 80057a0:	2200      	movs	r2, #0
 80057a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80057a4:	4b09      	ldr	r3, [pc, #36]	@ (80057cc <MX_SPI2_Init+0x74>)
 80057a6:	2207      	movs	r2, #7
 80057a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80057aa:	4b08      	ldr	r3, [pc, #32]	@ (80057cc <MX_SPI2_Init+0x74>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80057b0:	4b06      	ldr	r3, [pc, #24]	@ (80057cc <MX_SPI2_Init+0x74>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80057b6:	4805      	ldr	r0, [pc, #20]	@ (80057cc <MX_SPI2_Init+0x74>)
 80057b8:	f006 ff10 	bl	800c5dc <HAL_SPI_Init>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d001      	beq.n	80057c6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80057c2:	f000 f9c1 	bl	8005b48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80057c6:	bf00      	nop
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	20002f54 	.word	0x20002f54
 80057d0:	40003800 	.word	0x40003800

080057d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80057d8:	4b14      	ldr	r3, [pc, #80]	@ (800582c <MX_USART1_UART_Init+0x58>)
 80057da:	4a15      	ldr	r2, [pc, #84]	@ (8005830 <MX_USART1_UART_Init+0x5c>)
 80057dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80057de:	4b13      	ldr	r3, [pc, #76]	@ (800582c <MX_USART1_UART_Init+0x58>)
 80057e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80057e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80057e6:	4b11      	ldr	r3, [pc, #68]	@ (800582c <MX_USART1_UART_Init+0x58>)
 80057e8:	2200      	movs	r2, #0
 80057ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80057ec:	4b0f      	ldr	r3, [pc, #60]	@ (800582c <MX_USART1_UART_Init+0x58>)
 80057ee:	2200      	movs	r2, #0
 80057f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80057f2:	4b0e      	ldr	r3, [pc, #56]	@ (800582c <MX_USART1_UART_Init+0x58>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80057f8:	4b0c      	ldr	r3, [pc, #48]	@ (800582c <MX_USART1_UART_Init+0x58>)
 80057fa:	220c      	movs	r2, #12
 80057fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80057fe:	4b0b      	ldr	r3, [pc, #44]	@ (800582c <MX_USART1_UART_Init+0x58>)
 8005800:	2200      	movs	r2, #0
 8005802:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005804:	4b09      	ldr	r3, [pc, #36]	@ (800582c <MX_USART1_UART_Init+0x58>)
 8005806:	2200      	movs	r2, #0
 8005808:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800580a:	4b08      	ldr	r3, [pc, #32]	@ (800582c <MX_USART1_UART_Init+0x58>)
 800580c:	2200      	movs	r2, #0
 800580e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005810:	4b06      	ldr	r3, [pc, #24]	@ (800582c <MX_USART1_UART_Init+0x58>)
 8005812:	2200      	movs	r2, #0
 8005814:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005816:	4805      	ldr	r0, [pc, #20]	@ (800582c <MX_USART1_UART_Init+0x58>)
 8005818:	f007 feb2 	bl	800d580 <HAL_UART_Init>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8005822:	f000 f991 	bl	8005b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005826:	bf00      	nop
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	20003000 	.word	0x20003000
 8005830:	40013800 	.word	0x40013800

08005834 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005838:	4b14      	ldr	r3, [pc, #80]	@ (800588c <MX_USART2_UART_Init+0x58>)
 800583a:	4a15      	ldr	r2, [pc, #84]	@ (8005890 <MX_USART2_UART_Init+0x5c>)
 800583c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800583e:	4b13      	ldr	r3, [pc, #76]	@ (800588c <MX_USART2_UART_Init+0x58>)
 8005840:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005844:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005846:	4b11      	ldr	r3, [pc, #68]	@ (800588c <MX_USART2_UART_Init+0x58>)
 8005848:	2200      	movs	r2, #0
 800584a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800584c:	4b0f      	ldr	r3, [pc, #60]	@ (800588c <MX_USART2_UART_Init+0x58>)
 800584e:	2200      	movs	r2, #0
 8005850:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005852:	4b0e      	ldr	r3, [pc, #56]	@ (800588c <MX_USART2_UART_Init+0x58>)
 8005854:	2200      	movs	r2, #0
 8005856:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005858:	4b0c      	ldr	r3, [pc, #48]	@ (800588c <MX_USART2_UART_Init+0x58>)
 800585a:	220c      	movs	r2, #12
 800585c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800585e:	4b0b      	ldr	r3, [pc, #44]	@ (800588c <MX_USART2_UART_Init+0x58>)
 8005860:	2200      	movs	r2, #0
 8005862:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005864:	4b09      	ldr	r3, [pc, #36]	@ (800588c <MX_USART2_UART_Init+0x58>)
 8005866:	2200      	movs	r2, #0
 8005868:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800586a:	4b08      	ldr	r3, [pc, #32]	@ (800588c <MX_USART2_UART_Init+0x58>)
 800586c:	2200      	movs	r2, #0
 800586e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005870:	4b06      	ldr	r3, [pc, #24]	@ (800588c <MX_USART2_UART_Init+0x58>)
 8005872:	2200      	movs	r2, #0
 8005874:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005876:	4805      	ldr	r0, [pc, #20]	@ (800588c <MX_USART2_UART_Init+0x58>)
 8005878:	f007 fe82 	bl	800d580 <HAL_UART_Init>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d001      	beq.n	8005886 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8005882:	f000 f961 	bl	8005b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005886:	bf00      	nop
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	20003088 	.word	0x20003088
 8005890:	40004400 	.word	0x40004400

08005894 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005898:	4b14      	ldr	r3, [pc, #80]	@ (80058ec <MX_USART3_UART_Init+0x58>)
 800589a:	4a15      	ldr	r2, [pc, #84]	@ (80058f0 <MX_USART3_UART_Init+0x5c>)
 800589c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800589e:	4b13      	ldr	r3, [pc, #76]	@ (80058ec <MX_USART3_UART_Init+0x58>)
 80058a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80058a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80058a6:	4b11      	ldr	r3, [pc, #68]	@ (80058ec <MX_USART3_UART_Init+0x58>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80058ac:	4b0f      	ldr	r3, [pc, #60]	@ (80058ec <MX_USART3_UART_Init+0x58>)
 80058ae:	2200      	movs	r2, #0
 80058b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80058b2:	4b0e      	ldr	r3, [pc, #56]	@ (80058ec <MX_USART3_UART_Init+0x58>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80058b8:	4b0c      	ldr	r3, [pc, #48]	@ (80058ec <MX_USART3_UART_Init+0x58>)
 80058ba:	220c      	movs	r2, #12
 80058bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80058be:	4b0b      	ldr	r3, [pc, #44]	@ (80058ec <MX_USART3_UART_Init+0x58>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80058c4:	4b09      	ldr	r3, [pc, #36]	@ (80058ec <MX_USART3_UART_Init+0x58>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80058ca:	4b08      	ldr	r3, [pc, #32]	@ (80058ec <MX_USART3_UART_Init+0x58>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80058d0:	4b06      	ldr	r3, [pc, #24]	@ (80058ec <MX_USART3_UART_Init+0x58>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80058d6:	4805      	ldr	r0, [pc, #20]	@ (80058ec <MX_USART3_UART_Init+0x58>)
 80058d8:	f007 fe52 	bl	800d580 <HAL_UART_Init>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d001      	beq.n	80058e6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80058e2:	f000 f931 	bl	8005b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80058e6:	bf00      	nop
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	20003110 	.word	0x20003110
 80058f0:	40004800 	.word	0x40004800

080058f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80058fa:	4b1a      	ldr	r3, [pc, #104]	@ (8005964 <MX_DMA_Init+0x70>)
 80058fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058fe:	4a19      	ldr	r2, [pc, #100]	@ (8005964 <MX_DMA_Init+0x70>)
 8005900:	f043 0302 	orr.w	r3, r3, #2
 8005904:	6493      	str	r3, [r2, #72]	@ 0x48
 8005906:	4b17      	ldr	r3, [pc, #92]	@ (8005964 <MX_DMA_Init+0x70>)
 8005908:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	607b      	str	r3, [r7, #4]
 8005910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005912:	4b14      	ldr	r3, [pc, #80]	@ (8005964 <MX_DMA_Init+0x70>)
 8005914:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005916:	4a13      	ldr	r2, [pc, #76]	@ (8005964 <MX_DMA_Init+0x70>)
 8005918:	f043 0301 	orr.w	r3, r3, #1
 800591c:	6493      	str	r3, [r2, #72]	@ 0x48
 800591e:	4b11      	ldr	r3, [pc, #68]	@ (8005964 <MX_DMA_Init+0x70>)
 8005920:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	603b      	str	r3, [r7, #0]
 8005928:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800592a:	2200      	movs	r2, #0
 800592c:	2105      	movs	r1, #5
 800592e:	200f      	movs	r0, #15
 8005930:	f000 ff6e 	bl	8006810 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8005934:	200f      	movs	r0, #15
 8005936:	f000 ff87 	bl	8006848 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 800593a:	2200      	movs	r2, #0
 800593c:	2105      	movs	r1, #5
 800593e:	2038      	movs	r0, #56	@ 0x38
 8005940:	f000 ff66 	bl	8006810 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8005944:	2038      	movs	r0, #56	@ 0x38
 8005946:	f000 ff7f 	bl	8006848 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 800594a:	2200      	movs	r2, #0
 800594c:	2105      	movs	r1, #5
 800594e:	203b      	movs	r0, #59	@ 0x3b
 8005950:	f000 ff5e 	bl	8006810 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8005954:	203b      	movs	r0, #59	@ 0x3b
 8005956:	f000 ff77 	bl	8006848 <HAL_NVIC_EnableIRQ>

}
 800595a:	bf00      	nop
 800595c:	3708      	adds	r7, #8
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	40021000 	.word	0x40021000

08005968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b08a      	sub	sp, #40	@ 0x28
 800596c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800596e:	f107 0314 	add.w	r3, r7, #20
 8005972:	2200      	movs	r2, #0
 8005974:	601a      	str	r2, [r3, #0]
 8005976:	605a      	str	r2, [r3, #4]
 8005978:	609a      	str	r2, [r3, #8]
 800597a:	60da      	str	r2, [r3, #12]
 800597c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800597e:	4b57      	ldr	r3, [pc, #348]	@ (8005adc <MX_GPIO_Init+0x174>)
 8005980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005982:	4a56      	ldr	r2, [pc, #344]	@ (8005adc <MX_GPIO_Init+0x174>)
 8005984:	f043 0304 	orr.w	r3, r3, #4
 8005988:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800598a:	4b54      	ldr	r3, [pc, #336]	@ (8005adc <MX_GPIO_Init+0x174>)
 800598c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800598e:	f003 0304 	and.w	r3, r3, #4
 8005992:	613b      	str	r3, [r7, #16]
 8005994:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005996:	4b51      	ldr	r3, [pc, #324]	@ (8005adc <MX_GPIO_Init+0x174>)
 8005998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800599a:	4a50      	ldr	r2, [pc, #320]	@ (8005adc <MX_GPIO_Init+0x174>)
 800599c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80059a2:	4b4e      	ldr	r3, [pc, #312]	@ (8005adc <MX_GPIO_Init+0x174>)
 80059a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059aa:	60fb      	str	r3, [r7, #12]
 80059ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80059ae:	4b4b      	ldr	r3, [pc, #300]	@ (8005adc <MX_GPIO_Init+0x174>)
 80059b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059b2:	4a4a      	ldr	r2, [pc, #296]	@ (8005adc <MX_GPIO_Init+0x174>)
 80059b4:	f043 0301 	orr.w	r3, r3, #1
 80059b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80059ba:	4b48      	ldr	r3, [pc, #288]	@ (8005adc <MX_GPIO_Init+0x174>)
 80059bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	60bb      	str	r3, [r7, #8]
 80059c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80059c6:	4b45      	ldr	r3, [pc, #276]	@ (8005adc <MX_GPIO_Init+0x174>)
 80059c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059ca:	4a44      	ldr	r2, [pc, #272]	@ (8005adc <MX_GPIO_Init+0x174>)
 80059cc:	f043 0302 	orr.w	r3, r3, #2
 80059d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80059d2:	4b42      	ldr	r3, [pc, #264]	@ (8005adc <MX_GPIO_Init+0x174>)
 80059d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	607b      	str	r3, [r7, #4]
 80059dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80059de:	4b3f      	ldr	r3, [pc, #252]	@ (8005adc <MX_GPIO_Init+0x174>)
 80059e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059e2:	4a3e      	ldr	r2, [pc, #248]	@ (8005adc <MX_GPIO_Init+0x174>)
 80059e4:	f043 0308 	orr.w	r3, r3, #8
 80059e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80059ea:	4b3c      	ldr	r3, [pc, #240]	@ (8005adc <MX_GPIO_Init+0x174>)
 80059ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059ee:	f003 0308 	and.w	r3, r3, #8
 80059f2:	603b      	str	r3, [r7, #0]
 80059f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USER_LED_Pin|LD2_Pin|RADIO_PWR_CTRL_Pin, GPIO_PIN_RESET);
 80059f6:	2200      	movs	r2, #0
 80059f8:	f44f 7198 	mov.w	r1, #304	@ 0x130
 80059fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005a00:	f001 faea 	bl	8006fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GNSS_PWR_CTRL_Pin|GNSS_BKUP_PWR_CTRL_Pin|GNSS_ON_OFF_Pin|TFT_BL_CTRL_Pin
 8005a04:	2200      	movs	r2, #0
 8005a06:	f645 1107 	movw	r1, #22791	@ 0x5907
 8005a0a:	4835      	ldr	r0, [pc, #212]	@ (8005ae0 <MX_GPIO_Init+0x178>)
 8005a0c:	f001 fae4 	bl	8006fd8 <HAL_GPIO_WritePin>
                          |TFT_DC_Pin|TFT_RST_Pin|SAI_MUTE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_RESET);
 8005a10:	2200      	movs	r2, #0
 8005a12:	2140      	movs	r1, #64	@ 0x40
 8005a14:	4833      	ldr	r0, [pc, #204]	@ (8005ae4 <MX_GPIO_Init+0x17c>)
 8005a16:	f001 fadf 	bl	8006fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005a1a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005a20:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8005a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a26:	2300      	movs	r3, #0
 8005a28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005a2a:	f107 0314 	add.w	r3, r7, #20
 8005a2e:	4619      	mov	r1, r3
 8005a30:	482c      	ldr	r0, [pc, #176]	@ (8005ae4 <MX_GPIO_Init+0x17c>)
 8005a32:	f001 f90f 	bl	8006c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_Pin LD2_Pin RADIO_PWR_CTRL_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin|LD2_Pin|RADIO_PWR_CTRL_Pin;
 8005a36:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8005a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a40:	2300      	movs	r3, #0
 8005a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a44:	2300      	movs	r3, #0
 8005a46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a48:	f107 0314 	add.w	r3, r7, #20
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005a52:	f001 f8ff 	bl	8006c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_BUTTON_2_Pin USER_BUTTON_3_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_2_Pin|USER_BUTTON_3_Pin;
 8005a56:	23c0      	movs	r3, #192	@ 0xc0
 8005a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a62:	f107 0314 	add.w	r3, r7, #20
 8005a66:	4619      	mov	r1, r3
 8005a68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005a6c:	f001 f8f2 	bl	8006c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : GNSS_PWR_CTRL_Pin GNSS_BKUP_PWR_CTRL_Pin GNSS_ON_OFF_Pin TFT_BL_CTRL_Pin
                           TFT_DC_Pin TFT_RST_Pin SAI_MUTE_Pin */
  GPIO_InitStruct.Pin = GNSS_PWR_CTRL_Pin|GNSS_BKUP_PWR_CTRL_Pin|GNSS_ON_OFF_Pin|TFT_BL_CTRL_Pin
 8005a70:	f645 1307 	movw	r3, #22791	@ 0x5907
 8005a74:	617b      	str	r3, [r7, #20]
                          |TFT_DC_Pin|TFT_RST_Pin|SAI_MUTE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a76:	2301      	movs	r3, #1
 8005a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a82:	f107 0314 	add.w	r3, r7, #20
 8005a86:	4619      	mov	r1, r3
 8005a88:	4815      	ldr	r0, [pc, #84]	@ (8005ae0 <MX_GPIO_Init+0x178>)
 8005a8a:	f001 f8e3 	bl	8006c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : TFT_CS_Pin */
  GPIO_InitStruct.Pin = TFT_CS_Pin;
 8005a8e:	2340      	movs	r3, #64	@ 0x40
 8005a90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a92:	2301      	movs	r3, #1
 8005a94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a96:	2300      	movs	r3, #0
 8005a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TFT_CS_GPIO_Port, &GPIO_InitStruct);
 8005a9e:	f107 0314 	add.w	r3, r7, #20
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	480f      	ldr	r0, [pc, #60]	@ (8005ae4 <MX_GPIO_Init+0x17c>)
 8005aa6:	f001 f8d5 	bl	8006c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_CARD_DETECT_Pin;
 8005aaa:	2380      	movs	r3, #128	@ 0x80
 8005aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CARD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8005ab6:	f107 0314 	add.w	r3, r7, #20
 8005aba:	4619      	mov	r1, r3
 8005abc:	4809      	ldr	r0, [pc, #36]	@ (8005ae4 <MX_GPIO_Init+0x17c>)
 8005abe:	f001 f8c9 	bl	8006c54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	2105      	movs	r1, #5
 8005ac6:	2028      	movs	r0, #40	@ 0x28
 8005ac8:	f000 fea2 	bl	8006810 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005acc:	2028      	movs	r0, #40	@ 0x28
 8005ace:	f000 febb 	bl	8006848 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005ad2:	bf00      	nop
 8005ad4:	3728      	adds	r7, #40	@ 0x28
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	40021000 	.word	0x40021000
 8005ae0:	48000400 	.word	0x48000400
 8005ae4:	48000800 	.word	0x48000800

08005ae8 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8005af0:	f013 fdea 	bl	80196c8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	main_app_setup();
 8005af4:	f7fb fad4 	bl	80010a0 <main_app_setup>
	/* Infinite loop */
	for (;;) {
		main_app_update();
 8005af8:	f7fb fae8 	bl	80010cc <main_app_update>
 8005afc:	e7fc      	b.n	8005af8 <StartDefaultTask+0x10>

08005afe <startGnssTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startGnssTask */
void startGnssTask(void *argument)
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b082      	sub	sp, #8
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startGnssTask */
	gnss_app_setup();
 8005b06:	f7fb fa57 	bl	8000fb8 <gnss_app_setup>
	/* Infinite loop */
	for (;;) {
		gnss_app_update();
 8005b0a:	f7fb fa6f 	bl	8000fec <gnss_app_update>
 8005b0e:	e7fc      	b.n	8005b0a <startGnssTask+0xc>

08005b10 <startUiTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startUiTask */
void startUiTask(void *argument)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startUiTask */
	ui_app_setup();
 8005b18:	f7fb fb08 	bl	800112c <ui_app_setup>

	/* Infinite loop */
	for (;;) {
		ui_app_update();
 8005b1c:	f7fb fb12 	bl	8001144 <ui_app_update>
 8005b20:	e7fc      	b.n	8005b1c <startUiTask+0xc>
	...

08005b24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a04      	ldr	r2, [pc, #16]	@ (8005b44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d101      	bne.n	8005b3a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005b36:	f000 fd6f 	bl	8006618 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005b3a:	bf00      	nop
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	40012c00 	.word	0x40012c00

08005b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005b4c:	b672      	cpsid	i
}
 8005b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005b50:	bf00      	nop
 8005b52:	e7fd      	b.n	8005b50 <Error_Handler+0x8>

08005b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b5a:	4b11      	ldr	r3, [pc, #68]	@ (8005ba0 <HAL_MspInit+0x4c>)
 8005b5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b5e:	4a10      	ldr	r2, [pc, #64]	@ (8005ba0 <HAL_MspInit+0x4c>)
 8005b60:	f043 0301 	orr.w	r3, r3, #1
 8005b64:	6613      	str	r3, [r2, #96]	@ 0x60
 8005b66:	4b0e      	ldr	r3, [pc, #56]	@ (8005ba0 <HAL_MspInit+0x4c>)
 8005b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	607b      	str	r3, [r7, #4]
 8005b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b72:	4b0b      	ldr	r3, [pc, #44]	@ (8005ba0 <HAL_MspInit+0x4c>)
 8005b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b76:	4a0a      	ldr	r2, [pc, #40]	@ (8005ba0 <HAL_MspInit+0x4c>)
 8005b78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b7e:	4b08      	ldr	r3, [pc, #32]	@ (8005ba0 <HAL_MspInit+0x4c>)
 8005b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b86:	603b      	str	r3, [r7, #0]
 8005b88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	210f      	movs	r1, #15
 8005b8e:	f06f 0001 	mvn.w	r0, #1
 8005b92:	f000 fe3d 	bl	8006810 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005b96:	bf00      	nop
 8005b98:	3708      	adds	r7, #8
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	40021000 	.word	0x40021000

08005ba4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b0ac      	sub	sp, #176	@ 0xb0
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bac:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	601a      	str	r2, [r3, #0]
 8005bb4:	605a      	str	r2, [r3, #4]
 8005bb6:	609a      	str	r2, [r3, #8]
 8005bb8:	60da      	str	r2, [r3, #12]
 8005bba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005bbc:	f107 0314 	add.w	r3, r7, #20
 8005bc0:	2288      	movs	r2, #136	@ 0x88
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f015 fb95 	bl	801b2f4 <memset>
  if(hi2c->Instance==I2C1)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a21      	ldr	r2, [pc, #132]	@ (8005c54 <HAL_I2C_MspInit+0xb0>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d13a      	bne.n	8005c4a <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005bd4:	2340      	movs	r3, #64	@ 0x40
 8005bd6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005bdc:	f107 0314 	add.w	r3, r7, #20
 8005be0:	4618      	mov	r0, r3
 8005be2:	f003 fbc1 	bl	8009368 <HAL_RCCEx_PeriphCLKConfig>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8005bec:	f7ff ffac 	bl	8005b48 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bf0:	4b19      	ldr	r3, [pc, #100]	@ (8005c58 <HAL_I2C_MspInit+0xb4>)
 8005bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bf4:	4a18      	ldr	r2, [pc, #96]	@ (8005c58 <HAL_I2C_MspInit+0xb4>)
 8005bf6:	f043 0302 	orr.w	r3, r3, #2
 8005bfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005bfc:	4b16      	ldr	r3, [pc, #88]	@ (8005c58 <HAL_I2C_MspInit+0xb4>)
 8005bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c00:	f003 0302 	and.w	r3, r3, #2
 8005c04:	613b      	str	r3, [r7, #16]
 8005c06:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005c08:	23c0      	movs	r3, #192	@ 0xc0
 8005c0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005c0e:	2312      	movs	r3, #18
 8005c10:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c14:	2300      	movs	r3, #0
 8005c16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005c20:	2304      	movs	r3, #4
 8005c22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c26:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	480b      	ldr	r0, [pc, #44]	@ (8005c5c <HAL_I2C_MspInit+0xb8>)
 8005c2e:	f001 f811 	bl	8006c54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005c32:	4b09      	ldr	r3, [pc, #36]	@ (8005c58 <HAL_I2C_MspInit+0xb4>)
 8005c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c36:	4a08      	ldr	r2, [pc, #32]	@ (8005c58 <HAL_I2C_MspInit+0xb4>)
 8005c38:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005c3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c3e:	4b06      	ldr	r3, [pc, #24]	@ (8005c58 <HAL_I2C_MspInit+0xb4>)
 8005c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c46:	60fb      	str	r3, [r7, #12]
 8005c48:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8005c4a:	bf00      	nop
 8005c4c:	37b0      	adds	r7, #176	@ 0xb0
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	40005400 	.word	0x40005400
 8005c58:	40021000 	.word	0x40021000
 8005c5c:	48000400 	.word	0x48000400

08005c60 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b0a4      	sub	sp, #144	@ 0x90
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005c68:	f107 0308 	add.w	r3, r7, #8
 8005c6c:	2288      	movs	r2, #136	@ 0x88
 8005c6e:	2100      	movs	r1, #0
 8005c70:	4618      	mov	r0, r3
 8005c72:	f015 fb3f 	bl	801b2f4 <memset>
  if(hrtc->Instance==RTC)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a10      	ldr	r2, [pc, #64]	@ (8005cbc <HAL_RTC_MspInit+0x5c>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d118      	bne.n	8005cb2 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005c80:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005c84:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8005c86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005c8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005c8e:	f107 0308 	add.w	r3, r7, #8
 8005c92:	4618      	mov	r0, r3
 8005c94:	f003 fb68 	bl	8009368 <HAL_RCCEx_PeriphCLKConfig>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d001      	beq.n	8005ca2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8005c9e:	f7ff ff53 	bl	8005b48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005ca2:	4b07      	ldr	r3, [pc, #28]	@ (8005cc0 <HAL_RTC_MspInit+0x60>)
 8005ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ca8:	4a05      	ldr	r2, [pc, #20]	@ (8005cc0 <HAL_RTC_MspInit+0x60>)
 8005caa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8005cb2:	bf00      	nop
 8005cb4:	3790      	adds	r7, #144	@ 0x90
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	40002800 	.word	0x40002800
 8005cc0:	40021000 	.word	0x40021000

08005cc4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b08a      	sub	sp, #40	@ 0x28
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ccc:	f107 0314 	add.w	r3, r7, #20
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	605a      	str	r2, [r3, #4]
 8005cd6:	609a      	str	r2, [r3, #8]
 8005cd8:	60da      	str	r2, [r3, #12]
 8005cda:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a3b      	ldr	r2, [pc, #236]	@ (8005dd0 <HAL_SD_MspInit+0x10c>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d16f      	bne.n	8005dc6 <HAL_SD_MspInit+0x102>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8005ce6:	4b3b      	ldr	r3, [pc, #236]	@ (8005dd4 <HAL_SD_MspInit+0x110>)
 8005ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cea:	4a3a      	ldr	r2, [pc, #232]	@ (8005dd4 <HAL_SD_MspInit+0x110>)
 8005cec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005cf0:	6613      	str	r3, [r2, #96]	@ 0x60
 8005cf2:	4b38      	ldr	r3, [pc, #224]	@ (8005dd4 <HAL_SD_MspInit+0x110>)
 8005cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cfa:	613b      	str	r3, [r7, #16]
 8005cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005cfe:	4b35      	ldr	r3, [pc, #212]	@ (8005dd4 <HAL_SD_MspInit+0x110>)
 8005d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d02:	4a34      	ldr	r2, [pc, #208]	@ (8005dd4 <HAL_SD_MspInit+0x110>)
 8005d04:	f043 0304 	orr.w	r3, r3, #4
 8005d08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005d0a:	4b32      	ldr	r3, [pc, #200]	@ (8005dd4 <HAL_SD_MspInit+0x110>)
 8005d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d0e:	f003 0304 	and.w	r3, r3, #4
 8005d12:	60fb      	str	r3, [r7, #12]
 8005d14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005d16:	4b2f      	ldr	r3, [pc, #188]	@ (8005dd4 <HAL_SD_MspInit+0x110>)
 8005d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d1a:	4a2e      	ldr	r2, [pc, #184]	@ (8005dd4 <HAL_SD_MspInit+0x110>)
 8005d1c:	f043 0308 	orr.w	r3, r3, #8
 8005d20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005d22:	4b2c      	ldr	r3, [pc, #176]	@ (8005dd4 <HAL_SD_MspInit+0x110>)
 8005d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d26:	f003 0308 	and.w	r3, r3, #8
 8005d2a:	60bb      	str	r3, [r7, #8]
 8005d2c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8005d2e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8005d32:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d34:	2302      	movs	r3, #2
 8005d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8005d40:	230c      	movs	r3, #12
 8005d42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d44:	f107 0314 	add.w	r3, r7, #20
 8005d48:	4619      	mov	r1, r3
 8005d4a:	4823      	ldr	r0, [pc, #140]	@ (8005dd8 <HAL_SD_MspInit+0x114>)
 8005d4c:	f000 ff82 	bl	8006c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005d50:	2304      	movs	r3, #4
 8005d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d54:	2302      	movs	r3, #2
 8005d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8005d60:	230c      	movs	r3, #12
 8005d62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005d64:	f107 0314 	add.w	r3, r7, #20
 8005d68:	4619      	mov	r1, r3
 8005d6a:	481c      	ldr	r0, [pc, #112]	@ (8005ddc <HAL_SD_MspInit+0x118>)
 8005d6c:	f000 ff72 	bl	8006c54 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Channel4;
 8005d70:	4b1b      	ldr	r3, [pc, #108]	@ (8005de0 <HAL_SD_MspInit+0x11c>)
 8005d72:	4a1c      	ldr	r2, [pc, #112]	@ (8005de4 <HAL_SD_MspInit+0x120>)
 8005d74:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Request = DMA_REQUEST_7;
 8005d76:	4b1a      	ldr	r3, [pc, #104]	@ (8005de0 <HAL_SD_MspInit+0x11c>)
 8005d78:	2207      	movs	r2, #7
 8005d7a:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005d7c:	4b18      	ldr	r3, [pc, #96]	@ (8005de0 <HAL_SD_MspInit+0x11c>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d82:	4b17      	ldr	r3, [pc, #92]	@ (8005de0 <HAL_SD_MspInit+0x11c>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005d88:	4b15      	ldr	r3, [pc, #84]	@ (8005de0 <HAL_SD_MspInit+0x11c>)
 8005d8a:	2280      	movs	r2, #128	@ 0x80
 8005d8c:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005d8e:	4b14      	ldr	r3, [pc, #80]	@ (8005de0 <HAL_SD_MspInit+0x11c>)
 8005d90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d94:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005d96:	4b12      	ldr	r3, [pc, #72]	@ (8005de0 <HAL_SD_MspInit+0x11c>)
 8005d98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d9c:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_NORMAL;
 8005d9e:	4b10      	ldr	r3, [pc, #64]	@ (8005de0 <HAL_SD_MspInit+0x11c>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005da4:	4b0e      	ldr	r3, [pc, #56]	@ (8005de0 <HAL_SD_MspInit+0x11c>)
 8005da6:	2200      	movs	r2, #0
 8005da8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8005daa:	480d      	ldr	r0, [pc, #52]	@ (8005de0 <HAL_SD_MspInit+0x11c>)
 8005dac:	f000 fd5a 	bl	8006864 <HAL_DMA_Init>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <HAL_SD_MspInit+0xf6>
    {
      Error_Handler();
 8005db6:	f7ff fec7 	bl	8005b48 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a08      	ldr	r2, [pc, #32]	@ (8005de0 <HAL_SD_MspInit+0x11c>)
 8005dbe:	641a      	str	r2, [r3, #64]	@ 0x40
 8005dc0:	4a07      	ldr	r2, [pc, #28]	@ (8005de0 <HAL_SD_MspInit+0x11c>)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8005dc6:	bf00      	nop
 8005dc8:	3728      	adds	r7, #40	@ 0x28
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	40012800 	.word	0x40012800
 8005dd4:	40021000 	.word	0x40021000
 8005dd8:	48000800 	.word	0x48000800
 8005ddc:	48000c00 	.word	0x48000c00
 8005de0:	20002f0c 	.word	0x20002f0c
 8005de4:	40020444 	.word	0x40020444

08005de8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b08a      	sub	sp, #40	@ 0x28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005df0:	f107 0314 	add.w	r3, r7, #20
 8005df4:	2200      	movs	r2, #0
 8005df6:	601a      	str	r2, [r3, #0]
 8005df8:	605a      	str	r2, [r3, #4]
 8005dfa:	609a      	str	r2, [r3, #8]
 8005dfc:	60da      	str	r2, [r3, #12]
 8005dfe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a3a      	ldr	r2, [pc, #232]	@ (8005ef0 <HAL_SPI_MspInit+0x108>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d16d      	bne.n	8005ee6 <HAL_SPI_MspInit+0xfe>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005e0a:	4b3a      	ldr	r3, [pc, #232]	@ (8005ef4 <HAL_SPI_MspInit+0x10c>)
 8005e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e0e:	4a39      	ldr	r2, [pc, #228]	@ (8005ef4 <HAL_SPI_MspInit+0x10c>)
 8005e10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005e14:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e16:	4b37      	ldr	r3, [pc, #220]	@ (8005ef4 <HAL_SPI_MspInit+0x10c>)
 8005e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e1e:	613b      	str	r3, [r7, #16]
 8005e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e22:	4b34      	ldr	r3, [pc, #208]	@ (8005ef4 <HAL_SPI_MspInit+0x10c>)
 8005e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e26:	4a33      	ldr	r2, [pc, #204]	@ (8005ef4 <HAL_SPI_MspInit+0x10c>)
 8005e28:	f043 0304 	orr.w	r3, r3, #4
 8005e2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e2e:	4b31      	ldr	r3, [pc, #196]	@ (8005ef4 <HAL_SPI_MspInit+0x10c>)
 8005e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e32:	f003 0304 	and.w	r3, r3, #4
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e3a:	4b2e      	ldr	r3, [pc, #184]	@ (8005ef4 <HAL_SPI_MspInit+0x10c>)
 8005e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e3e:	4a2d      	ldr	r2, [pc, #180]	@ (8005ef4 <HAL_SPI_MspInit+0x10c>)
 8005e40:	f043 0302 	orr.w	r3, r3, #2
 8005e44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e46:	4b2b      	ldr	r3, [pc, #172]	@ (8005ef4 <HAL_SPI_MspInit+0x10c>)
 8005e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e4a:	f003 0302 	and.w	r3, r3, #2
 8005e4e:	60bb      	str	r3, [r7, #8]
 8005e50:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005e52:	2304      	movs	r3, #4
 8005e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e56:	2302      	movs	r3, #2
 8005e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005e62:	2305      	movs	r3, #5
 8005e64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e66:	f107 0314 	add.w	r3, r7, #20
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	4822      	ldr	r0, [pc, #136]	@ (8005ef8 <HAL_SPI_MspInit+0x110>)
 8005e6e:	f000 fef1 	bl	8006c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8005e72:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8005e76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e78:	2302      	movs	r3, #2
 8005e7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e80:	2303      	movs	r3, #3
 8005e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005e84:	2305      	movs	r3, #5
 8005e86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e88:	f107 0314 	add.w	r3, r7, #20
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	481b      	ldr	r0, [pc, #108]	@ (8005efc <HAL_SPI_MspInit+0x114>)
 8005e90:	f000 fee0 	bl	8006c54 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8005e94:	4b1a      	ldr	r3, [pc, #104]	@ (8005f00 <HAL_SPI_MspInit+0x118>)
 8005e96:	4a1b      	ldr	r2, [pc, #108]	@ (8005f04 <HAL_SPI_MspInit+0x11c>)
 8005e98:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8005e9a:	4b19      	ldr	r3, [pc, #100]	@ (8005f00 <HAL_SPI_MspInit+0x118>)
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005ea0:	4b17      	ldr	r3, [pc, #92]	@ (8005f00 <HAL_SPI_MspInit+0x118>)
 8005ea2:	2210      	movs	r2, #16
 8005ea4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ea6:	4b16      	ldr	r3, [pc, #88]	@ (8005f00 <HAL_SPI_MspInit+0x118>)
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005eac:	4b14      	ldr	r3, [pc, #80]	@ (8005f00 <HAL_SPI_MspInit+0x118>)
 8005eae:	2280      	movs	r2, #128	@ 0x80
 8005eb0:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005eb2:	4b13      	ldr	r3, [pc, #76]	@ (8005f00 <HAL_SPI_MspInit+0x118>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005eb8:	4b11      	ldr	r3, [pc, #68]	@ (8005f00 <HAL_SPI_MspInit+0x118>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8005ebe:	4b10      	ldr	r3, [pc, #64]	@ (8005f00 <HAL_SPI_MspInit+0x118>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8005f00 <HAL_SPI_MspInit+0x118>)
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8005eca:	480d      	ldr	r0, [pc, #52]	@ (8005f00 <HAL_SPI_MspInit+0x118>)
 8005ecc:	f000 fcca 	bl	8006864 <HAL_DMA_Init>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 8005ed6:	f7ff fe37 	bl	8005b48 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a08      	ldr	r2, [pc, #32]	@ (8005f00 <HAL_SPI_MspInit+0x118>)
 8005ede:	655a      	str	r2, [r3, #84]	@ 0x54
 8005ee0:	4a07      	ldr	r2, [pc, #28]	@ (8005f00 <HAL_SPI_MspInit+0x118>)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8005ee6:	bf00      	nop
 8005ee8:	3728      	adds	r7, #40	@ 0x28
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	40003800 	.word	0x40003800
 8005ef4:	40021000 	.word	0x40021000
 8005ef8:	48000800 	.word	0x48000800
 8005efc:	48000400 	.word	0x48000400
 8005f00:	20002fb8 	.word	0x20002fb8
 8005f04:	40020058 	.word	0x40020058

08005f08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b0b0      	sub	sp, #192	@ 0xc0
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f10:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005f14:	2200      	movs	r2, #0
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	605a      	str	r2, [r3, #4]
 8005f1a:	609a      	str	r2, [r3, #8]
 8005f1c:	60da      	str	r2, [r3, #12]
 8005f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005f20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f24:	2288      	movs	r2, #136	@ 0x88
 8005f26:	2100      	movs	r1, #0
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f015 f9e3 	bl	801b2f4 <memset>
  if(huart->Instance==USART1)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a63      	ldr	r2, [pc, #396]	@ (80060c0 <HAL_UART_MspInit+0x1b8>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d13d      	bne.n	8005fb4 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005f40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f44:	4618      	mov	r0, r3
 8005f46:	f003 fa0f 	bl	8009368 <HAL_RCCEx_PeriphCLKConfig>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d001      	beq.n	8005f54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005f50:	f7ff fdfa 	bl	8005b48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005f54:	4b5b      	ldr	r3, [pc, #364]	@ (80060c4 <HAL_UART_MspInit+0x1bc>)
 8005f56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f58:	4a5a      	ldr	r2, [pc, #360]	@ (80060c4 <HAL_UART_MspInit+0x1bc>)
 8005f5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005f5e:	6613      	str	r3, [r2, #96]	@ 0x60
 8005f60:	4b58      	ldr	r3, [pc, #352]	@ (80060c4 <HAL_UART_MspInit+0x1bc>)
 8005f62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f68:	623b      	str	r3, [r7, #32]
 8005f6a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f6c:	4b55      	ldr	r3, [pc, #340]	@ (80060c4 <HAL_UART_MspInit+0x1bc>)
 8005f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f70:	4a54      	ldr	r2, [pc, #336]	@ (80060c4 <HAL_UART_MspInit+0x1bc>)
 8005f72:	f043 0301 	orr.w	r3, r3, #1
 8005f76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005f78:	4b52      	ldr	r3, [pc, #328]	@ (80060c4 <HAL_UART_MspInit+0x1bc>)
 8005f7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f7c:	f003 0301 	and.w	r3, r3, #1
 8005f80:	61fb      	str	r3, [r7, #28]
 8005f82:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GNSS_UART_TX_Pin|GNSS_UART_RX_Pin;
 8005f84:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8005f88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f92:	2300      	movs	r3, #0
 8005f94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005f9e:	2307      	movs	r3, #7
 8005fa0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fa4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005fa8:	4619      	mov	r1, r3
 8005faa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005fae:	f000 fe51 	bl	8006c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005fb2:	e081      	b.n	80060b8 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART2)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a43      	ldr	r2, [pc, #268]	@ (80060c8 <HAL_UART_MspInit+0x1c0>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d13c      	bne.n	8006038 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005fc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f003 f9cc 	bl	8009368 <HAL_RCCEx_PeriphCLKConfig>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8005fd6:	f7ff fdb7 	bl	8005b48 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005fda:	4b3a      	ldr	r3, [pc, #232]	@ (80060c4 <HAL_UART_MspInit+0x1bc>)
 8005fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fde:	4a39      	ldr	r2, [pc, #228]	@ (80060c4 <HAL_UART_MspInit+0x1bc>)
 8005fe0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fe4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005fe6:	4b37      	ldr	r3, [pc, #220]	@ (80060c4 <HAL_UART_MspInit+0x1bc>)
 8005fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fee:	61bb      	str	r3, [r7, #24]
 8005ff0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ff2:	4b34      	ldr	r3, [pc, #208]	@ (80060c4 <HAL_UART_MspInit+0x1bc>)
 8005ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ff6:	4a33      	ldr	r2, [pc, #204]	@ (80060c4 <HAL_UART_MspInit+0x1bc>)
 8005ff8:	f043 0301 	orr.w	r3, r3, #1
 8005ffc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ffe:	4b31      	ldr	r3, [pc, #196]	@ (80060c4 <HAL_UART_MspInit+0x1bc>)
 8006000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	617b      	str	r3, [r7, #20]
 8006008:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800600a:	230c      	movs	r3, #12
 800600c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006010:	2302      	movs	r3, #2
 8006012:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006016:	2300      	movs	r3, #0
 8006018:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800601c:	2303      	movs	r3, #3
 800601e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006022:	2307      	movs	r3, #7
 8006024:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006028:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800602c:	4619      	mov	r1, r3
 800602e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006032:	f000 fe0f 	bl	8006c54 <HAL_GPIO_Init>
}
 8006036:	e03f      	b.n	80060b8 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART3)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a23      	ldr	r2, [pc, #140]	@ (80060cc <HAL_UART_MspInit+0x1c4>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d13a      	bne.n	80060b8 <HAL_UART_MspInit+0x1b0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006042:	2304      	movs	r3, #4
 8006044:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8006046:	2300      	movs	r3, #0
 8006048:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800604a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800604e:	4618      	mov	r0, r3
 8006050:	f003 f98a 	bl	8009368 <HAL_RCCEx_PeriphCLKConfig>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d001      	beq.n	800605e <HAL_UART_MspInit+0x156>
      Error_Handler();
 800605a:	f7ff fd75 	bl	8005b48 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800605e:	4b19      	ldr	r3, [pc, #100]	@ (80060c4 <HAL_UART_MspInit+0x1bc>)
 8006060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006062:	4a18      	ldr	r2, [pc, #96]	@ (80060c4 <HAL_UART_MspInit+0x1bc>)
 8006064:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006068:	6593      	str	r3, [r2, #88]	@ 0x58
 800606a:	4b16      	ldr	r3, [pc, #88]	@ (80060c4 <HAL_UART_MspInit+0x1bc>)
 800606c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800606e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006072:	613b      	str	r3, [r7, #16]
 8006074:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006076:	4b13      	ldr	r3, [pc, #76]	@ (80060c4 <HAL_UART_MspInit+0x1bc>)
 8006078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800607a:	4a12      	ldr	r2, [pc, #72]	@ (80060c4 <HAL_UART_MspInit+0x1bc>)
 800607c:	f043 0304 	orr.w	r3, r3, #4
 8006080:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006082:	4b10      	ldr	r3, [pc, #64]	@ (80060c4 <HAL_UART_MspInit+0x1bc>)
 8006084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006086:	f003 0304 	and.w	r3, r3, #4
 800608a:	60fb      	str	r3, [r7, #12]
 800608c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RADIO_UART_TX_Pin|RADIO_UART_RX_Pin;
 800608e:	2330      	movs	r3, #48	@ 0x30
 8006090:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006094:	2302      	movs	r3, #2
 8006096:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800609a:	2300      	movs	r3, #0
 800609c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060a0:	2303      	movs	r3, #3
 80060a2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80060a6:	2307      	movs	r3, #7
 80060a8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060ac:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80060b0:	4619      	mov	r1, r3
 80060b2:	4807      	ldr	r0, [pc, #28]	@ (80060d0 <HAL_UART_MspInit+0x1c8>)
 80060b4:	f000 fdce 	bl	8006c54 <HAL_GPIO_Init>
}
 80060b8:	bf00      	nop
 80060ba:	37c0      	adds	r7, #192	@ 0xc0
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	40013800 	.word	0x40013800
 80060c4:	40021000 	.word	0x40021000
 80060c8:	40004400 	.word	0x40004400
 80060cc:	40004800 	.word	0x40004800
 80060d0:	48000800 	.word	0x48000800

080060d4 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b0aa      	sub	sp, #168	@ 0xa8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80060dc:	f107 030c 	add.w	r3, r7, #12
 80060e0:	2288      	movs	r2, #136	@ 0x88
 80060e2:	2100      	movs	r1, #0
 80060e4:	4618      	mov	r0, r3
 80060e6:	f015 f905 	bl	801b2f4 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a4b      	ldr	r2, [pc, #300]	@ (800621c <HAL_SAI_MspInit+0x148>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	f040 808e 	bne.w	8006212 <HAL_SAI_MspInit+0x13e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80060f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80060fa:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI2;
 80060fc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006100:	673b      	str	r3, [r7, #112]	@ 0x70
    PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_MSI;
 8006102:	2301      	movs	r3, #1
 8006104:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI2.PLLSAI2M = 1;
 8006106:	2301      	movs	r3, #1
 8006108:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI2.PLLSAI2N = 16;
 800610a:	2310      	movs	r3, #16
 800610c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV7;
 800610e:	2307      	movs	r3, #7
 8006110:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
 8006112:	2302      	movs	r3, #2
 8006114:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_SAI2CLK;
 8006116:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800611a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800611c:	f107 030c 	add.w	r3, r7, #12
 8006120:	4618      	mov	r0, r3
 8006122:	f003 f921 	bl	8009368 <HAL_RCCEx_PeriphCLKConfig>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d001      	beq.n	8006130 <HAL_SAI_MspInit+0x5c>
    {
      Error_Handler();
 800612c:	f7ff fd0c 	bl	8005b48 <Error_Handler>
    }

    if (SAI1_client == 0)
 8006130:	4b3b      	ldr	r3, [pc, #236]	@ (8006220 <HAL_SAI_MspInit+0x14c>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10b      	bne.n	8006150 <HAL_SAI_MspInit+0x7c>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8006138:	4b3a      	ldr	r3, [pc, #232]	@ (8006224 <HAL_SAI_MspInit+0x150>)
 800613a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800613c:	4a39      	ldr	r2, [pc, #228]	@ (8006224 <HAL_SAI_MspInit+0x150>)
 800613e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006142:	6613      	str	r3, [r2, #96]	@ 0x60
 8006144:	4b37      	ldr	r3, [pc, #220]	@ (8006224 <HAL_SAI_MspInit+0x150>)
 8006146:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006148:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800614c:	60bb      	str	r3, [r7, #8]
 800614e:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8006150:	4b33      	ldr	r3, [pc, #204]	@ (8006220 <HAL_SAI_MspInit+0x14c>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3301      	adds	r3, #1
 8006156:	4a32      	ldr	r2, [pc, #200]	@ (8006220 <HAL_SAI_MspInit+0x14c>)
 8006158:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PC3     ------> SAI1_SD_A
    PB10     ------> SAI1_SCK_A
    PB9     ------> SAI1_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800615a:	2308      	movs	r3, #8
 800615c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006160:	2302      	movs	r3, #2
 8006162:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006166:	2300      	movs	r3, #0
 8006168:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800616c:	2300      	movs	r3, #0
 800616e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8006172:	230d      	movs	r3, #13
 8006174:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006178:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800617c:	4619      	mov	r1, r3
 800617e:	482a      	ldr	r0, [pc, #168]	@ (8006228 <HAL_SAI_MspInit+0x154>)
 8006180:	f000 fd68 	bl	8006c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8006184:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8006188:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800618c:	2302      	movs	r3, #2
 800618e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006192:	2300      	movs	r3, #0
 8006194:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006198:	2300      	movs	r3, #0
 800619a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800619e:	230d      	movs	r3, #13
 80061a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061a4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80061a8:	4619      	mov	r1, r3
 80061aa:	4820      	ldr	r0, [pc, #128]	@ (800622c <HAL_SAI_MspInit+0x158>)
 80061ac:	f000 fd52 	bl	8006c54 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Channel1;
 80061b0:	4b1f      	ldr	r3, [pc, #124]	@ (8006230 <HAL_SAI_MspInit+0x15c>)
 80061b2:	4a20      	ldr	r2, [pc, #128]	@ (8006234 <HAL_SAI_MspInit+0x160>)
 80061b4:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_1;
 80061b6:	4b1e      	ldr	r3, [pc, #120]	@ (8006230 <HAL_SAI_MspInit+0x15c>)
 80061b8:	2201      	movs	r2, #1
 80061ba:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80061bc:	4b1c      	ldr	r3, [pc, #112]	@ (8006230 <HAL_SAI_MspInit+0x15c>)
 80061be:	2210      	movs	r2, #16
 80061c0:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80061c2:	4b1b      	ldr	r3, [pc, #108]	@ (8006230 <HAL_SAI_MspInit+0x15c>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80061c8:	4b19      	ldr	r3, [pc, #100]	@ (8006230 <HAL_SAI_MspInit+0x15c>)
 80061ca:	2280      	movs	r2, #128	@ 0x80
 80061cc:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80061ce:	4b18      	ldr	r3, [pc, #96]	@ (8006230 <HAL_SAI_MspInit+0x15c>)
 80061d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80061d4:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80061d6:	4b16      	ldr	r3, [pc, #88]	@ (8006230 <HAL_SAI_MspInit+0x15c>)
 80061d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80061dc:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_NORMAL;
 80061de:	4b14      	ldr	r3, [pc, #80]	@ (8006230 <HAL_SAI_MspInit+0x15c>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 80061e4:	4b12      	ldr	r3, [pc, #72]	@ (8006230 <HAL_SAI_MspInit+0x15c>)
 80061e6:	2200      	movs	r2, #0
 80061e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80061ea:	4811      	ldr	r0, [pc, #68]	@ (8006230 <HAL_SAI_MspInit+0x15c>)
 80061ec:	f000 fb3a 	bl	8006864 <HAL_DMA_Init>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <HAL_SAI_MspInit+0x126>
    {
      Error_Handler();
 80061f6:	f7ff fca7 	bl	8005b48 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a0c      	ldr	r2, [pc, #48]	@ (8006230 <HAL_SAI_MspInit+0x15c>)
 80061fe:	671a      	str	r2, [r3, #112]	@ 0x70
 8006200:	4a0b      	ldr	r2, [pc, #44]	@ (8006230 <HAL_SAI_MspInit+0x15c>)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6293      	str	r3, [r2, #40]	@ 0x28

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a09      	ldr	r2, [pc, #36]	@ (8006230 <HAL_SAI_MspInit+0x15c>)
 800620a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800620c:	4a08      	ldr	r2, [pc, #32]	@ (8006230 <HAL_SAI_MspInit+0x15c>)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6293      	str	r3, [r2, #40]	@ 0x28

    }
}
 8006212:	bf00      	nop
 8006214:	37a8      	adds	r7, #168	@ 0xa8
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	40015404 	.word	0x40015404
 8006220:	200031b4 	.word	0x200031b4
 8006224:	40021000 	.word	0x40021000
 8006228:	48000800 	.word	0x48000800
 800622c:	48000400 	.word	0x48000400
 8006230:	20002e40 	.word	0x20002e40
 8006234:	40020408 	.word	0x40020408

08006238 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b08c      	sub	sp, #48	@ 0x30
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8006240:	2300      	movs	r3, #0
 8006242:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8006246:	4b2e      	ldr	r3, [pc, #184]	@ (8006300 <HAL_InitTick+0xc8>)
 8006248:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800624a:	4a2d      	ldr	r2, [pc, #180]	@ (8006300 <HAL_InitTick+0xc8>)
 800624c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006250:	6613      	str	r3, [r2, #96]	@ 0x60
 8006252:	4b2b      	ldr	r3, [pc, #172]	@ (8006300 <HAL_InitTick+0xc8>)
 8006254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006256:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800625a:	60bb      	str	r3, [r7, #8]
 800625c:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800625e:	f107 020c 	add.w	r2, r7, #12
 8006262:	f107 0310 	add.w	r3, r7, #16
 8006266:	4611      	mov	r1, r2
 8006268:	4618      	mov	r0, r3
 800626a:	f002 ffeb 	bl	8009244 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800626e:	f002 ffd3 	bl	8009218 <HAL_RCC_GetPCLK2Freq>
 8006272:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006276:	4a23      	ldr	r2, [pc, #140]	@ (8006304 <HAL_InitTick+0xcc>)
 8006278:	fba2 2303 	umull	r2, r3, r2, r3
 800627c:	0c9b      	lsrs	r3, r3, #18
 800627e:	3b01      	subs	r3, #1
 8006280:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8006282:	4b21      	ldr	r3, [pc, #132]	@ (8006308 <HAL_InitTick+0xd0>)
 8006284:	4a21      	ldr	r2, [pc, #132]	@ (800630c <HAL_InitTick+0xd4>)
 8006286:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8006288:	4b1f      	ldr	r3, [pc, #124]	@ (8006308 <HAL_InitTick+0xd0>)
 800628a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800628e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8006290:	4a1d      	ldr	r2, [pc, #116]	@ (8006308 <HAL_InitTick+0xd0>)
 8006292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006294:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8006296:	4b1c      	ldr	r3, [pc, #112]	@ (8006308 <HAL_InitTick+0xd0>)
 8006298:	2200      	movs	r2, #0
 800629a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800629c:	4b1a      	ldr	r3, [pc, #104]	@ (8006308 <HAL_InitTick+0xd0>)
 800629e:	2200      	movs	r2, #0
 80062a0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80062a2:	4b19      	ldr	r3, [pc, #100]	@ (8006308 <HAL_InitTick+0xd0>)
 80062a4:	2200      	movs	r2, #0
 80062a6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80062a8:	4817      	ldr	r0, [pc, #92]	@ (8006308 <HAL_InitTick+0xd0>)
 80062aa:	f006 fea3 	bl	800cff4 <HAL_TIM_Base_Init>
 80062ae:	4603      	mov	r3, r0
 80062b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80062b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d11b      	bne.n	80062f4 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80062bc:	4812      	ldr	r0, [pc, #72]	@ (8006308 <HAL_InitTick+0xd0>)
 80062be:	f006 fefb 	bl	800d0b8 <HAL_TIM_Base_Start_IT>
 80062c2:	4603      	mov	r3, r0
 80062c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80062c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d111      	bne.n	80062f4 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80062d0:	2019      	movs	r0, #25
 80062d2:	f000 fab9 	bl	8006848 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2b0f      	cmp	r3, #15
 80062da:	d808      	bhi.n	80062ee <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80062dc:	2200      	movs	r2, #0
 80062de:	6879      	ldr	r1, [r7, #4]
 80062e0:	2019      	movs	r0, #25
 80062e2:	f000 fa95 	bl	8006810 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80062e6:	4a0a      	ldr	r2, [pc, #40]	@ (8006310 <HAL_InitTick+0xd8>)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6013      	str	r3, [r2, #0]
 80062ec:	e002      	b.n	80062f4 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80062f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3730      	adds	r7, #48	@ 0x30
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	40021000 	.word	0x40021000
 8006304:	431bde83 	.word	0x431bde83
 8006308:	200031b8 	.word	0x200031b8
 800630c:	40012c00 	.word	0x40012c00
 8006310:	20000004 	.word	0x20000004

08006314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006314:	b480      	push	{r7}
 8006316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006318:	bf00      	nop
 800631a:	e7fd      	b.n	8006318 <NMI_Handler+0x4>

0800631c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 8006320:	2110      	movs	r1, #16
 8006322:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006326:	f000 fe6f 	bl	8007008 <HAL_GPIO_TogglePin>

	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800632a:	2120      	movs	r1, #32
 800632c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006330:	f000 fe6a 	bl	8007008 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 8006334:	bf00      	nop
 8006336:	e7f3      	b.n	8006320 <HardFault_Handler+0x4>

08006338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006338:	b480      	push	{r7}
 800633a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800633c:	bf00      	nop
 800633e:	e7fd      	b.n	800633c <MemManage_Handler+0x4>

08006340 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006340:	b480      	push	{r7}
 8006342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006344:	bf00      	nop
 8006346:	e7fd      	b.n	8006344 <BusFault_Handler+0x4>

08006348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006348:	b480      	push	{r7}
 800634a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800634c:	bf00      	nop
 800634e:	e7fd      	b.n	800634c <UsageFault_Handler+0x4>

08006350 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006350:	b480      	push	{r7}
 8006352:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006354:	bf00      	nop
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
	...

08006360 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8006364:	4802      	ldr	r0, [pc, #8]	@ (8006370 <DMA1_Channel5_IRQHandler+0x10>)
 8006366:	f000 fb95 	bl	8006a94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800636a:	bf00      	nop
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	20002fb8 	.word	0x20002fb8

08006374 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006378:	4802      	ldr	r0, [pc, #8]	@ (8006384 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800637a:	f006 ff0d 	bl	800d198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800637e:	bf00      	nop
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	200031b8 	.word	0x200031b8

08006388 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800638c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8006390:	f000 fe54 	bl	800703c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006394:	bf00      	nop
 8006396:	bd80      	pop	{r7, pc}

08006398 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 800639c:	4802      	ldr	r0, [pc, #8]	@ (80063a8 <DMA2_Channel1_IRQHandler+0x10>)
 800639e:	f000 fb79 	bl	8006a94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80063a2:	bf00      	nop
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	20002e40 	.word	0x20002e40

080063ac <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 80063b0:	4802      	ldr	r0, [pc, #8]	@ (80063bc <DMA2_Channel4_IRQHandler+0x10>)
 80063b2:	f000 fb6f 	bl	8006a94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80063b6:	bf00      	nop
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	20002f0c 	.word	0x20002f0c

080063c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80063c4:	4802      	ldr	r0, [pc, #8]	@ (80063d0 <OTG_FS_IRQHandler+0x10>)
 80063c6:	f001 f8c1 	bl	800754c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80063ca:	bf00      	nop
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	2000885c 	.word	0x2000885c

080063d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80063d4:	b480      	push	{r7}
 80063d6:	af00      	add	r7, sp, #0
  return 1;
 80063d8:	2301      	movs	r3, #1
}
 80063da:	4618      	mov	r0, r3
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <_kill>:

int _kill(int pid, int sig)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80063ee:	f015 f84b 	bl	801b488 <__errno>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2216      	movs	r2, #22
 80063f6:	601a      	str	r2, [r3, #0]
  return -1;
 80063f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3708      	adds	r7, #8
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <_exit>:

void _exit (int status)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800640c:	f04f 31ff 	mov.w	r1, #4294967295
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f7ff ffe7 	bl	80063e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006416:	bf00      	nop
 8006418:	e7fd      	b.n	8006416 <_exit+0x12>

0800641a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800641a:	b580      	push	{r7, lr}
 800641c:	b086      	sub	sp, #24
 800641e:	af00      	add	r7, sp, #0
 8006420:	60f8      	str	r0, [r7, #12]
 8006422:	60b9      	str	r1, [r7, #8]
 8006424:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006426:	2300      	movs	r3, #0
 8006428:	617b      	str	r3, [r7, #20]
 800642a:	e00a      	b.n	8006442 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800642c:	f3af 8000 	nop.w
 8006430:	4601      	mov	r1, r0
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	1c5a      	adds	r2, r3, #1
 8006436:	60ba      	str	r2, [r7, #8]
 8006438:	b2ca      	uxtb	r2, r1
 800643a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	3301      	adds	r3, #1
 8006440:	617b      	str	r3, [r7, #20]
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	429a      	cmp	r2, r3
 8006448:	dbf0      	blt.n	800642c <_read+0x12>
  }

  return len;
 800644a:	687b      	ldr	r3, [r7, #4]
}
 800644c:	4618      	mov	r0, r3
 800644e:	3718      	adds	r7, #24
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b086      	sub	sp, #24
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006460:	2300      	movs	r3, #0
 8006462:	617b      	str	r3, [r7, #20]
 8006464:	e009      	b.n	800647a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	1c5a      	adds	r2, r3, #1
 800646a:	60ba      	str	r2, [r7, #8]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	4618      	mov	r0, r3
 8006470:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	3301      	adds	r3, #1
 8006478:	617b      	str	r3, [r7, #20]
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	429a      	cmp	r2, r3
 8006480:	dbf1      	blt.n	8006466 <_write+0x12>
  }
  return len;
 8006482:	687b      	ldr	r3, [r7, #4]
}
 8006484:	4618      	mov	r0, r3
 8006486:	3718      	adds	r7, #24
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <_close>:

int _close(int file)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006494:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006498:	4618      	mov	r0, r3
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80064b4:	605a      	str	r2, [r3, #4]
  return 0;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <_isatty>:

int _isatty(int file)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80064cc:	2301      	movs	r3, #1
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	370c      	adds	r7, #12
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80064da:	b480      	push	{r7}
 80064dc:	b085      	sub	sp, #20
 80064de:	af00      	add	r7, sp, #0
 80064e0:	60f8      	str	r0, [r7, #12]
 80064e2:	60b9      	str	r1, [r7, #8]
 80064e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3714      	adds	r7, #20
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b086      	sub	sp, #24
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80064fc:	4a14      	ldr	r2, [pc, #80]	@ (8006550 <_sbrk+0x5c>)
 80064fe:	4b15      	ldr	r3, [pc, #84]	@ (8006554 <_sbrk+0x60>)
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006508:	4b13      	ldr	r3, [pc, #76]	@ (8006558 <_sbrk+0x64>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d102      	bne.n	8006516 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006510:	4b11      	ldr	r3, [pc, #68]	@ (8006558 <_sbrk+0x64>)
 8006512:	4a12      	ldr	r2, [pc, #72]	@ (800655c <_sbrk+0x68>)
 8006514:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006516:	4b10      	ldr	r3, [pc, #64]	@ (8006558 <_sbrk+0x64>)
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4413      	add	r3, r2
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	429a      	cmp	r2, r3
 8006522:	d207      	bcs.n	8006534 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006524:	f014 ffb0 	bl	801b488 <__errno>
 8006528:	4603      	mov	r3, r0
 800652a:	220c      	movs	r2, #12
 800652c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800652e:	f04f 33ff 	mov.w	r3, #4294967295
 8006532:	e009      	b.n	8006548 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006534:	4b08      	ldr	r3, [pc, #32]	@ (8006558 <_sbrk+0x64>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800653a:	4b07      	ldr	r3, [pc, #28]	@ (8006558 <_sbrk+0x64>)
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4413      	add	r3, r2
 8006542:	4a05      	ldr	r2, [pc, #20]	@ (8006558 <_sbrk+0x64>)
 8006544:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006546:	68fb      	ldr	r3, [r7, #12]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3718      	adds	r7, #24
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	20018000 	.word	0x20018000
 8006554:	00000800 	.word	0x00000800
 8006558:	20003204 	.word	0x20003204
 800655c:	200090b0 	.word	0x200090b0

08006560 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8006560:	b480      	push	{r7}
 8006562:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8006564:	4b06      	ldr	r3, [pc, #24]	@ (8006580 <SystemInit+0x20>)
 8006566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800656a:	4a05      	ldr	r2, [pc, #20]	@ (8006580 <SystemInit+0x20>)
 800656c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006570:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8006574:	bf00      	nop
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	e000ed00 	.word	0xe000ed00

08006584 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006584:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80065bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006588:	f7ff ffea 	bl	8006560 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800658c:	480c      	ldr	r0, [pc, #48]	@ (80065c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800658e:	490d      	ldr	r1, [pc, #52]	@ (80065c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006590:	4a0d      	ldr	r2, [pc, #52]	@ (80065c8 <LoopForever+0xe>)
  movs r3, #0
 8006592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006594:	e002      	b.n	800659c <LoopCopyDataInit>

08006596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800659a:	3304      	adds	r3, #4

0800659c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800659c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800659e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80065a0:	d3f9      	bcc.n	8006596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80065a2:	4a0a      	ldr	r2, [pc, #40]	@ (80065cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80065a4:	4c0a      	ldr	r4, [pc, #40]	@ (80065d0 <LoopForever+0x16>)
  movs r3, #0
 80065a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80065a8:	e001      	b.n	80065ae <LoopFillZerobss>

080065aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80065aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80065ac:	3204      	adds	r2, #4

080065ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80065ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80065b0:	d3fb      	bcc.n	80065aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80065b2:	f014 ff6f 	bl	801b494 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80065b6:	f7fe fed3 	bl	8005360 <main>

080065ba <LoopForever>:

LoopForever:
    b LoopForever
 80065ba:	e7fe      	b.n	80065ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80065bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80065c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80065c4:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 80065c8:	0801fcb8 	.word	0x0801fcb8
  ldr r2, =_sbss
 80065cc:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 80065d0:	200090ac 	.word	0x200090ac

080065d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80065d4:	e7fe      	b.n	80065d4 <ADC1_2_IRQHandler>
	...

080065d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80065e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006614 <HAL_Init+0x3c>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a0b      	ldr	r2, [pc, #44]	@ (8006614 <HAL_Init+0x3c>)
 80065e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065ec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80065ee:	2003      	movs	r0, #3
 80065f0:	f000 f903 	bl	80067fa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80065f4:	200f      	movs	r0, #15
 80065f6:	f7ff fe1f 	bl	8006238 <HAL_InitTick>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d002      	beq.n	8006606 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	71fb      	strb	r3, [r7, #7]
 8006604:	e001      	b.n	800660a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006606:	f7ff faa5 	bl	8005b54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800660a:	79fb      	ldrb	r3, [r7, #7]
}
 800660c:	4618      	mov	r0, r3
 800660e:	3708      	adds	r7, #8
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	40022000 	.word	0x40022000

08006618 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006618:	b480      	push	{r7}
 800661a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800661c:	4b06      	ldr	r3, [pc, #24]	@ (8006638 <HAL_IncTick+0x20>)
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	461a      	mov	r2, r3
 8006622:	4b06      	ldr	r3, [pc, #24]	@ (800663c <HAL_IncTick+0x24>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4413      	add	r3, r2
 8006628:	4a04      	ldr	r2, [pc, #16]	@ (800663c <HAL_IncTick+0x24>)
 800662a:	6013      	str	r3, [r2, #0]
}
 800662c:	bf00      	nop
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	20000008 	.word	0x20000008
 800663c:	20003208 	.word	0x20003208

08006640 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006640:	b480      	push	{r7}
 8006642:	af00      	add	r7, sp, #0
  return uwTick;
 8006644:	4b03      	ldr	r3, [pc, #12]	@ (8006654 <HAL_GetTick+0x14>)
 8006646:	681b      	ldr	r3, [r3, #0]
}
 8006648:	4618      	mov	r0, r3
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	20003208 	.word	0x20003208

08006658 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006660:	f7ff ffee 	bl	8006640 <HAL_GetTick>
 8006664:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006670:	d005      	beq.n	800667e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8006672:	4b0a      	ldr	r3, [pc, #40]	@ (800669c <HAL_Delay+0x44>)
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	461a      	mov	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	4413      	add	r3, r2
 800667c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800667e:	bf00      	nop
 8006680:	f7ff ffde 	bl	8006640 <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	429a      	cmp	r2, r3
 800668e:	d8f7      	bhi.n	8006680 <HAL_Delay+0x28>
  {
  }
}
 8006690:	bf00      	nop
 8006692:	bf00      	nop
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	20000008 	.word	0x20000008

080066a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f003 0307 	and.w	r3, r3, #7
 80066ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80066b0:	4b0c      	ldr	r3, [pc, #48]	@ (80066e4 <__NVIC_SetPriorityGrouping+0x44>)
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80066bc:	4013      	ands	r3, r2
 80066be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80066c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80066cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80066d2:	4a04      	ldr	r2, [pc, #16]	@ (80066e4 <__NVIC_SetPriorityGrouping+0x44>)
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	60d3      	str	r3, [r2, #12]
}
 80066d8:	bf00      	nop
 80066da:	3714      	adds	r7, #20
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr
 80066e4:	e000ed00 	.word	0xe000ed00

080066e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80066e8:	b480      	push	{r7}
 80066ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80066ec:	4b04      	ldr	r3, [pc, #16]	@ (8006700 <__NVIC_GetPriorityGrouping+0x18>)
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	0a1b      	lsrs	r3, r3, #8
 80066f2:	f003 0307 	and.w	r3, r3, #7
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr
 8006700:	e000ed00 	.word	0xe000ed00

08006704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	4603      	mov	r3, r0
 800670c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800670e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006712:	2b00      	cmp	r3, #0
 8006714:	db0b      	blt.n	800672e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006716:	79fb      	ldrb	r3, [r7, #7]
 8006718:	f003 021f 	and.w	r2, r3, #31
 800671c:	4907      	ldr	r1, [pc, #28]	@ (800673c <__NVIC_EnableIRQ+0x38>)
 800671e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006722:	095b      	lsrs	r3, r3, #5
 8006724:	2001      	movs	r0, #1
 8006726:	fa00 f202 	lsl.w	r2, r0, r2
 800672a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800672e:	bf00      	nop
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	e000e100 	.word	0xe000e100

08006740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	4603      	mov	r3, r0
 8006748:	6039      	str	r1, [r7, #0]
 800674a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800674c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006750:	2b00      	cmp	r3, #0
 8006752:	db0a      	blt.n	800676a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	b2da      	uxtb	r2, r3
 8006758:	490c      	ldr	r1, [pc, #48]	@ (800678c <__NVIC_SetPriority+0x4c>)
 800675a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800675e:	0112      	lsls	r2, r2, #4
 8006760:	b2d2      	uxtb	r2, r2
 8006762:	440b      	add	r3, r1
 8006764:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006768:	e00a      	b.n	8006780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	b2da      	uxtb	r2, r3
 800676e:	4908      	ldr	r1, [pc, #32]	@ (8006790 <__NVIC_SetPriority+0x50>)
 8006770:	79fb      	ldrb	r3, [r7, #7]
 8006772:	f003 030f 	and.w	r3, r3, #15
 8006776:	3b04      	subs	r3, #4
 8006778:	0112      	lsls	r2, r2, #4
 800677a:	b2d2      	uxtb	r2, r2
 800677c:	440b      	add	r3, r1
 800677e:	761a      	strb	r2, [r3, #24]
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr
 800678c:	e000e100 	.word	0xe000e100
 8006790:	e000ed00 	.word	0xe000ed00

08006794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006794:	b480      	push	{r7}
 8006796:	b089      	sub	sp, #36	@ 0x24
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f003 0307 	and.w	r3, r3, #7
 80067a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	f1c3 0307 	rsb	r3, r3, #7
 80067ae:	2b04      	cmp	r3, #4
 80067b0:	bf28      	it	cs
 80067b2:	2304      	movcs	r3, #4
 80067b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	3304      	adds	r3, #4
 80067ba:	2b06      	cmp	r3, #6
 80067bc:	d902      	bls.n	80067c4 <NVIC_EncodePriority+0x30>
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	3b03      	subs	r3, #3
 80067c2:	e000      	b.n	80067c6 <NVIC_EncodePriority+0x32>
 80067c4:	2300      	movs	r3, #0
 80067c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067c8:	f04f 32ff 	mov.w	r2, #4294967295
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	fa02 f303 	lsl.w	r3, r2, r3
 80067d2:	43da      	mvns	r2, r3
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	401a      	ands	r2, r3
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80067dc:	f04f 31ff 	mov.w	r1, #4294967295
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	fa01 f303 	lsl.w	r3, r1, r3
 80067e6:	43d9      	mvns	r1, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067ec:	4313      	orrs	r3, r2
         );
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3724      	adds	r7, #36	@ 0x24
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr

080067fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b082      	sub	sp, #8
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f7ff ff4c 	bl	80066a0 <__NVIC_SetPriorityGrouping>
}
 8006808:	bf00      	nop
 800680a:	3708      	adds	r7, #8
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af00      	add	r7, sp, #0
 8006816:	4603      	mov	r3, r0
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
 800681c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800681e:	2300      	movs	r3, #0
 8006820:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006822:	f7ff ff61 	bl	80066e8 <__NVIC_GetPriorityGrouping>
 8006826:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	68b9      	ldr	r1, [r7, #8]
 800682c:	6978      	ldr	r0, [r7, #20]
 800682e:	f7ff ffb1 	bl	8006794 <NVIC_EncodePriority>
 8006832:	4602      	mov	r2, r0
 8006834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006838:	4611      	mov	r1, r2
 800683a:	4618      	mov	r0, r3
 800683c:	f7ff ff80 	bl	8006740 <__NVIC_SetPriority>
}
 8006840:	bf00      	nop
 8006842:	3718      	adds	r7, #24
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	4603      	mov	r3, r0
 8006850:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006856:	4618      	mov	r0, r3
 8006858:	f7ff ff54 	bl	8006704 <__NVIC_EnableIRQ>
}
 800685c:	bf00      	nop
 800685e:	3708      	adds	r7, #8
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d101      	bne.n	8006876 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e098      	b.n	80069a8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	461a      	mov	r2, r3
 800687c:	4b4d      	ldr	r3, [pc, #308]	@ (80069b4 <HAL_DMA_Init+0x150>)
 800687e:	429a      	cmp	r2, r3
 8006880:	d80f      	bhi.n	80068a2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	461a      	mov	r2, r3
 8006888:	4b4b      	ldr	r3, [pc, #300]	@ (80069b8 <HAL_DMA_Init+0x154>)
 800688a:	4413      	add	r3, r2
 800688c:	4a4b      	ldr	r2, [pc, #300]	@ (80069bc <HAL_DMA_Init+0x158>)
 800688e:	fba2 2303 	umull	r2, r3, r2, r3
 8006892:	091b      	lsrs	r3, r3, #4
 8006894:	009a      	lsls	r2, r3, #2
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a48      	ldr	r2, [pc, #288]	@ (80069c0 <HAL_DMA_Init+0x15c>)
 800689e:	641a      	str	r2, [r3, #64]	@ 0x40
 80068a0:	e00e      	b.n	80068c0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	461a      	mov	r2, r3
 80068a8:	4b46      	ldr	r3, [pc, #280]	@ (80069c4 <HAL_DMA_Init+0x160>)
 80068aa:	4413      	add	r3, r2
 80068ac:	4a43      	ldr	r2, [pc, #268]	@ (80069bc <HAL_DMA_Init+0x158>)
 80068ae:	fba2 2303 	umull	r2, r3, r2, r3
 80068b2:	091b      	lsrs	r3, r3, #4
 80068b4:	009a      	lsls	r2, r3, #2
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a42      	ldr	r2, [pc, #264]	@ (80069c8 <HAL_DMA_Init+0x164>)
 80068be:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2202      	movs	r2, #2
 80068c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80068d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80068e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	4313      	orrs	r3, r2
 8006908:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800691a:	d039      	beq.n	8006990 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006920:	4a27      	ldr	r2, [pc, #156]	@ (80069c0 <HAL_DMA_Init+0x15c>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d11a      	bne.n	800695c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006926:	4b29      	ldr	r3, [pc, #164]	@ (80069cc <HAL_DMA_Init+0x168>)
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800692e:	f003 031c 	and.w	r3, r3, #28
 8006932:	210f      	movs	r1, #15
 8006934:	fa01 f303 	lsl.w	r3, r1, r3
 8006938:	43db      	mvns	r3, r3
 800693a:	4924      	ldr	r1, [pc, #144]	@ (80069cc <HAL_DMA_Init+0x168>)
 800693c:	4013      	ands	r3, r2
 800693e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006940:	4b22      	ldr	r3, [pc, #136]	@ (80069cc <HAL_DMA_Init+0x168>)
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6859      	ldr	r1, [r3, #4]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800694c:	f003 031c 	and.w	r3, r3, #28
 8006950:	fa01 f303 	lsl.w	r3, r1, r3
 8006954:	491d      	ldr	r1, [pc, #116]	@ (80069cc <HAL_DMA_Init+0x168>)
 8006956:	4313      	orrs	r3, r2
 8006958:	600b      	str	r3, [r1, #0]
 800695a:	e019      	b.n	8006990 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800695c:	4b1c      	ldr	r3, [pc, #112]	@ (80069d0 <HAL_DMA_Init+0x16c>)
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006964:	f003 031c 	and.w	r3, r3, #28
 8006968:	210f      	movs	r1, #15
 800696a:	fa01 f303 	lsl.w	r3, r1, r3
 800696e:	43db      	mvns	r3, r3
 8006970:	4917      	ldr	r1, [pc, #92]	@ (80069d0 <HAL_DMA_Init+0x16c>)
 8006972:	4013      	ands	r3, r2
 8006974:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006976:	4b16      	ldr	r3, [pc, #88]	@ (80069d0 <HAL_DMA_Init+0x16c>)
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6859      	ldr	r1, [r3, #4]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006982:	f003 031c 	and.w	r3, r3, #28
 8006986:	fa01 f303 	lsl.w	r3, r1, r3
 800698a:	4911      	ldr	r1, [pc, #68]	@ (80069d0 <HAL_DMA_Init+0x16c>)
 800698c:	4313      	orrs	r3, r2
 800698e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3714      	adds	r7, #20
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	40020407 	.word	0x40020407
 80069b8:	bffdfff8 	.word	0xbffdfff8
 80069bc:	cccccccd 	.word	0xcccccccd
 80069c0:	40020000 	.word	0x40020000
 80069c4:	bffdfbf8 	.word	0xbffdfbf8
 80069c8:	40020400 	.word	0x40020400
 80069cc:	400200a8 	.word	0x400200a8
 80069d0:	400204a8 	.word	0x400204a8

080069d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b086      	sub	sp, #24
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	607a      	str	r2, [r7, #4]
 80069e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069e2:	2300      	movs	r3, #0
 80069e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d101      	bne.n	80069f4 <HAL_DMA_Start_IT+0x20>
 80069f0:	2302      	movs	r3, #2
 80069f2:	e04b      	b.n	8006a8c <HAL_DMA_Start_IT+0xb8>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d13a      	bne.n	8006a7e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f022 0201 	bic.w	r2, r2, #1
 8006a24:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	68b9      	ldr	r1, [r7, #8]
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f000 f8e0 	bl	8006bf2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d008      	beq.n	8006a4c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f042 020e 	orr.w	r2, r2, #14
 8006a48:	601a      	str	r2, [r3, #0]
 8006a4a:	e00f      	b.n	8006a6c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f022 0204 	bic.w	r2, r2, #4
 8006a5a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f042 020a 	orr.w	r2, r2, #10
 8006a6a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f042 0201 	orr.w	r2, r2, #1
 8006a7a:	601a      	str	r2, [r3, #0]
 8006a7c:	e005      	b.n	8006a8a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006a86:	2302      	movs	r3, #2
 8006a88:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3718      	adds	r7, #24
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ab0:	f003 031c 	and.w	r3, r3, #28
 8006ab4:	2204      	movs	r2, #4
 8006ab6:	409a      	lsls	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	4013      	ands	r3, r2
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d026      	beq.n	8006b0e <HAL_DMA_IRQHandler+0x7a>
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	f003 0304 	and.w	r3, r3, #4
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d021      	beq.n	8006b0e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0320 	and.w	r3, r3, #32
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d107      	bne.n	8006ae8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f022 0204 	bic.w	r2, r2, #4
 8006ae6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aec:	f003 021c 	and.w	r2, r3, #28
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006af4:	2104      	movs	r1, #4
 8006af6:	fa01 f202 	lsl.w	r2, r1, r2
 8006afa:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d071      	beq.n	8006be8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006b0c:	e06c      	b.n	8006be8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b12:	f003 031c 	and.w	r3, r3, #28
 8006b16:	2202      	movs	r2, #2
 8006b18:	409a      	lsls	r2, r3
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d02e      	beq.n	8006b80 <HAL_DMA_IRQHandler+0xec>
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f003 0302 	and.w	r3, r3, #2
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d029      	beq.n	8006b80 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0320 	and.w	r3, r3, #32
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10b      	bne.n	8006b52 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f022 020a 	bic.w	r2, r2, #10
 8006b48:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b56:	f003 021c 	and.w	r2, r3, #28
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b5e:	2102      	movs	r1, #2
 8006b60:	fa01 f202 	lsl.w	r2, r1, r2
 8006b64:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d038      	beq.n	8006be8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006b7e:	e033      	b.n	8006be8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b84:	f003 031c 	and.w	r3, r3, #28
 8006b88:	2208      	movs	r2, #8
 8006b8a:	409a      	lsls	r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	4013      	ands	r3, r2
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d02a      	beq.n	8006bea <HAL_DMA_IRQHandler+0x156>
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	f003 0308 	and.w	r3, r3, #8
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d025      	beq.n	8006bea <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f022 020e 	bic.w	r2, r2, #14
 8006bac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bb2:	f003 021c 	and.w	r2, r3, #28
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bba:	2101      	movs	r1, #1
 8006bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8006bc0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d004      	beq.n	8006bea <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006be8:	bf00      	nop
 8006bea:	bf00      	nop
}
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b085      	sub	sp, #20
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	60f8      	str	r0, [r7, #12]
 8006bfa:	60b9      	str	r1, [r7, #8]
 8006bfc:	607a      	str	r2, [r7, #4]
 8006bfe:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c04:	f003 021c 	and.w	r2, r3, #28
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c0c:	2101      	movs	r1, #1
 8006c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8006c12:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	683a      	ldr	r2, [r7, #0]
 8006c1a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	2b10      	cmp	r3, #16
 8006c22:	d108      	bne.n	8006c36 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006c34:	e007      	b.n	8006c46 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	60da      	str	r2, [r3, #12]
}
 8006c46:	bf00      	nop
 8006c48:	3714      	adds	r7, #20
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
	...

08006c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b087      	sub	sp, #28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c62:	e17f      	b.n	8006f64 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	2101      	movs	r1, #1
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c70:	4013      	ands	r3, r2
 8006c72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f000 8171 	beq.w	8006f5e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	f003 0303 	and.w	r3, r3, #3
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d005      	beq.n	8006c94 <HAL_GPIO_Init+0x40>
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	f003 0303 	and.w	r3, r3, #3
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d130      	bne.n	8006cf6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	005b      	lsls	r3, r3, #1
 8006c9e:	2203      	movs	r2, #3
 8006ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca4:	43db      	mvns	r3, r3
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	4013      	ands	r3, r2
 8006caa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	68da      	ldr	r2, [r3, #12]
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	005b      	lsls	r3, r3, #1
 8006cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb8:	693a      	ldr	r2, [r7, #16]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006cca:	2201      	movs	r2, #1
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd2:	43db      	mvns	r3, r3
 8006cd4:	693a      	ldr	r2, [r7, #16]
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	091b      	lsrs	r3, r3, #4
 8006ce0:	f003 0201 	and.w	r2, r3, #1
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cea:	693a      	ldr	r2, [r7, #16]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	f003 0303 	and.w	r3, r3, #3
 8006cfe:	2b03      	cmp	r3, #3
 8006d00:	d118      	bne.n	8006d34 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006d08:	2201      	movs	r2, #1
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d10:	43db      	mvns	r3, r3
 8006d12:	693a      	ldr	r2, [r7, #16]
 8006d14:	4013      	ands	r3, r2
 8006d16:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	08db      	lsrs	r3, r3, #3
 8006d1e:	f003 0201 	and.w	r2, r3, #1
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	fa02 f303 	lsl.w	r3, r2, r3
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	693a      	ldr	r2, [r7, #16]
 8006d32:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	f003 0303 	and.w	r3, r3, #3
 8006d3c:	2b03      	cmp	r3, #3
 8006d3e:	d017      	beq.n	8006d70 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	005b      	lsls	r3, r3, #1
 8006d4a:	2203      	movs	r2, #3
 8006d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d50:	43db      	mvns	r3, r3
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	4013      	ands	r3, r2
 8006d56:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	689a      	ldr	r2, [r3, #8]
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	005b      	lsls	r3, r3, #1
 8006d60:	fa02 f303 	lsl.w	r3, r2, r3
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	f003 0303 	and.w	r3, r3, #3
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d123      	bne.n	8006dc4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	08da      	lsrs	r2, r3, #3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	3208      	adds	r2, #8
 8006d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d88:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	f003 0307 	and.w	r3, r3, #7
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	220f      	movs	r2, #15
 8006d94:	fa02 f303 	lsl.w	r3, r2, r3
 8006d98:	43db      	mvns	r3, r3
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	691a      	ldr	r2, [r3, #16]
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	f003 0307 	and.w	r3, r3, #7
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	fa02 f303 	lsl.w	r3, r2, r3
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	08da      	lsrs	r2, r3, #3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	3208      	adds	r2, #8
 8006dbe:	6939      	ldr	r1, [r7, #16]
 8006dc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	005b      	lsls	r3, r3, #1
 8006dce:	2203      	movs	r2, #3
 8006dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd4:	43db      	mvns	r3, r3
 8006dd6:	693a      	ldr	r2, [r7, #16]
 8006dd8:	4013      	ands	r3, r2
 8006dda:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f003 0203 	and.w	r2, r3, #3
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	005b      	lsls	r3, r3, #1
 8006de8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	693a      	ldr	r2, [r7, #16]
 8006df6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f000 80ac 	beq.w	8006f5e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e06:	4b5f      	ldr	r3, [pc, #380]	@ (8006f84 <HAL_GPIO_Init+0x330>)
 8006e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e0a:	4a5e      	ldr	r2, [pc, #376]	@ (8006f84 <HAL_GPIO_Init+0x330>)
 8006e0c:	f043 0301 	orr.w	r3, r3, #1
 8006e10:	6613      	str	r3, [r2, #96]	@ 0x60
 8006e12:	4b5c      	ldr	r3, [pc, #368]	@ (8006f84 <HAL_GPIO_Init+0x330>)
 8006e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e16:	f003 0301 	and.w	r3, r3, #1
 8006e1a:	60bb      	str	r3, [r7, #8]
 8006e1c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006e1e:	4a5a      	ldr	r2, [pc, #360]	@ (8006f88 <HAL_GPIO_Init+0x334>)
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	089b      	lsrs	r3, r3, #2
 8006e24:	3302      	adds	r3, #2
 8006e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	f003 0303 	and.w	r3, r3, #3
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	220f      	movs	r2, #15
 8006e36:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3a:	43db      	mvns	r3, r3
 8006e3c:	693a      	ldr	r2, [r7, #16]
 8006e3e:	4013      	ands	r3, r2
 8006e40:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006e48:	d025      	beq.n	8006e96 <HAL_GPIO_Init+0x242>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a4f      	ldr	r2, [pc, #316]	@ (8006f8c <HAL_GPIO_Init+0x338>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d01f      	beq.n	8006e92 <HAL_GPIO_Init+0x23e>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a4e      	ldr	r2, [pc, #312]	@ (8006f90 <HAL_GPIO_Init+0x33c>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d019      	beq.n	8006e8e <HAL_GPIO_Init+0x23a>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a4d      	ldr	r2, [pc, #308]	@ (8006f94 <HAL_GPIO_Init+0x340>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d013      	beq.n	8006e8a <HAL_GPIO_Init+0x236>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a4c      	ldr	r2, [pc, #304]	@ (8006f98 <HAL_GPIO_Init+0x344>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d00d      	beq.n	8006e86 <HAL_GPIO_Init+0x232>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a4b      	ldr	r2, [pc, #300]	@ (8006f9c <HAL_GPIO_Init+0x348>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d007      	beq.n	8006e82 <HAL_GPIO_Init+0x22e>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a4a      	ldr	r2, [pc, #296]	@ (8006fa0 <HAL_GPIO_Init+0x34c>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d101      	bne.n	8006e7e <HAL_GPIO_Init+0x22a>
 8006e7a:	2306      	movs	r3, #6
 8006e7c:	e00c      	b.n	8006e98 <HAL_GPIO_Init+0x244>
 8006e7e:	2307      	movs	r3, #7
 8006e80:	e00a      	b.n	8006e98 <HAL_GPIO_Init+0x244>
 8006e82:	2305      	movs	r3, #5
 8006e84:	e008      	b.n	8006e98 <HAL_GPIO_Init+0x244>
 8006e86:	2304      	movs	r3, #4
 8006e88:	e006      	b.n	8006e98 <HAL_GPIO_Init+0x244>
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e004      	b.n	8006e98 <HAL_GPIO_Init+0x244>
 8006e8e:	2302      	movs	r3, #2
 8006e90:	e002      	b.n	8006e98 <HAL_GPIO_Init+0x244>
 8006e92:	2301      	movs	r3, #1
 8006e94:	e000      	b.n	8006e98 <HAL_GPIO_Init+0x244>
 8006e96:	2300      	movs	r3, #0
 8006e98:	697a      	ldr	r2, [r7, #20]
 8006e9a:	f002 0203 	and.w	r2, r2, #3
 8006e9e:	0092      	lsls	r2, r2, #2
 8006ea0:	4093      	lsls	r3, r2
 8006ea2:	693a      	ldr	r2, [r7, #16]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006ea8:	4937      	ldr	r1, [pc, #220]	@ (8006f88 <HAL_GPIO_Init+0x334>)
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	089b      	lsrs	r3, r3, #2
 8006eae:	3302      	adds	r3, #2
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006eb6:	4b3b      	ldr	r3, [pc, #236]	@ (8006fa4 <HAL_GPIO_Init+0x350>)
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	43db      	mvns	r3, r3
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d003      	beq.n	8006eda <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8006ed2:	693a      	ldr	r2, [r7, #16]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006eda:	4a32      	ldr	r2, [pc, #200]	@ (8006fa4 <HAL_GPIO_Init+0x350>)
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006ee0:	4b30      	ldr	r3, [pc, #192]	@ (8006fa4 <HAL_GPIO_Init+0x350>)
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	43db      	mvns	r3, r3
 8006eea:	693a      	ldr	r2, [r7, #16]
 8006eec:	4013      	ands	r3, r2
 8006eee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d003      	beq.n	8006f04 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8006efc:	693a      	ldr	r2, [r7, #16]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006f04:	4a27      	ldr	r2, [pc, #156]	@ (8006fa4 <HAL_GPIO_Init+0x350>)
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006f0a:	4b26      	ldr	r3, [pc, #152]	@ (8006fa4 <HAL_GPIO_Init+0x350>)
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	43db      	mvns	r3, r3
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	4013      	ands	r3, r2
 8006f18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d003      	beq.n	8006f2e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006f2e:	4a1d      	ldr	r2, [pc, #116]	@ (8006fa4 <HAL_GPIO_Init+0x350>)
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006f34:	4b1b      	ldr	r3, [pc, #108]	@ (8006fa4 <HAL_GPIO_Init+0x350>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	43db      	mvns	r3, r3
 8006f3e:	693a      	ldr	r2, [r7, #16]
 8006f40:	4013      	ands	r3, r2
 8006f42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d003      	beq.n	8006f58 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8006f50:	693a      	ldr	r2, [r7, #16]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006f58:	4a12      	ldr	r2, [pc, #72]	@ (8006fa4 <HAL_GPIO_Init+0x350>)
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	3301      	adds	r3, #1
 8006f62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f47f ae78 	bne.w	8006c64 <HAL_GPIO_Init+0x10>
  }
}
 8006f74:	bf00      	nop
 8006f76:	bf00      	nop
 8006f78:	371c      	adds	r7, #28
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	40021000 	.word	0x40021000
 8006f88:	40010000 	.word	0x40010000
 8006f8c:	48000400 	.word	0x48000400
 8006f90:	48000800 	.word	0x48000800
 8006f94:	48000c00 	.word	0x48000c00
 8006f98:	48001000 	.word	0x48001000
 8006f9c:	48001400 	.word	0x48001400
 8006fa0:	48001800 	.word	0x48001800
 8006fa4:	40010400 	.word	0x40010400

08006fa8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	691a      	ldr	r2, [r3, #16]
 8006fb8:	887b      	ldrh	r3, [r7, #2]
 8006fba:	4013      	ands	r3, r2
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d002      	beq.n	8006fc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	73fb      	strb	r3, [r7, #15]
 8006fc4:	e001      	b.n	8006fca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3714      	adds	r7, #20
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	807b      	strh	r3, [r7, #2]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006fe8:	787b      	ldrb	r3, [r7, #1]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d003      	beq.n	8006ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006fee:	887a      	ldrh	r2, [r7, #2]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006ff4:	e002      	b.n	8006ffc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006ff6:	887a      	ldrh	r2, [r7, #2]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006ffc:	bf00      	nop
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	460b      	mov	r3, r1
 8007012:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	695b      	ldr	r3, [r3, #20]
 8007018:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800701a:	887a      	ldrh	r2, [r7, #2]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	4013      	ands	r3, r2
 8007020:	041a      	lsls	r2, r3, #16
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	43d9      	mvns	r1, r3
 8007026:	887b      	ldrh	r3, [r7, #2]
 8007028:	400b      	ands	r3, r1
 800702a:	431a      	orrs	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	619a      	str	r2, [r3, #24]
}
 8007030:	bf00      	nop
 8007032:	3714      	adds	r7, #20
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	4603      	mov	r3, r0
 8007044:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007046:	4b08      	ldr	r3, [pc, #32]	@ (8007068 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007048:	695a      	ldr	r2, [r3, #20]
 800704a:	88fb      	ldrh	r3, [r7, #6]
 800704c:	4013      	ands	r3, r2
 800704e:	2b00      	cmp	r3, #0
 8007050:	d006      	beq.n	8007060 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007052:	4a05      	ldr	r2, [pc, #20]	@ (8007068 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007054:	88fb      	ldrh	r3, [r7, #6]
 8007056:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007058:	88fb      	ldrh	r3, [r7, #6]
 800705a:	4618      	mov	r0, r3
 800705c:	f7fa f84c 	bl	80010f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8007060:	bf00      	nop
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	40010400 	.word	0x40010400

0800706c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d101      	bne.n	800707e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e08d      	b.n	800719a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007084:	b2db      	uxtb	r3, r3
 8007086:	2b00      	cmp	r3, #0
 8007088:	d106      	bne.n	8007098 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f7fe fd86 	bl	8005ba4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2224      	movs	r2, #36	@ 0x24
 800709c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f022 0201 	bic.w	r2, r2, #1
 80070ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	685a      	ldr	r2, [r3, #4]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80070bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	689a      	ldr	r2, [r3, #8]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80070cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d107      	bne.n	80070e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	689a      	ldr	r2, [r3, #8]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80070e2:	609a      	str	r2, [r3, #8]
 80070e4:	e006      	b.n	80070f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	689a      	ldr	r2, [r3, #8]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80070f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d108      	bne.n	800710e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	685a      	ldr	r2, [r3, #4]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800710a:	605a      	str	r2, [r3, #4]
 800710c:	e007      	b.n	800711e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	685a      	ldr	r2, [r3, #4]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800711c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	6812      	ldr	r2, [r2, #0]
 8007128:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800712c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007130:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68da      	ldr	r2, [r3, #12]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007140:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	691a      	ldr	r2, [r3, #16]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	430a      	orrs	r2, r1
 800715a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	69d9      	ldr	r1, [r3, #28]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a1a      	ldr	r2, [r3, #32]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	430a      	orrs	r2, r1
 800716a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f042 0201 	orr.w	r2, r2, #1
 800717a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2220      	movs	r2, #32
 8007186:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80071a2:	b480      	push	{r7}
 80071a4:	b083      	sub	sp, #12
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
 80071aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b20      	cmp	r3, #32
 80071b6:	d138      	bne.n	800722a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d101      	bne.n	80071c6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80071c2:	2302      	movs	r3, #2
 80071c4:	e032      	b.n	800722c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2201      	movs	r2, #1
 80071ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2224      	movs	r2, #36	@ 0x24
 80071d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f022 0201 	bic.w	r2, r2, #1
 80071e4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80071f4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	6819      	ldr	r1, [r3, #0]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	683a      	ldr	r2, [r7, #0]
 8007202:	430a      	orrs	r2, r1
 8007204:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f042 0201 	orr.w	r2, r2, #1
 8007214:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2220      	movs	r2, #32
 800721a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007226:	2300      	movs	r3, #0
 8007228:	e000      	b.n	800722c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800722a:	2302      	movs	r3, #2
  }
}
 800722c:	4618      	mov	r0, r3
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007238:	b480      	push	{r7}
 800723a:	b085      	sub	sp, #20
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007248:	b2db      	uxtb	r3, r3
 800724a:	2b20      	cmp	r3, #32
 800724c:	d139      	bne.n	80072c2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007254:	2b01      	cmp	r3, #1
 8007256:	d101      	bne.n	800725c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007258:	2302      	movs	r3, #2
 800725a:	e033      	b.n	80072c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2224      	movs	r2, #36	@ 0x24
 8007268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f022 0201 	bic.w	r2, r2, #1
 800727a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800728a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	021b      	lsls	r3, r3, #8
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	4313      	orrs	r3, r2
 8007294:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f042 0201 	orr.w	r2, r2, #1
 80072ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2220      	movs	r2, #32
 80072b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80072be:	2300      	movs	r3, #0
 80072c0:	e000      	b.n	80072c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80072c2:	2302      	movs	r3, #2
  }
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3714      	adds	r7, #20
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af02      	add	r7, sp, #8
 80072d6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d101      	bne.n	80072e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e101      	b.n	80074e6 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d106      	bne.n	80072fc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f012 fbd8 	bl	8019aac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2203      	movs	r2, #3
 8007300:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4618      	mov	r0, r3
 8007310:	f007 fd21 	bl	800ed56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6818      	ldr	r0, [r3, #0]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	7c1a      	ldrb	r2, [r3, #16]
 800731c:	f88d 2000 	strb.w	r2, [sp]
 8007320:	3304      	adds	r3, #4
 8007322:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007324:	f007 fc3c 	bl	800eba0 <USB_CoreInit>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d005      	beq.n	800733a <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2202      	movs	r2, #2
 8007332:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e0d5      	b.n	80074e6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2100      	movs	r1, #0
 8007340:	4618      	mov	r0, r3
 8007342:	f007 fd19 	bl	800ed78 <USB_SetCurrentMode>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d005      	beq.n	8007358 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2202      	movs	r2, #2
 8007350:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	e0c6      	b.n	80074e6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007358:	2300      	movs	r3, #0
 800735a:	73fb      	strb	r3, [r7, #15]
 800735c:	e04a      	b.n	80073f4 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800735e:	7bfa      	ldrb	r2, [r7, #15]
 8007360:	6879      	ldr	r1, [r7, #4]
 8007362:	4613      	mov	r3, r2
 8007364:	00db      	lsls	r3, r3, #3
 8007366:	4413      	add	r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	440b      	add	r3, r1
 800736c:	3315      	adds	r3, #21
 800736e:	2201      	movs	r2, #1
 8007370:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007372:	7bfa      	ldrb	r2, [r7, #15]
 8007374:	6879      	ldr	r1, [r7, #4]
 8007376:	4613      	mov	r3, r2
 8007378:	00db      	lsls	r3, r3, #3
 800737a:	4413      	add	r3, r2
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	440b      	add	r3, r1
 8007380:	3314      	adds	r3, #20
 8007382:	7bfa      	ldrb	r2, [r7, #15]
 8007384:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007386:	7bfa      	ldrb	r2, [r7, #15]
 8007388:	7bfb      	ldrb	r3, [r7, #15]
 800738a:	b298      	uxth	r0, r3
 800738c:	6879      	ldr	r1, [r7, #4]
 800738e:	4613      	mov	r3, r2
 8007390:	00db      	lsls	r3, r3, #3
 8007392:	4413      	add	r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	440b      	add	r3, r1
 8007398:	332e      	adds	r3, #46	@ 0x2e
 800739a:	4602      	mov	r2, r0
 800739c:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800739e:	7bfa      	ldrb	r2, [r7, #15]
 80073a0:	6879      	ldr	r1, [r7, #4]
 80073a2:	4613      	mov	r3, r2
 80073a4:	00db      	lsls	r3, r3, #3
 80073a6:	4413      	add	r3, r2
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	440b      	add	r3, r1
 80073ac:	3318      	adds	r3, #24
 80073ae:	2200      	movs	r2, #0
 80073b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80073b2:	7bfa      	ldrb	r2, [r7, #15]
 80073b4:	6879      	ldr	r1, [r7, #4]
 80073b6:	4613      	mov	r3, r2
 80073b8:	00db      	lsls	r3, r3, #3
 80073ba:	4413      	add	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	440b      	add	r3, r1
 80073c0:	331c      	adds	r3, #28
 80073c2:	2200      	movs	r2, #0
 80073c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80073c6:	7bfa      	ldrb	r2, [r7, #15]
 80073c8:	6879      	ldr	r1, [r7, #4]
 80073ca:	4613      	mov	r3, r2
 80073cc:	00db      	lsls	r3, r3, #3
 80073ce:	4413      	add	r3, r2
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	440b      	add	r3, r1
 80073d4:	3320      	adds	r3, #32
 80073d6:	2200      	movs	r2, #0
 80073d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80073da:	7bfa      	ldrb	r2, [r7, #15]
 80073dc:	6879      	ldr	r1, [r7, #4]
 80073de:	4613      	mov	r3, r2
 80073e0:	00db      	lsls	r3, r3, #3
 80073e2:	4413      	add	r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	440b      	add	r3, r1
 80073e8:	3324      	adds	r3, #36	@ 0x24
 80073ea:	2200      	movs	r2, #0
 80073ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073ee:	7bfb      	ldrb	r3, [r7, #15]
 80073f0:	3301      	adds	r3, #1
 80073f2:	73fb      	strb	r3, [r7, #15]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	791b      	ldrb	r3, [r3, #4]
 80073f8:	7bfa      	ldrb	r2, [r7, #15]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d3af      	bcc.n	800735e <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073fe:	2300      	movs	r3, #0
 8007400:	73fb      	strb	r3, [r7, #15]
 8007402:	e044      	b.n	800748e <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007404:	7bfa      	ldrb	r2, [r7, #15]
 8007406:	6879      	ldr	r1, [r7, #4]
 8007408:	4613      	mov	r3, r2
 800740a:	00db      	lsls	r3, r3, #3
 800740c:	4413      	add	r3, r2
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	440b      	add	r3, r1
 8007412:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8007416:	2200      	movs	r2, #0
 8007418:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800741a:	7bfa      	ldrb	r2, [r7, #15]
 800741c:	6879      	ldr	r1, [r7, #4]
 800741e:	4613      	mov	r3, r2
 8007420:	00db      	lsls	r3, r3, #3
 8007422:	4413      	add	r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	440b      	add	r3, r1
 8007428:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800742c:	7bfa      	ldrb	r2, [r7, #15]
 800742e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007430:	7bfa      	ldrb	r2, [r7, #15]
 8007432:	6879      	ldr	r1, [r7, #4]
 8007434:	4613      	mov	r3, r2
 8007436:	00db      	lsls	r3, r3, #3
 8007438:	4413      	add	r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	440b      	add	r3, r1
 800743e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007442:	2200      	movs	r2, #0
 8007444:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007446:	7bfa      	ldrb	r2, [r7, #15]
 8007448:	6879      	ldr	r1, [r7, #4]
 800744a:	4613      	mov	r3, r2
 800744c:	00db      	lsls	r3, r3, #3
 800744e:	4413      	add	r3, r2
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	440b      	add	r3, r1
 8007454:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8007458:	2200      	movs	r2, #0
 800745a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800745c:	7bfa      	ldrb	r2, [r7, #15]
 800745e:	6879      	ldr	r1, [r7, #4]
 8007460:	4613      	mov	r3, r2
 8007462:	00db      	lsls	r3, r3, #3
 8007464:	4413      	add	r3, r2
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	440b      	add	r3, r1
 800746a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800746e:	2200      	movs	r2, #0
 8007470:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007472:	7bfa      	ldrb	r2, [r7, #15]
 8007474:	6879      	ldr	r1, [r7, #4]
 8007476:	4613      	mov	r3, r2
 8007478:	00db      	lsls	r3, r3, #3
 800747a:	4413      	add	r3, r2
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	440b      	add	r3, r1
 8007480:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007484:	2200      	movs	r2, #0
 8007486:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007488:	7bfb      	ldrb	r3, [r7, #15]
 800748a:	3301      	adds	r3, #1
 800748c:	73fb      	strb	r3, [r7, #15]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	791b      	ldrb	r3, [r3, #4]
 8007492:	7bfa      	ldrb	r2, [r7, #15]
 8007494:	429a      	cmp	r2, r3
 8007496:	d3b5      	bcc.n	8007404 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6818      	ldr	r0, [r3, #0]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	7c1a      	ldrb	r2, [r3, #16]
 80074a0:	f88d 2000 	strb.w	r2, [sp]
 80074a4:	3304      	adds	r3, #4
 80074a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80074a8:	f007 fcb2 	bl	800ee10 <USB_DevInit>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d005      	beq.n	80074be <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2202      	movs	r2, #2
 80074b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e013      	b.n	80074e6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	7b1b      	ldrb	r3, [r3, #12]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d102      	bne.n	80074da <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f001 f86d 	bl	80085b4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4618      	mov	r0, r3
 80074e0:	f008 fc69 	bl	800fdb6 <USB_DevDisconnect>

  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3710      	adds	r7, #16
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b084      	sub	sp, #16
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007502:	2b01      	cmp	r3, #1
 8007504:	d101      	bne.n	800750a <HAL_PCD_Start+0x1c>
 8007506:	2302      	movs	r3, #2
 8007508:	e01c      	b.n	8007544 <HAL_PCD_Start+0x56>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	7b5b      	ldrb	r3, [r3, #13]
 8007516:	2b01      	cmp	r3, #1
 8007518:	d105      	bne.n	8007526 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800751e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4618      	mov	r0, r3
 800752c:	f007 fc02 	bl	800ed34 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4618      	mov	r0, r3
 8007536:	f008 fc1d 	bl	800fd74 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3710      	adds	r7, #16
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800754c:	b590      	push	{r4, r7, lr}
 800754e:	b08d      	sub	sp, #52	@ 0x34
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800755a:	6a3b      	ldr	r3, [r7, #32]
 800755c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4618      	mov	r0, r3
 8007564:	f008 fcdb 	bl	800ff1e <USB_GetMode>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	f040 8481 	bne.w	8007e72 <HAL_PCD_IRQHandler+0x926>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4618      	mov	r0, r3
 8007576:	f008 fc3f 	bl	800fdf8 <USB_ReadInterrupts>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	f000 8477 	beq.w	8007e70 <HAL_PCD_IRQHandler+0x924>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	0a1b      	lsrs	r3, r3, #8
 800758c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4618      	mov	r0, r3
 800759c:	f008 fc2c 	bl	800fdf8 <USB_ReadInterrupts>
 80075a0:	4603      	mov	r3, r0
 80075a2:	f003 0302 	and.w	r3, r3, #2
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d107      	bne.n	80075ba <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	695a      	ldr	r2, [r3, #20]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f002 0202 	and.w	r2, r2, #2
 80075b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4618      	mov	r0, r3
 80075c0:	f008 fc1a 	bl	800fdf8 <USB_ReadInterrupts>
 80075c4:	4603      	mov	r3, r0
 80075c6:	f003 0310 	and.w	r3, r3, #16
 80075ca:	2b10      	cmp	r3, #16
 80075cc:	d161      	bne.n	8007692 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	699a      	ldr	r2, [r3, #24]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f022 0210 	bic.w	r2, r2, #16
 80075dc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80075de:	6a3b      	ldr	r3, [r7, #32]
 80075e0:	6a1b      	ldr	r3, [r3, #32]
 80075e2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	f003 020f 	and.w	r2, r3, #15
 80075ea:	4613      	mov	r3, r2
 80075ec:	00db      	lsls	r3, r3, #3
 80075ee:	4413      	add	r3, r2
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	4413      	add	r3, r2
 80075fa:	3304      	adds	r3, #4
 80075fc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	0c5b      	lsrs	r3, r3, #17
 8007602:	f003 030f 	and.w	r3, r3, #15
 8007606:	2b02      	cmp	r3, #2
 8007608:	d124      	bne.n	8007654 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800760a:	69ba      	ldr	r2, [r7, #24]
 800760c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8007610:	4013      	ands	r3, r2
 8007612:	2b00      	cmp	r3, #0
 8007614:	d035      	beq.n	8007682 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	091b      	lsrs	r3, r3, #4
 800761e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007620:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007624:	b29b      	uxth	r3, r3
 8007626:	461a      	mov	r2, r3
 8007628:	6a38      	ldr	r0, [r7, #32]
 800762a:	f008 fa51 	bl	800fad0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	68da      	ldr	r2, [r3, #12]
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	091b      	lsrs	r3, r3, #4
 8007636:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800763a:	441a      	add	r2, r3
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	695a      	ldr	r2, [r3, #20]
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	091b      	lsrs	r3, r3, #4
 8007648:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800764c:	441a      	add	r2, r3
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	615a      	str	r2, [r3, #20]
 8007652:	e016      	b.n	8007682 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	0c5b      	lsrs	r3, r3, #17
 8007658:	f003 030f 	and.w	r3, r3, #15
 800765c:	2b06      	cmp	r3, #6
 800765e:	d110      	bne.n	8007682 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007666:	2208      	movs	r2, #8
 8007668:	4619      	mov	r1, r3
 800766a:	6a38      	ldr	r0, [r7, #32]
 800766c:	f008 fa30 	bl	800fad0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	695a      	ldr	r2, [r3, #20]
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	091b      	lsrs	r3, r3, #4
 8007678:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800767c:	441a      	add	r2, r3
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	699a      	ldr	r2, [r3, #24]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f042 0210 	orr.w	r2, r2, #16
 8007690:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4618      	mov	r0, r3
 8007698:	f008 fbae 	bl	800fdf8 <USB_ReadInterrupts>
 800769c:	4603      	mov	r3, r0
 800769e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80076a2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80076a6:	f040 80a7 	bne.w	80077f8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80076aa:	2300      	movs	r3, #0
 80076ac:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4618      	mov	r0, r3
 80076b4:	f008 fbb3 	bl	800fe1e <USB_ReadDevAllOutEpInterrupt>
 80076b8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80076ba:	e099      	b.n	80077f0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80076bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076be:	f003 0301 	and.w	r3, r3, #1
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	f000 808e 	beq.w	80077e4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076ce:	b2d2      	uxtb	r2, r2
 80076d0:	4611      	mov	r1, r2
 80076d2:	4618      	mov	r0, r3
 80076d4:	f008 fbd7 	bl	800fe86 <USB_ReadDevOutEPInterrupt>
 80076d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	f003 0301 	and.w	r3, r3, #1
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00c      	beq.n	80076fe <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80076e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e6:	015a      	lsls	r2, r3, #5
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	4413      	add	r3, r2
 80076ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076f0:	461a      	mov	r2, r3
 80076f2:	2301      	movs	r3, #1
 80076f4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80076f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 fe81 	bl	8008400 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	f003 0308 	and.w	r3, r3, #8
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00c      	beq.n	8007722 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770a:	015a      	lsls	r2, r3, #5
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	4413      	add	r3, r2
 8007710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007714:	461a      	mov	r2, r3
 8007716:	2308      	movs	r3, #8
 8007718:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800771a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 febd 	bl	800849c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	f003 0310 	and.w	r3, r3, #16
 8007728:	2b00      	cmp	r3, #0
 800772a:	d008      	beq.n	800773e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800772c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800772e:	015a      	lsls	r2, r3, #5
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	4413      	add	r3, r2
 8007734:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007738:	461a      	mov	r2, r3
 800773a:	2310      	movs	r3, #16
 800773c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	f003 0302 	and.w	r3, r3, #2
 8007744:	2b00      	cmp	r3, #0
 8007746:	d030      	beq.n	80077aa <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007748:	6a3b      	ldr	r3, [r7, #32]
 800774a:	695b      	ldr	r3, [r3, #20]
 800774c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007750:	2b80      	cmp	r3, #128	@ 0x80
 8007752:	d109      	bne.n	8007768 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	69fa      	ldr	r2, [r7, #28]
 800775e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007762:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007766:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007768:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800776a:	4613      	mov	r3, r2
 800776c:	00db      	lsls	r3, r3, #3
 800776e:	4413      	add	r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	4413      	add	r3, r2
 800777a:	3304      	adds	r3, #4
 800777c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	78db      	ldrb	r3, [r3, #3]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d108      	bne.n	8007798 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	2200      	movs	r2, #0
 800778a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800778c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778e:	b2db      	uxtb	r3, r3
 8007790:	4619      	mov	r1, r3
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f012 fab2 	bl	8019cfc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800779a:	015a      	lsls	r2, r3, #5
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	4413      	add	r3, r2
 80077a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077a4:	461a      	mov	r2, r3
 80077a6:	2302      	movs	r3, #2
 80077a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	f003 0320 	and.w	r3, r3, #32
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d008      	beq.n	80077c6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80077b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b6:	015a      	lsls	r2, r3, #5
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	4413      	add	r3, r2
 80077bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077c0:	461a      	mov	r2, r3
 80077c2:	2320      	movs	r3, #32
 80077c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d009      	beq.n	80077e4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80077d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d2:	015a      	lsls	r2, r3, #5
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	4413      	add	r3, r2
 80077d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077dc:	461a      	mov	r2, r3
 80077de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80077e2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80077e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e6:	3301      	adds	r3, #1
 80077e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80077ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ec:	085b      	lsrs	r3, r3, #1
 80077ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80077f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	f47f af62 	bne.w	80076bc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4618      	mov	r0, r3
 80077fe:	f008 fafb 	bl	800fdf8 <USB_ReadInterrupts>
 8007802:	4603      	mov	r3, r0
 8007804:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007808:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800780c:	f040 80a4 	bne.w	8007958 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4618      	mov	r0, r3
 8007816:	f008 fb1c 	bl	800fe52 <USB_ReadDevAllInEpInterrupt>
 800781a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800781c:	2300      	movs	r3, #0
 800781e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8007820:	e096      	b.n	8007950 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007824:	f003 0301 	and.w	r3, r3, #1
 8007828:	2b00      	cmp	r3, #0
 800782a:	f000 808b 	beq.w	8007944 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007834:	b2d2      	uxtb	r2, r2
 8007836:	4611      	mov	r1, r2
 8007838:	4618      	mov	r0, r3
 800783a:	f008 fb42 	bl	800fec2 <USB_ReadDevInEPInterrupt>
 800783e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	f003 0301 	and.w	r3, r3, #1
 8007846:	2b00      	cmp	r3, #0
 8007848:	d020      	beq.n	800788c <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800784a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784c:	f003 030f 	and.w	r3, r3, #15
 8007850:	2201      	movs	r2, #1
 8007852:	fa02 f303 	lsl.w	r3, r2, r3
 8007856:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800785e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	43db      	mvns	r3, r3
 8007864:	69f9      	ldr	r1, [r7, #28]
 8007866:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800786a:	4013      	ands	r3, r2
 800786c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800786e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007870:	015a      	lsls	r2, r3, #5
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	4413      	add	r3, r2
 8007876:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800787a:	461a      	mov	r2, r3
 800787c:	2301      	movs	r3, #1
 800787e:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007882:	b2db      	uxtb	r3, r3
 8007884:	4619      	mov	r1, r3
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f012 f9a3 	bl	8019bd2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	f003 0308 	and.w	r3, r3, #8
 8007892:	2b00      	cmp	r3, #0
 8007894:	d008      	beq.n	80078a8 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007898:	015a      	lsls	r2, r3, #5
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	4413      	add	r3, r2
 800789e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078a2:	461a      	mov	r2, r3
 80078a4:	2308      	movs	r3, #8
 80078a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	f003 0310 	and.w	r3, r3, #16
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d008      	beq.n	80078c4 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80078b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b4:	015a      	lsls	r2, r3, #5
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	4413      	add	r3, r2
 80078ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078be:	461a      	mov	r2, r3
 80078c0:	2310      	movs	r3, #16
 80078c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d008      	beq.n	80078e0 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80078ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d0:	015a      	lsls	r2, r3, #5
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	4413      	add	r3, r2
 80078d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078da:	461a      	mov	r2, r3
 80078dc:	2340      	movs	r3, #64	@ 0x40
 80078de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	f003 0302 	and.w	r3, r3, #2
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d023      	beq.n	8007932 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80078ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80078ec:	6a38      	ldr	r0, [r7, #32]
 80078ee:	f007 fbd7 	bl	800f0a0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80078f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078f4:	4613      	mov	r3, r2
 80078f6:	00db      	lsls	r3, r3, #3
 80078f8:	4413      	add	r3, r2
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	3310      	adds	r3, #16
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	4413      	add	r3, r2
 8007902:	3304      	adds	r3, #4
 8007904:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	78db      	ldrb	r3, [r3, #3]
 800790a:	2b01      	cmp	r3, #1
 800790c:	d108      	bne.n	8007920 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	2200      	movs	r2, #0
 8007912:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007916:	b2db      	uxtb	r3, r3
 8007918:	4619      	mov	r1, r3
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f012 fa00 	bl	8019d20 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007922:	015a      	lsls	r2, r3, #5
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	4413      	add	r3, r2
 8007928:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800792c:	461a      	mov	r2, r3
 800792e:	2302      	movs	r3, #2
 8007930:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007938:	2b00      	cmp	r3, #0
 800793a:	d003      	beq.n	8007944 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800793c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 fcd6 	bl	80082f0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007946:	3301      	adds	r3, #1
 8007948:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800794a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800794c:	085b      	lsrs	r3, r3, #1
 800794e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007952:	2b00      	cmp	r3, #0
 8007954:	f47f af65 	bne.w	8007822 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4618      	mov	r0, r3
 800795e:	f008 fa4b 	bl	800fdf8 <USB_ReadInterrupts>
 8007962:	4603      	mov	r3, r0
 8007964:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007968:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800796c:	d122      	bne.n	80079b4 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	69fa      	ldr	r2, [r7, #28]
 8007978:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800797c:	f023 0301 	bic.w	r3, r3, #1
 8007980:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007988:	2b01      	cmp	r3, #1
 800798a:	d108      	bne.n	800799e <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007994:	2100      	movs	r1, #0
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f012 fc34 	bl	801a204 <HAL_PCDEx_LPM_Callback>
 800799c:	e002      	b.n	80079a4 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f012 f984 	bl	8019cac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	695a      	ldr	r2, [r3, #20]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80079b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4618      	mov	r0, r3
 80079ba:	f008 fa1d 	bl	800fdf8 <USB_ReadInterrupts>
 80079be:	4603      	mov	r3, r0
 80079c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80079c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079c8:	d112      	bne.n	80079f0 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	f003 0301 	and.w	r3, r3, #1
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d102      	bne.n	80079e0 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f012 f940 	bl	8019c60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	695a      	ldr	r2, [r3, #20]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80079ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4618      	mov	r0, r3
 80079f6:	f008 f9ff 	bl	800fdf8 <USB_ReadInterrupts>
 80079fa:	4603      	mov	r3, r0
 80079fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a04:	d121      	bne.n	8007a4a <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	695a      	ldr	r2, [r3, #20]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8007a14:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d111      	bne.n	8007a44 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a2e:	089b      	lsrs	r3, r3, #2
 8007a30:	f003 020f 	and.w	r2, r3, #15
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007a3a:	2101      	movs	r1, #1
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f012 fbe1 	bl	801a204 <HAL_PCDEx_LPM_Callback>
 8007a42:	e002      	b.n	8007a4a <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f012 f90b 	bl	8019c60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f008 f9d2 	bl	800fdf8 <USB_ReadInterrupts>
 8007a54:	4603      	mov	r3, r0
 8007a56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007a5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a5e:	f040 80b6 	bne.w	8007bce <HAL_PCD_IRQHandler+0x682>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	69fa      	ldr	r2, [r7, #28]
 8007a6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a70:	f023 0301 	bic.w	r3, r3, #1
 8007a74:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2110      	movs	r1, #16
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f007 fb0f 	bl	800f0a0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a82:	2300      	movs	r3, #0
 8007a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a86:	e046      	b.n	8007b16 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a8a:	015a      	lsls	r2, r3, #5
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	4413      	add	r3, r2
 8007a90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a94:	461a      	mov	r2, r3
 8007a96:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007a9a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a9e:	015a      	lsls	r2, r3, #5
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007aac:	0151      	lsls	r1, r2, #5
 8007aae:	69fa      	ldr	r2, [r7, #28]
 8007ab0:	440a      	add	r2, r1
 8007ab2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ab6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007aba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007abe:	015a      	lsls	r2, r3, #5
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ac8:	461a      	mov	r2, r3
 8007aca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007ace:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ad2:	015a      	lsls	r2, r3, #5
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ae0:	0151      	lsls	r1, r2, #5
 8007ae2:	69fa      	ldr	r2, [r7, #28]
 8007ae4:	440a      	add	r2, r1
 8007ae6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007aea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007aee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007af2:	015a      	lsls	r2, r3, #5
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	4413      	add	r3, r2
 8007af8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b00:	0151      	lsls	r1, r2, #5
 8007b02:	69fa      	ldr	r2, [r7, #28]
 8007b04:	440a      	add	r2, r1
 8007b06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b0a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007b0e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b12:	3301      	adds	r3, #1
 8007b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	791b      	ldrb	r3, [r3, #4]
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d3b2      	bcc.n	8007a88 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b28:	69db      	ldr	r3, [r3, #28]
 8007b2a:	69fa      	ldr	r2, [r7, #28]
 8007b2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b30:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8007b34:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	7bdb      	ldrb	r3, [r3, #15]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d016      	beq.n	8007b6c <HAL_PCD_IRQHandler+0x620>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b48:	69fa      	ldr	r2, [r7, #28]
 8007b4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b4e:	f043 030b 	orr.w	r3, r3, #11
 8007b52:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b5e:	69fa      	ldr	r2, [r7, #28]
 8007b60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b64:	f043 030b 	orr.w	r3, r3, #11
 8007b68:	6453      	str	r3, [r2, #68]	@ 0x44
 8007b6a:	e015      	b.n	8007b98 <HAL_PCD_IRQHandler+0x64c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b72:	695b      	ldr	r3, [r3, #20]
 8007b74:	69fa      	ldr	r2, [r7, #28]
 8007b76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b7a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007b7e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8007b82:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	69fa      	ldr	r2, [r7, #28]
 8007b8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b92:	f043 030b 	orr.w	r3, r3, #11
 8007b96:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	69fa      	ldr	r2, [r7, #28]
 8007ba2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ba6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007baa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	4610      	mov	r0, r2
 8007bba:	f008 f9e1 	bl	800ff80 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	695a      	ldr	r2, [r3, #20]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007bcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f008 f910 	bl	800fdf8 <USB_ReadInterrupts>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007bde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007be2:	d123      	bne.n	8007c2c <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4618      	mov	r0, r3
 8007bea:	f008 f9a6 	bl	800ff3a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f007 facd 	bl	800f192 <USB_GetDevSpeed>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681c      	ldr	r4, [r3, #0]
 8007c04:	f001 fae6 	bl	80091d4 <HAL_RCC_GetHCLKFreq>
 8007c08:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007c0e:	461a      	mov	r2, r3
 8007c10:	4620      	mov	r0, r4
 8007c12:	f006 fff3 	bl	800ebfc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f012 f803 	bl	8019c22 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	695a      	ldr	r2, [r3, #20]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007c2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f008 f8e1 	bl	800fdf8 <USB_ReadInterrupts>
 8007c36:	4603      	mov	r3, r0
 8007c38:	f003 0308 	and.w	r3, r3, #8
 8007c3c:	2b08      	cmp	r3, #8
 8007c3e:	d10a      	bne.n	8007c56 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f011 ffe0 	bl	8019c06 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	695a      	ldr	r2, [r3, #20]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f002 0208 	and.w	r2, r2, #8
 8007c54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f008 f8cc 	bl	800fdf8 <USB_ReadInterrupts>
 8007c60:	4603      	mov	r3, r0
 8007c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c66:	2b80      	cmp	r3, #128	@ 0x80
 8007c68:	d123      	bne.n	8007cb2 <HAL_PCD_IRQHandler+0x766>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007c6a:	6a3b      	ldr	r3, [r7, #32]
 8007c6c:	699b      	ldr	r3, [r3, #24]
 8007c6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007c72:	6a3b      	ldr	r3, [r7, #32]
 8007c74:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007c76:	2301      	movs	r3, #1
 8007c78:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c7a:	e014      	b.n	8007ca6 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007c7c:	6879      	ldr	r1, [r7, #4]
 8007c7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c80:	4613      	mov	r3, r2
 8007c82:	00db      	lsls	r3, r3, #3
 8007c84:	4413      	add	r3, r2
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	440b      	add	r3, r1
 8007c8a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d105      	bne.n	8007ca0 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	4619      	mov	r1, r3
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 faf7 	bl	800828e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	791b      	ldrb	r3, [r3, #4]
 8007caa:	461a      	mov	r2, r3
 8007cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d3e4      	bcc.n	8007c7c <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f008 f89e 	bl	800fdf8 <USB_ReadInterrupts>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007cc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007cc6:	d13c      	bne.n	8007d42 <HAL_PCD_IRQHandler+0x7f6>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007cc8:	2301      	movs	r3, #1
 8007cca:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ccc:	e02b      	b.n	8007d26 <HAL_PCD_IRQHandler+0x7da>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd0:	015a      	lsls	r2, r3, #5
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007cde:	6879      	ldr	r1, [r7, #4]
 8007ce0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	00db      	lsls	r3, r3, #3
 8007ce6:	4413      	add	r3, r2
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	440b      	add	r3, r1
 8007cec:	3318      	adds	r3, #24
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d115      	bne.n	8007d20 <HAL_PCD_IRQHandler+0x7d4>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007cf4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	da12      	bge.n	8007d20 <HAL_PCD_IRQHandler+0x7d4>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007cfa:	6879      	ldr	r1, [r7, #4]
 8007cfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cfe:	4613      	mov	r3, r2
 8007d00:	00db      	lsls	r3, r3, #3
 8007d02:	4413      	add	r3, r2
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	440b      	add	r3, r1
 8007d08:	3317      	adds	r3, #23
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	4619      	mov	r1, r3
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fab7 	bl	800828e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d22:	3301      	adds	r3, #1
 8007d24:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	791b      	ldrb	r3, [r3, #4]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d3cd      	bcc.n	8007cce <HAL_PCD_IRQHandler+0x782>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	695a      	ldr	r2, [r3, #20]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8007d40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4618      	mov	r0, r3
 8007d48:	f008 f856 	bl	800fdf8 <USB_ReadInterrupts>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007d52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d56:	d156      	bne.n	8007e06 <HAL_PCD_IRQHandler+0x8ba>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007d58:	2301      	movs	r3, #1
 8007d5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d5c:	e045      	b.n	8007dea <HAL_PCD_IRQHandler+0x89e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d60:	015a      	lsls	r2, r3, #5
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	4413      	add	r3, r2
 8007d66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007d6e:	6879      	ldr	r1, [r7, #4]
 8007d70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d72:	4613      	mov	r3, r2
 8007d74:	00db      	lsls	r3, r3, #3
 8007d76:	4413      	add	r3, r2
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	440b      	add	r3, r1
 8007d7c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d12e      	bne.n	8007de4 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007d86:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	da2b      	bge.n	8007de4 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007d8c:	69bb      	ldr	r3, [r7, #24]
 8007d8e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8007d98:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d121      	bne.n	8007de4 <HAL_PCD_IRQHandler+0x898>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007da0:	6879      	ldr	r1, [r7, #4]
 8007da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007da4:	4613      	mov	r3, r2
 8007da6:	00db      	lsls	r3, r3, #3
 8007da8:	4413      	add	r3, r2
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	440b      	add	r3, r1
 8007dae:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007db2:	2201      	movs	r2, #1
 8007db4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007db6:	6a3b      	ldr	r3, [r7, #32]
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007dbe:	6a3b      	ldr	r3, [r7, #32]
 8007dc0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007dc2:	6a3b      	ldr	r3, [r7, #32]
 8007dc4:	695b      	ldr	r3, [r3, #20]
 8007dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d10a      	bne.n	8007de4 <HAL_PCD_IRQHandler+0x898>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	69fa      	ldr	r2, [r7, #28]
 8007dd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ddc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007de0:	6053      	str	r3, [r2, #4]
            break;
 8007de2:	e008      	b.n	8007df6 <HAL_PCD_IRQHandler+0x8aa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de6:	3301      	adds	r3, #1
 8007de8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	791b      	ldrb	r3, [r3, #4]
 8007dee:	461a      	mov	r2, r3
 8007df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d3b3      	bcc.n	8007d5e <HAL_PCD_IRQHandler+0x812>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	695a      	ldr	r2, [r3, #20]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8007e04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f007 fff4 	bl	800fdf8 <USB_ReadInterrupts>
 8007e10:	4603      	mov	r3, r0
 8007e12:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e1a:	d10a      	bne.n	8007e32 <HAL_PCD_IRQHandler+0x8e6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f011 ff91 	bl	8019d44 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	695a      	ldr	r2, [r3, #20]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007e30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4618      	mov	r0, r3
 8007e38:	f007 ffde 	bl	800fdf8 <USB_ReadInterrupts>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	f003 0304 	and.w	r3, r3, #4
 8007e42:	2b04      	cmp	r3, #4
 8007e44:	d115      	bne.n	8007e72 <HAL_PCD_IRQHandler+0x926>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	f003 0304 	and.w	r3, r3, #4
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d002      	beq.n	8007e5e <HAL_PCD_IRQHandler+0x912>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f011 ff81 	bl	8019d60 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	6859      	ldr	r1, [r3, #4]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	69ba      	ldr	r2, [r7, #24]
 8007e6a:	430a      	orrs	r2, r1
 8007e6c:	605a      	str	r2, [r3, #4]
 8007e6e:	e000      	b.n	8007e72 <HAL_PCD_IRQHandler+0x926>
      return;
 8007e70:	bf00      	nop
    }
  }
}
 8007e72:	3734      	adds	r7, #52	@ 0x34
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd90      	pop	{r4, r7, pc}

08007e78 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	460b      	mov	r3, r1
 8007e82:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d101      	bne.n	8007e92 <HAL_PCD_SetAddress+0x1a>
 8007e8e:	2302      	movs	r3, #2
 8007e90:	e012      	b.n	8007eb8 <HAL_PCD_SetAddress+0x40>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2201      	movs	r2, #1
 8007e96:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	78fa      	ldrb	r2, [r7, #3]
 8007e9e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	78fa      	ldrb	r2, [r7, #3]
 8007ea6:	4611      	mov	r1, r2
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f007 ff3d 	bl	800fd28 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007eb6:	2300      	movs	r3, #0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3708      	adds	r7, #8
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	4608      	mov	r0, r1
 8007eca:	4611      	mov	r1, r2
 8007ecc:	461a      	mov	r2, r3
 8007ece:	4603      	mov	r3, r0
 8007ed0:	70fb      	strb	r3, [r7, #3]
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	803b      	strh	r3, [r7, #0]
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8007eda:	2300      	movs	r3, #0
 8007edc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007ede:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	da0f      	bge.n	8007f06 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ee6:	78fb      	ldrb	r3, [r7, #3]
 8007ee8:	f003 020f 	and.w	r2, r3, #15
 8007eec:	4613      	mov	r3, r2
 8007eee:	00db      	lsls	r3, r3, #3
 8007ef0:	4413      	add	r3, r2
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	3310      	adds	r3, #16
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	4413      	add	r3, r2
 8007efa:	3304      	adds	r3, #4
 8007efc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2201      	movs	r2, #1
 8007f02:	705a      	strb	r2, [r3, #1]
 8007f04:	e00f      	b.n	8007f26 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007f06:	78fb      	ldrb	r3, [r7, #3]
 8007f08:	f003 020f 	and.w	r2, r3, #15
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	00db      	lsls	r3, r3, #3
 8007f10:	4413      	add	r3, r2
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	3304      	adds	r3, #4
 8007f1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2200      	movs	r2, #0
 8007f24:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007f26:	78fb      	ldrb	r3, [r7, #3]
 8007f28:	f003 030f 	and.w	r3, r3, #15
 8007f2c:	b2da      	uxtb	r2, r3
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8007f32:	883b      	ldrh	r3, [r7, #0]
 8007f34:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	78ba      	ldrb	r2, [r7, #2]
 8007f40:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	785b      	ldrb	r3, [r3, #1]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d004      	beq.n	8007f54 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	461a      	mov	r2, r3
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007f54:	78bb      	ldrb	r3, [r7, #2]
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d102      	bne.n	8007f60 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d101      	bne.n	8007f6e <HAL_PCD_EP_Open+0xae>
 8007f6a:	2302      	movs	r3, #2
 8007f6c:	e00e      	b.n	8007f8c <HAL_PCD_EP_Open+0xcc>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2201      	movs	r2, #1
 8007f72:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68f9      	ldr	r1, [r7, #12]
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f007 f927 	bl	800f1d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8007f8a:	7afb      	ldrb	r3, [r7, #11]
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3710      	adds	r7, #16
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007fa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	da0f      	bge.n	8007fc8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007fa8:	78fb      	ldrb	r3, [r7, #3]
 8007faa:	f003 020f 	and.w	r2, r3, #15
 8007fae:	4613      	mov	r3, r2
 8007fb0:	00db      	lsls	r3, r3, #3
 8007fb2:	4413      	add	r3, r2
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	3310      	adds	r3, #16
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	4413      	add	r3, r2
 8007fbc:	3304      	adds	r3, #4
 8007fbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	705a      	strb	r2, [r3, #1]
 8007fc6:	e00f      	b.n	8007fe8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007fc8:	78fb      	ldrb	r3, [r7, #3]
 8007fca:	f003 020f 	and.w	r2, r3, #15
 8007fce:	4613      	mov	r3, r2
 8007fd0:	00db      	lsls	r3, r3, #3
 8007fd2:	4413      	add	r3, r2
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	4413      	add	r3, r2
 8007fde:	3304      	adds	r3, #4
 8007fe0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007fe8:	78fb      	ldrb	r3, [r7, #3]
 8007fea:	f003 030f 	and.w	r3, r3, #15
 8007fee:	b2da      	uxtb	r2, r3
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d101      	bne.n	8008002 <HAL_PCD_EP_Close+0x6e>
 8007ffe:	2302      	movs	r3, #2
 8008000:	e00e      	b.n	8008020 <HAL_PCD_EP_Close+0x8c>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2201      	movs	r2, #1
 8008006:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68f9      	ldr	r1, [r7, #12]
 8008010:	4618      	mov	r0, r3
 8008012:	f007 f965 	bl	800f2e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800801e:	2300      	movs	r3, #0
}
 8008020:	4618      	mov	r0, r3
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b086      	sub	sp, #24
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	607a      	str	r2, [r7, #4]
 8008032:	603b      	str	r3, [r7, #0]
 8008034:	460b      	mov	r3, r1
 8008036:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008038:	7afb      	ldrb	r3, [r7, #11]
 800803a:	f003 020f 	and.w	r2, r3, #15
 800803e:	4613      	mov	r3, r2
 8008040:	00db      	lsls	r3, r3, #3
 8008042:	4413      	add	r3, r2
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	4413      	add	r3, r2
 800804e:	3304      	adds	r3, #4
 8008050:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	683a      	ldr	r2, [r7, #0]
 800805c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	2200      	movs	r2, #0
 8008062:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	2200      	movs	r2, #0
 8008068:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800806a:	7afb      	ldrb	r3, [r7, #11]
 800806c:	f003 030f 	and.w	r3, r3, #15
 8008070:	b2da      	uxtb	r2, r3
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	6979      	ldr	r1, [r7, #20]
 800807c:	4618      	mov	r0, r3
 800807e:	f007 fa0b 	bl	800f498 <USB_EPStartXfer>

  return HAL_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	3718      	adds	r7, #24
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	460b      	mov	r3, r1
 8008096:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008098:	78fb      	ldrb	r3, [r7, #3]
 800809a:	f003 020f 	and.w	r2, r3, #15
 800809e:	6879      	ldr	r1, [r7, #4]
 80080a0:	4613      	mov	r3, r2
 80080a2:	00db      	lsls	r3, r3, #3
 80080a4:	4413      	add	r3, r2
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	440b      	add	r3, r1
 80080aa:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80080ae:	681b      	ldr	r3, [r3, #0]
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b086      	sub	sp, #24
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	607a      	str	r2, [r7, #4]
 80080c6:	603b      	str	r3, [r7, #0]
 80080c8:	460b      	mov	r3, r1
 80080ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80080cc:	7afb      	ldrb	r3, [r7, #11]
 80080ce:	f003 020f 	and.w	r2, r3, #15
 80080d2:	4613      	mov	r3, r2
 80080d4:	00db      	lsls	r3, r3, #3
 80080d6:	4413      	add	r3, r2
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	3310      	adds	r3, #16
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	4413      	add	r3, r2
 80080e0:	3304      	adds	r3, #4
 80080e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	683a      	ldr	r2, [r7, #0]
 80080ee:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	2200      	movs	r2, #0
 80080f4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	2201      	movs	r2, #1
 80080fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80080fc:	7afb      	ldrb	r3, [r7, #11]
 80080fe:	f003 030f 	and.w	r3, r3, #15
 8008102:	b2da      	uxtb	r2, r3
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	6979      	ldr	r1, [r7, #20]
 800810e:	4618      	mov	r0, r3
 8008110:	f007 f9c2 	bl	800f498 <USB_EPStartXfer>

  return HAL_OK;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3718      	adds	r7, #24
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b084      	sub	sp, #16
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
 8008126:	460b      	mov	r3, r1
 8008128:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800812a:	78fb      	ldrb	r3, [r7, #3]
 800812c:	f003 030f 	and.w	r3, r3, #15
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	7912      	ldrb	r2, [r2, #4]
 8008134:	4293      	cmp	r3, r2
 8008136:	d901      	bls.n	800813c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	e04e      	b.n	80081da <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800813c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008140:	2b00      	cmp	r3, #0
 8008142:	da0f      	bge.n	8008164 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008144:	78fb      	ldrb	r3, [r7, #3]
 8008146:	f003 020f 	and.w	r2, r3, #15
 800814a:	4613      	mov	r3, r2
 800814c:	00db      	lsls	r3, r3, #3
 800814e:	4413      	add	r3, r2
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	3310      	adds	r3, #16
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	4413      	add	r3, r2
 8008158:	3304      	adds	r3, #4
 800815a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2201      	movs	r2, #1
 8008160:	705a      	strb	r2, [r3, #1]
 8008162:	e00d      	b.n	8008180 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008164:	78fa      	ldrb	r2, [r7, #3]
 8008166:	4613      	mov	r3, r2
 8008168:	00db      	lsls	r3, r3, #3
 800816a:	4413      	add	r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	4413      	add	r3, r2
 8008176:	3304      	adds	r3, #4
 8008178:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2200      	movs	r2, #0
 800817e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2201      	movs	r2, #1
 8008184:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008186:	78fb      	ldrb	r3, [r7, #3]
 8008188:	f003 030f 	and.w	r3, r3, #15
 800818c:	b2da      	uxtb	r2, r3
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008198:	2b01      	cmp	r3, #1
 800819a:	d101      	bne.n	80081a0 <HAL_PCD_EP_SetStall+0x82>
 800819c:	2302      	movs	r3, #2
 800819e:	e01c      	b.n	80081da <HAL_PCD_EP_SetStall+0xbc>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	68f9      	ldr	r1, [r7, #12]
 80081ae:	4618      	mov	r0, r3
 80081b0:	f007 fce6 	bl	800fb80 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80081b4:	78fb      	ldrb	r3, [r7, #3]
 80081b6:	f003 030f 	and.w	r3, r3, #15
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d108      	bne.n	80081d0 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80081c8:	4619      	mov	r1, r3
 80081ca:	4610      	mov	r0, r2
 80081cc:	f007 fed8 	bl	800ff80 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b084      	sub	sp, #16
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
 80081ea:	460b      	mov	r3, r1
 80081ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80081ee:	78fb      	ldrb	r3, [r7, #3]
 80081f0:	f003 030f 	and.w	r3, r3, #15
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	7912      	ldrb	r2, [r2, #4]
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d901      	bls.n	8008200 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	e042      	b.n	8008286 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008200:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008204:	2b00      	cmp	r3, #0
 8008206:	da0f      	bge.n	8008228 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008208:	78fb      	ldrb	r3, [r7, #3]
 800820a:	f003 020f 	and.w	r2, r3, #15
 800820e:	4613      	mov	r3, r2
 8008210:	00db      	lsls	r3, r3, #3
 8008212:	4413      	add	r3, r2
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	3310      	adds	r3, #16
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	4413      	add	r3, r2
 800821c:	3304      	adds	r3, #4
 800821e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2201      	movs	r2, #1
 8008224:	705a      	strb	r2, [r3, #1]
 8008226:	e00f      	b.n	8008248 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008228:	78fb      	ldrb	r3, [r7, #3]
 800822a:	f003 020f 	and.w	r2, r3, #15
 800822e:	4613      	mov	r3, r2
 8008230:	00db      	lsls	r3, r3, #3
 8008232:	4413      	add	r3, r2
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	4413      	add	r3, r2
 800823e:	3304      	adds	r3, #4
 8008240:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2200      	movs	r2, #0
 8008246:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800824e:	78fb      	ldrb	r3, [r7, #3]
 8008250:	f003 030f 	and.w	r3, r3, #15
 8008254:	b2da      	uxtb	r2, r3
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008260:	2b01      	cmp	r3, #1
 8008262:	d101      	bne.n	8008268 <HAL_PCD_EP_ClrStall+0x86>
 8008264:	2302      	movs	r3, #2
 8008266:	e00e      	b.n	8008286 <HAL_PCD_EP_ClrStall+0xa4>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	68f9      	ldr	r1, [r7, #12]
 8008276:	4618      	mov	r0, r3
 8008278:	f007 fcf0 	bl	800fc5c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	3710      	adds	r7, #16
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b084      	sub	sp, #16
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
 8008296:	460b      	mov	r3, r1
 8008298:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800829a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	da0c      	bge.n	80082bc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80082a2:	78fb      	ldrb	r3, [r7, #3]
 80082a4:	f003 020f 	and.w	r2, r3, #15
 80082a8:	4613      	mov	r3, r2
 80082aa:	00db      	lsls	r3, r3, #3
 80082ac:	4413      	add	r3, r2
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	3310      	adds	r3, #16
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	4413      	add	r3, r2
 80082b6:	3304      	adds	r3, #4
 80082b8:	60fb      	str	r3, [r7, #12]
 80082ba:	e00c      	b.n	80082d6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80082bc:	78fb      	ldrb	r3, [r7, #3]
 80082be:	f003 020f 	and.w	r2, r3, #15
 80082c2:	4613      	mov	r3, r2
 80082c4:	00db      	lsls	r3, r3, #3
 80082c6:	4413      	add	r3, r2
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	4413      	add	r3, r2
 80082d2:	3304      	adds	r3, #4
 80082d4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	68f9      	ldr	r1, [r7, #12]
 80082dc:	4618      	mov	r0, r3
 80082de:	f007 fb13 	bl	800f908 <USB_EPStopXfer>
 80082e2:	4603      	mov	r3, r0
 80082e4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80082e6:	7afb      	ldrb	r3, [r7, #11]
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b088      	sub	sp, #32
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008304:	683a      	ldr	r2, [r7, #0]
 8008306:	4613      	mov	r3, r2
 8008308:	00db      	lsls	r3, r3, #3
 800830a:	4413      	add	r3, r2
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	3310      	adds	r3, #16
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	4413      	add	r3, r2
 8008314:	3304      	adds	r3, #4
 8008316:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	695a      	ldr	r2, [r3, #20]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	429a      	cmp	r2, r3
 8008322:	d901      	bls.n	8008328 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	e067      	b.n	80083f8 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	691a      	ldr	r2, [r3, #16]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	695b      	ldr	r3, [r3, #20]
 8008330:	1ad3      	subs	r3, r2, r3
 8008332:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	69fa      	ldr	r2, [r7, #28]
 800833a:	429a      	cmp	r2, r3
 800833c:	d902      	bls.n	8008344 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	3303      	adds	r3, #3
 8008348:	089b      	lsrs	r3, r3, #2
 800834a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800834c:	e026      	b.n	800839c <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	691a      	ldr	r2, [r3, #16]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	695b      	ldr	r3, [r3, #20]
 8008356:	1ad3      	subs	r3, r2, r3
 8008358:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	69fa      	ldr	r2, [r7, #28]
 8008360:	429a      	cmp	r2, r3
 8008362:	d902      	bls.n	800836a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	3303      	adds	r3, #3
 800836e:	089b      	lsrs	r3, r3, #2
 8008370:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	68d9      	ldr	r1, [r3, #12]
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	b2da      	uxtb	r2, r3
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	b29b      	uxth	r3, r3
 800837e:	6978      	ldr	r0, [r7, #20]
 8008380:	f007 fb6c 	bl	800fa5c <USB_WritePacket>

    ep->xfer_buff  += len;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	68da      	ldr	r2, [r3, #12]
 8008388:	69fb      	ldr	r3, [r7, #28]
 800838a:	441a      	add	r2, r3
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	695a      	ldr	r2, [r3, #20]
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	441a      	add	r2, r3
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	015a      	lsls	r2, r3, #5
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	4413      	add	r3, r2
 80083a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083a8:	699b      	ldr	r3, [r3, #24]
 80083aa:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80083ac:	69ba      	ldr	r2, [r7, #24]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d809      	bhi.n	80083c6 <PCD_WriteEmptyTxFifo+0xd6>
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	695a      	ldr	r2, [r3, #20]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d203      	bcs.n	80083c6 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	691b      	ldr	r3, [r3, #16]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d1c3      	bne.n	800834e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	691a      	ldr	r2, [r3, #16]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	695b      	ldr	r3, [r3, #20]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d811      	bhi.n	80083f6 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	f003 030f 	and.w	r3, r3, #15
 80083d8:	2201      	movs	r2, #1
 80083da:	fa02 f303 	lsl.w	r3, r2, r3
 80083de:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	43db      	mvns	r3, r3
 80083ec:	6939      	ldr	r1, [r7, #16]
 80083ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80083f2:	4013      	ands	r3, r2
 80083f4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80083f6:	2300      	movs	r3, #0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3720      	adds	r7, #32
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b086      	sub	sp, #24
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	333c      	adds	r3, #60	@ 0x3c
 8008418:	3304      	adds	r3, #4
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	015a      	lsls	r2, r3, #5
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	4413      	add	r3, r2
 8008426:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	4a19      	ldr	r2, [pc, #100]	@ (8008498 <PCD_EP_OutXfrComplete_int+0x98>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d124      	bne.n	8008480 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00a      	beq.n	8008456 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	015a      	lsls	r2, r3, #5
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	4413      	add	r3, r2
 8008448:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800844c:	461a      	mov	r2, r3
 800844e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008452:	6093      	str	r3, [r2, #8]
 8008454:	e01a      	b.n	800848c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	f003 0320 	and.w	r3, r3, #32
 800845c:	2b00      	cmp	r3, #0
 800845e:	d008      	beq.n	8008472 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	015a      	lsls	r2, r3, #5
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	4413      	add	r3, r2
 8008468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800846c:	461a      	mov	r2, r3
 800846e:	2320      	movs	r3, #32
 8008470:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	b2db      	uxtb	r3, r3
 8008476:	4619      	mov	r1, r3
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f011 fb8f 	bl	8019b9c <HAL_PCD_DataOutStageCallback>
 800847e:	e005      	b.n	800848c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	b2db      	uxtb	r3, r3
 8008484:	4619      	mov	r1, r3
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f011 fb88 	bl	8019b9c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	3718      	adds	r7, #24
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	4f54310a 	.word	0x4f54310a

0800849c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b086      	sub	sp, #24
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	333c      	adds	r3, #60	@ 0x3c
 80084b4:	3304      	adds	r3, #4
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	015a      	lsls	r2, r3, #5
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	4413      	add	r3, r2
 80084c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	4a0c      	ldr	r2, [pc, #48]	@ (8008500 <PCD_EP_OutSetupPacket_int+0x64>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d90e      	bls.n	80084f0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d009      	beq.n	80084f0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	015a      	lsls	r2, r3, #5
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	4413      	add	r3, r2
 80084e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084e8:	461a      	mov	r2, r3
 80084ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084ee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f011 fb41 	bl	8019b78 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80084f6:	2300      	movs	r3, #0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3718      	adds	r7, #24
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	4f54300a 	.word	0x4f54300a

08008504 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008504:	b480      	push	{r7}
 8008506:	b085      	sub	sp, #20
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	460b      	mov	r3, r1
 800850e:	70fb      	strb	r3, [r7, #3]
 8008510:	4613      	mov	r3, r2
 8008512:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800851a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800851c:	78fb      	ldrb	r3, [r7, #3]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d107      	bne.n	8008532 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008522:	883b      	ldrh	r3, [r7, #0]
 8008524:	0419      	lsls	r1, r3, #16
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	68ba      	ldr	r2, [r7, #8]
 800852c:	430a      	orrs	r2, r1
 800852e:	629a      	str	r2, [r3, #40]	@ 0x28
 8008530:	e028      	b.n	8008584 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008538:	0c1b      	lsrs	r3, r3, #16
 800853a:	68ba      	ldr	r2, [r7, #8]
 800853c:	4413      	add	r3, r2
 800853e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008540:	2300      	movs	r3, #0
 8008542:	73fb      	strb	r3, [r7, #15]
 8008544:	e00d      	b.n	8008562 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	7bfb      	ldrb	r3, [r7, #15]
 800854c:	3340      	adds	r3, #64	@ 0x40
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	4413      	add	r3, r2
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	0c1b      	lsrs	r3, r3, #16
 8008556:	68ba      	ldr	r2, [r7, #8]
 8008558:	4413      	add	r3, r2
 800855a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800855c:	7bfb      	ldrb	r3, [r7, #15]
 800855e:	3301      	adds	r3, #1
 8008560:	73fb      	strb	r3, [r7, #15]
 8008562:	7bfa      	ldrb	r2, [r7, #15]
 8008564:	78fb      	ldrb	r3, [r7, #3]
 8008566:	3b01      	subs	r3, #1
 8008568:	429a      	cmp	r2, r3
 800856a:	d3ec      	bcc.n	8008546 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800856c:	883b      	ldrh	r3, [r7, #0]
 800856e:	0418      	lsls	r0, r3, #16
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6819      	ldr	r1, [r3, #0]
 8008574:	78fb      	ldrb	r3, [r7, #3]
 8008576:	3b01      	subs	r3, #1
 8008578:	68ba      	ldr	r2, [r7, #8]
 800857a:	4302      	orrs	r2, r0
 800857c:	3340      	adds	r3, #64	@ 0x40
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	440b      	add	r3, r1
 8008582:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3714      	adds	r7, #20
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr

08008592 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008592:	b480      	push	{r7}
 8008594:	b083      	sub	sp, #12
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
 800859a:	460b      	mov	r3, r1
 800859c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	887a      	ldrh	r2, [r7, #2]
 80085a4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b085      	sub	sp, #20
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2201      	movs	r2, #1
 80085c6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80085e6:	f043 0303 	orr.w	r3, r3, #3
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3714      	adds	r7, #20
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80085fc:	b480      	push	{r7}
 80085fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008600:	4b05      	ldr	r3, [pc, #20]	@ (8008618 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a04      	ldr	r2, [pc, #16]	@ (8008618 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008606:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800860a:	6013      	str	r3, [r2, #0]
}
 800860c:	bf00      	nop
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr
 8008616:	bf00      	nop
 8008618:	40007000 	.word	0x40007000

0800861c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800861c:	b480      	push	{r7}
 800861e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008620:	4b04      	ldr	r3, [pc, #16]	@ (8008634 <HAL_PWREx_GetVoltageRange+0x18>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8008628:	4618      	mov	r0, r3
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop
 8008634:	40007000 	.word	0x40007000

08008638 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008638:	b480      	push	{r7}
 800863a:	b085      	sub	sp, #20
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008646:	d130      	bne.n	80086aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008648:	4b23      	ldr	r3, [pc, #140]	@ (80086d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008650:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008654:	d038      	beq.n	80086c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008656:	4b20      	ldr	r3, [pc, #128]	@ (80086d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800865e:	4a1e      	ldr	r2, [pc, #120]	@ (80086d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008660:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008664:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008666:	4b1d      	ldr	r3, [pc, #116]	@ (80086dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	2232      	movs	r2, #50	@ 0x32
 800866c:	fb02 f303 	mul.w	r3, r2, r3
 8008670:	4a1b      	ldr	r2, [pc, #108]	@ (80086e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008672:	fba2 2303 	umull	r2, r3, r2, r3
 8008676:	0c9b      	lsrs	r3, r3, #18
 8008678:	3301      	adds	r3, #1
 800867a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800867c:	e002      	b.n	8008684 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	3b01      	subs	r3, #1
 8008682:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008684:	4b14      	ldr	r3, [pc, #80]	@ (80086d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008686:	695b      	ldr	r3, [r3, #20]
 8008688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800868c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008690:	d102      	bne.n	8008698 <HAL_PWREx_ControlVoltageScaling+0x60>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d1f2      	bne.n	800867e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008698:	4b0f      	ldr	r3, [pc, #60]	@ (80086d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800869a:	695b      	ldr	r3, [r3, #20]
 800869c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086a4:	d110      	bne.n	80086c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80086a6:	2303      	movs	r3, #3
 80086a8:	e00f      	b.n	80086ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80086aa:	4b0b      	ldr	r3, [pc, #44]	@ (80086d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80086b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086b6:	d007      	beq.n	80086c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80086b8:	4b07      	ldr	r3, [pc, #28]	@ (80086d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80086c0:	4a05      	ldr	r2, [pc, #20]	@ (80086d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80086c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80086c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3714      	adds	r7, #20
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop
 80086d8:	40007000 	.word	0x40007000
 80086dc:	20000000 	.word	0x20000000
 80086e0:	431bde83 	.word	0x431bde83

080086e4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80086e4:	b480      	push	{r7}
 80086e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80086e8:	4b05      	ldr	r3, [pc, #20]	@ (8008700 <HAL_PWREx_EnableVddUSB+0x1c>)
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	4a04      	ldr	r2, [pc, #16]	@ (8008700 <HAL_PWREx_EnableVddUSB+0x1c>)
 80086ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80086f2:	6053      	str	r3, [r2, #4]
}
 80086f4:	bf00      	nop
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	40007000 	.word	0x40007000

08008704 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b088      	sub	sp, #32
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d101      	bne.n	8008716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	e3ca      	b.n	8008eac <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008716:	4b97      	ldr	r3, [pc, #604]	@ (8008974 <HAL_RCC_OscConfig+0x270>)
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	f003 030c 	and.w	r3, r3, #12
 800871e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008720:	4b94      	ldr	r3, [pc, #592]	@ (8008974 <HAL_RCC_OscConfig+0x270>)
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	f003 0303 	and.w	r3, r3, #3
 8008728:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f003 0310 	and.w	r3, r3, #16
 8008732:	2b00      	cmp	r3, #0
 8008734:	f000 80e4 	beq.w	8008900 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008738:	69bb      	ldr	r3, [r7, #24]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d007      	beq.n	800874e <HAL_RCC_OscConfig+0x4a>
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	2b0c      	cmp	r3, #12
 8008742:	f040 808b 	bne.w	800885c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	2b01      	cmp	r3, #1
 800874a:	f040 8087 	bne.w	800885c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800874e:	4b89      	ldr	r3, [pc, #548]	@ (8008974 <HAL_RCC_OscConfig+0x270>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f003 0302 	and.w	r3, r3, #2
 8008756:	2b00      	cmp	r3, #0
 8008758:	d005      	beq.n	8008766 <HAL_RCC_OscConfig+0x62>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	699b      	ldr	r3, [r3, #24]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d101      	bne.n	8008766 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8008762:	2301      	movs	r3, #1
 8008764:	e3a2      	b.n	8008eac <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a1a      	ldr	r2, [r3, #32]
 800876a:	4b82      	ldr	r3, [pc, #520]	@ (8008974 <HAL_RCC_OscConfig+0x270>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 0308 	and.w	r3, r3, #8
 8008772:	2b00      	cmp	r3, #0
 8008774:	d004      	beq.n	8008780 <HAL_RCC_OscConfig+0x7c>
 8008776:	4b7f      	ldr	r3, [pc, #508]	@ (8008974 <HAL_RCC_OscConfig+0x270>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800877e:	e005      	b.n	800878c <HAL_RCC_OscConfig+0x88>
 8008780:	4b7c      	ldr	r3, [pc, #496]	@ (8008974 <HAL_RCC_OscConfig+0x270>)
 8008782:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008786:	091b      	lsrs	r3, r3, #4
 8008788:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800878c:	4293      	cmp	r3, r2
 800878e:	d223      	bcs.n	80087d8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6a1b      	ldr	r3, [r3, #32]
 8008794:	4618      	mov	r0, r3
 8008796:	f000 fd87 	bl	80092a8 <RCC_SetFlashLatencyFromMSIRange>
 800879a:	4603      	mov	r3, r0
 800879c:	2b00      	cmp	r3, #0
 800879e:	d001      	beq.n	80087a4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80087a0:	2301      	movs	r3, #1
 80087a2:	e383      	b.n	8008eac <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80087a4:	4b73      	ldr	r3, [pc, #460]	@ (8008974 <HAL_RCC_OscConfig+0x270>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a72      	ldr	r2, [pc, #456]	@ (8008974 <HAL_RCC_OscConfig+0x270>)
 80087aa:	f043 0308 	orr.w	r3, r3, #8
 80087ae:	6013      	str	r3, [r2, #0]
 80087b0:	4b70      	ldr	r3, [pc, #448]	@ (8008974 <HAL_RCC_OscConfig+0x270>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6a1b      	ldr	r3, [r3, #32]
 80087bc:	496d      	ldr	r1, [pc, #436]	@ (8008974 <HAL_RCC_OscConfig+0x270>)
 80087be:	4313      	orrs	r3, r2
 80087c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80087c2:	4b6c      	ldr	r3, [pc, #432]	@ (8008974 <HAL_RCC_OscConfig+0x270>)
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	69db      	ldr	r3, [r3, #28]
 80087ce:	021b      	lsls	r3, r3, #8
 80087d0:	4968      	ldr	r1, [pc, #416]	@ (8008974 <HAL_RCC_OscConfig+0x270>)
 80087d2:	4313      	orrs	r3, r2
 80087d4:	604b      	str	r3, [r1, #4]
 80087d6:	e025      	b.n	8008824 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80087d8:	4b66      	ldr	r3, [pc, #408]	@ (8008974 <HAL_RCC_OscConfig+0x270>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a65      	ldr	r2, [pc, #404]	@ (8008974 <HAL_RCC_OscConfig+0x270>)
 80087de:	f043 0308 	orr.w	r3, r3, #8
 80087e2:	6013      	str	r3, [r2, #0]
 80087e4:	4b63      	ldr	r3, [pc, #396]	@ (8008974 <HAL_RCC_OscConfig+0x270>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6a1b      	ldr	r3, [r3, #32]
 80087f0:	4960      	ldr	r1, [pc, #384]	@ (8008974 <HAL_RCC_OscConfig+0x270>)
 80087f2:	4313      	orrs	r3, r2
 80087f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80087f6:	4b5f      	ldr	r3, [pc, #380]	@ (8008974 <HAL_RCC_OscConfig+0x270>)
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	69db      	ldr	r3, [r3, #28]
 8008802:	021b      	lsls	r3, r3, #8
 8008804:	495b      	ldr	r1, [pc, #364]	@ (8008974 <HAL_RCC_OscConfig+0x270>)
 8008806:	4313      	orrs	r3, r2
 8008808:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800880a:	69bb      	ldr	r3, [r7, #24]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d109      	bne.n	8008824 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6a1b      	ldr	r3, [r3, #32]
 8008814:	4618      	mov	r0, r3
 8008816:	f000 fd47 	bl	80092a8 <RCC_SetFlashLatencyFromMSIRange>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d001      	beq.n	8008824 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	e343      	b.n	8008eac <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008824:	f000 fc4a 	bl	80090bc <HAL_RCC_GetSysClockFreq>
 8008828:	4602      	mov	r2, r0
 800882a:	4b52      	ldr	r3, [pc, #328]	@ (8008974 <HAL_RCC_OscConfig+0x270>)
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	091b      	lsrs	r3, r3, #4
 8008830:	f003 030f 	and.w	r3, r3, #15
 8008834:	4950      	ldr	r1, [pc, #320]	@ (8008978 <HAL_RCC_OscConfig+0x274>)
 8008836:	5ccb      	ldrb	r3, [r1, r3]
 8008838:	f003 031f 	and.w	r3, r3, #31
 800883c:	fa22 f303 	lsr.w	r3, r2, r3
 8008840:	4a4e      	ldr	r2, [pc, #312]	@ (800897c <HAL_RCC_OscConfig+0x278>)
 8008842:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008844:	4b4e      	ldr	r3, [pc, #312]	@ (8008980 <HAL_RCC_OscConfig+0x27c>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4618      	mov	r0, r3
 800884a:	f7fd fcf5 	bl	8006238 <HAL_InitTick>
 800884e:	4603      	mov	r3, r0
 8008850:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008852:	7bfb      	ldrb	r3, [r7, #15]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d052      	beq.n	80088fe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8008858:	7bfb      	ldrb	r3, [r7, #15]
 800885a:	e327      	b.n	8008eac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	699b      	ldr	r3, [r3, #24]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d032      	beq.n	80088ca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008864:	4b43      	ldr	r3, [pc, #268]	@ (8008974 <HAL_RCC_OscConfig+0x270>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a42      	ldr	r2, [pc, #264]	@ (8008974 <HAL_RCC_OscConfig+0x270>)
 800886a:	f043 0301 	orr.w	r3, r3, #1
 800886e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008870:	f7fd fee6 	bl	8006640 <HAL_GetTick>
 8008874:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008876:	e008      	b.n	800888a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008878:	f7fd fee2 	bl	8006640 <HAL_GetTick>
 800887c:	4602      	mov	r2, r0
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	1ad3      	subs	r3, r2, r3
 8008882:	2b02      	cmp	r3, #2
 8008884:	d901      	bls.n	800888a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8008886:	2303      	movs	r3, #3
 8008888:	e310      	b.n	8008eac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800888a:	4b3a      	ldr	r3, [pc, #232]	@ (8008974 <HAL_RCC_OscConfig+0x270>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f003 0302 	and.w	r3, r3, #2
 8008892:	2b00      	cmp	r3, #0
 8008894:	d0f0      	beq.n	8008878 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008896:	4b37      	ldr	r3, [pc, #220]	@ (8008974 <HAL_RCC_OscConfig+0x270>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a36      	ldr	r2, [pc, #216]	@ (8008974 <HAL_RCC_OscConfig+0x270>)
 800889c:	f043 0308 	orr.w	r3, r3, #8
 80088a0:	6013      	str	r3, [r2, #0]
 80088a2:	4b34      	ldr	r3, [pc, #208]	@ (8008974 <HAL_RCC_OscConfig+0x270>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a1b      	ldr	r3, [r3, #32]
 80088ae:	4931      	ldr	r1, [pc, #196]	@ (8008974 <HAL_RCC_OscConfig+0x270>)
 80088b0:	4313      	orrs	r3, r2
 80088b2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80088b4:	4b2f      	ldr	r3, [pc, #188]	@ (8008974 <HAL_RCC_OscConfig+0x270>)
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	69db      	ldr	r3, [r3, #28]
 80088c0:	021b      	lsls	r3, r3, #8
 80088c2:	492c      	ldr	r1, [pc, #176]	@ (8008974 <HAL_RCC_OscConfig+0x270>)
 80088c4:	4313      	orrs	r3, r2
 80088c6:	604b      	str	r3, [r1, #4]
 80088c8:	e01a      	b.n	8008900 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80088ca:	4b2a      	ldr	r3, [pc, #168]	@ (8008974 <HAL_RCC_OscConfig+0x270>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a29      	ldr	r2, [pc, #164]	@ (8008974 <HAL_RCC_OscConfig+0x270>)
 80088d0:	f023 0301 	bic.w	r3, r3, #1
 80088d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80088d6:	f7fd feb3 	bl	8006640 <HAL_GetTick>
 80088da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80088dc:	e008      	b.n	80088f0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80088de:	f7fd feaf 	bl	8006640 <HAL_GetTick>
 80088e2:	4602      	mov	r2, r0
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	1ad3      	subs	r3, r2, r3
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d901      	bls.n	80088f0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80088ec:	2303      	movs	r3, #3
 80088ee:	e2dd      	b.n	8008eac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80088f0:	4b20      	ldr	r3, [pc, #128]	@ (8008974 <HAL_RCC_OscConfig+0x270>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 0302 	and.w	r3, r3, #2
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d1f0      	bne.n	80088de <HAL_RCC_OscConfig+0x1da>
 80088fc:	e000      	b.n	8008900 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80088fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f003 0301 	and.w	r3, r3, #1
 8008908:	2b00      	cmp	r3, #0
 800890a:	d074      	beq.n	80089f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	2b08      	cmp	r3, #8
 8008910:	d005      	beq.n	800891e <HAL_RCC_OscConfig+0x21a>
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	2b0c      	cmp	r3, #12
 8008916:	d10e      	bne.n	8008936 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	2b03      	cmp	r3, #3
 800891c:	d10b      	bne.n	8008936 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800891e:	4b15      	ldr	r3, [pc, #84]	@ (8008974 <HAL_RCC_OscConfig+0x270>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008926:	2b00      	cmp	r3, #0
 8008928:	d064      	beq.n	80089f4 <HAL_RCC_OscConfig+0x2f0>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d160      	bne.n	80089f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	e2ba      	b.n	8008eac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800893e:	d106      	bne.n	800894e <HAL_RCC_OscConfig+0x24a>
 8008940:	4b0c      	ldr	r3, [pc, #48]	@ (8008974 <HAL_RCC_OscConfig+0x270>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a0b      	ldr	r2, [pc, #44]	@ (8008974 <HAL_RCC_OscConfig+0x270>)
 8008946:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800894a:	6013      	str	r3, [r2, #0]
 800894c:	e026      	b.n	800899c <HAL_RCC_OscConfig+0x298>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008956:	d115      	bne.n	8008984 <HAL_RCC_OscConfig+0x280>
 8008958:	4b06      	ldr	r3, [pc, #24]	@ (8008974 <HAL_RCC_OscConfig+0x270>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a05      	ldr	r2, [pc, #20]	@ (8008974 <HAL_RCC_OscConfig+0x270>)
 800895e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008962:	6013      	str	r3, [r2, #0]
 8008964:	4b03      	ldr	r3, [pc, #12]	@ (8008974 <HAL_RCC_OscConfig+0x270>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a02      	ldr	r2, [pc, #8]	@ (8008974 <HAL_RCC_OscConfig+0x270>)
 800896a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800896e:	6013      	str	r3, [r2, #0]
 8008970:	e014      	b.n	800899c <HAL_RCC_OscConfig+0x298>
 8008972:	bf00      	nop
 8008974:	40021000 	.word	0x40021000
 8008978:	0801f278 	.word	0x0801f278
 800897c:	20000000 	.word	0x20000000
 8008980:	20000004 	.word	0x20000004
 8008984:	4ba0      	ldr	r3, [pc, #640]	@ (8008c08 <HAL_RCC_OscConfig+0x504>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a9f      	ldr	r2, [pc, #636]	@ (8008c08 <HAL_RCC_OscConfig+0x504>)
 800898a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800898e:	6013      	str	r3, [r2, #0]
 8008990:	4b9d      	ldr	r3, [pc, #628]	@ (8008c08 <HAL_RCC_OscConfig+0x504>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a9c      	ldr	r2, [pc, #624]	@ (8008c08 <HAL_RCC_OscConfig+0x504>)
 8008996:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800899a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d013      	beq.n	80089cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089a4:	f7fd fe4c 	bl	8006640 <HAL_GetTick>
 80089a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80089aa:	e008      	b.n	80089be <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089ac:	f7fd fe48 	bl	8006640 <HAL_GetTick>
 80089b0:	4602      	mov	r2, r0
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	1ad3      	subs	r3, r2, r3
 80089b6:	2b64      	cmp	r3, #100	@ 0x64
 80089b8:	d901      	bls.n	80089be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80089ba:	2303      	movs	r3, #3
 80089bc:	e276      	b.n	8008eac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80089be:	4b92      	ldr	r3, [pc, #584]	@ (8008c08 <HAL_RCC_OscConfig+0x504>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d0f0      	beq.n	80089ac <HAL_RCC_OscConfig+0x2a8>
 80089ca:	e014      	b.n	80089f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089cc:	f7fd fe38 	bl	8006640 <HAL_GetTick>
 80089d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80089d2:	e008      	b.n	80089e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089d4:	f7fd fe34 	bl	8006640 <HAL_GetTick>
 80089d8:	4602      	mov	r2, r0
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	1ad3      	subs	r3, r2, r3
 80089de:	2b64      	cmp	r3, #100	@ 0x64
 80089e0:	d901      	bls.n	80089e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80089e2:	2303      	movs	r3, #3
 80089e4:	e262      	b.n	8008eac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80089e6:	4b88      	ldr	r3, [pc, #544]	@ (8008c08 <HAL_RCC_OscConfig+0x504>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1f0      	bne.n	80089d4 <HAL_RCC_OscConfig+0x2d0>
 80089f2:	e000      	b.n	80089f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f003 0302 	and.w	r3, r3, #2
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d060      	beq.n	8008ac4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008a02:	69bb      	ldr	r3, [r7, #24]
 8008a04:	2b04      	cmp	r3, #4
 8008a06:	d005      	beq.n	8008a14 <HAL_RCC_OscConfig+0x310>
 8008a08:	69bb      	ldr	r3, [r7, #24]
 8008a0a:	2b0c      	cmp	r3, #12
 8008a0c:	d119      	bne.n	8008a42 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	d116      	bne.n	8008a42 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a14:	4b7c      	ldr	r3, [pc, #496]	@ (8008c08 <HAL_RCC_OscConfig+0x504>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d005      	beq.n	8008a2c <HAL_RCC_OscConfig+0x328>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d101      	bne.n	8008a2c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e23f      	b.n	8008eac <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a2c:	4b76      	ldr	r3, [pc, #472]	@ (8008c08 <HAL_RCC_OscConfig+0x504>)
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	691b      	ldr	r3, [r3, #16]
 8008a38:	061b      	lsls	r3, r3, #24
 8008a3a:	4973      	ldr	r1, [pc, #460]	@ (8008c08 <HAL_RCC_OscConfig+0x504>)
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a40:	e040      	b.n	8008ac4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d023      	beq.n	8008a92 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008a4a:	4b6f      	ldr	r3, [pc, #444]	@ (8008c08 <HAL_RCC_OscConfig+0x504>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a6e      	ldr	r2, [pc, #440]	@ (8008c08 <HAL_RCC_OscConfig+0x504>)
 8008a50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a56:	f7fd fdf3 	bl	8006640 <HAL_GetTick>
 8008a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008a5c:	e008      	b.n	8008a70 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a5e:	f7fd fdef 	bl	8006640 <HAL_GetTick>
 8008a62:	4602      	mov	r2, r0
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	1ad3      	subs	r3, r2, r3
 8008a68:	2b02      	cmp	r3, #2
 8008a6a:	d901      	bls.n	8008a70 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008a6c:	2303      	movs	r3, #3
 8008a6e:	e21d      	b.n	8008eac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008a70:	4b65      	ldr	r3, [pc, #404]	@ (8008c08 <HAL_RCC_OscConfig+0x504>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d0f0      	beq.n	8008a5e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a7c:	4b62      	ldr	r3, [pc, #392]	@ (8008c08 <HAL_RCC_OscConfig+0x504>)
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	061b      	lsls	r3, r3, #24
 8008a8a:	495f      	ldr	r1, [pc, #380]	@ (8008c08 <HAL_RCC_OscConfig+0x504>)
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	604b      	str	r3, [r1, #4]
 8008a90:	e018      	b.n	8008ac4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008a92:	4b5d      	ldr	r3, [pc, #372]	@ (8008c08 <HAL_RCC_OscConfig+0x504>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a5c      	ldr	r2, [pc, #368]	@ (8008c08 <HAL_RCC_OscConfig+0x504>)
 8008a98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a9e:	f7fd fdcf 	bl	8006640 <HAL_GetTick>
 8008aa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008aa4:	e008      	b.n	8008ab8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008aa6:	f7fd fdcb 	bl	8006640 <HAL_GetTick>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	1ad3      	subs	r3, r2, r3
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	d901      	bls.n	8008ab8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008ab4:	2303      	movs	r3, #3
 8008ab6:	e1f9      	b.n	8008eac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008ab8:	4b53      	ldr	r3, [pc, #332]	@ (8008c08 <HAL_RCC_OscConfig+0x504>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d1f0      	bne.n	8008aa6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f003 0308 	and.w	r3, r3, #8
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d03c      	beq.n	8008b4a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	695b      	ldr	r3, [r3, #20]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d01c      	beq.n	8008b12 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008ad8:	4b4b      	ldr	r3, [pc, #300]	@ (8008c08 <HAL_RCC_OscConfig+0x504>)
 8008ada:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008ade:	4a4a      	ldr	r2, [pc, #296]	@ (8008c08 <HAL_RCC_OscConfig+0x504>)
 8008ae0:	f043 0301 	orr.w	r3, r3, #1
 8008ae4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ae8:	f7fd fdaa 	bl	8006640 <HAL_GetTick>
 8008aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008aee:	e008      	b.n	8008b02 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008af0:	f7fd fda6 	bl	8006640 <HAL_GetTick>
 8008af4:	4602      	mov	r2, r0
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	1ad3      	subs	r3, r2, r3
 8008afa:	2b02      	cmp	r3, #2
 8008afc:	d901      	bls.n	8008b02 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008afe:	2303      	movs	r3, #3
 8008b00:	e1d4      	b.n	8008eac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008b02:	4b41      	ldr	r3, [pc, #260]	@ (8008c08 <HAL_RCC_OscConfig+0x504>)
 8008b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b08:	f003 0302 	and.w	r3, r3, #2
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d0ef      	beq.n	8008af0 <HAL_RCC_OscConfig+0x3ec>
 8008b10:	e01b      	b.n	8008b4a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b12:	4b3d      	ldr	r3, [pc, #244]	@ (8008c08 <HAL_RCC_OscConfig+0x504>)
 8008b14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b18:	4a3b      	ldr	r2, [pc, #236]	@ (8008c08 <HAL_RCC_OscConfig+0x504>)
 8008b1a:	f023 0301 	bic.w	r3, r3, #1
 8008b1e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b22:	f7fd fd8d 	bl	8006640 <HAL_GetTick>
 8008b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008b28:	e008      	b.n	8008b3c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b2a:	f7fd fd89 	bl	8006640 <HAL_GetTick>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	1ad3      	subs	r3, r2, r3
 8008b34:	2b02      	cmp	r3, #2
 8008b36:	d901      	bls.n	8008b3c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8008b38:	2303      	movs	r3, #3
 8008b3a:	e1b7      	b.n	8008eac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008b3c:	4b32      	ldr	r3, [pc, #200]	@ (8008c08 <HAL_RCC_OscConfig+0x504>)
 8008b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b42:	f003 0302 	and.w	r3, r3, #2
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d1ef      	bne.n	8008b2a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f003 0304 	and.w	r3, r3, #4
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	f000 80a6 	beq.w	8008ca4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008b5c:	4b2a      	ldr	r3, [pc, #168]	@ (8008c08 <HAL_RCC_OscConfig+0x504>)
 8008b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d10d      	bne.n	8008b84 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b68:	4b27      	ldr	r3, [pc, #156]	@ (8008c08 <HAL_RCC_OscConfig+0x504>)
 8008b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b6c:	4a26      	ldr	r2, [pc, #152]	@ (8008c08 <HAL_RCC_OscConfig+0x504>)
 8008b6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b72:	6593      	str	r3, [r2, #88]	@ 0x58
 8008b74:	4b24      	ldr	r3, [pc, #144]	@ (8008c08 <HAL_RCC_OscConfig+0x504>)
 8008b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b7c:	60bb      	str	r3, [r7, #8]
 8008b7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008b80:	2301      	movs	r3, #1
 8008b82:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b84:	4b21      	ldr	r3, [pc, #132]	@ (8008c0c <HAL_RCC_OscConfig+0x508>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d118      	bne.n	8008bc2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008b90:	4b1e      	ldr	r3, [pc, #120]	@ (8008c0c <HAL_RCC_OscConfig+0x508>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a1d      	ldr	r2, [pc, #116]	@ (8008c0c <HAL_RCC_OscConfig+0x508>)
 8008b96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008b9c:	f7fd fd50 	bl	8006640 <HAL_GetTick>
 8008ba0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ba2:	e008      	b.n	8008bb6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ba4:	f7fd fd4c 	bl	8006640 <HAL_GetTick>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	1ad3      	subs	r3, r2, r3
 8008bae:	2b02      	cmp	r3, #2
 8008bb0:	d901      	bls.n	8008bb6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8008bb2:	2303      	movs	r3, #3
 8008bb4:	e17a      	b.n	8008eac <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008bb6:	4b15      	ldr	r3, [pc, #84]	@ (8008c0c <HAL_RCC_OscConfig+0x508>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d0f0      	beq.n	8008ba4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d108      	bne.n	8008bdc <HAL_RCC_OscConfig+0x4d8>
 8008bca:	4b0f      	ldr	r3, [pc, #60]	@ (8008c08 <HAL_RCC_OscConfig+0x504>)
 8008bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8008c08 <HAL_RCC_OscConfig+0x504>)
 8008bd2:	f043 0301 	orr.w	r3, r3, #1
 8008bd6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008bda:	e029      	b.n	8008c30 <HAL_RCC_OscConfig+0x52c>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	2b05      	cmp	r3, #5
 8008be2:	d115      	bne.n	8008c10 <HAL_RCC_OscConfig+0x50c>
 8008be4:	4b08      	ldr	r3, [pc, #32]	@ (8008c08 <HAL_RCC_OscConfig+0x504>)
 8008be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bea:	4a07      	ldr	r2, [pc, #28]	@ (8008c08 <HAL_RCC_OscConfig+0x504>)
 8008bec:	f043 0304 	orr.w	r3, r3, #4
 8008bf0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008bf4:	4b04      	ldr	r3, [pc, #16]	@ (8008c08 <HAL_RCC_OscConfig+0x504>)
 8008bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bfa:	4a03      	ldr	r2, [pc, #12]	@ (8008c08 <HAL_RCC_OscConfig+0x504>)
 8008bfc:	f043 0301 	orr.w	r3, r3, #1
 8008c00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008c04:	e014      	b.n	8008c30 <HAL_RCC_OscConfig+0x52c>
 8008c06:	bf00      	nop
 8008c08:	40021000 	.word	0x40021000
 8008c0c:	40007000 	.word	0x40007000
 8008c10:	4b9c      	ldr	r3, [pc, #624]	@ (8008e84 <HAL_RCC_OscConfig+0x780>)
 8008c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c16:	4a9b      	ldr	r2, [pc, #620]	@ (8008e84 <HAL_RCC_OscConfig+0x780>)
 8008c18:	f023 0301 	bic.w	r3, r3, #1
 8008c1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008c20:	4b98      	ldr	r3, [pc, #608]	@ (8008e84 <HAL_RCC_OscConfig+0x780>)
 8008c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c26:	4a97      	ldr	r2, [pc, #604]	@ (8008e84 <HAL_RCC_OscConfig+0x780>)
 8008c28:	f023 0304 	bic.w	r3, r3, #4
 8008c2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d016      	beq.n	8008c66 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c38:	f7fd fd02 	bl	8006640 <HAL_GetTick>
 8008c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c3e:	e00a      	b.n	8008c56 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c40:	f7fd fcfe 	bl	8006640 <HAL_GetTick>
 8008c44:	4602      	mov	r2, r0
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	1ad3      	subs	r3, r2, r3
 8008c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d901      	bls.n	8008c56 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8008c52:	2303      	movs	r3, #3
 8008c54:	e12a      	b.n	8008eac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c56:	4b8b      	ldr	r3, [pc, #556]	@ (8008e84 <HAL_RCC_OscConfig+0x780>)
 8008c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c5c:	f003 0302 	and.w	r3, r3, #2
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d0ed      	beq.n	8008c40 <HAL_RCC_OscConfig+0x53c>
 8008c64:	e015      	b.n	8008c92 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c66:	f7fd fceb 	bl	8006640 <HAL_GetTick>
 8008c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008c6c:	e00a      	b.n	8008c84 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c6e:	f7fd fce7 	bl	8006640 <HAL_GetTick>
 8008c72:	4602      	mov	r2, r0
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	1ad3      	subs	r3, r2, r3
 8008c78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d901      	bls.n	8008c84 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008c80:	2303      	movs	r3, #3
 8008c82:	e113      	b.n	8008eac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008c84:	4b7f      	ldr	r3, [pc, #508]	@ (8008e84 <HAL_RCC_OscConfig+0x780>)
 8008c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c8a:	f003 0302 	and.w	r3, r3, #2
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d1ed      	bne.n	8008c6e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008c92:	7ffb      	ldrb	r3, [r7, #31]
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d105      	bne.n	8008ca4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c98:	4b7a      	ldr	r3, [pc, #488]	@ (8008e84 <HAL_RCC_OscConfig+0x780>)
 8008c9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c9c:	4a79      	ldr	r2, [pc, #484]	@ (8008e84 <HAL_RCC_OscConfig+0x780>)
 8008c9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ca2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	f000 80fe 	beq.w	8008eaa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	f040 80d0 	bne.w	8008e58 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008cb8:	4b72      	ldr	r3, [pc, #456]	@ (8008e84 <HAL_RCC_OscConfig+0x780>)
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	f003 0203 	and.w	r2, r3, #3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d130      	bne.n	8008d2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d127      	bne.n	8008d2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ce8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d11f      	bne.n	8008d2e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008cf8:	2a07      	cmp	r2, #7
 8008cfa:	bf14      	ite	ne
 8008cfc:	2201      	movne	r2, #1
 8008cfe:	2200      	moveq	r2, #0
 8008d00:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d113      	bne.n	8008d2e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d10:	085b      	lsrs	r3, r3, #1
 8008d12:	3b01      	subs	r3, #1
 8008d14:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d109      	bne.n	8008d2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d24:	085b      	lsrs	r3, r3, #1
 8008d26:	3b01      	subs	r3, #1
 8008d28:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d06e      	beq.n	8008e0c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	2b0c      	cmp	r3, #12
 8008d32:	d069      	beq.n	8008e08 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008d34:	4b53      	ldr	r3, [pc, #332]	@ (8008e84 <HAL_RCC_OscConfig+0x780>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d105      	bne.n	8008d4c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008d40:	4b50      	ldr	r3, [pc, #320]	@ (8008e84 <HAL_RCC_OscConfig+0x780>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d001      	beq.n	8008d50 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e0ad      	b.n	8008eac <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008d50:	4b4c      	ldr	r3, [pc, #304]	@ (8008e84 <HAL_RCC_OscConfig+0x780>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a4b      	ldr	r2, [pc, #300]	@ (8008e84 <HAL_RCC_OscConfig+0x780>)
 8008d56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d5a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008d5c:	f7fd fc70 	bl	8006640 <HAL_GetTick>
 8008d60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d62:	e008      	b.n	8008d76 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d64:	f7fd fc6c 	bl	8006640 <HAL_GetTick>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	1ad3      	subs	r3, r2, r3
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d901      	bls.n	8008d76 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8008d72:	2303      	movs	r3, #3
 8008d74:	e09a      	b.n	8008eac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d76:	4b43      	ldr	r3, [pc, #268]	@ (8008e84 <HAL_RCC_OscConfig+0x780>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d1f0      	bne.n	8008d64 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d82:	4b40      	ldr	r3, [pc, #256]	@ (8008e84 <HAL_RCC_OscConfig+0x780>)
 8008d84:	68da      	ldr	r2, [r3, #12]
 8008d86:	4b40      	ldr	r3, [pc, #256]	@ (8008e88 <HAL_RCC_OscConfig+0x784>)
 8008d88:	4013      	ands	r3, r2
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008d92:	3a01      	subs	r2, #1
 8008d94:	0112      	lsls	r2, r2, #4
 8008d96:	4311      	orrs	r1, r2
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008d9c:	0212      	lsls	r2, r2, #8
 8008d9e:	4311      	orrs	r1, r2
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008da4:	0852      	lsrs	r2, r2, #1
 8008da6:	3a01      	subs	r2, #1
 8008da8:	0552      	lsls	r2, r2, #21
 8008daa:	4311      	orrs	r1, r2
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008db0:	0852      	lsrs	r2, r2, #1
 8008db2:	3a01      	subs	r2, #1
 8008db4:	0652      	lsls	r2, r2, #25
 8008db6:	4311      	orrs	r1, r2
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008dbc:	0912      	lsrs	r2, r2, #4
 8008dbe:	0452      	lsls	r2, r2, #17
 8008dc0:	430a      	orrs	r2, r1
 8008dc2:	4930      	ldr	r1, [pc, #192]	@ (8008e84 <HAL_RCC_OscConfig+0x780>)
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008dc8:	4b2e      	ldr	r3, [pc, #184]	@ (8008e84 <HAL_RCC_OscConfig+0x780>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a2d      	ldr	r2, [pc, #180]	@ (8008e84 <HAL_RCC_OscConfig+0x780>)
 8008dce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008dd2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008dd4:	4b2b      	ldr	r3, [pc, #172]	@ (8008e84 <HAL_RCC_OscConfig+0x780>)
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	4a2a      	ldr	r2, [pc, #168]	@ (8008e84 <HAL_RCC_OscConfig+0x780>)
 8008dda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008dde:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008de0:	f7fd fc2e 	bl	8006640 <HAL_GetTick>
 8008de4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008de6:	e008      	b.n	8008dfa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008de8:	f7fd fc2a 	bl	8006640 <HAL_GetTick>
 8008dec:	4602      	mov	r2, r0
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	1ad3      	subs	r3, r2, r3
 8008df2:	2b02      	cmp	r3, #2
 8008df4:	d901      	bls.n	8008dfa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8008df6:	2303      	movs	r3, #3
 8008df8:	e058      	b.n	8008eac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008dfa:	4b22      	ldr	r3, [pc, #136]	@ (8008e84 <HAL_RCC_OscConfig+0x780>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d0f0      	beq.n	8008de8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008e06:	e050      	b.n	8008eaa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e04f      	b.n	8008eac <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008e0c:	4b1d      	ldr	r3, [pc, #116]	@ (8008e84 <HAL_RCC_OscConfig+0x780>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d148      	bne.n	8008eaa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008e18:	4b1a      	ldr	r3, [pc, #104]	@ (8008e84 <HAL_RCC_OscConfig+0x780>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a19      	ldr	r2, [pc, #100]	@ (8008e84 <HAL_RCC_OscConfig+0x780>)
 8008e1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008e22:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008e24:	4b17      	ldr	r3, [pc, #92]	@ (8008e84 <HAL_RCC_OscConfig+0x780>)
 8008e26:	68db      	ldr	r3, [r3, #12]
 8008e28:	4a16      	ldr	r2, [pc, #88]	@ (8008e84 <HAL_RCC_OscConfig+0x780>)
 8008e2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008e2e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008e30:	f7fd fc06 	bl	8006640 <HAL_GetTick>
 8008e34:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008e36:	e008      	b.n	8008e4a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e38:	f7fd fc02 	bl	8006640 <HAL_GetTick>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	1ad3      	subs	r3, r2, r3
 8008e42:	2b02      	cmp	r3, #2
 8008e44:	d901      	bls.n	8008e4a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8008e46:	2303      	movs	r3, #3
 8008e48:	e030      	b.n	8008eac <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8008e84 <HAL_RCC_OscConfig+0x780>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d0f0      	beq.n	8008e38 <HAL_RCC_OscConfig+0x734>
 8008e56:	e028      	b.n	8008eaa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008e58:	69bb      	ldr	r3, [r7, #24]
 8008e5a:	2b0c      	cmp	r3, #12
 8008e5c:	d023      	beq.n	8008ea6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e5e:	4b09      	ldr	r3, [pc, #36]	@ (8008e84 <HAL_RCC_OscConfig+0x780>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a08      	ldr	r2, [pc, #32]	@ (8008e84 <HAL_RCC_OscConfig+0x780>)
 8008e64:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008e68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e6a:	f7fd fbe9 	bl	8006640 <HAL_GetTick>
 8008e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e70:	e00c      	b.n	8008e8c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e72:	f7fd fbe5 	bl	8006640 <HAL_GetTick>
 8008e76:	4602      	mov	r2, r0
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	1ad3      	subs	r3, r2, r3
 8008e7c:	2b02      	cmp	r3, #2
 8008e7e:	d905      	bls.n	8008e8c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8008e80:	2303      	movs	r3, #3
 8008e82:	e013      	b.n	8008eac <HAL_RCC_OscConfig+0x7a8>
 8008e84:	40021000 	.word	0x40021000
 8008e88:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e8c:	4b09      	ldr	r3, [pc, #36]	@ (8008eb4 <HAL_RCC_OscConfig+0x7b0>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d1ec      	bne.n	8008e72 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008e98:	4b06      	ldr	r3, [pc, #24]	@ (8008eb4 <HAL_RCC_OscConfig+0x7b0>)
 8008e9a:	68da      	ldr	r2, [r3, #12]
 8008e9c:	4905      	ldr	r1, [pc, #20]	@ (8008eb4 <HAL_RCC_OscConfig+0x7b0>)
 8008e9e:	4b06      	ldr	r3, [pc, #24]	@ (8008eb8 <HAL_RCC_OscConfig+0x7b4>)
 8008ea0:	4013      	ands	r3, r2
 8008ea2:	60cb      	str	r3, [r1, #12]
 8008ea4:	e001      	b.n	8008eaa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e000      	b.n	8008eac <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8008eaa:	2300      	movs	r3, #0
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3720      	adds	r7, #32
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	40021000 	.word	0x40021000
 8008eb8:	feeefffc 	.word	0xfeeefffc

08008ebc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d101      	bne.n	8008ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	e0e7      	b.n	80090a0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008ed0:	4b75      	ldr	r3, [pc, #468]	@ (80090a8 <HAL_RCC_ClockConfig+0x1ec>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f003 0307 	and.w	r3, r3, #7
 8008ed8:	683a      	ldr	r2, [r7, #0]
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d910      	bls.n	8008f00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ede:	4b72      	ldr	r3, [pc, #456]	@ (80090a8 <HAL_RCC_ClockConfig+0x1ec>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f023 0207 	bic.w	r2, r3, #7
 8008ee6:	4970      	ldr	r1, [pc, #448]	@ (80090a8 <HAL_RCC_ClockConfig+0x1ec>)
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008eee:	4b6e      	ldr	r3, [pc, #440]	@ (80090a8 <HAL_RCC_ClockConfig+0x1ec>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f003 0307 	and.w	r3, r3, #7
 8008ef6:	683a      	ldr	r2, [r7, #0]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d001      	beq.n	8008f00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	e0cf      	b.n	80090a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f003 0302 	and.w	r3, r3, #2
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d010      	beq.n	8008f2e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	689a      	ldr	r2, [r3, #8]
 8008f10:	4b66      	ldr	r3, [pc, #408]	@ (80090ac <HAL_RCC_ClockConfig+0x1f0>)
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d908      	bls.n	8008f2e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f1c:	4b63      	ldr	r3, [pc, #396]	@ (80090ac <HAL_RCC_ClockConfig+0x1f0>)
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	4960      	ldr	r1, [pc, #384]	@ (80090ac <HAL_RCC_ClockConfig+0x1f0>)
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f003 0301 	and.w	r3, r3, #1
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d04c      	beq.n	8008fd4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	2b03      	cmp	r3, #3
 8008f40:	d107      	bne.n	8008f52 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f42:	4b5a      	ldr	r3, [pc, #360]	@ (80090ac <HAL_RCC_ClockConfig+0x1f0>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d121      	bne.n	8008f92 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e0a6      	b.n	80090a0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	d107      	bne.n	8008f6a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008f5a:	4b54      	ldr	r3, [pc, #336]	@ (80090ac <HAL_RCC_ClockConfig+0x1f0>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d115      	bne.n	8008f92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
 8008f68:	e09a      	b.n	80090a0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d107      	bne.n	8008f82 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008f72:	4b4e      	ldr	r3, [pc, #312]	@ (80090ac <HAL_RCC_ClockConfig+0x1f0>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f003 0302 	and.w	r3, r3, #2
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d109      	bne.n	8008f92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e08e      	b.n	80090a0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008f82:	4b4a      	ldr	r3, [pc, #296]	@ (80090ac <HAL_RCC_ClockConfig+0x1f0>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d101      	bne.n	8008f92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e086      	b.n	80090a0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008f92:	4b46      	ldr	r3, [pc, #280]	@ (80090ac <HAL_RCC_ClockConfig+0x1f0>)
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	f023 0203 	bic.w	r2, r3, #3
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	4943      	ldr	r1, [pc, #268]	@ (80090ac <HAL_RCC_ClockConfig+0x1f0>)
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fa4:	f7fd fb4c 	bl	8006640 <HAL_GetTick>
 8008fa8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008faa:	e00a      	b.n	8008fc2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008fac:	f7fd fb48 	bl	8006640 <HAL_GetTick>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	1ad3      	subs	r3, r2, r3
 8008fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d901      	bls.n	8008fc2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8008fbe:	2303      	movs	r3, #3
 8008fc0:	e06e      	b.n	80090a0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fc2:	4b3a      	ldr	r3, [pc, #232]	@ (80090ac <HAL_RCC_ClockConfig+0x1f0>)
 8008fc4:	689b      	ldr	r3, [r3, #8]
 8008fc6:	f003 020c 	and.w	r2, r3, #12
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d1eb      	bne.n	8008fac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f003 0302 	and.w	r3, r3, #2
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d010      	beq.n	8009002 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	689a      	ldr	r2, [r3, #8]
 8008fe4:	4b31      	ldr	r3, [pc, #196]	@ (80090ac <HAL_RCC_ClockConfig+0x1f0>)
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d208      	bcs.n	8009002 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ff0:	4b2e      	ldr	r3, [pc, #184]	@ (80090ac <HAL_RCC_ClockConfig+0x1f0>)
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	492b      	ldr	r1, [pc, #172]	@ (80090ac <HAL_RCC_ClockConfig+0x1f0>)
 8008ffe:	4313      	orrs	r3, r2
 8009000:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009002:	4b29      	ldr	r3, [pc, #164]	@ (80090a8 <HAL_RCC_ClockConfig+0x1ec>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f003 0307 	and.w	r3, r3, #7
 800900a:	683a      	ldr	r2, [r7, #0]
 800900c:	429a      	cmp	r2, r3
 800900e:	d210      	bcs.n	8009032 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009010:	4b25      	ldr	r3, [pc, #148]	@ (80090a8 <HAL_RCC_ClockConfig+0x1ec>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f023 0207 	bic.w	r2, r3, #7
 8009018:	4923      	ldr	r1, [pc, #140]	@ (80090a8 <HAL_RCC_ClockConfig+0x1ec>)
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	4313      	orrs	r3, r2
 800901e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009020:	4b21      	ldr	r3, [pc, #132]	@ (80090a8 <HAL_RCC_ClockConfig+0x1ec>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f003 0307 	and.w	r3, r3, #7
 8009028:	683a      	ldr	r2, [r7, #0]
 800902a:	429a      	cmp	r2, r3
 800902c:	d001      	beq.n	8009032 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	e036      	b.n	80090a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f003 0304 	and.w	r3, r3, #4
 800903a:	2b00      	cmp	r3, #0
 800903c:	d008      	beq.n	8009050 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800903e:	4b1b      	ldr	r3, [pc, #108]	@ (80090ac <HAL_RCC_ClockConfig+0x1f0>)
 8009040:	689b      	ldr	r3, [r3, #8]
 8009042:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	4918      	ldr	r1, [pc, #96]	@ (80090ac <HAL_RCC_ClockConfig+0x1f0>)
 800904c:	4313      	orrs	r3, r2
 800904e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f003 0308 	and.w	r3, r3, #8
 8009058:	2b00      	cmp	r3, #0
 800905a:	d009      	beq.n	8009070 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800905c:	4b13      	ldr	r3, [pc, #76]	@ (80090ac <HAL_RCC_ClockConfig+0x1f0>)
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	691b      	ldr	r3, [r3, #16]
 8009068:	00db      	lsls	r3, r3, #3
 800906a:	4910      	ldr	r1, [pc, #64]	@ (80090ac <HAL_RCC_ClockConfig+0x1f0>)
 800906c:	4313      	orrs	r3, r2
 800906e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009070:	f000 f824 	bl	80090bc <HAL_RCC_GetSysClockFreq>
 8009074:	4602      	mov	r2, r0
 8009076:	4b0d      	ldr	r3, [pc, #52]	@ (80090ac <HAL_RCC_ClockConfig+0x1f0>)
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	091b      	lsrs	r3, r3, #4
 800907c:	f003 030f 	and.w	r3, r3, #15
 8009080:	490b      	ldr	r1, [pc, #44]	@ (80090b0 <HAL_RCC_ClockConfig+0x1f4>)
 8009082:	5ccb      	ldrb	r3, [r1, r3]
 8009084:	f003 031f 	and.w	r3, r3, #31
 8009088:	fa22 f303 	lsr.w	r3, r2, r3
 800908c:	4a09      	ldr	r2, [pc, #36]	@ (80090b4 <HAL_RCC_ClockConfig+0x1f8>)
 800908e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009090:	4b09      	ldr	r3, [pc, #36]	@ (80090b8 <HAL_RCC_ClockConfig+0x1fc>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4618      	mov	r0, r3
 8009096:	f7fd f8cf 	bl	8006238 <HAL_InitTick>
 800909a:	4603      	mov	r3, r0
 800909c:	72fb      	strb	r3, [r7, #11]

  return status;
 800909e:	7afb      	ldrb	r3, [r7, #11]
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3710      	adds	r7, #16
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}
 80090a8:	40022000 	.word	0x40022000
 80090ac:	40021000 	.word	0x40021000
 80090b0:	0801f278 	.word	0x0801f278
 80090b4:	20000000 	.word	0x20000000
 80090b8:	20000004 	.word	0x20000004

080090bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80090bc:	b480      	push	{r7}
 80090be:	b089      	sub	sp, #36	@ 0x24
 80090c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80090c2:	2300      	movs	r3, #0
 80090c4:	61fb      	str	r3, [r7, #28]
 80090c6:	2300      	movs	r3, #0
 80090c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80090ca:	4b3e      	ldr	r3, [pc, #248]	@ (80091c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	f003 030c 	and.w	r3, r3, #12
 80090d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80090d4:	4b3b      	ldr	r3, [pc, #236]	@ (80091c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	f003 0303 	and.w	r3, r3, #3
 80090dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d005      	beq.n	80090f0 <HAL_RCC_GetSysClockFreq+0x34>
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	2b0c      	cmp	r3, #12
 80090e8:	d121      	bne.n	800912e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d11e      	bne.n	800912e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80090f0:	4b34      	ldr	r3, [pc, #208]	@ (80091c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 0308 	and.w	r3, r3, #8
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d107      	bne.n	800910c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80090fc:	4b31      	ldr	r3, [pc, #196]	@ (80091c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80090fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009102:	0a1b      	lsrs	r3, r3, #8
 8009104:	f003 030f 	and.w	r3, r3, #15
 8009108:	61fb      	str	r3, [r7, #28]
 800910a:	e005      	b.n	8009118 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800910c:	4b2d      	ldr	r3, [pc, #180]	@ (80091c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	091b      	lsrs	r3, r3, #4
 8009112:	f003 030f 	and.w	r3, r3, #15
 8009116:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009118:	4a2b      	ldr	r2, [pc, #172]	@ (80091c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009120:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d10d      	bne.n	8009144 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009128:	69fb      	ldr	r3, [r7, #28]
 800912a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800912c:	e00a      	b.n	8009144 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	2b04      	cmp	r3, #4
 8009132:	d102      	bne.n	800913a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009134:	4b25      	ldr	r3, [pc, #148]	@ (80091cc <HAL_RCC_GetSysClockFreq+0x110>)
 8009136:	61bb      	str	r3, [r7, #24]
 8009138:	e004      	b.n	8009144 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	2b08      	cmp	r3, #8
 800913e:	d101      	bne.n	8009144 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009140:	4b23      	ldr	r3, [pc, #140]	@ (80091d0 <HAL_RCC_GetSysClockFreq+0x114>)
 8009142:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	2b0c      	cmp	r3, #12
 8009148:	d134      	bne.n	80091b4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800914a:	4b1e      	ldr	r3, [pc, #120]	@ (80091c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	f003 0303 	and.w	r3, r3, #3
 8009152:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	2b02      	cmp	r3, #2
 8009158:	d003      	beq.n	8009162 <HAL_RCC_GetSysClockFreq+0xa6>
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	2b03      	cmp	r3, #3
 800915e:	d003      	beq.n	8009168 <HAL_RCC_GetSysClockFreq+0xac>
 8009160:	e005      	b.n	800916e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009162:	4b1a      	ldr	r3, [pc, #104]	@ (80091cc <HAL_RCC_GetSysClockFreq+0x110>)
 8009164:	617b      	str	r3, [r7, #20]
      break;
 8009166:	e005      	b.n	8009174 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8009168:	4b19      	ldr	r3, [pc, #100]	@ (80091d0 <HAL_RCC_GetSysClockFreq+0x114>)
 800916a:	617b      	str	r3, [r7, #20]
      break;
 800916c:	e002      	b.n	8009174 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800916e:	69fb      	ldr	r3, [r7, #28]
 8009170:	617b      	str	r3, [r7, #20]
      break;
 8009172:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009174:	4b13      	ldr	r3, [pc, #76]	@ (80091c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	091b      	lsrs	r3, r3, #4
 800917a:	f003 0307 	and.w	r3, r3, #7
 800917e:	3301      	adds	r3, #1
 8009180:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009182:	4b10      	ldr	r3, [pc, #64]	@ (80091c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8009184:	68db      	ldr	r3, [r3, #12]
 8009186:	0a1b      	lsrs	r3, r3, #8
 8009188:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800918c:	697a      	ldr	r2, [r7, #20]
 800918e:	fb03 f202 	mul.w	r2, r3, r2
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	fbb2 f3f3 	udiv	r3, r2, r3
 8009198:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800919a:	4b0a      	ldr	r3, [pc, #40]	@ (80091c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	0e5b      	lsrs	r3, r3, #25
 80091a0:	f003 0303 	and.w	r3, r3, #3
 80091a4:	3301      	adds	r3, #1
 80091a6:	005b      	lsls	r3, r3, #1
 80091a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80091aa:	697a      	ldr	r2, [r7, #20]
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80091b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80091b4:	69bb      	ldr	r3, [r7, #24]
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3724      	adds	r7, #36	@ 0x24
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	40021000 	.word	0x40021000
 80091c8:	0801f290 	.word	0x0801f290
 80091cc:	00f42400 	.word	0x00f42400
 80091d0:	007a1200 	.word	0x007a1200

080091d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80091d4:	b480      	push	{r7}
 80091d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80091d8:	4b03      	ldr	r3, [pc, #12]	@ (80091e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80091da:	681b      	ldr	r3, [r3, #0]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr
 80091e6:	bf00      	nop
 80091e8:	20000000 	.word	0x20000000

080091ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80091f0:	f7ff fff0 	bl	80091d4 <HAL_RCC_GetHCLKFreq>
 80091f4:	4602      	mov	r2, r0
 80091f6:	4b06      	ldr	r3, [pc, #24]	@ (8009210 <HAL_RCC_GetPCLK1Freq+0x24>)
 80091f8:	689b      	ldr	r3, [r3, #8]
 80091fa:	0a1b      	lsrs	r3, r3, #8
 80091fc:	f003 0307 	and.w	r3, r3, #7
 8009200:	4904      	ldr	r1, [pc, #16]	@ (8009214 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009202:	5ccb      	ldrb	r3, [r1, r3]
 8009204:	f003 031f 	and.w	r3, r3, #31
 8009208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800920c:	4618      	mov	r0, r3
 800920e:	bd80      	pop	{r7, pc}
 8009210:	40021000 	.word	0x40021000
 8009214:	0801f288 	.word	0x0801f288

08009218 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800921c:	f7ff ffda 	bl	80091d4 <HAL_RCC_GetHCLKFreq>
 8009220:	4602      	mov	r2, r0
 8009222:	4b06      	ldr	r3, [pc, #24]	@ (800923c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	0adb      	lsrs	r3, r3, #11
 8009228:	f003 0307 	and.w	r3, r3, #7
 800922c:	4904      	ldr	r1, [pc, #16]	@ (8009240 <HAL_RCC_GetPCLK2Freq+0x28>)
 800922e:	5ccb      	ldrb	r3, [r1, r3]
 8009230:	f003 031f 	and.w	r3, r3, #31
 8009234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009238:	4618      	mov	r0, r3
 800923a:	bd80      	pop	{r7, pc}
 800923c:	40021000 	.word	0x40021000
 8009240:	0801f288 	.word	0x0801f288

08009244 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	220f      	movs	r2, #15
 8009252:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8009254:	4b12      	ldr	r3, [pc, #72]	@ (80092a0 <HAL_RCC_GetClockConfig+0x5c>)
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	f003 0203 	and.w	r2, r3, #3
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8009260:	4b0f      	ldr	r3, [pc, #60]	@ (80092a0 <HAL_RCC_GetClockConfig+0x5c>)
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800926c:	4b0c      	ldr	r3, [pc, #48]	@ (80092a0 <HAL_RCC_GetClockConfig+0x5c>)
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8009278:	4b09      	ldr	r3, [pc, #36]	@ (80092a0 <HAL_RCC_GetClockConfig+0x5c>)
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	08db      	lsrs	r3, r3, #3
 800927e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8009286:	4b07      	ldr	r3, [pc, #28]	@ (80092a4 <HAL_RCC_GetClockConfig+0x60>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f003 0207 	and.w	r2, r3, #7
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	601a      	str	r2, [r3, #0]
}
 8009292:	bf00      	nop
 8009294:	370c      	adds	r7, #12
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr
 800929e:	bf00      	nop
 80092a0:	40021000 	.word	0x40021000
 80092a4:	40022000 	.word	0x40022000

080092a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b086      	sub	sp, #24
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80092b0:	2300      	movs	r3, #0
 80092b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80092b4:	4b2a      	ldr	r3, [pc, #168]	@ (8009360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80092b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d003      	beq.n	80092c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80092c0:	f7ff f9ac 	bl	800861c <HAL_PWREx_GetVoltageRange>
 80092c4:	6178      	str	r0, [r7, #20]
 80092c6:	e014      	b.n	80092f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80092c8:	4b25      	ldr	r3, [pc, #148]	@ (8009360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80092ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092cc:	4a24      	ldr	r2, [pc, #144]	@ (8009360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80092ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80092d4:	4b22      	ldr	r3, [pc, #136]	@ (8009360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80092d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092dc:	60fb      	str	r3, [r7, #12]
 80092de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80092e0:	f7ff f99c 	bl	800861c <HAL_PWREx_GetVoltageRange>
 80092e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80092e6:	4b1e      	ldr	r3, [pc, #120]	@ (8009360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80092e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092ea:	4a1d      	ldr	r2, [pc, #116]	@ (8009360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80092ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80092f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092f8:	d10b      	bne.n	8009312 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2b80      	cmp	r3, #128	@ 0x80
 80092fe:	d919      	bls.n	8009334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2ba0      	cmp	r3, #160	@ 0xa0
 8009304:	d902      	bls.n	800930c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009306:	2302      	movs	r3, #2
 8009308:	613b      	str	r3, [r7, #16]
 800930a:	e013      	b.n	8009334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800930c:	2301      	movs	r3, #1
 800930e:	613b      	str	r3, [r7, #16]
 8009310:	e010      	b.n	8009334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2b80      	cmp	r3, #128	@ 0x80
 8009316:	d902      	bls.n	800931e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8009318:	2303      	movs	r3, #3
 800931a:	613b      	str	r3, [r7, #16]
 800931c:	e00a      	b.n	8009334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2b80      	cmp	r3, #128	@ 0x80
 8009322:	d102      	bne.n	800932a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009324:	2302      	movs	r3, #2
 8009326:	613b      	str	r3, [r7, #16]
 8009328:	e004      	b.n	8009334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2b70      	cmp	r3, #112	@ 0x70
 800932e:	d101      	bne.n	8009334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009330:	2301      	movs	r3, #1
 8009332:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009334:	4b0b      	ldr	r3, [pc, #44]	@ (8009364 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f023 0207 	bic.w	r2, r3, #7
 800933c:	4909      	ldr	r1, [pc, #36]	@ (8009364 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	4313      	orrs	r3, r2
 8009342:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009344:	4b07      	ldr	r3, [pc, #28]	@ (8009364 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f003 0307 	and.w	r3, r3, #7
 800934c:	693a      	ldr	r2, [r7, #16]
 800934e:	429a      	cmp	r2, r3
 8009350:	d001      	beq.n	8009356 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	e000      	b.n	8009358 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8009356:	2300      	movs	r3, #0
}
 8009358:	4618      	mov	r0, r3
 800935a:	3718      	adds	r7, #24
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	40021000 	.word	0x40021000
 8009364:	40022000 	.word	0x40022000

08009368 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b086      	sub	sp, #24
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009370:	2300      	movs	r3, #0
 8009372:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009374:	2300      	movs	r3, #0
 8009376:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009380:	2b00      	cmp	r3, #0
 8009382:	d041      	beq.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009388:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800938c:	d02a      	beq.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800938e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009392:	d824      	bhi.n	80093de <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009394:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009398:	d008      	beq.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 800939a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800939e:	d81e      	bhi.n	80093de <HAL_RCCEx_PeriphCLKConfig+0x76>
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d00a      	beq.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x52>
 80093a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80093a8:	d010      	beq.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80093aa:	e018      	b.n	80093de <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80093ac:	4b86      	ldr	r3, [pc, #536]	@ (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	4a85      	ldr	r2, [pc, #532]	@ (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80093b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093b6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80093b8:	e015      	b.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	3304      	adds	r3, #4
 80093be:	2100      	movs	r1, #0
 80093c0:	4618      	mov	r0, r3
 80093c2:	f001 f839 	bl	800a438 <RCCEx_PLLSAI1_Config>
 80093c6:	4603      	mov	r3, r0
 80093c8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80093ca:	e00c      	b.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	3320      	adds	r3, #32
 80093d0:	2100      	movs	r1, #0
 80093d2:	4618      	mov	r0, r3
 80093d4:	f001 f924 	bl	800a620 <RCCEx_PLLSAI2_Config>
 80093d8:	4603      	mov	r3, r0
 80093da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80093dc:	e003      	b.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093de:	2301      	movs	r3, #1
 80093e0:	74fb      	strb	r3, [r7, #19]
      break;
 80093e2:	e000      	b.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80093e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093e6:	7cfb      	ldrb	r3, [r7, #19]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d10b      	bne.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80093ec:	4b76      	ldr	r3, [pc, #472]	@ (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80093ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093f2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093fa:	4973      	ldr	r1, [pc, #460]	@ (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80093fc:	4313      	orrs	r3, r2
 80093fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8009402:	e001      	b.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009404:	7cfb      	ldrb	r3, [r7, #19]
 8009406:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009410:	2b00      	cmp	r3, #0
 8009412:	d041      	beq.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009418:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800941c:	d02a      	beq.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800941e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009422:	d824      	bhi.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009424:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009428:	d008      	beq.n	800943c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800942a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800942e:	d81e      	bhi.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009430:	2b00      	cmp	r3, #0
 8009432:	d00a      	beq.n	800944a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8009434:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009438:	d010      	beq.n	800945c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800943a:	e018      	b.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800943c:	4b62      	ldr	r3, [pc, #392]	@ (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	4a61      	ldr	r2, [pc, #388]	@ (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009442:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009446:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009448:	e015      	b.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	3304      	adds	r3, #4
 800944e:	2100      	movs	r1, #0
 8009450:	4618      	mov	r0, r3
 8009452:	f000 fff1 	bl	800a438 <RCCEx_PLLSAI1_Config>
 8009456:	4603      	mov	r3, r0
 8009458:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800945a:	e00c      	b.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	3320      	adds	r3, #32
 8009460:	2100      	movs	r1, #0
 8009462:	4618      	mov	r0, r3
 8009464:	f001 f8dc 	bl	800a620 <RCCEx_PLLSAI2_Config>
 8009468:	4603      	mov	r3, r0
 800946a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800946c:	e003      	b.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800946e:	2301      	movs	r3, #1
 8009470:	74fb      	strb	r3, [r7, #19]
      break;
 8009472:	e000      	b.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8009474:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009476:	7cfb      	ldrb	r3, [r7, #19]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d10b      	bne.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800947c:	4b52      	ldr	r3, [pc, #328]	@ (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800947e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009482:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800948a:	494f      	ldr	r1, [pc, #316]	@ (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800948c:	4313      	orrs	r3, r2
 800948e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8009492:	e001      	b.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009494:	7cfb      	ldrb	r3, [r7, #19]
 8009496:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	f000 80a0 	beq.w	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80094a6:	2300      	movs	r3, #0
 80094a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80094aa:	4b47      	ldr	r3, [pc, #284]	@ (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80094ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d101      	bne.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x152>
 80094b6:	2301      	movs	r3, #1
 80094b8:	e000      	b.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80094ba:	2300      	movs	r3, #0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d00d      	beq.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80094c0:	4b41      	ldr	r3, [pc, #260]	@ (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80094c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094c4:	4a40      	ldr	r2, [pc, #256]	@ (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80094c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80094ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80094cc:	4b3e      	ldr	r3, [pc, #248]	@ (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80094ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094d4:	60bb      	str	r3, [r7, #8]
 80094d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80094d8:	2301      	movs	r3, #1
 80094da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80094dc:	4b3b      	ldr	r3, [pc, #236]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a3a      	ldr	r2, [pc, #232]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80094e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80094e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80094e8:	f7fd f8aa 	bl	8006640 <HAL_GetTick>
 80094ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80094ee:	e009      	b.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094f0:	f7fd f8a6 	bl	8006640 <HAL_GetTick>
 80094f4:	4602      	mov	r2, r0
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	1ad3      	subs	r3, r2, r3
 80094fa:	2b02      	cmp	r3, #2
 80094fc:	d902      	bls.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80094fe:	2303      	movs	r3, #3
 8009500:	74fb      	strb	r3, [r7, #19]
        break;
 8009502:	e005      	b.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009504:	4b31      	ldr	r3, [pc, #196]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800950c:	2b00      	cmp	r3, #0
 800950e:	d0ef      	beq.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8009510:	7cfb      	ldrb	r3, [r7, #19]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d15c      	bne.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009516:	4b2c      	ldr	r3, [pc, #176]	@ (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800951c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009520:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d01f      	beq.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800952e:	697a      	ldr	r2, [r7, #20]
 8009530:	429a      	cmp	r2, r3
 8009532:	d019      	beq.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009534:	4b24      	ldr	r3, [pc, #144]	@ (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800953a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800953e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009540:	4b21      	ldr	r3, [pc, #132]	@ (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009546:	4a20      	ldr	r2, [pc, #128]	@ (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009548:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800954c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009550:	4b1d      	ldr	r3, [pc, #116]	@ (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009556:	4a1c      	ldr	r2, [pc, #112]	@ (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009558:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800955c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009560:	4a19      	ldr	r2, [pc, #100]	@ (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	f003 0301 	and.w	r3, r3, #1
 800956e:	2b00      	cmp	r3, #0
 8009570:	d016      	beq.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009572:	f7fd f865 	bl	8006640 <HAL_GetTick>
 8009576:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009578:	e00b      	b.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800957a:	f7fd f861 	bl	8006640 <HAL_GetTick>
 800957e:	4602      	mov	r2, r0
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	1ad3      	subs	r3, r2, r3
 8009584:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009588:	4293      	cmp	r3, r2
 800958a:	d902      	bls.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800958c:	2303      	movs	r3, #3
 800958e:	74fb      	strb	r3, [r7, #19]
            break;
 8009590:	e006      	b.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009592:	4b0d      	ldr	r3, [pc, #52]	@ (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009598:	f003 0302 	and.w	r3, r3, #2
 800959c:	2b00      	cmp	r3, #0
 800959e:	d0ec      	beq.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80095a0:	7cfb      	ldrb	r3, [r7, #19]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d10c      	bne.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80095a6:	4b08      	ldr	r3, [pc, #32]	@ (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80095a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80095b6:	4904      	ldr	r1, [pc, #16]	@ (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80095b8:	4313      	orrs	r3, r2
 80095ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80095be:	e009      	b.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80095c0:	7cfb      	ldrb	r3, [r7, #19]
 80095c2:	74bb      	strb	r3, [r7, #18]
 80095c4:	e006      	b.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80095c6:	bf00      	nop
 80095c8:	40021000 	.word	0x40021000
 80095cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095d0:	7cfb      	ldrb	r3, [r7, #19]
 80095d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80095d4:	7c7b      	ldrb	r3, [r7, #17]
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d105      	bne.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80095da:	4b9e      	ldr	r3, [pc, #632]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80095dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095de:	4a9d      	ldr	r2, [pc, #628]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80095e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80095e4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f003 0301 	and.w	r3, r3, #1
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d00a      	beq.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80095f2:	4b98      	ldr	r3, [pc, #608]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80095f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095f8:	f023 0203 	bic.w	r2, r3, #3
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009600:	4994      	ldr	r1, [pc, #592]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009602:	4313      	orrs	r3, r2
 8009604:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f003 0302 	and.w	r3, r3, #2
 8009610:	2b00      	cmp	r3, #0
 8009612:	d00a      	beq.n	800962a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009614:	4b8f      	ldr	r3, [pc, #572]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800961a:	f023 020c 	bic.w	r2, r3, #12
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009622:	498c      	ldr	r1, [pc, #560]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009624:	4313      	orrs	r3, r2
 8009626:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f003 0304 	and.w	r3, r3, #4
 8009632:	2b00      	cmp	r3, #0
 8009634:	d00a      	beq.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009636:	4b87      	ldr	r3, [pc, #540]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800963c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009644:	4983      	ldr	r1, [pc, #524]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009646:	4313      	orrs	r3, r2
 8009648:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f003 0308 	and.w	r3, r3, #8
 8009654:	2b00      	cmp	r3, #0
 8009656:	d00a      	beq.n	800966e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009658:	4b7e      	ldr	r3, [pc, #504]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800965a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800965e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009666:	497b      	ldr	r1, [pc, #492]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009668:	4313      	orrs	r3, r2
 800966a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f003 0310 	and.w	r3, r3, #16
 8009676:	2b00      	cmp	r3, #0
 8009678:	d00a      	beq.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800967a:	4b76      	ldr	r3, [pc, #472]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800967c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009680:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009688:	4972      	ldr	r1, [pc, #456]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800968a:	4313      	orrs	r3, r2
 800968c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f003 0320 	and.w	r3, r3, #32
 8009698:	2b00      	cmp	r3, #0
 800969a:	d00a      	beq.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800969c:	4b6d      	ldr	r3, [pc, #436]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800969e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096aa:	496a      	ldr	r1, [pc, #424]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80096ac:	4313      	orrs	r3, r2
 80096ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d00a      	beq.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80096be:	4b65      	ldr	r3, [pc, #404]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80096c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80096cc:	4961      	ldr	r1, [pc, #388]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80096ce:	4313      	orrs	r3, r2
 80096d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d00a      	beq.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80096e0:	4b5c      	ldr	r3, [pc, #368]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80096e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096ee:	4959      	ldr	r1, [pc, #356]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80096f0:	4313      	orrs	r3, r2
 80096f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d00a      	beq.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009702:	4b54      	ldr	r3, [pc, #336]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009708:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009710:	4950      	ldr	r1, [pc, #320]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009712:	4313      	orrs	r3, r2
 8009714:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009720:	2b00      	cmp	r3, #0
 8009722:	d00a      	beq.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009724:	4b4b      	ldr	r3, [pc, #300]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800972a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009732:	4948      	ldr	r1, [pc, #288]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009734:	4313      	orrs	r3, r2
 8009736:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009742:	2b00      	cmp	r3, #0
 8009744:	d00a      	beq.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009746:	4b43      	ldr	r3, [pc, #268]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800974c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009754:	493f      	ldr	r1, [pc, #252]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009756:	4313      	orrs	r3, r2
 8009758:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009764:	2b00      	cmp	r3, #0
 8009766:	d028      	beq.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009768:	4b3a      	ldr	r3, [pc, #232]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800976a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800976e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009776:	4937      	ldr	r1, [pc, #220]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009778:	4313      	orrs	r3, r2
 800977a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009782:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009786:	d106      	bne.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009788:	4b32      	ldr	r3, [pc, #200]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	4a31      	ldr	r2, [pc, #196]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800978e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009792:	60d3      	str	r3, [r2, #12]
 8009794:	e011      	b.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800979a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800979e:	d10c      	bne.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	3304      	adds	r3, #4
 80097a4:	2101      	movs	r1, #1
 80097a6:	4618      	mov	r0, r3
 80097a8:	f000 fe46 	bl	800a438 <RCCEx_PLLSAI1_Config>
 80097ac:	4603      	mov	r3, r0
 80097ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80097b0:	7cfb      	ldrb	r3, [r7, #19]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d001      	beq.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80097b6:	7cfb      	ldrb	r3, [r7, #19]
 80097b8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d028      	beq.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80097c6:	4b23      	ldr	r3, [pc, #140]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80097c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097cc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097d4:	491f      	ldr	r1, [pc, #124]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80097d6:	4313      	orrs	r3, r2
 80097d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80097e4:	d106      	bne.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80097e6:	4b1b      	ldr	r3, [pc, #108]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80097e8:	68db      	ldr	r3, [r3, #12]
 80097ea:	4a1a      	ldr	r2, [pc, #104]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80097ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80097f0:	60d3      	str	r3, [r2, #12]
 80097f2:	e011      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80097fc:	d10c      	bne.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	3304      	adds	r3, #4
 8009802:	2101      	movs	r1, #1
 8009804:	4618      	mov	r0, r3
 8009806:	f000 fe17 	bl	800a438 <RCCEx_PLLSAI1_Config>
 800980a:	4603      	mov	r3, r0
 800980c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800980e:	7cfb      	ldrb	r3, [r7, #19]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d001      	beq.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8009814:	7cfb      	ldrb	r3, [r7, #19]
 8009816:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009820:	2b00      	cmp	r3, #0
 8009822:	d02b      	beq.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009824:	4b0b      	ldr	r3, [pc, #44]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800982a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009832:	4908      	ldr	r1, [pc, #32]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009834:	4313      	orrs	r3, r2
 8009836:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800983e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009842:	d109      	bne.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009844:	4b03      	ldr	r3, [pc, #12]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009846:	68db      	ldr	r3, [r3, #12]
 8009848:	4a02      	ldr	r2, [pc, #8]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800984a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800984e:	60d3      	str	r3, [r2, #12]
 8009850:	e014      	b.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8009852:	bf00      	nop
 8009854:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800985c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009860:	d10c      	bne.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	3304      	adds	r3, #4
 8009866:	2101      	movs	r1, #1
 8009868:	4618      	mov	r0, r3
 800986a:	f000 fde5 	bl	800a438 <RCCEx_PLLSAI1_Config>
 800986e:	4603      	mov	r3, r0
 8009870:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009872:	7cfb      	ldrb	r3, [r7, #19]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d001      	beq.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8009878:	7cfb      	ldrb	r3, [r7, #19]
 800987a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009884:	2b00      	cmp	r3, #0
 8009886:	d02f      	beq.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009888:	4b2b      	ldr	r3, [pc, #172]	@ (8009938 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800988a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800988e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009896:	4928      	ldr	r1, [pc, #160]	@ (8009938 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009898:	4313      	orrs	r3, r2
 800989a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80098a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098a6:	d10d      	bne.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	3304      	adds	r3, #4
 80098ac:	2102      	movs	r1, #2
 80098ae:	4618      	mov	r0, r3
 80098b0:	f000 fdc2 	bl	800a438 <RCCEx_PLLSAI1_Config>
 80098b4:	4603      	mov	r3, r0
 80098b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80098b8:	7cfb      	ldrb	r3, [r7, #19]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d014      	beq.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80098be:	7cfb      	ldrb	r3, [r7, #19]
 80098c0:	74bb      	strb	r3, [r7, #18]
 80098c2:	e011      	b.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80098c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098cc:	d10c      	bne.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	3320      	adds	r3, #32
 80098d2:	2102      	movs	r1, #2
 80098d4:	4618      	mov	r0, r3
 80098d6:	f000 fea3 	bl	800a620 <RCCEx_PLLSAI2_Config>
 80098da:	4603      	mov	r3, r0
 80098dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80098de:	7cfb      	ldrb	r3, [r7, #19]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d001      	beq.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80098e4:	7cfb      	ldrb	r3, [r7, #19]
 80098e6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00a      	beq.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80098f4:	4b10      	ldr	r3, [pc, #64]	@ (8009938 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80098f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098fa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009902:	490d      	ldr	r1, [pc, #52]	@ (8009938 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009904:	4313      	orrs	r3, r2
 8009906:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009912:	2b00      	cmp	r3, #0
 8009914:	d00b      	beq.n	800992e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009916:	4b08      	ldr	r3, [pc, #32]	@ (8009938 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800991c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009926:	4904      	ldr	r1, [pc, #16]	@ (8009938 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009928:	4313      	orrs	r3, r2
 800992a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800992e:	7cbb      	ldrb	r3, [r7, #18]
}
 8009930:	4618      	mov	r0, r3
 8009932:	3718      	adds	r7, #24
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	40021000 	.word	0x40021000

0800993c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b088      	sub	sp, #32
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8009944:	2300      	movs	r3, #0
 8009946:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800994e:	d13e      	bne.n	80099ce <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8009950:	4bb2      	ldr	r3, [pc, #712]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8009952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009956:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800995a:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009962:	d028      	beq.n	80099b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800996a:	f200 8542 	bhi.w	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009974:	d005      	beq.n	8009982 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800997c:	d00e      	beq.n	800999c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800997e:	f000 bd38 	b.w	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009982:	4ba6      	ldr	r3, [pc, #664]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8009984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009988:	f003 0302 	and.w	r3, r3, #2
 800998c:	2b02      	cmp	r3, #2
 800998e:	f040 8532 	bne.w	800a3f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8009992:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009996:	61fb      	str	r3, [r7, #28]
      break;
 8009998:	f000 bd2d 	b.w	800a3f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800999c:	4b9f      	ldr	r3, [pc, #636]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800999e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80099a2:	f003 0302 	and.w	r3, r3, #2
 80099a6:	2b02      	cmp	r3, #2
 80099a8:	f040 8527 	bne.w	800a3fa <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 80099ac:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80099b0:	61fb      	str	r3, [r7, #28]
      break;
 80099b2:	f000 bd22 	b.w	800a3fa <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80099b6:	4b99      	ldr	r3, [pc, #612]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099c2:	f040 851c 	bne.w	800a3fe <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 80099c6:	4b96      	ldr	r3, [pc, #600]	@ (8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80099c8:	61fb      	str	r3, [r7, #28]
      break;
 80099ca:	f000 bd18 	b.w	800a3fe <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80099ce:	4b93      	ldr	r3, [pc, #588]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80099d0:	68db      	ldr	r3, [r3, #12]
 80099d2:	f003 0303 	and.w	r3, r3, #3
 80099d6:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	2b03      	cmp	r3, #3
 80099dc:	d036      	beq.n	8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	2b03      	cmp	r3, #3
 80099e2:	d840      	bhi.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d003      	beq.n	80099f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	2b02      	cmp	r3, #2
 80099ee:	d020      	beq.n	8009a32 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80099f0:	e039      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80099f2:	4b8a      	ldr	r3, [pc, #552]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f003 0302 	and.w	r3, r3, #2
 80099fa:	2b02      	cmp	r3, #2
 80099fc:	d116      	bne.n	8009a2c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80099fe:	4b87      	ldr	r3, [pc, #540]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f003 0308 	and.w	r3, r3, #8
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d005      	beq.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8009a0a:	4b84      	ldr	r3, [pc, #528]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	091b      	lsrs	r3, r3, #4
 8009a10:	f003 030f 	and.w	r3, r3, #15
 8009a14:	e005      	b.n	8009a22 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8009a16:	4b81      	ldr	r3, [pc, #516]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8009a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009a1c:	0a1b      	lsrs	r3, r3, #8
 8009a1e:	f003 030f 	and.w	r3, r3, #15
 8009a22:	4a80      	ldr	r2, [pc, #512]	@ (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8009a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a28:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8009a2a:	e01f      	b.n	8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	61bb      	str	r3, [r7, #24]
      break;
 8009a30:	e01c      	b.n	8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009a32:	4b7a      	ldr	r3, [pc, #488]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a3e:	d102      	bne.n	8009a46 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8009a40:	4b79      	ldr	r3, [pc, #484]	@ (8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009a42:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8009a44:	e012      	b.n	8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8009a46:	2300      	movs	r3, #0
 8009a48:	61bb      	str	r3, [r7, #24]
      break;
 8009a4a:	e00f      	b.n	8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009a4c:	4b73      	ldr	r3, [pc, #460]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a58:	d102      	bne.n	8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8009a5a:	4b74      	ldr	r3, [pc, #464]	@ (8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8009a5c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8009a5e:	e005      	b.n	8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8009a60:	2300      	movs	r3, #0
 8009a62:	61bb      	str	r3, [r7, #24]
      break;
 8009a64:	e002      	b.n	8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8009a66:	2300      	movs	r3, #0
 8009a68:	61bb      	str	r3, [r7, #24]
      break;
 8009a6a:	bf00      	nop
    }

    switch(PeriphClk)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009a72:	f000 80dd 	beq.w	8009c30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009a7c:	f200 84c1 	bhi.w	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009a86:	f000 80d3 	beq.w	8009c30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009a90:	f200 84b7 	bhi.w	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a9a:	f000 835f 	beq.w	800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009aa4:	f200 84ad 	bhi.w	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009aae:	f000 847e 	beq.w	800a3ae <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ab8:	f200 84a3 	bhi.w	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009ac2:	f000 82cd 	beq.w	800a060 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009acc:	f200 8499 	bhi.w	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ad6:	f000 80ab 	beq.w	8009c30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ae0:	f200 848f 	bhi.w	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009aea:	f000 8090 	beq.w	8009c0e <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009af4:	f200 8485 	bhi.w	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009afe:	d07f      	beq.n	8009c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b06:	f200 847c 	bhi.w	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b10:	f000 8403 	beq.w	800a31a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b1a:	f200 8472 	bhi.w	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b24:	f000 83af 	beq.w	800a286 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b2e:	f200 8468 	bhi.w	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b38:	f000 8379 	beq.w	800a22e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b42:	f200 845e 	bhi.w	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2b80      	cmp	r3, #128	@ 0x80
 8009b4a:	f000 8344 	beq.w	800a1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2b80      	cmp	r3, #128	@ 0x80
 8009b52:	f200 8456 	bhi.w	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2b20      	cmp	r3, #32
 8009b5a:	d84b      	bhi.n	8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	f000 844f 	beq.w	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	3b01      	subs	r3, #1
 8009b68:	2b1f      	cmp	r3, #31
 8009b6a:	f200 844a 	bhi.w	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8009b6e:	a201      	add	r2, pc, #4	@ (adr r2, 8009b74 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8009b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b74:	08009d5d 	.word	0x08009d5d
 8009b78:	08009dcb 	.word	0x08009dcb
 8009b7c:	0800a403 	.word	0x0800a403
 8009b80:	08009e5f 	.word	0x08009e5f
 8009b84:	0800a403 	.word	0x0800a403
 8009b88:	0800a403 	.word	0x0800a403
 8009b8c:	0800a403 	.word	0x0800a403
 8009b90:	08009ee5 	.word	0x08009ee5
 8009b94:	0800a403 	.word	0x0800a403
 8009b98:	0800a403 	.word	0x0800a403
 8009b9c:	0800a403 	.word	0x0800a403
 8009ba0:	0800a403 	.word	0x0800a403
 8009ba4:	0800a403 	.word	0x0800a403
 8009ba8:	0800a403 	.word	0x0800a403
 8009bac:	0800a403 	.word	0x0800a403
 8009bb0:	08009f5d 	.word	0x08009f5d
 8009bb4:	0800a403 	.word	0x0800a403
 8009bb8:	0800a403 	.word	0x0800a403
 8009bbc:	0800a403 	.word	0x0800a403
 8009bc0:	0800a403 	.word	0x0800a403
 8009bc4:	0800a403 	.word	0x0800a403
 8009bc8:	0800a403 	.word	0x0800a403
 8009bcc:	0800a403 	.word	0x0800a403
 8009bd0:	0800a403 	.word	0x0800a403
 8009bd4:	0800a403 	.word	0x0800a403
 8009bd8:	0800a403 	.word	0x0800a403
 8009bdc:	0800a403 	.word	0x0800a403
 8009be0:	0800a403 	.word	0x0800a403
 8009be4:	0800a403 	.word	0x0800a403
 8009be8:	0800a403 	.word	0x0800a403
 8009bec:	0800a403 	.word	0x0800a403
 8009bf0:	08009fdf 	.word	0x08009fdf
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2b40      	cmp	r3, #64	@ 0x40
 8009bf8:	f000 82c1 	beq.w	800a17e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8009bfc:	f000 bc01 	b.w	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8009c00:	69b9      	ldr	r1, [r7, #24]
 8009c02:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8009c06:	f000 fde9 	bl	800a7dc <RCCEx_GetSAIxPeriphCLKFreq>
 8009c0a:	61f8      	str	r0, [r7, #28]
      break;
 8009c0c:	e3fa      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8009c0e:	69b9      	ldr	r1, [r7, #24]
 8009c10:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8009c14:	f000 fde2 	bl	800a7dc <RCCEx_GetSAIxPeriphCLKFreq>
 8009c18:	61f8      	str	r0, [r7, #28]
      break;
 8009c1a:	e3f3      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8009c1c:	40021000 	.word	0x40021000
 8009c20:	0003d090 	.word	0x0003d090
 8009c24:	0801f290 	.word	0x0801f290
 8009c28:	00f42400 	.word	0x00f42400
 8009c2c:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8009c30:	4ba9      	ldr	r3, [pc, #676]	@ (8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c36:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8009c3a:	613b      	str	r3, [r7, #16]
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009c42:	d00c      	beq.n	8009c5e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009c4a:	d87f      	bhi.n	8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009c52:	d04e      	beq.n	8009cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c5a:	d01d      	beq.n	8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8009c5c:	e076      	b.n	8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8009c5e:	4b9e      	ldr	r3, [pc, #632]	@ (8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f003 0302 	and.w	r3, r3, #2
 8009c66:	2b02      	cmp	r3, #2
 8009c68:	d172      	bne.n	8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8009c6a:	4b9b      	ldr	r3, [pc, #620]	@ (8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f003 0308 	and.w	r3, r3, #8
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d005      	beq.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8009c76:	4b98      	ldr	r3, [pc, #608]	@ (8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	091b      	lsrs	r3, r3, #4
 8009c7c:	f003 030f 	and.w	r3, r3, #15
 8009c80:	e005      	b.n	8009c8e <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8009c82:	4b95      	ldr	r3, [pc, #596]	@ (8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009c88:	0a1b      	lsrs	r3, r3, #8
 8009c8a:	f003 030f 	and.w	r3, r3, #15
 8009c8e:	4a93      	ldr	r2, [pc, #588]	@ (8009edc <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8009c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c94:	61fb      	str	r3, [r7, #28]
          break;
 8009c96:	e05b      	b.n	8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8009c98:	4b8f      	ldr	r3, [pc, #572]	@ (8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ca0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ca4:	d156      	bne.n	8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8009ca6:	4b8c      	ldr	r3, [pc, #560]	@ (8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009ca8:	68db      	ldr	r3, [r3, #12]
 8009caa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009cae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009cb2:	d14f      	bne.n	8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009cb4:	4b88      	ldr	r3, [pc, #544]	@ (8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009cb6:	68db      	ldr	r3, [r3, #12]
 8009cb8:	0a1b      	lsrs	r3, r3, #8
 8009cba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cbe:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	68fa      	ldr	r2, [r7, #12]
 8009cc4:	fb03 f202 	mul.w	r2, r3, r2
 8009cc8:	4b83      	ldr	r3, [pc, #524]	@ (8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009cca:	68db      	ldr	r3, [r3, #12]
 8009ccc:	091b      	lsrs	r3, r3, #4
 8009cce:	f003 0307 	and.w	r3, r3, #7
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cd8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8009cda:	4b7f      	ldr	r3, [pc, #508]	@ (8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009cdc:	68db      	ldr	r3, [r3, #12]
 8009cde:	0d5b      	lsrs	r3, r3, #21
 8009ce0:	f003 0303 	and.w	r3, r3, #3
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	005b      	lsls	r3, r3, #1
 8009ce8:	69ba      	ldr	r2, [r7, #24]
 8009cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cee:	61fb      	str	r3, [r7, #28]
          break;
 8009cf0:	e030      	b.n	8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8009cf2:	4b79      	ldr	r3, [pc, #484]	@ (8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009cfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009cfe:	d12b      	bne.n	8009d58 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8009d00:	4b75      	ldr	r3, [pc, #468]	@ (8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009d02:	691b      	ldr	r3, [r3, #16]
 8009d04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009d08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d0c:	d124      	bne.n	8009d58 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8009d0e:	4b72      	ldr	r3, [pc, #456]	@ (8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009d10:	691b      	ldr	r3, [r3, #16]
 8009d12:	0a1b      	lsrs	r3, r3, #8
 8009d14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d18:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009d1a:	69bb      	ldr	r3, [r7, #24]
 8009d1c:	68fa      	ldr	r2, [r7, #12]
 8009d1e:	fb03 f202 	mul.w	r2, r3, r2
 8009d22:	4b6d      	ldr	r3, [pc, #436]	@ (8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009d24:	68db      	ldr	r3, [r3, #12]
 8009d26:	091b      	lsrs	r3, r3, #4
 8009d28:	f003 0307 	and.w	r3, r3, #7
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d32:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8009d34:	4b68      	ldr	r3, [pc, #416]	@ (8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009d36:	691b      	ldr	r3, [r3, #16]
 8009d38:	0d5b      	lsrs	r3, r3, #21
 8009d3a:	f003 0303 	and.w	r3, r3, #3
 8009d3e:	3301      	adds	r3, #1
 8009d40:	005b      	lsls	r3, r3, #1
 8009d42:	69ba      	ldr	r2, [r7, #24]
 8009d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d48:	61fb      	str	r3, [r7, #28]
          break;
 8009d4a:	e005      	b.n	8009d58 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8009d4c:	bf00      	nop
 8009d4e:	e359      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009d50:	bf00      	nop
 8009d52:	e357      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009d54:	bf00      	nop
 8009d56:	e355      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009d58:	bf00      	nop
        break;
 8009d5a:	e353      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8009d5c:	4b5e      	ldr	r3, [pc, #376]	@ (8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d62:	f003 0303 	and.w	r3, r3, #3
 8009d66:	613b      	str	r3, [r7, #16]
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	2b03      	cmp	r3, #3
 8009d6c:	d827      	bhi.n	8009dbe <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8009d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8009d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d74:	08009d85 	.word	0x08009d85
 8009d78:	08009d8d 	.word	0x08009d8d
 8009d7c:	08009d95 	.word	0x08009d95
 8009d80:	08009da9 	.word	0x08009da9
          frequency = HAL_RCC_GetPCLK2Freq();
 8009d84:	f7ff fa48 	bl	8009218 <HAL_RCC_GetPCLK2Freq>
 8009d88:	61f8      	str	r0, [r7, #28]
          break;
 8009d8a:	e01d      	b.n	8009dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8009d8c:	f7ff f996 	bl	80090bc <HAL_RCC_GetSysClockFreq>
 8009d90:	61f8      	str	r0, [r7, #28]
          break;
 8009d92:	e019      	b.n	8009dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009d94:	4b50      	ldr	r3, [pc, #320]	@ (8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009da0:	d10f      	bne.n	8009dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8009da2:	4b4f      	ldr	r3, [pc, #316]	@ (8009ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8009da4:	61fb      	str	r3, [r7, #28]
          break;
 8009da6:	e00c      	b.n	8009dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009da8:	4b4b      	ldr	r3, [pc, #300]	@ (8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009dae:	f003 0302 	and.w	r3, r3, #2
 8009db2:	2b02      	cmp	r3, #2
 8009db4:	d107      	bne.n	8009dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8009db6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009dba:	61fb      	str	r3, [r7, #28]
          break;
 8009dbc:	e003      	b.n	8009dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8009dbe:	bf00      	nop
 8009dc0:	e320      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009dc2:	bf00      	nop
 8009dc4:	e31e      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009dc6:	bf00      	nop
        break;
 8009dc8:	e31c      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8009dca:	4b43      	ldr	r3, [pc, #268]	@ (8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009dd0:	f003 030c 	and.w	r3, r3, #12
 8009dd4:	613b      	str	r3, [r7, #16]
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	2b0c      	cmp	r3, #12
 8009dda:	d83a      	bhi.n	8009e52 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8009ddc:	a201      	add	r2, pc, #4	@ (adr r2, 8009de4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8009dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de2:	bf00      	nop
 8009de4:	08009e19 	.word	0x08009e19
 8009de8:	08009e53 	.word	0x08009e53
 8009dec:	08009e53 	.word	0x08009e53
 8009df0:	08009e53 	.word	0x08009e53
 8009df4:	08009e21 	.word	0x08009e21
 8009df8:	08009e53 	.word	0x08009e53
 8009dfc:	08009e53 	.word	0x08009e53
 8009e00:	08009e53 	.word	0x08009e53
 8009e04:	08009e29 	.word	0x08009e29
 8009e08:	08009e53 	.word	0x08009e53
 8009e0c:	08009e53 	.word	0x08009e53
 8009e10:	08009e53 	.word	0x08009e53
 8009e14:	08009e3d 	.word	0x08009e3d
          frequency = HAL_RCC_GetPCLK1Freq();
 8009e18:	f7ff f9e8 	bl	80091ec <HAL_RCC_GetPCLK1Freq>
 8009e1c:	61f8      	str	r0, [r7, #28]
          break;
 8009e1e:	e01d      	b.n	8009e5c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8009e20:	f7ff f94c 	bl	80090bc <HAL_RCC_GetSysClockFreq>
 8009e24:	61f8      	str	r0, [r7, #28]
          break;
 8009e26:	e019      	b.n	8009e5c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009e28:	4b2b      	ldr	r3, [pc, #172]	@ (8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e34:	d10f      	bne.n	8009e56 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8009e36:	4b2a      	ldr	r3, [pc, #168]	@ (8009ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8009e38:	61fb      	str	r3, [r7, #28]
          break;
 8009e3a:	e00c      	b.n	8009e56 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009e3c:	4b26      	ldr	r3, [pc, #152]	@ (8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e42:	f003 0302 	and.w	r3, r3, #2
 8009e46:	2b02      	cmp	r3, #2
 8009e48:	d107      	bne.n	8009e5a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8009e4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e4e:	61fb      	str	r3, [r7, #28]
          break;
 8009e50:	e003      	b.n	8009e5a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8009e52:	bf00      	nop
 8009e54:	e2d6      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009e56:	bf00      	nop
 8009e58:	e2d4      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009e5a:	bf00      	nop
        break;
 8009e5c:	e2d2      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8009e5e:	4b1e      	ldr	r3, [pc, #120]	@ (8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e64:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009e68:	613b      	str	r3, [r7, #16]
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	2b30      	cmp	r3, #48	@ 0x30
 8009e6e:	d021      	beq.n	8009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	2b30      	cmp	r3, #48	@ 0x30
 8009e74:	d829      	bhi.n	8009eca <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	2b20      	cmp	r3, #32
 8009e7a:	d011      	beq.n	8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	2b20      	cmp	r3, #32
 8009e80:	d823      	bhi.n	8009eca <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d003      	beq.n	8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	2b10      	cmp	r3, #16
 8009e8c:	d004      	beq.n	8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8009e8e:	e01c      	b.n	8009eca <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009e90:	f7ff f9ac 	bl	80091ec <HAL_RCC_GetPCLK1Freq>
 8009e94:	61f8      	str	r0, [r7, #28]
          break;
 8009e96:	e01d      	b.n	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8009e98:	f7ff f910 	bl	80090bc <HAL_RCC_GetSysClockFreq>
 8009e9c:	61f8      	str	r0, [r7, #28]
          break;
 8009e9e:	e019      	b.n	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009ea0:	4b0d      	ldr	r3, [pc, #52]	@ (8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ea8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009eac:	d10f      	bne.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8009eae:	4b0c      	ldr	r3, [pc, #48]	@ (8009ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8009eb0:	61fb      	str	r3, [r7, #28]
          break;
 8009eb2:	e00c      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009eb4:	4b08      	ldr	r3, [pc, #32]	@ (8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009eba:	f003 0302 	and.w	r3, r3, #2
 8009ebe:	2b02      	cmp	r3, #2
 8009ec0:	d107      	bne.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8009ec2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ec6:	61fb      	str	r3, [r7, #28]
          break;
 8009ec8:	e003      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8009eca:	bf00      	nop
 8009ecc:	e29a      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009ece:	bf00      	nop
 8009ed0:	e298      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009ed2:	bf00      	nop
        break;
 8009ed4:	e296      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8009ed6:	bf00      	nop
 8009ed8:	40021000 	.word	0x40021000
 8009edc:	0801f290 	.word	0x0801f290
 8009ee0:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8009ee4:	4b9b      	ldr	r3, [pc, #620]	@ (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8009ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009eea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009eee:	613b      	str	r3, [r7, #16]
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ef4:	d021      	beq.n	8009f3a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	2bc0      	cmp	r3, #192	@ 0xc0
 8009efa:	d829      	bhi.n	8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	2b80      	cmp	r3, #128	@ 0x80
 8009f00:	d011      	beq.n	8009f26 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	2b80      	cmp	r3, #128	@ 0x80
 8009f06:	d823      	bhi.n	8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d003      	beq.n	8009f16 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	2b40      	cmp	r3, #64	@ 0x40
 8009f12:	d004      	beq.n	8009f1e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8009f14:	e01c      	b.n	8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009f16:	f7ff f969 	bl	80091ec <HAL_RCC_GetPCLK1Freq>
 8009f1a:	61f8      	str	r0, [r7, #28]
          break;
 8009f1c:	e01d      	b.n	8009f5a <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8009f1e:	f7ff f8cd 	bl	80090bc <HAL_RCC_GetSysClockFreq>
 8009f22:	61f8      	str	r0, [r7, #28]
          break;
 8009f24:	e019      	b.n	8009f5a <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009f26:	4b8b      	ldr	r3, [pc, #556]	@ (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f32:	d10f      	bne.n	8009f54 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8009f34:	4b88      	ldr	r3, [pc, #544]	@ (800a158 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8009f36:	61fb      	str	r3, [r7, #28]
          break;
 8009f38:	e00c      	b.n	8009f54 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009f3a:	4b86      	ldr	r3, [pc, #536]	@ (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8009f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f40:	f003 0302 	and.w	r3, r3, #2
 8009f44:	2b02      	cmp	r3, #2
 8009f46:	d107      	bne.n	8009f58 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8009f48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f4c:	61fb      	str	r3, [r7, #28]
          break;
 8009f4e:	e003      	b.n	8009f58 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8009f50:	bf00      	nop
 8009f52:	e257      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009f54:	bf00      	nop
 8009f56:	e255      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009f58:	bf00      	nop
        break;
 8009f5a:	e253      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8009f5c:	4b7d      	ldr	r3, [pc, #500]	@ (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8009f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009f66:	613b      	str	r3, [r7, #16]
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f6e:	d025      	beq.n	8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f76:	d82c      	bhi.n	8009fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f7e:	d013      	beq.n	8009fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f86:	d824      	bhi.n	8009fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d004      	beq.n	8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f94:	d004      	beq.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8009f96:	e01c      	b.n	8009fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009f98:	f7ff f928 	bl	80091ec <HAL_RCC_GetPCLK1Freq>
 8009f9c:	61f8      	str	r0, [r7, #28]
          break;
 8009f9e:	e01d      	b.n	8009fdc <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8009fa0:	f7ff f88c 	bl	80090bc <HAL_RCC_GetSysClockFreq>
 8009fa4:	61f8      	str	r0, [r7, #28]
          break;
 8009fa6:	e019      	b.n	8009fdc <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009fa8:	4b6a      	ldr	r3, [pc, #424]	@ (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009fb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009fb4:	d10f      	bne.n	8009fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8009fb6:	4b68      	ldr	r3, [pc, #416]	@ (800a158 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8009fb8:	61fb      	str	r3, [r7, #28]
          break;
 8009fba:	e00c      	b.n	8009fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009fbc:	4b65      	ldr	r3, [pc, #404]	@ (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8009fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fc2:	f003 0302 	and.w	r3, r3, #2
 8009fc6:	2b02      	cmp	r3, #2
 8009fc8:	d107      	bne.n	8009fda <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8009fca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009fce:	61fb      	str	r3, [r7, #28]
          break;
 8009fd0:	e003      	b.n	8009fda <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8009fd2:	bf00      	nop
 8009fd4:	e216      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009fd6:	bf00      	nop
 8009fd8:	e214      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009fda:	bf00      	nop
        break;
 8009fdc:	e212      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8009fde:	4b5d      	ldr	r3, [pc, #372]	@ (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8009fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fe4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009fe8:	613b      	str	r3, [r7, #16]
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009ff0:	d025      	beq.n	800a03e <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009ff8:	d82c      	bhi.n	800a054 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a000:	d013      	beq.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a008:	d824      	bhi.n	800a054 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d004      	beq.n	800a01a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a016:	d004      	beq.n	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 800a018:	e01c      	b.n	800a054 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a01a:	f7ff f8e7 	bl	80091ec <HAL_RCC_GetPCLK1Freq>
 800a01e:	61f8      	str	r0, [r7, #28]
          break;
 800a020:	e01d      	b.n	800a05e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 800a022:	f7ff f84b 	bl	80090bc <HAL_RCC_GetSysClockFreq>
 800a026:	61f8      	str	r0, [r7, #28]
          break;
 800a028:	e019      	b.n	800a05e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a02a:	4b4a      	ldr	r3, [pc, #296]	@ (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a032:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a036:	d10f      	bne.n	800a058 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 800a038:	4b47      	ldr	r3, [pc, #284]	@ (800a158 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800a03a:	61fb      	str	r3, [r7, #28]
          break;
 800a03c:	e00c      	b.n	800a058 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a03e:	4b45      	ldr	r3, [pc, #276]	@ (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800a040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a044:	f003 0302 	and.w	r3, r3, #2
 800a048:	2b02      	cmp	r3, #2
 800a04a:	d107      	bne.n	800a05c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 800a04c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a050:	61fb      	str	r3, [r7, #28]
          break;
 800a052:	e003      	b.n	800a05c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 800a054:	bf00      	nop
 800a056:	e1d5      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800a058:	bf00      	nop
 800a05a:	e1d3      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800a05c:	bf00      	nop
        break;
 800a05e:	e1d1      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a060:	4b3c      	ldr	r3, [pc, #240]	@ (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800a062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a066:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a06a:	613b      	str	r3, [r7, #16]
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a072:	d00c      	beq.n	800a08e <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a07a:	d864      	bhi.n	800a146 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a082:	d008      	beq.n	800a096 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a08a:	d030      	beq.n	800a0ee <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 800a08c:	e05b      	b.n	800a146 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 800a08e:	f7ff f815 	bl	80090bc <HAL_RCC_GetSysClockFreq>
 800a092:	61f8      	str	r0, [r7, #28]
          break;
 800a094:	e05c      	b.n	800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800a096:	4b2f      	ldr	r3, [pc, #188]	@ (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a09e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a0a2:	d152      	bne.n	800a14a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 800a0a4:	4b2b      	ldr	r3, [pc, #172]	@ (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800a0a6:	691b      	ldr	r3, [r3, #16]
 800a0a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d04c      	beq.n	800a14a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800a0b0:	4b28      	ldr	r3, [pc, #160]	@ (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800a0b2:	691b      	ldr	r3, [r3, #16]
 800a0b4:	0a1b      	lsrs	r3, r3, #8
 800a0b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0ba:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a0bc:	69bb      	ldr	r3, [r7, #24]
 800a0be:	68fa      	ldr	r2, [r7, #12]
 800a0c0:	fb03 f202 	mul.w	r2, r3, r2
 800a0c4:	4b23      	ldr	r3, [pc, #140]	@ (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800a0c6:	68db      	ldr	r3, [r3, #12]
 800a0c8:	091b      	lsrs	r3, r3, #4
 800a0ca:	f003 0307 	and.w	r3, r3, #7
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0d4:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800a0d6:	4b1f      	ldr	r3, [pc, #124]	@ (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800a0d8:	691b      	ldr	r3, [r3, #16]
 800a0da:	0e5b      	lsrs	r3, r3, #25
 800a0dc:	f003 0303 	and.w	r3, r3, #3
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	005b      	lsls	r3, r3, #1
 800a0e4:	69ba      	ldr	r2, [r7, #24]
 800a0e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0ea:	61fb      	str	r3, [r7, #28]
          break;
 800a0ec:	e02d      	b.n	800a14a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800a0ee:	4b19      	ldr	r3, [pc, #100]	@ (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a0f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0fa:	d128      	bne.n	800a14e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 800a0fc:	4b15      	ldr	r3, [pc, #84]	@ (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800a0fe:	695b      	ldr	r3, [r3, #20]
 800a100:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a104:	2b00      	cmp	r3, #0
 800a106:	d022      	beq.n	800a14e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800a108:	4b12      	ldr	r3, [pc, #72]	@ (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800a10a:	695b      	ldr	r3, [r3, #20]
 800a10c:	0a1b      	lsrs	r3, r3, #8
 800a10e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a112:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a114:	69bb      	ldr	r3, [r7, #24]
 800a116:	68fa      	ldr	r2, [r7, #12]
 800a118:	fb03 f202 	mul.w	r2, r3, r2
 800a11c:	4b0d      	ldr	r3, [pc, #52]	@ (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800a11e:	68db      	ldr	r3, [r3, #12]
 800a120:	091b      	lsrs	r3, r3, #4
 800a122:	f003 0307 	and.w	r3, r3, #7
 800a126:	3301      	adds	r3, #1
 800a128:	fbb2 f3f3 	udiv	r3, r2, r3
 800a12c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800a12e:	4b09      	ldr	r3, [pc, #36]	@ (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800a130:	695b      	ldr	r3, [r3, #20]
 800a132:	0e5b      	lsrs	r3, r3, #25
 800a134:	f003 0303 	and.w	r3, r3, #3
 800a138:	3301      	adds	r3, #1
 800a13a:	005b      	lsls	r3, r3, #1
 800a13c:	69ba      	ldr	r2, [r7, #24]
 800a13e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a142:	61fb      	str	r3, [r7, #28]
          break;
 800a144:	e003      	b.n	800a14e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 800a146:	bf00      	nop
 800a148:	e15c      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800a14a:	bf00      	nop
 800a14c:	e15a      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800a14e:	bf00      	nop
        break;
 800a150:	e158      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800a152:	bf00      	nop
 800a154:	40021000 	.word	0x40021000
 800a158:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800a15c:	4b9d      	ldr	r3, [pc, #628]	@ (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800a15e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a162:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a166:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d103      	bne.n	800a176 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 800a16e:	f7ff f853 	bl	8009218 <HAL_RCC_GetPCLK2Freq>
 800a172:	61f8      	str	r0, [r7, #28]
        break;
 800a174:	e146      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 800a176:	f7fe ffa1 	bl	80090bc <HAL_RCC_GetSysClockFreq>
 800a17a:	61f8      	str	r0, [r7, #28]
        break;
 800a17c:	e142      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800a17e:	4b95      	ldr	r3, [pc, #596]	@ (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800a180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a184:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a188:	613b      	str	r3, [r7, #16]
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a190:	d013      	beq.n	800a1ba <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a198:	d819      	bhi.n	800a1ce <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d004      	beq.n	800a1aa <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1a6:	d004      	beq.n	800a1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 800a1a8:	e011      	b.n	800a1ce <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a1aa:	f7ff f81f 	bl	80091ec <HAL_RCC_GetPCLK1Freq>
 800a1ae:	61f8      	str	r0, [r7, #28]
          break;
 800a1b0:	e010      	b.n	800a1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 800a1b2:	f7fe ff83 	bl	80090bc <HAL_RCC_GetSysClockFreq>
 800a1b6:	61f8      	str	r0, [r7, #28]
          break;
 800a1b8:	e00c      	b.n	800a1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a1ba:	4b86      	ldr	r3, [pc, #536]	@ (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a1c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a1c6:	d104      	bne.n	800a1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 800a1c8:	4b83      	ldr	r3, [pc, #524]	@ (800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800a1ca:	61fb      	str	r3, [r7, #28]
          break;
 800a1cc:	e001      	b.n	800a1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 800a1ce:	bf00      	nop
 800a1d0:	e118      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800a1d2:	bf00      	nop
        break;
 800a1d4:	e116      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800a1d6:	4b7f      	ldr	r3, [pc, #508]	@ (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800a1d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a1e0:	613b      	str	r3, [r7, #16]
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a1e8:	d013      	beq.n	800a212 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a1f0:	d819      	bhi.n	800a226 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d004      	beq.n	800a202 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a1fe:	d004      	beq.n	800a20a <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 800a200:	e011      	b.n	800a226 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a202:	f7fe fff3 	bl	80091ec <HAL_RCC_GetPCLK1Freq>
 800a206:	61f8      	str	r0, [r7, #28]
          break;
 800a208:	e010      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800a20a:	f7fe ff57 	bl	80090bc <HAL_RCC_GetSysClockFreq>
 800a20e:	61f8      	str	r0, [r7, #28]
          break;
 800a210:	e00c      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a212:	4b70      	ldr	r3, [pc, #448]	@ (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a21a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a21e:	d104      	bne.n	800a22a <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 800a220:	4b6d      	ldr	r3, [pc, #436]	@ (800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800a222:	61fb      	str	r3, [r7, #28]
          break;
 800a224:	e001      	b.n	800a22a <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 800a226:	bf00      	nop
 800a228:	e0ec      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800a22a:	bf00      	nop
        break;
 800a22c:	e0ea      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800a22e:	4b69      	ldr	r3, [pc, #420]	@ (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800a230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a234:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a238:	613b      	str	r3, [r7, #16]
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a240:	d013      	beq.n	800a26a <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a248:	d819      	bhi.n	800a27e <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d004      	beq.n	800a25a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a256:	d004      	beq.n	800a262 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 800a258:	e011      	b.n	800a27e <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a25a:	f7fe ffc7 	bl	80091ec <HAL_RCC_GetPCLK1Freq>
 800a25e:	61f8      	str	r0, [r7, #28]
          break;
 800a260:	e010      	b.n	800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 800a262:	f7fe ff2b 	bl	80090bc <HAL_RCC_GetSysClockFreq>
 800a266:	61f8      	str	r0, [r7, #28]
          break;
 800a268:	e00c      	b.n	800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a26a:	4b5a      	ldr	r3, [pc, #360]	@ (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a272:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a276:	d104      	bne.n	800a282 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 800a278:	4b57      	ldr	r3, [pc, #348]	@ (800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800a27a:	61fb      	str	r3, [r7, #28]
          break;
 800a27c:	e001      	b.n	800a282 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 800a27e:	bf00      	nop
 800a280:	e0c0      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800a282:	bf00      	nop
        break;
 800a284:	e0be      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800a286:	4b53      	ldr	r3, [pc, #332]	@ (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800a288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a28c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800a290:	613b      	str	r3, [r7, #16]
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a298:	d02c      	beq.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a2a0:	d833      	bhi.n	800a30a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a2a8:	d01a      	beq.n	800a2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a2b0:	d82b      	bhi.n	800a30a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d004      	beq.n	800a2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a2be:	d004      	beq.n	800a2ca <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 800a2c0:	e023      	b.n	800a30a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a2c2:	f7fe ff93 	bl	80091ec <HAL_RCC_GetPCLK1Freq>
 800a2c6:	61f8      	str	r0, [r7, #28]
          break;
 800a2c8:	e026      	b.n	800a318 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800a2ca:	4b42      	ldr	r3, [pc, #264]	@ (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800a2cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a2d0:	f003 0302 	and.w	r3, r3, #2
 800a2d4:	2b02      	cmp	r3, #2
 800a2d6:	d11a      	bne.n	800a30e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 800a2d8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a2dc:	61fb      	str	r3, [r7, #28]
          break;
 800a2de:	e016      	b.n	800a30e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a2e0:	4b3c      	ldr	r3, [pc, #240]	@ (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a2e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a2ec:	d111      	bne.n	800a312 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 800a2ee:	4b3a      	ldr	r3, [pc, #232]	@ (800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800a2f0:	61fb      	str	r3, [r7, #28]
          break;
 800a2f2:	e00e      	b.n	800a312 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a2f4:	4b37      	ldr	r3, [pc, #220]	@ (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800a2f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2fa:	f003 0302 	and.w	r3, r3, #2
 800a2fe:	2b02      	cmp	r3, #2
 800a300:	d109      	bne.n	800a316 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 800a302:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a306:	61fb      	str	r3, [r7, #28]
          break;
 800a308:	e005      	b.n	800a316 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 800a30a:	bf00      	nop
 800a30c:	e07a      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800a30e:	bf00      	nop
 800a310:	e078      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800a312:	bf00      	nop
 800a314:	e076      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800a316:	bf00      	nop
        break;
 800a318:	e074      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800a31a:	4b2e      	ldr	r3, [pc, #184]	@ (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800a31c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a320:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800a324:	613b      	str	r3, [r7, #16]
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a32c:	d02c      	beq.n	800a388 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a334:	d833      	bhi.n	800a39e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a33c:	d01a      	beq.n	800a374 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a344:	d82b      	bhi.n	800a39e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d004      	beq.n	800a356 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a352:	d004      	beq.n	800a35e <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 800a354:	e023      	b.n	800a39e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a356:	f7fe ff49 	bl	80091ec <HAL_RCC_GetPCLK1Freq>
 800a35a:	61f8      	str	r0, [r7, #28]
          break;
 800a35c:	e026      	b.n	800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800a35e:	4b1d      	ldr	r3, [pc, #116]	@ (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800a360:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a364:	f003 0302 	and.w	r3, r3, #2
 800a368:	2b02      	cmp	r3, #2
 800a36a:	d11a      	bne.n	800a3a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 800a36c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a370:	61fb      	str	r3, [r7, #28]
          break;
 800a372:	e016      	b.n	800a3a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a374:	4b17      	ldr	r3, [pc, #92]	@ (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a37c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a380:	d111      	bne.n	800a3a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 800a382:	4b15      	ldr	r3, [pc, #84]	@ (800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800a384:	61fb      	str	r3, [r7, #28]
          break;
 800a386:	e00e      	b.n	800a3a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a388:	4b12      	ldr	r3, [pc, #72]	@ (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800a38a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a38e:	f003 0302 	and.w	r3, r3, #2
 800a392:	2b02      	cmp	r3, #2
 800a394:	d109      	bne.n	800a3aa <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 800a396:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a39a:	61fb      	str	r3, [r7, #28]
          break;
 800a39c:	e005      	b.n	800a3aa <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 800a39e:	bf00      	nop
 800a3a0:	e030      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800a3a2:	bf00      	nop
 800a3a4:	e02e      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800a3a6:	bf00      	nop
 800a3a8:	e02c      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800a3aa:	bf00      	nop
        break;
 800a3ac:	e02a      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800a3ae:	4b09      	ldr	r3, [pc, #36]	@ (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800a3b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3b4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a3b8:	613b      	str	r3, [r7, #16]
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d004      	beq.n	800a3ca <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3c6:	d009      	beq.n	800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 800a3c8:	e012      	b.n	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a3ca:	f7fe ff0f 	bl	80091ec <HAL_RCC_GetPCLK1Freq>
 800a3ce:	61f8      	str	r0, [r7, #28]
          break;
 800a3d0:	e00e      	b.n	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 800a3d2:	bf00      	nop
 800a3d4:	40021000 	.word	0x40021000
 800a3d8:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a3dc:	4b0c      	ldr	r3, [pc, #48]	@ (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a3e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3e8:	d101      	bne.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 800a3ea:	4b0a      	ldr	r3, [pc, #40]	@ (800a414 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800a3ec:	61fb      	str	r3, [r7, #28]
          break;
 800a3ee:	bf00      	nop
        break;
 800a3f0:	e008      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800a3f2:	bf00      	nop
 800a3f4:	e006      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800a3f6:	bf00      	nop
 800a3f8:	e004      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800a3fa:	bf00      	nop
 800a3fc:	e002      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800a3fe:	bf00      	nop
 800a400:	e000      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800a402:	bf00      	nop
    }
  }

  return(frequency);
 800a404:	69fb      	ldr	r3, [r7, #28]
}
 800a406:	4618      	mov	r0, r3
 800a408:	3720      	adds	r7, #32
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	40021000 	.word	0x40021000
 800a414:	00f42400 	.word	0x00f42400

0800a418 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800a418:	b480      	push	{r7}
 800a41a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800a41c:	4b05      	ldr	r3, [pc, #20]	@ (800a434 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a04      	ldr	r2, [pc, #16]	@ (800a434 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800a422:	f043 0304 	orr.w	r3, r3, #4
 800a426:	6013      	str	r3, [r2, #0]
}
 800a428:	bf00      	nop
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr
 800a432:	bf00      	nop
 800a434:	40021000 	.word	0x40021000

0800a438 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a442:	2300      	movs	r3, #0
 800a444:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a446:	4b75      	ldr	r3, [pc, #468]	@ (800a61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800a448:	68db      	ldr	r3, [r3, #12]
 800a44a:	f003 0303 	and.w	r3, r3, #3
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d018      	beq.n	800a484 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a452:	4b72      	ldr	r3, [pc, #456]	@ (800a61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	f003 0203 	and.w	r2, r3, #3
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	429a      	cmp	r2, r3
 800a460:	d10d      	bne.n	800a47e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
       ||
 800a466:	2b00      	cmp	r3, #0
 800a468:	d009      	beq.n	800a47e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a46a:	4b6c      	ldr	r3, [pc, #432]	@ (800a61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800a46c:	68db      	ldr	r3, [r3, #12]
 800a46e:	091b      	lsrs	r3, r3, #4
 800a470:	f003 0307 	and.w	r3, r3, #7
 800a474:	1c5a      	adds	r2, r3, #1
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	685b      	ldr	r3, [r3, #4]
       ||
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d047      	beq.n	800a50e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a47e:	2301      	movs	r3, #1
 800a480:	73fb      	strb	r3, [r7, #15]
 800a482:	e044      	b.n	800a50e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	2b03      	cmp	r3, #3
 800a48a:	d018      	beq.n	800a4be <RCCEx_PLLSAI1_Config+0x86>
 800a48c:	2b03      	cmp	r3, #3
 800a48e:	d825      	bhi.n	800a4dc <RCCEx_PLLSAI1_Config+0xa4>
 800a490:	2b01      	cmp	r3, #1
 800a492:	d002      	beq.n	800a49a <RCCEx_PLLSAI1_Config+0x62>
 800a494:	2b02      	cmp	r3, #2
 800a496:	d009      	beq.n	800a4ac <RCCEx_PLLSAI1_Config+0x74>
 800a498:	e020      	b.n	800a4dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a49a:	4b60      	ldr	r3, [pc, #384]	@ (800a61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f003 0302 	and.w	r3, r3, #2
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d11d      	bne.n	800a4e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a4aa:	e01a      	b.n	800a4e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a4ac:	4b5b      	ldr	r3, [pc, #364]	@ (800a61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d116      	bne.n	800a4e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a4bc:	e013      	b.n	800a4e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a4be:	4b57      	ldr	r3, [pc, #348]	@ (800a61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d10f      	bne.n	800a4ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a4ca:	4b54      	ldr	r3, [pc, #336]	@ (800a61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d109      	bne.n	800a4ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a4da:	e006      	b.n	800a4ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	73fb      	strb	r3, [r7, #15]
      break;
 800a4e0:	e004      	b.n	800a4ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a4e2:	bf00      	nop
 800a4e4:	e002      	b.n	800a4ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a4e6:	bf00      	nop
 800a4e8:	e000      	b.n	800a4ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a4ea:	bf00      	nop
    }

    if(status == HAL_OK)
 800a4ec:	7bfb      	ldrb	r3, [r7, #15]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d10d      	bne.n	800a50e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a4f2:	4b4a      	ldr	r3, [pc, #296]	@ (800a61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800a4f4:	68db      	ldr	r3, [r3, #12]
 800a4f6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6819      	ldr	r1, [r3, #0]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	3b01      	subs	r3, #1
 800a504:	011b      	lsls	r3, r3, #4
 800a506:	430b      	orrs	r3, r1
 800a508:	4944      	ldr	r1, [pc, #272]	@ (800a61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800a50a:	4313      	orrs	r3, r2
 800a50c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a50e:	7bfb      	ldrb	r3, [r7, #15]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d17d      	bne.n	800a610 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a514:	4b41      	ldr	r3, [pc, #260]	@ (800a61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a40      	ldr	r2, [pc, #256]	@ (800a61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800a51a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a51e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a520:	f7fc f88e 	bl	8006640 <HAL_GetTick>
 800a524:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a526:	e009      	b.n	800a53c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a528:	f7fc f88a 	bl	8006640 <HAL_GetTick>
 800a52c:	4602      	mov	r2, r0
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	1ad3      	subs	r3, r2, r3
 800a532:	2b02      	cmp	r3, #2
 800a534:	d902      	bls.n	800a53c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a536:	2303      	movs	r3, #3
 800a538:	73fb      	strb	r3, [r7, #15]
        break;
 800a53a:	e005      	b.n	800a548 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a53c:	4b37      	ldr	r3, [pc, #220]	@ (800a61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a544:	2b00      	cmp	r3, #0
 800a546:	d1ef      	bne.n	800a528 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a548:	7bfb      	ldrb	r3, [r7, #15]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d160      	bne.n	800a610 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d111      	bne.n	800a578 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a554:	4b31      	ldr	r3, [pc, #196]	@ (800a61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800a556:	691b      	ldr	r3, [r3, #16]
 800a558:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800a55c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	6892      	ldr	r2, [r2, #8]
 800a564:	0211      	lsls	r1, r2, #8
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	68d2      	ldr	r2, [r2, #12]
 800a56a:	0912      	lsrs	r2, r2, #4
 800a56c:	0452      	lsls	r2, r2, #17
 800a56e:	430a      	orrs	r2, r1
 800a570:	492a      	ldr	r1, [pc, #168]	@ (800a61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800a572:	4313      	orrs	r3, r2
 800a574:	610b      	str	r3, [r1, #16]
 800a576:	e027      	b.n	800a5c8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d112      	bne.n	800a5a4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a57e:	4b27      	ldr	r3, [pc, #156]	@ (800a61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800a580:	691b      	ldr	r3, [r3, #16]
 800a582:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800a586:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	6892      	ldr	r2, [r2, #8]
 800a58e:	0211      	lsls	r1, r2, #8
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	6912      	ldr	r2, [r2, #16]
 800a594:	0852      	lsrs	r2, r2, #1
 800a596:	3a01      	subs	r2, #1
 800a598:	0552      	lsls	r2, r2, #21
 800a59a:	430a      	orrs	r2, r1
 800a59c:	491f      	ldr	r1, [pc, #124]	@ (800a61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	610b      	str	r3, [r1, #16]
 800a5a2:	e011      	b.n	800a5c8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a5a4:	4b1d      	ldr	r3, [pc, #116]	@ (800a61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800a5a6:	691b      	ldr	r3, [r3, #16]
 800a5a8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800a5ac:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800a5b0:	687a      	ldr	r2, [r7, #4]
 800a5b2:	6892      	ldr	r2, [r2, #8]
 800a5b4:	0211      	lsls	r1, r2, #8
 800a5b6:	687a      	ldr	r2, [r7, #4]
 800a5b8:	6952      	ldr	r2, [r2, #20]
 800a5ba:	0852      	lsrs	r2, r2, #1
 800a5bc:	3a01      	subs	r2, #1
 800a5be:	0652      	lsls	r2, r2, #25
 800a5c0:	430a      	orrs	r2, r1
 800a5c2:	4916      	ldr	r1, [pc, #88]	@ (800a61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800a5c4:	4313      	orrs	r3, r2
 800a5c6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a5c8:	4b14      	ldr	r3, [pc, #80]	@ (800a61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a13      	ldr	r2, [pc, #76]	@ (800a61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800a5ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a5d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5d4:	f7fc f834 	bl	8006640 <HAL_GetTick>
 800a5d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a5da:	e009      	b.n	800a5f0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a5dc:	f7fc f830 	bl	8006640 <HAL_GetTick>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	1ad3      	subs	r3, r2, r3
 800a5e6:	2b02      	cmp	r3, #2
 800a5e8:	d902      	bls.n	800a5f0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800a5ea:	2303      	movs	r3, #3
 800a5ec:	73fb      	strb	r3, [r7, #15]
          break;
 800a5ee:	e005      	b.n	800a5fc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a5f0:	4b0a      	ldr	r3, [pc, #40]	@ (800a61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d0ef      	beq.n	800a5dc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800a5fc:	7bfb      	ldrb	r3, [r7, #15]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d106      	bne.n	800a610 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a602:	4b06      	ldr	r3, [pc, #24]	@ (800a61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800a604:	691a      	ldr	r2, [r3, #16]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	699b      	ldr	r3, [r3, #24]
 800a60a:	4904      	ldr	r1, [pc, #16]	@ (800a61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800a60c:	4313      	orrs	r3, r2
 800a60e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a610:	7bfb      	ldrb	r3, [r7, #15]
}
 800a612:	4618      	mov	r0, r3
 800a614:	3710      	adds	r7, #16
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop
 800a61c:	40021000 	.word	0x40021000

0800a620 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b084      	sub	sp, #16
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a62a:	2300      	movs	r3, #0
 800a62c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a62e:	4b6a      	ldr	r3, [pc, #424]	@ (800a7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a630:	68db      	ldr	r3, [r3, #12]
 800a632:	f003 0303 	and.w	r3, r3, #3
 800a636:	2b00      	cmp	r3, #0
 800a638:	d018      	beq.n	800a66c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a63a:	4b67      	ldr	r3, [pc, #412]	@ (800a7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a63c:	68db      	ldr	r3, [r3, #12]
 800a63e:	f003 0203 	and.w	r2, r3, #3
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	429a      	cmp	r2, r3
 800a648:	d10d      	bne.n	800a666 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
       ||
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d009      	beq.n	800a666 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800a652:	4b61      	ldr	r3, [pc, #388]	@ (800a7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a654:	68db      	ldr	r3, [r3, #12]
 800a656:	091b      	lsrs	r3, r3, #4
 800a658:	f003 0307 	and.w	r3, r3, #7
 800a65c:	1c5a      	adds	r2, r3, #1
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	685b      	ldr	r3, [r3, #4]
       ||
 800a662:	429a      	cmp	r2, r3
 800a664:	d047      	beq.n	800a6f6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a666:	2301      	movs	r3, #1
 800a668:	73fb      	strb	r3, [r7, #15]
 800a66a:	e044      	b.n	800a6f6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2b03      	cmp	r3, #3
 800a672:	d018      	beq.n	800a6a6 <RCCEx_PLLSAI2_Config+0x86>
 800a674:	2b03      	cmp	r3, #3
 800a676:	d825      	bhi.n	800a6c4 <RCCEx_PLLSAI2_Config+0xa4>
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d002      	beq.n	800a682 <RCCEx_PLLSAI2_Config+0x62>
 800a67c:	2b02      	cmp	r3, #2
 800a67e:	d009      	beq.n	800a694 <RCCEx_PLLSAI2_Config+0x74>
 800a680:	e020      	b.n	800a6c4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a682:	4b55      	ldr	r3, [pc, #340]	@ (800a7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f003 0302 	and.w	r3, r3, #2
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d11d      	bne.n	800a6ca <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800a68e:	2301      	movs	r3, #1
 800a690:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a692:	e01a      	b.n	800a6ca <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a694:	4b50      	ldr	r3, [pc, #320]	@ (800a7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d116      	bne.n	800a6ce <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a6a4:	e013      	b.n	800a6ce <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a6a6:	4b4c      	ldr	r3, [pc, #304]	@ (800a7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d10f      	bne.n	800a6d2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a6b2:	4b49      	ldr	r3, [pc, #292]	@ (800a7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d109      	bne.n	800a6d2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800a6be:	2301      	movs	r3, #1
 800a6c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a6c2:	e006      	b.n	800a6d2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	73fb      	strb	r3, [r7, #15]
      break;
 800a6c8:	e004      	b.n	800a6d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a6ca:	bf00      	nop
 800a6cc:	e002      	b.n	800a6d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a6ce:	bf00      	nop
 800a6d0:	e000      	b.n	800a6d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a6d2:	bf00      	nop
    }

    if(status == HAL_OK)
 800a6d4:	7bfb      	ldrb	r3, [r7, #15]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d10d      	bne.n	800a6f6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a6da:	4b3f      	ldr	r3, [pc, #252]	@ (800a7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a6dc:	68db      	ldr	r3, [r3, #12]
 800a6de:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6819      	ldr	r1, [r3, #0]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	685b      	ldr	r3, [r3, #4]
 800a6ea:	3b01      	subs	r3, #1
 800a6ec:	011b      	lsls	r3, r3, #4
 800a6ee:	430b      	orrs	r3, r1
 800a6f0:	4939      	ldr	r1, [pc, #228]	@ (800a7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a6f6:	7bfb      	ldrb	r3, [r7, #15]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d167      	bne.n	800a7cc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800a6fc:	4b36      	ldr	r3, [pc, #216]	@ (800a7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4a35      	ldr	r2, [pc, #212]	@ (800a7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a702:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a706:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a708:	f7fb ff9a 	bl	8006640 <HAL_GetTick>
 800a70c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a70e:	e009      	b.n	800a724 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a710:	f7fb ff96 	bl	8006640 <HAL_GetTick>
 800a714:	4602      	mov	r2, r0
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	1ad3      	subs	r3, r2, r3
 800a71a:	2b02      	cmp	r3, #2
 800a71c:	d902      	bls.n	800a724 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a71e:	2303      	movs	r3, #3
 800a720:	73fb      	strb	r3, [r7, #15]
        break;
 800a722:	e005      	b.n	800a730 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a724:	4b2c      	ldr	r3, [pc, #176]	@ (800a7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d1ef      	bne.n	800a710 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a730:	7bfb      	ldrb	r3, [r7, #15]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d14a      	bne.n	800a7cc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d111      	bne.n	800a760 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a73c:	4b26      	ldr	r3, [pc, #152]	@ (800a7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a73e:	695b      	ldr	r3, [r3, #20]
 800a740:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800a744:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a748:	687a      	ldr	r2, [r7, #4]
 800a74a:	6892      	ldr	r2, [r2, #8]
 800a74c:	0211      	lsls	r1, r2, #8
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	68d2      	ldr	r2, [r2, #12]
 800a752:	0912      	lsrs	r2, r2, #4
 800a754:	0452      	lsls	r2, r2, #17
 800a756:	430a      	orrs	r2, r1
 800a758:	491f      	ldr	r1, [pc, #124]	@ (800a7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a75a:	4313      	orrs	r3, r2
 800a75c:	614b      	str	r3, [r1, #20]
 800a75e:	e011      	b.n	800a784 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a760:	4b1d      	ldr	r3, [pc, #116]	@ (800a7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a762:	695b      	ldr	r3, [r3, #20]
 800a764:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800a768:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800a76c:	687a      	ldr	r2, [r7, #4]
 800a76e:	6892      	ldr	r2, [r2, #8]
 800a770:	0211      	lsls	r1, r2, #8
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	6912      	ldr	r2, [r2, #16]
 800a776:	0852      	lsrs	r2, r2, #1
 800a778:	3a01      	subs	r2, #1
 800a77a:	0652      	lsls	r2, r2, #25
 800a77c:	430a      	orrs	r2, r1
 800a77e:	4916      	ldr	r1, [pc, #88]	@ (800a7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a780:	4313      	orrs	r3, r2
 800a782:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800a784:	4b14      	ldr	r3, [pc, #80]	@ (800a7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4a13      	ldr	r2, [pc, #76]	@ (800a7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a78a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a78e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a790:	f7fb ff56 	bl	8006640 <HAL_GetTick>
 800a794:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a796:	e009      	b.n	800a7ac <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a798:	f7fb ff52 	bl	8006640 <HAL_GetTick>
 800a79c:	4602      	mov	r2, r0
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	1ad3      	subs	r3, r2, r3
 800a7a2:	2b02      	cmp	r3, #2
 800a7a4:	d902      	bls.n	800a7ac <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800a7a6:	2303      	movs	r3, #3
 800a7a8:	73fb      	strb	r3, [r7, #15]
          break;
 800a7aa:	e005      	b.n	800a7b8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a7ac:	4b0a      	ldr	r3, [pc, #40]	@ (800a7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d0ef      	beq.n	800a798 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800a7b8:	7bfb      	ldrb	r3, [r7, #15]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d106      	bne.n	800a7cc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a7be:	4b06      	ldr	r3, [pc, #24]	@ (800a7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a7c0:	695a      	ldr	r2, [r3, #20]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	695b      	ldr	r3, [r3, #20]
 800a7c6:	4904      	ldr	r1, [pc, #16]	@ (800a7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800a7cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3710      	adds	r7, #16
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	40021000 	.word	0x40021000

0800a7dc <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b089      	sub	sp, #36	@ 0x24
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a7f8:	d10c      	bne.n	800a814 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800a7fa:	4b6e      	ldr	r3, [pc, #440]	@ (800a9b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800a7fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a800:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800a804:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800a806:	69bb      	ldr	r3, [r7, #24]
 800a808:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800a80c:	d112      	bne.n	800a834 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a80e:	4b6a      	ldr	r3, [pc, #424]	@ (800a9b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800a810:	61fb      	str	r3, [r7, #28]
 800a812:	e00f      	b.n	800a834 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a81a:	d10b      	bne.n	800a834 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800a81c:	4b65      	ldr	r3, [pc, #404]	@ (800a9b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800a81e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a822:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800a826:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800a828:	69bb      	ldr	r3, [r7, #24]
 800a82a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a82e:	d101      	bne.n	800a834 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800a830:	4b61      	ldr	r3, [pc, #388]	@ (800a9b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800a832:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800a834:	69fb      	ldr	r3, [r7, #28]
 800a836:	2b00      	cmp	r3, #0
 800a838:	f040 80b4 	bne.w	800a9a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800a840:	69bb      	ldr	r3, [r7, #24]
 800a842:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a846:	d003      	beq.n	800a850 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 800a848:	69bb      	ldr	r3, [r7, #24]
 800a84a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a84e:	d135      	bne.n	800a8bc <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800a850:	4b58      	ldr	r3, [pc, #352]	@ (800a9b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a858:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a85c:	f040 80a1 	bne.w	800a9a2 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 800a860:	4b54      	ldr	r3, [pc, #336]	@ (800a9b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800a862:	68db      	ldr	r3, [r3, #12]
 800a864:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a868:	2b00      	cmp	r3, #0
 800a86a:	f000 809a 	beq.w	800a9a2 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a86e:	4b51      	ldr	r3, [pc, #324]	@ (800a9b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800a870:	68db      	ldr	r3, [r3, #12]
 800a872:	091b      	lsrs	r3, r3, #4
 800a874:	f003 0307 	and.w	r3, r3, #7
 800a878:	3301      	adds	r3, #1
 800a87a:	693a      	ldr	r2, [r7, #16]
 800a87c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a880:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800a882:	4b4c      	ldr	r3, [pc, #304]	@ (800a9b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800a884:	68db      	ldr	r3, [r3, #12]
 800a886:	0a1b      	lsrs	r3, r3, #8
 800a888:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a88c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d10a      	bne.n	800a8aa <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800a894:	4b47      	ldr	r3, [pc, #284]	@ (800a9b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800a896:	68db      	ldr	r3, [r3, #12]
 800a898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d002      	beq.n	800a8a6 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 800a8a0:	2311      	movs	r3, #17
 800a8a2:	617b      	str	r3, [r7, #20]
 800a8a4:	e001      	b.n	800a8aa <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 800a8a6:	2307      	movs	r3, #7
 800a8a8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	68fa      	ldr	r2, [r7, #12]
 800a8ae:	fb03 f202 	mul.w	r2, r3, r2
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8b8:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800a8ba:	e072      	b.n	800a9a2 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800a8bc:	69bb      	ldr	r3, [r7, #24]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d133      	bne.n	800a92a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800a8c2:	4b3c      	ldr	r3, [pc, #240]	@ (800a9b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a8ce:	d169      	bne.n	800a9a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 800a8d0:	4b38      	ldr	r3, [pc, #224]	@ (800a9b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800a8d2:	691b      	ldr	r3, [r3, #16]
 800a8d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d063      	beq.n	800a9a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a8dc:	4b35      	ldr	r3, [pc, #212]	@ (800a9b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800a8de:	68db      	ldr	r3, [r3, #12]
 800a8e0:	091b      	lsrs	r3, r3, #4
 800a8e2:	f003 0307 	and.w	r3, r3, #7
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	693a      	ldr	r2, [r7, #16]
 800a8ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8ee:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800a8f0:	4b30      	ldr	r3, [pc, #192]	@ (800a9b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800a8f2:	691b      	ldr	r3, [r3, #16]
 800a8f4:	0a1b      	lsrs	r3, r3, #8
 800a8f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a8fa:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d10a      	bne.n	800a918 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800a902:	4b2c      	ldr	r3, [pc, #176]	@ (800a9b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800a904:	691b      	ldr	r3, [r3, #16]
 800a906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d002      	beq.n	800a914 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 800a90e:	2311      	movs	r3, #17
 800a910:	617b      	str	r3, [r7, #20]
 800a912:	e001      	b.n	800a918 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 800a914:	2307      	movs	r3, #7
 800a916:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	68fa      	ldr	r2, [r7, #12]
 800a91c:	fb03 f202 	mul.w	r2, r3, r2
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	fbb2 f3f3 	udiv	r3, r2, r3
 800a926:	61fb      	str	r3, [r7, #28]
 800a928:	e03c      	b.n	800a9a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800a92a:	69bb      	ldr	r3, [r7, #24]
 800a92c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a930:	d003      	beq.n	800a93a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 800a932:	69bb      	ldr	r3, [r7, #24]
 800a934:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a938:	d134      	bne.n	800a9a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800a93a:	4b1e      	ldr	r3, [pc, #120]	@ (800a9b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a942:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a946:	d12d      	bne.n	800a9a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 800a948:	4b1a      	ldr	r3, [pc, #104]	@ (800a9b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800a94a:	695b      	ldr	r3, [r3, #20]
 800a94c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a950:	2b00      	cmp	r3, #0
 800a952:	d027      	beq.n	800a9a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a954:	4b17      	ldr	r3, [pc, #92]	@ (800a9b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800a956:	68db      	ldr	r3, [r3, #12]
 800a958:	091b      	lsrs	r3, r3, #4
 800a95a:	f003 0307 	and.w	r3, r3, #7
 800a95e:	3301      	adds	r3, #1
 800a960:	693a      	ldr	r2, [r7, #16]
 800a962:	fbb2 f3f3 	udiv	r3, r2, r3
 800a966:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800a968:	4b12      	ldr	r3, [pc, #72]	@ (800a9b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800a96a:	695b      	ldr	r3, [r3, #20]
 800a96c:	0a1b      	lsrs	r3, r3, #8
 800a96e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a972:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d10a      	bne.n	800a990 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800a97a:	4b0e      	ldr	r3, [pc, #56]	@ (800a9b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800a97c:	695b      	ldr	r3, [r3, #20]
 800a97e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a982:	2b00      	cmp	r3, #0
 800a984:	d002      	beq.n	800a98c <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 800a986:	2311      	movs	r3, #17
 800a988:	617b      	str	r3, [r7, #20]
 800a98a:	e001      	b.n	800a990 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 800a98c:	2307      	movs	r3, #7
 800a98e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	68fa      	ldr	r2, [r7, #12]
 800a994:	fb03 f202 	mul.w	r2, r3, r2
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a99e:	61fb      	str	r3, [r7, #28]
 800a9a0:	e000      	b.n	800a9a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800a9a2:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800a9a4:	69fb      	ldr	r3, [r7, #28]
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3724      	adds	r7, #36	@ 0x24
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr
 800a9b2:	bf00      	nop
 800a9b4:	40021000 	.word	0x40021000
 800a9b8:	001fff68 	.word	0x001fff68

0800a9bc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b084      	sub	sp, #16
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d079      	beq.n	800aac2 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d106      	bne.n	800a9e8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f7fb f93c 	bl	8005c60 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2202      	movs	r2, #2
 800a9ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	68db      	ldr	r3, [r3, #12]
 800a9f6:	f003 0310 	and.w	r3, r3, #16
 800a9fa:	2b10      	cmp	r3, #16
 800a9fc:	d058      	beq.n	800aab0 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	22ca      	movs	r2, #202	@ 0xca
 800aa04:	625a      	str	r2, [r3, #36]	@ 0x24
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	2253      	movs	r2, #83	@ 0x53
 800aa0c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 f9a4 	bl	800ad5c <RTC_EnterInitMode>
 800aa14:	4603      	mov	r3, r0
 800aa16:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800aa18:	7bfb      	ldrb	r3, [r7, #15]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d127      	bne.n	800aa6e <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	689b      	ldr	r3, [r3, #8]
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	6812      	ldr	r2, [r2, #0]
 800aa28:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800aa2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa30:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	6899      	ldr	r1, [r3, #8]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	685a      	ldr	r2, [r3, #4]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	691b      	ldr	r3, [r3, #16]
 800aa40:	431a      	orrs	r2, r3
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	699b      	ldr	r3, [r3, #24]
 800aa46:	431a      	orrs	r2, r3
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	430a      	orrs	r2, r1
 800aa4e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	687a      	ldr	r2, [r7, #4]
 800aa56:	68d2      	ldr	r2, [r2, #12]
 800aa58:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	6919      	ldr	r1, [r3, #16]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	689b      	ldr	r3, [r3, #8]
 800aa64:	041a      	lsls	r2, r3, #16
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	430a      	orrs	r2, r1
 800aa6c:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 f9a8 	bl	800adc4 <RTC_ExitInitMode>
 800aa74:	4603      	mov	r3, r0
 800aa76:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800aa78:	7bfb      	ldrb	r3, [r7, #15]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d113      	bne.n	800aaa6 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f022 0203 	bic.w	r2, r2, #3
 800aa8c:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	69da      	ldr	r2, [r3, #28]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	695b      	ldr	r3, [r3, #20]
 800aa9c:	431a      	orrs	r2, r3
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	430a      	orrs	r2, r1
 800aaa4:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	22ff      	movs	r2, #255	@ 0xff
 800aaac:	625a      	str	r2, [r3, #36]	@ 0x24
 800aaae:	e001      	b.n	800aab4 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800aab0:	2300      	movs	r3, #0
 800aab2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800aab4:	7bfb      	ldrb	r3, [r7, #15]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d103      	bne.n	800aac2 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2201      	movs	r2, #1
 800aabe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 800aac2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3710      	adds	r7, #16
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800aacc:	b590      	push	{r4, r7, lr}
 800aace:	b087      	sub	sp, #28
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d101      	bne.n	800aae6 <HAL_RTC_SetTime+0x1a>
 800aae2:	2302      	movs	r3, #2
 800aae4:	e08b      	b.n	800abfe <HAL_RTC_SetTime+0x132>
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2201      	movs	r2, #1
 800aaea:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2202      	movs	r2, #2
 800aaf2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	22ca      	movs	r2, #202	@ 0xca
 800aafc:	625a      	str	r2, [r3, #36]	@ 0x24
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	2253      	movs	r2, #83	@ 0x53
 800ab04:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ab06:	68f8      	ldr	r0, [r7, #12]
 800ab08:	f000 f928 	bl	800ad5c <RTC_EnterInitMode>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800ab10:	7cfb      	ldrb	r3, [r7, #19]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d163      	bne.n	800abde <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d126      	bne.n	800ab6a <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d102      	bne.n	800ab30 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	4618      	mov	r0, r3
 800ab36:	f000 f983 	bl	800ae40 <RTC_ByteToBcd2>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	785b      	ldrb	r3, [r3, #1]
 800ab42:	4618      	mov	r0, r3
 800ab44:	f000 f97c 	bl	800ae40 <RTC_ByteToBcd2>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ab4c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	789b      	ldrb	r3, [r3, #2]
 800ab52:	4618      	mov	r0, r3
 800ab54:	f000 f974 	bl	800ae40 <RTC_ByteToBcd2>
 800ab58:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ab5a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	78db      	ldrb	r3, [r3, #3]
 800ab62:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ab64:	4313      	orrs	r3, r2
 800ab66:	617b      	str	r3, [r7, #20]
 800ab68:	e018      	b.n	800ab9c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	689b      	ldr	r3, [r3, #8]
 800ab70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d102      	bne.n	800ab7e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	785b      	ldrb	r3, [r3, #1]
 800ab88:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ab8a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800ab8c:	68ba      	ldr	r2, [r7, #8]
 800ab8e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ab90:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	78db      	ldrb	r3, [r3, #3]
 800ab96:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681a      	ldr	r2, [r3, #0]
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800aba6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800abaa:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	689a      	ldr	r2, [r3, #8]
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800abba:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	6899      	ldr	r1, [r3, #8]
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	68da      	ldr	r2, [r3, #12]
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	691b      	ldr	r3, [r3, #16]
 800abca:	431a      	orrs	r2, r3
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	430a      	orrs	r2, r1
 800abd2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800abd4:	68f8      	ldr	r0, [r7, #12]
 800abd6:	f000 f8f5 	bl	800adc4 <RTC_ExitInitMode>
 800abda:	4603      	mov	r3, r0
 800abdc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	22ff      	movs	r2, #255	@ 0xff
 800abe4:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800abe6:	7cfb      	ldrb	r3, [r7, #19]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d103      	bne.n	800abf4 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2201      	movs	r2, #1
 800abf0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2200      	movs	r2, #0
 800abf8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800abfc:	7cfb      	ldrb	r3, [r7, #19]
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	371c      	adds	r7, #28
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd90      	pop	{r4, r7, pc}

0800ac06 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ac06:	b590      	push	{r4, r7, lr}
 800ac08:	b087      	sub	sp, #28
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	60f8      	str	r0, [r7, #12]
 800ac0e:	60b9      	str	r1, [r7, #8]
 800ac10:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	d101      	bne.n	800ac20 <HAL_RTC_SetDate+0x1a>
 800ac1c:	2302      	movs	r3, #2
 800ac1e:	e075      	b.n	800ad0c <HAL_RTC_SetDate+0x106>
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	2201      	movs	r2, #1
 800ac24:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2202      	movs	r2, #2
 800ac2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d10e      	bne.n	800ac54 <HAL_RTC_SetDate+0x4e>
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	785b      	ldrb	r3, [r3, #1]
 800ac3a:	f003 0310 	and.w	r3, r3, #16
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d008      	beq.n	800ac54 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	785b      	ldrb	r3, [r3, #1]
 800ac46:	f023 0310 	bic.w	r3, r3, #16
 800ac4a:	b2db      	uxtb	r3, r3
 800ac4c:	330a      	adds	r3, #10
 800ac4e:	b2da      	uxtb	r2, r3
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d11c      	bne.n	800ac94 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	78db      	ldrb	r3, [r3, #3]
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f000 f8ee 	bl	800ae40 <RTC_ByteToBcd2>
 800ac64:	4603      	mov	r3, r0
 800ac66:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	785b      	ldrb	r3, [r3, #1]
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f000 f8e7 	bl	800ae40 <RTC_ByteToBcd2>
 800ac72:	4603      	mov	r3, r0
 800ac74:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800ac76:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	789b      	ldrb	r3, [r3, #2]
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f000 f8df 	bl	800ae40 <RTC_ByteToBcd2>
 800ac82:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ac84:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	617b      	str	r3, [r7, #20]
 800ac92:	e00e      	b.n	800acb2 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	78db      	ldrb	r3, [r3, #3]
 800ac98:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	785b      	ldrb	r3, [r3, #1]
 800ac9e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800aca0:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800aca2:	68ba      	ldr	r2, [r7, #8]
 800aca4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800aca6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800acae:	4313      	orrs	r3, r2
 800acb0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	22ca      	movs	r2, #202	@ 0xca
 800acb8:	625a      	str	r2, [r3, #36]	@ 0x24
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	2253      	movs	r2, #83	@ 0x53
 800acc0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800acc2:	68f8      	ldr	r0, [r7, #12]
 800acc4:	f000 f84a 	bl	800ad5c <RTC_EnterInitMode>
 800acc8:	4603      	mov	r3, r0
 800acca:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800accc:	7cfb      	ldrb	r3, [r7, #19]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d10c      	bne.n	800acec <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800acdc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ace0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ace2:	68f8      	ldr	r0, [r7, #12]
 800ace4:	f000 f86e 	bl	800adc4 <RTC_ExitInitMode>
 800ace8:	4603      	mov	r3, r0
 800acea:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	22ff      	movs	r2, #255	@ 0xff
 800acf2:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800acf4:	7cfb      	ldrb	r3, [r7, #19]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d103      	bne.n	800ad02 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	2201      	movs	r2, #1
 800acfe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2200      	movs	r2, #0
 800ad06:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800ad0a:	7cfb      	ldrb	r3, [r7, #19]
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	371c      	adds	r7, #28
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd90      	pop	{r4, r7, pc}

0800ad14 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a0d      	ldr	r2, [pc, #52]	@ (800ad58 <HAL_RTC_WaitForSynchro+0x44>)
 800ad22:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800ad24:	f7fb fc8c 	bl	8006640 <HAL_GetTick>
 800ad28:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ad2a:	e009      	b.n	800ad40 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ad2c:	f7fb fc88 	bl	8006640 <HAL_GetTick>
 800ad30:	4602      	mov	r2, r0
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	1ad3      	subs	r3, r2, r3
 800ad36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ad3a:	d901      	bls.n	800ad40 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800ad3c:	2303      	movs	r3, #3
 800ad3e:	e007      	b.n	800ad50 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	f003 0320 	and.w	r3, r3, #32
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d0ee      	beq.n	800ad2c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800ad4e:	2300      	movs	r3, #0
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3710      	adds	r7, #16
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}
 800ad58:	0003ff5f 	.word	0x0003ff5f

0800ad5c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b084      	sub	sp, #16
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ad64:	2300      	movs	r3, #0
 800ad66:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	68db      	ldr	r3, [r3, #12]
 800ad6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d120      	bne.n	800adb8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad7e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800ad80:	f7fb fc5e 	bl	8006640 <HAL_GetTick>
 800ad84:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ad86:	e00d      	b.n	800ada4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800ad88:	f7fb fc5a 	bl	8006640 <HAL_GetTick>
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	1ad3      	subs	r3, r2, r3
 800ad92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ad96:	d905      	bls.n	800ada4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800ad98:	2303      	movs	r3, #3
 800ad9a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2203      	movs	r2, #3
 800ada0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	68db      	ldr	r3, [r3, #12]
 800adaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d102      	bne.n	800adb8 <RTC_EnterInitMode+0x5c>
 800adb2:	7bfb      	ldrb	r3, [r7, #15]
 800adb4:	2b03      	cmp	r3, #3
 800adb6:	d1e7      	bne.n	800ad88 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800adb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3710      	adds	r7, #16
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}
	...

0800adc4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b084      	sub	sp, #16
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800adcc:	2300      	movs	r3, #0
 800adce:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800add0:	4b1a      	ldr	r3, [pc, #104]	@ (800ae3c <RTC_ExitInitMode+0x78>)
 800add2:	68db      	ldr	r3, [r3, #12]
 800add4:	4a19      	ldr	r2, [pc, #100]	@ (800ae3c <RTC_ExitInitMode+0x78>)
 800add6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800adda:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800addc:	4b17      	ldr	r3, [pc, #92]	@ (800ae3c <RTC_ExitInitMode+0x78>)
 800adde:	689b      	ldr	r3, [r3, #8]
 800ade0:	f003 0320 	and.w	r3, r3, #32
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d10c      	bne.n	800ae02 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f7ff ff93 	bl	800ad14 <HAL_RTC_WaitForSynchro>
 800adee:	4603      	mov	r3, r0
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d01e      	beq.n	800ae32 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2203      	movs	r2, #3
 800adf8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800adfc:	2303      	movs	r3, #3
 800adfe:	73fb      	strb	r3, [r7, #15]
 800ae00:	e017      	b.n	800ae32 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ae02:	4b0e      	ldr	r3, [pc, #56]	@ (800ae3c <RTC_ExitInitMode+0x78>)
 800ae04:	689b      	ldr	r3, [r3, #8]
 800ae06:	4a0d      	ldr	r2, [pc, #52]	@ (800ae3c <RTC_ExitInitMode+0x78>)
 800ae08:	f023 0320 	bic.w	r3, r3, #32
 800ae0c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f7ff ff80 	bl	800ad14 <HAL_RTC_WaitForSynchro>
 800ae14:	4603      	mov	r3, r0
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d005      	beq.n	800ae26 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2203      	movs	r2, #3
 800ae1e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800ae22:	2303      	movs	r3, #3
 800ae24:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ae26:	4b05      	ldr	r3, [pc, #20]	@ (800ae3c <RTC_ExitInitMode+0x78>)
 800ae28:	689b      	ldr	r3, [r3, #8]
 800ae2a:	4a04      	ldr	r2, [pc, #16]	@ (800ae3c <RTC_ExitInitMode+0x78>)
 800ae2c:	f043 0320 	orr.w	r3, r3, #32
 800ae30:	6093      	str	r3, [r2, #8]
  }

  return status;
 800ae32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3710      	adds	r7, #16
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}
 800ae3c:	40002800 	.word	0x40002800

0800ae40 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800ae40:	b480      	push	{r7}
 800ae42:	b085      	sub	sp, #20
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	4603      	mov	r3, r0
 800ae48:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800ae4e:	79fb      	ldrb	r3, [r7, #7]
 800ae50:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800ae52:	e005      	b.n	800ae60 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	3301      	adds	r3, #1
 800ae58:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800ae5a:	7afb      	ldrb	r3, [r7, #11]
 800ae5c:	3b0a      	subs	r3, #10
 800ae5e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800ae60:	7afb      	ldrb	r3, [r7, #11]
 800ae62:	2b09      	cmp	r3, #9
 800ae64:	d8f6      	bhi.n	800ae54 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	b2db      	uxtb	r3, r3
 800ae6a:	011b      	lsls	r3, r3, #4
 800ae6c:	b2da      	uxtb	r2, r3
 800ae6e:	7afb      	ldrb	r3, [r7, #11]
 800ae70:	4313      	orrs	r3, r2
 800ae72:	b2db      	uxtb	r3, r3
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3714      	adds	r7, #20
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr

0800ae80 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b086      	sub	sp, #24
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	60f8      	str	r0, [r7, #12]
 800ae88:	60b9      	str	r1, [r7, #8]
 800ae8a:	607a      	str	r2, [r7, #4]
 800ae8c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	2b02      	cmp	r3, #2
 800ae92:	d904      	bls.n	800ae9e <HAL_SAI_InitProtocol+0x1e>
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	3b03      	subs	r3, #3
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d812      	bhi.n	800aec2 <HAL_SAI_InitProtocol+0x42>
 800ae9c:	e008      	b.n	800aeb0 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	687a      	ldr	r2, [r7, #4]
 800aea2:	68b9      	ldr	r1, [r7, #8]
 800aea4:	68f8      	ldr	r0, [r7, #12]
 800aea6:	f000 f98f 	bl	800b1c8 <SAI_InitI2S>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	75fb      	strb	r3, [r7, #23]
      break;
 800aeae:	e00b      	b.n	800aec8 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	687a      	ldr	r2, [r7, #4]
 800aeb4:	68b9      	ldr	r1, [r7, #8]
 800aeb6:	68f8      	ldr	r0, [r7, #12]
 800aeb8:	f000 fa38 	bl	800b32c <SAI_InitPCM>
 800aebc:	4603      	mov	r3, r0
 800aebe:	75fb      	strb	r3, [r7, #23]
      break;
 800aec0:	e002      	b.n	800aec8 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800aec2:	2301      	movs	r3, #1
 800aec4:	75fb      	strb	r3, [r7, #23]
      break;
 800aec6:	bf00      	nop
  }

  if (status == HAL_OK)
 800aec8:	7dfb      	ldrb	r3, [r7, #23]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d104      	bne.n	800aed8 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800aece:	68f8      	ldr	r0, [r7, #12]
 800aed0:	f000 f808 	bl	800aee4 <HAL_SAI_Init>
 800aed4:	4603      	mov	r3, r0
 800aed6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800aed8:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	3718      	adds	r7, #24
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}
	...

0800aee4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b088      	sub	sp, #32
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d101      	bne.n	800aef6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800aef2:	2301      	movs	r3, #1
 800aef4:	e155      	b.n	800b1a2 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800aefc:	b2db      	uxtb	r3, r3
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d106      	bne.n	800af10 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2200      	movs	r2, #0
 800af06:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f7fb f8e2 	bl	80060d4 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f000 fa8d 	bl	800b430 <SAI_Disable>
 800af16:	4603      	mov	r3, r0
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d001      	beq.n	800af20 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 800af1c:	2301      	movs	r3, #1
 800af1e:	e140      	b.n	800b1a2 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2202      	movs	r2, #2
 800af24:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	68db      	ldr	r3, [r3, #12]
 800af2c:	2b02      	cmp	r3, #2
 800af2e:	d00c      	beq.n	800af4a <HAL_SAI_Init+0x66>
 800af30:	2b02      	cmp	r3, #2
 800af32:	d80d      	bhi.n	800af50 <HAL_SAI_Init+0x6c>
 800af34:	2b00      	cmp	r3, #0
 800af36:	d002      	beq.n	800af3e <HAL_SAI_Init+0x5a>
 800af38:	2b01      	cmp	r3, #1
 800af3a:	d003      	beq.n	800af44 <HAL_SAI_Init+0x60>
 800af3c:	e008      	b.n	800af50 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800af3e:	2300      	movs	r3, #0
 800af40:	61fb      	str	r3, [r7, #28]
      break;
 800af42:	e008      	b.n	800af56 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800af44:	2310      	movs	r3, #16
 800af46:	61fb      	str	r3, [r7, #28]
      break;
 800af48:	e005      	b.n	800af56 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800af4a:	2320      	movs	r3, #32
 800af4c:	61fb      	str	r3, [r7, #28]
      break;
 800af4e:	e002      	b.n	800af56 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 800af50:	2300      	movs	r3, #0
 800af52:	61fb      	str	r3, [r7, #28]
      break;
 800af54:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	689b      	ldr	r3, [r3, #8]
 800af5a:	2b03      	cmp	r3, #3
 800af5c:	d81d      	bhi.n	800af9a <HAL_SAI_Init+0xb6>
 800af5e:	a201      	add	r2, pc, #4	@ (adr r2, 800af64 <HAL_SAI_Init+0x80>)
 800af60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af64:	0800af75 	.word	0x0800af75
 800af68:	0800af7b 	.word	0x0800af7b
 800af6c:	0800af83 	.word	0x0800af83
 800af70:	0800af8b 	.word	0x0800af8b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800af74:	2300      	movs	r3, #0
 800af76:	617b      	str	r3, [r7, #20]
      break;
 800af78:	e012      	b.n	800afa0 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800af7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af7e:	617b      	str	r3, [r7, #20]
      break;
 800af80:	e00e      	b.n	800afa0 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800af82:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800af86:	617b      	str	r3, [r7, #20]
      break;
 800af88:	e00a      	b.n	800afa0 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800af8a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800af8e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800af90:	69fb      	ldr	r3, [r7, #28]
 800af92:	f043 0301 	orr.w	r3, r3, #1
 800af96:	61fb      	str	r3, [r7, #28]
      break;
 800af98:	e002      	b.n	800afa0 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800af9a:	2300      	movs	r3, #0
 800af9c:	617b      	str	r3, [r7, #20]
      break;
 800af9e:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4a81      	ldr	r2, [pc, #516]	@ (800b1ac <HAL_SAI_Init+0x2c8>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d004      	beq.n	800afb4 <HAL_SAI_Init+0xd0>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	4a80      	ldr	r2, [pc, #512]	@ (800b1b0 <HAL_SAI_Init+0x2cc>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d103      	bne.n	800afbc <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 800afb4:	4a7f      	ldr	r2, [pc, #508]	@ (800b1b4 <HAL_SAI_Init+0x2d0>)
 800afb6:	69fb      	ldr	r3, [r7, #28]
 800afb8:	6013      	str	r3, [r2, #0]
 800afba:	e002      	b.n	800afc2 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800afbc:	4a7e      	ldr	r2, [pc, #504]	@ (800b1b8 <HAL_SAI_Init+0x2d4>)
 800afbe:	69fb      	ldr	r3, [r7, #28]
 800afc0:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	69db      	ldr	r3, [r3, #28]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d041      	beq.n	800b04e <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	4a77      	ldr	r2, [pc, #476]	@ (800b1ac <HAL_SAI_Init+0x2c8>)
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d004      	beq.n	800afde <HAL_SAI_Init+0xfa>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	4a75      	ldr	r2, [pc, #468]	@ (800b1b0 <HAL_SAI_Init+0x2cc>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	d105      	bne.n	800afea <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800afde:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800afe2:	f7fe fcab 	bl	800993c <HAL_RCCEx_GetPeriphCLKFreq>
 800afe6:	6138      	str	r0, [r7, #16]
 800afe8:	e004      	b.n	800aff4 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800afea:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800afee:	f7fe fca5 	bl	800993c <HAL_RCCEx_GetPeriphCLKFreq>
 800aff2:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 800aff4:	693a      	ldr	r2, [r7, #16]
 800aff6:	4613      	mov	r3, r2
 800aff8:	009b      	lsls	r3, r3, #2
 800affa:	4413      	add	r3, r2
 800affc:	005b      	lsls	r3, r3, #1
 800affe:	461a      	mov	r2, r3
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	69db      	ldr	r3, [r3, #28]
 800b004:	025b      	lsls	r3, r3, #9
 800b006:	fbb2 f3f3 	udiv	r3, r2, r3
 800b00a:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	4a6b      	ldr	r2, [pc, #428]	@ (800b1bc <HAL_SAI_Init+0x2d8>)
 800b010:	fba2 2303 	umull	r2, r3, r2, r3
 800b014:	08da      	lsrs	r2, r3, #3
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800b01a:	68f9      	ldr	r1, [r7, #12]
 800b01c:	4b67      	ldr	r3, [pc, #412]	@ (800b1bc <HAL_SAI_Init+0x2d8>)
 800b01e:	fba3 2301 	umull	r2, r3, r3, r1
 800b022:	08da      	lsrs	r2, r3, #3
 800b024:	4613      	mov	r3, r2
 800b026:	009b      	lsls	r3, r3, #2
 800b028:	4413      	add	r3, r2
 800b02a:	005b      	lsls	r3, r3, #1
 800b02c:	1aca      	subs	r2, r1, r3
 800b02e:	2a08      	cmp	r2, #8
 800b030:	d904      	bls.n	800b03c <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6a1b      	ldr	r3, [r3, #32]
 800b036:	1c5a      	adds	r2, r3, #1
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b040:	2b04      	cmp	r3, #4
 800b042:	d104      	bne.n	800b04e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6a1b      	ldr	r3, [r3, #32]
 800b048:	085a      	lsrs	r2, r3, #1
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d003      	beq.n	800b05e <HAL_SAI_Init+0x17a>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	2b02      	cmp	r3, #2
 800b05c:	d109      	bne.n	800b072 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b062:	2b01      	cmp	r3, #1
 800b064:	d101      	bne.n	800b06a <HAL_SAI_Init+0x186>
 800b066:	2300      	movs	r3, #0
 800b068:	e001      	b.n	800b06e <HAL_SAI_Init+0x18a>
 800b06a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b06e:	61bb      	str	r3, [r7, #24]
 800b070:	e008      	b.n	800b084 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b076:	2b01      	cmp	r3, #1
 800b078:	d102      	bne.n	800b080 <HAL_SAI_Init+0x19c>
 800b07a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b07e:	e000      	b.n	800b082 <HAL_SAI_Init+0x19e>
 800b080:	2300      	movs	r3, #0
 800b082:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	6819      	ldr	r1, [r3, #0]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681a      	ldr	r2, [r3, #0]
 800b08e:	4b4c      	ldr	r3, [pc, #304]	@ (800b1c0 <HAL_SAI_Init+0x2dc>)
 800b090:	400b      	ands	r3, r1
 800b092:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	6819      	ldr	r1, [r3, #0]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	685a      	ldr	r2, [r3, #4]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0a2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b0a8:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0ae:	431a      	orrs	r2, r3
 800b0b0:	69bb      	ldr	r3, [r7, #24]
 800b0b2:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 800b0bc:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	691b      	ldr	r3, [r3, #16]
 800b0c2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b0c8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6a1b      	ldr	r3, [r3, #32]
 800b0ce:	051b      	lsls	r3, r3, #20
 800b0d0:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	430a      	orrs	r2, r1
 800b0d8:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	687a      	ldr	r2, [r7, #4]
 800b0e2:	6812      	ldr	r2, [r2, #0]
 800b0e4:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800b0e8:	f023 030f 	bic.w	r3, r3, #15
 800b0ec:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	6859      	ldr	r1, [r3, #4]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	699a      	ldr	r2, [r3, #24]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0fc:	431a      	orrs	r2, r3
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b102:	431a      	orrs	r2, r3
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	430a      	orrs	r2, r1
 800b10a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	6899      	ldr	r1, [r3, #8]
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681a      	ldr	r2, [r3, #0]
 800b116:	4b2b      	ldr	r3, [pc, #172]	@ (800b1c4 <HAL_SAI_Init+0x2e0>)
 800b118:	400b      	ands	r3, r1
 800b11a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	6899      	ldr	r1, [r3, #8]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b126:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b12c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800b132:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800b138:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b13e:	3b01      	subs	r3, #1
 800b140:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800b142:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	430a      	orrs	r2, r1
 800b14a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	68d9      	ldr	r1, [r3, #12]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681a      	ldr	r2, [r3, #0]
 800b156:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800b15a:	400b      	ands	r3, r1
 800b15c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	68d9      	ldr	r1, [r3, #12]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b16c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b172:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b174:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b17a:	3b01      	subs	r3, #1
 800b17c:	021b      	lsls	r3, r3, #8
 800b17e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	430a      	orrs	r2, r1
 800b186:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2200      	movs	r2, #0
 800b18c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2201      	movs	r2, #1
 800b194:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2200      	movs	r2, #0
 800b19c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800b1a0:	2300      	movs	r3, #0
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3720      	adds	r7, #32
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	40015404 	.word	0x40015404
 800b1b0:	40015424 	.word	0x40015424
 800b1b4:	40015400 	.word	0x40015400
 800b1b8:	40015800 	.word	0x40015800
 800b1bc:	cccccccd 	.word	0xcccccccd
 800b1c0:	ff05c010 	.word	0xff05c010
 800b1c4:	fff88000 	.word	0xfff88000

0800b1c8 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b087      	sub	sp, #28
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	60f8      	str	r0, [r7, #12]
 800b1d0:	60b9      	str	r1, [r7, #8]
 800b1d2:	607a      	str	r2, [r7, #4]
 800b1d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d003      	beq.n	800b1f6 <SAI_InitI2S+0x2e>
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	2b02      	cmp	r3, #2
 800b1f4:	d103      	bne.n	800b1fe <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	63da      	str	r2, [r3, #60]	@ 0x3c
 800b1fc:	e002      	b.n	800b204 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	2201      	movs	r2, #1
 800b202:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800b20a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b212:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2200      	movs	r2, #0
 800b218:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	683a      	ldr	r2, [r7, #0]
 800b21e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	f003 0301 	and.w	r3, r3, #1
 800b226:	2b00      	cmp	r3, #0
 800b228:	d001      	beq.n	800b22e <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800b22a:	2301      	movs	r3, #1
 800b22c:	e077      	b.n	800b31e <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d107      	bne.n	800b244 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2200      	movs	r2, #0
 800b238:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800b240:	651a      	str	r2, [r3, #80]	@ 0x50
 800b242:	e006      	b.n	800b252 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800b24a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2200      	movs	r2, #0
 800b250:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2b03      	cmp	r3, #3
 800b256:	d84f      	bhi.n	800b2f8 <SAI_InitI2S+0x130>
 800b258:	a201      	add	r2, pc, #4	@ (adr r2, 800b260 <SAI_InitI2S+0x98>)
 800b25a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b25e:	bf00      	nop
 800b260:	0800b271 	.word	0x0800b271
 800b264:	0800b293 	.word	0x0800b293
 800b268:	0800b2b5 	.word	0x0800b2b5
 800b26c:	0800b2d7 	.word	0x0800b2d7
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	2280      	movs	r2, #128	@ 0x80
 800b274:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	085b      	lsrs	r3, r3, #1
 800b27a:	015a      	lsls	r2, r3, #5
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	085b      	lsrs	r3, r3, #1
 800b284:	011a      	lsls	r2, r3, #4
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2240      	movs	r2, #64	@ 0x40
 800b28e:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800b290:	e035      	b.n	800b2fe <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	2280      	movs	r2, #128	@ 0x80
 800b296:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	085b      	lsrs	r3, r3, #1
 800b29c:	019a      	lsls	r2, r3, #6
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	085b      	lsrs	r3, r3, #1
 800b2a6:	015a      	lsls	r2, r3, #5
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2280      	movs	r2, #128	@ 0x80
 800b2b0:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800b2b2:	e024      	b.n	800b2fe <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	22c0      	movs	r2, #192	@ 0xc0
 800b2b8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	085b      	lsrs	r3, r3, #1
 800b2be:	019a      	lsls	r2, r3, #6
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	085b      	lsrs	r3, r3, #1
 800b2c8:	015a      	lsls	r2, r3, #5
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2280      	movs	r2, #128	@ 0x80
 800b2d2:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800b2d4:	e013      	b.n	800b2fe <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	22e0      	movs	r2, #224	@ 0xe0
 800b2da:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	085b      	lsrs	r3, r3, #1
 800b2e0:	019a      	lsls	r2, r3, #6
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	085b      	lsrs	r3, r3, #1
 800b2ea:	015a      	lsls	r2, r3, #5
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	2280      	movs	r2, #128	@ 0x80
 800b2f4:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800b2f6:	e002      	b.n	800b2fe <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	75fb      	strb	r3, [r7, #23]
      break;
 800b2fc:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	2b02      	cmp	r3, #2
 800b302:	d10b      	bne.n	800b31c <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2b01      	cmp	r3, #1
 800b308:	d102      	bne.n	800b310 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2210      	movs	r2, #16
 800b30e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2b02      	cmp	r3, #2
 800b314:	d102      	bne.n	800b31c <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	2208      	movs	r2, #8
 800b31a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return status;
 800b31c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b31e:	4618      	mov	r0, r3
 800b320:	371c      	adds	r7, #28
 800b322:	46bd      	mov	sp, r7
 800b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b328:	4770      	bx	lr
 800b32a:	bf00      	nop

0800b32c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b087      	sub	sp, #28
 800b330:	af00      	add	r7, sp, #0
 800b332:	60f8      	str	r0, [r7, #12]
 800b334:	60b9      	str	r1, [r7, #8]
 800b336:	607a      	str	r2, [r7, #4]
 800b338:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b33a:	2300      	movs	r3, #0
 800b33c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2200      	movs	r2, #0
 800b342:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2200      	movs	r2, #0
 800b348:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d003      	beq.n	800b35a <SAI_InitPCM+0x2e>
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	2b02      	cmp	r3, #2
 800b358:	d103      	bne.n	800b362 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2201      	movs	r2, #1
 800b35e:	63da      	str	r2, [r3, #60]	@ 0x3c
 800b360:	e002      	b.n	800b368 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	2200      	movs	r2, #0
 800b366:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2200      	movs	r2, #0
 800b36c:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800b374:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800b37c:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2200      	movs	r2, #0
 800b382:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	683a      	ldr	r2, [r7, #0]
 800b388:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b390:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	2b04      	cmp	r3, #4
 800b396:	d103      	bne.n	800b3a0 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2201      	movs	r2, #1
 800b39c:	645a      	str	r2, [r3, #68]	@ 0x44
 800b39e:	e002      	b.n	800b3a6 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	220d      	movs	r2, #13
 800b3a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2b03      	cmp	r3, #3
 800b3aa:	d837      	bhi.n	800b41c <SAI_InitPCM+0xf0>
 800b3ac:	a201      	add	r2, pc, #4	@ (adr r2, 800b3b4 <SAI_InitPCM+0x88>)
 800b3ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3b2:	bf00      	nop
 800b3b4:	0800b3c5 	.word	0x0800b3c5
 800b3b8:	0800b3db 	.word	0x0800b3db
 800b3bc:	0800b3f1 	.word	0x0800b3f1
 800b3c0:	0800b407 	.word	0x0800b407
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	2280      	movs	r2, #128	@ 0x80
 800b3c8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	011a      	lsls	r2, r3, #4
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	2240      	movs	r2, #64	@ 0x40
 800b3d6:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800b3d8:	e023      	b.n	800b422 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	2280      	movs	r2, #128	@ 0x80
 800b3de:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	015a      	lsls	r2, r3, #5
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	2280      	movs	r2, #128	@ 0x80
 800b3ec:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800b3ee:	e018      	b.n	800b422 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	22c0      	movs	r2, #192	@ 0xc0
 800b3f4:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	015a      	lsls	r2, r3, #5
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	2280      	movs	r2, #128	@ 0x80
 800b402:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800b404:	e00d      	b.n	800b422 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	22e0      	movs	r2, #224	@ 0xe0
 800b40a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	015a      	lsls	r2, r3, #5
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2280      	movs	r2, #128	@ 0x80
 800b418:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800b41a:	e002      	b.n	800b422 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800b41c:	2301      	movs	r3, #1
 800b41e:	75fb      	strb	r3, [r7, #23]
      break;
 800b420:	bf00      	nop
  }

  return status;
 800b422:	7dfb      	ldrb	r3, [r7, #23]
}
 800b424:	4618      	mov	r0, r3
 800b426:	371c      	adds	r7, #28
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr

0800b430 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800b430:	b480      	push	{r7}
 800b432:	b085      	sub	sp, #20
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b438:	4b18      	ldr	r3, [pc, #96]	@ (800b49c <SAI_Disable+0x6c>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	4a18      	ldr	r2, [pc, #96]	@ (800b4a0 <SAI_Disable+0x70>)
 800b43e:	fba2 2303 	umull	r2, r3, r2, r3
 800b442:	0b1b      	lsrs	r3, r3, #12
 800b444:	009b      	lsls	r3, r3, #2
 800b446:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800b448:	2300      	movs	r3, #0
 800b44a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	681a      	ldr	r2, [r3, #0]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800b45a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d10a      	bne.n	800b478 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b468:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800b472:	2303      	movs	r3, #3
 800b474:	72fb      	strb	r3, [r7, #11]
      break;
 800b476:	e009      	b.n	800b48c <SAI_Disable+0x5c>
    }
    count--;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	3b01      	subs	r3, #1
 800b47c:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d1e7      	bne.n	800b45c <SAI_Disable+0x2c>

  return status;
 800b48c:	7afb      	ldrb	r3, [r7, #11]
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3714      	adds	r7, #20
 800b492:	46bd      	mov	sp, r7
 800b494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b498:	4770      	bx	lr
 800b49a:	bf00      	nop
 800b49c:	20000000 	.word	0x20000000
 800b4a0:	95cbec1b 	.word	0x95cbec1b

0800b4a4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b082      	sub	sp, #8
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d101      	bne.n	800b4b6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	e02d      	b.n	800b512 <HAL_SD_Init+0x6e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b4bc:	b2db      	uxtb	r3, r3
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d105      	bne.n	800b4ce <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f7fa fbfb 	bl	8005cc4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2203      	movs	r2, #3
 800b4d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f000 f820 	bl	800b51c <HAL_SD_InitCard>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d001      	beq.n	800b4e6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	e015      	b.n	800b512 <HAL_SD_Init+0x6e>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Configure the bus wide with the specified value in the SD_HandleTypeDef */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	691b      	ldr	r3, [r3, #16]
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 fc29 	bl	800bd44 <HAL_SD_ConfigWideBusOperation>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d001      	beq.n	800b4fc <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	e00a      	b.n	800b512 <HAL_SD_Init+0x6e>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2200      	movs	r2, #0
 800b500:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2200      	movs	r2, #0
 800b506:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2201      	movs	r2, #1
 800b50c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b510:	2300      	movs	r3, #0
}
 800b512:	4618      	mov	r0, r3
 800b514:	3708      	adds	r7, #8
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}
	...

0800b51c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b51c:	b5b0      	push	{r4, r5, r7, lr}
 800b51e:	b08e      	sub	sp, #56	@ 0x38
 800b520:	af04      	add	r7, sp, #16
 800b522:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b524:	2300      	movs	r3, #0
 800b526:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800b528:	2300      	movs	r3, #0
 800b52a:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800b52c:	2300      	movs	r3, #0
 800b52e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800b530:	2300      	movs	r3, #0
 800b532:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800b534:	2300      	movs	r3, #0
 800b536:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800b538:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800b53c:	f7fe f9fe 	bl	800993c <HAL_RCCEx_GetPeriphCLKFreq>
 800b540:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800b542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b544:	2b00      	cmp	r3, #0
 800b546:	d109      	bne.n	800b55c <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2201      	movs	r2, #1
 800b54c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800b556:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800b558:	2301      	movs	r3, #1
 800b55a:	e07b      	b.n	800b654 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 800b55c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b55e:	09db      	lsrs	r3, r3, #7
 800b560:	4a3e      	ldr	r2, [pc, #248]	@ (800b65c <HAL_SD_InitCard+0x140>)
 800b562:	fba2 2303 	umull	r2, r3, r2, r3
 800b566:	091b      	lsrs	r3, r3, #4
 800b568:	3b02      	subs	r3, #2
 800b56a:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681d      	ldr	r5, [r3, #0]
 800b570:	466c      	mov	r4, sp
 800b572:	f107 0314 	add.w	r3, r7, #20
 800b576:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b57a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b57e:	f107 0308 	add.w	r3, r7, #8
 800b582:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b584:	4628      	mov	r0, r5
 800b586:	f002 fda6 	bl	800e0d6 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	685a      	ldr	r2, [r3, #4]
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b598:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f002 fdd3 	bl	800e14a <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	685a      	ldr	r2, [r3, #4]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b5b2:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 800b5b4:	69fb      	ldr	r3, [r7, #28]
 800b5b6:	3302      	adds	r3, #2
 800b5b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b5ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5be:	627b      	str	r3, [r7, #36]	@ 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800b5c0:	4a27      	ldr	r2, [pc, #156]	@ (800b660 <HAL_SD_InitCard+0x144>)
 800b5c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5c8:	3301      	adds	r3, #1
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f7fb f844 	bl	8006658 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f000 fded 	bl	800c1b0 <SD_PowerON>
 800b5d6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b5d8:	6a3b      	ldr	r3, [r7, #32]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d00b      	beq.n	800b5f6 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2201      	movs	r2, #1
 800b5e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b5ea:	6a3b      	ldr	r3, [r7, #32]
 800b5ec:	431a      	orrs	r2, r3
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	e02e      	b.n	800b654 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f000 fd1a 	bl	800c030 <SD_InitCard>
 800b5fc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b5fe:	6a3b      	ldr	r3, [r7, #32]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d00b      	beq.n	800b61c <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2201      	movs	r2, #1
 800b608:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b610:	6a3b      	ldr	r3, [r7, #32]
 800b612:	431a      	orrs	r2, r3
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800b618:	2301      	movs	r3, #1
 800b61a:	e01b      	b.n	800b654 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b624:	4618      	mov	r0, r3
 800b626:	f002 fe23 	bl	800e270 <SDMMC_CmdBlockLength>
 800b62a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b62c:	6a3b      	ldr	r3, [r7, #32]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d00f      	beq.n	800b652 <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	4a0b      	ldr	r2, [pc, #44]	@ (800b664 <HAL_SD_InitCard+0x148>)
 800b638:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b63e:	6a3b      	ldr	r3, [r7, #32]
 800b640:	431a      	orrs	r2, r3
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2201      	movs	r2, #1
 800b64a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b64e:	2301      	movs	r3, #1
 800b650:	e000      	b.n	800b654 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 800b652:	2300      	movs	r3, #0
}
 800b654:	4618      	mov	r0, r3
 800b656:	3728      	adds	r7, #40	@ 0x28
 800b658:	46bd      	mov	sp, r7
 800b65a:	bdb0      	pop	{r4, r5, r7, pc}
 800b65c:	014f8b59 	.word	0x014f8b59
 800b660:	00012110 	.word	0x00012110
 800b664:	004005ff 	.word	0x004005ff

0800b668 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b08c      	sub	sp, #48	@ 0x30
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	60b9      	str	r1, [r7, #8]
 800b672:	607a      	str	r2, [r7, #4]
 800b674:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d107      	bne.n	800b690 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b684:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800b68c:	2301      	movs	r3, #1
 800b68e:	e0a9      	b.n	800b7e4 <HAL_SD_ReadBlocks_DMA+0x17c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b696:	b2db      	uxtb	r3, r3
 800b698:	2b01      	cmp	r3, #1
 800b69a:	f040 80a2 	bne.w	800b7e2 <HAL_SD_ReadBlocks_DMA+0x17a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b6a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	441a      	add	r2, r3
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	d907      	bls.n	800b6c2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6b6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800b6be:	2301      	movs	r3, #1
 800b6c0:	e090      	b.n	800b7e4 <HAL_SD_ReadBlocks_DMA+0x17c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2203      	movs	r2, #3
 800b6c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	62da      	str	r2, [r3, #44]	@ 0x2c

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6d6:	4a45      	ldr	r2, [pc, #276]	@ (800b7ec <HAL_SD_ReadBlocks_DMA+0x184>)
 800b6d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6de:	4a44      	ldr	r2, [pc, #272]	@ (800b7f0 <HAL_SD_ReadBlocks_DMA+0x188>)
 800b6e0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	3380      	adds	r3, #128	@ 0x80
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	68ba      	ldr	r2, [r7, #8]
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	025b      	lsls	r3, r3, #9
 800b6fc:	089b      	lsrs	r3, r3, #2
 800b6fe:	f7fb f969 	bl	80069d4 <HAL_DMA_Start_IT>
 800b702:	4603      	mov	r3, r0
 800b704:	2b00      	cmp	r3, #0
 800b706:	d00f      	beq.n	800b728 <HAL_SD_ReadBlocks_DMA+0xc0>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a39      	ldr	r2, [pc, #228]	@ (800b7f4 <HAL_SD_ReadBlocks_DMA+0x18c>)
 800b70e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b714:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2201      	movs	r2, #1
 800b720:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800b724:	2301      	movs	r3, #1
 800b726:	e05d      	b.n	800b7e4 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f042 0208 	orr.w	r2, r2, #8
 800b736:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
      hsd->pRxBuffPtr = pData;
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b73c:	2b01      	cmp	r3, #1
 800b73e:	d002      	beq.n	800b746 <HAL_SD_ReadBlocks_DMA+0xde>
      {
        add *= 512U;
 800b740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b742:	025b      	lsls	r3, r3, #9
 800b744:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b746:	f04f 33ff 	mov.w	r3, #4294967295
 800b74a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	025b      	lsls	r3, r3, #9
 800b750:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b752:	2390      	movs	r3, #144	@ 0x90
 800b754:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b756:	2302      	movs	r3, #2
 800b758:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b75a:	2300      	movs	r3, #0
 800b75c:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800b75e:	2301      	movs	r3, #1
 800b760:	627b      	str	r3, [r7, #36]	@ 0x24
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f107 0210 	add.w	r2, r7, #16
 800b76a:	4611      	mov	r1, r2
 800b76c:	4618      	mov	r0, r3
 800b76e:	f002 fd53 	bl	800e218 <SDMMC_ConfigData>
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	2b01      	cmp	r3, #1
 800b776:	d90a      	bls.n	800b78e <HAL_SD_ReadBlocks_DMA+0x126>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2282      	movs	r2, #130	@ 0x82
 800b77c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b784:	4618      	mov	r0, r3
 800b786:	f002 fdb7 	bl	800e2f8 <SDMMC_CmdReadMultiBlock>
 800b78a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800b78c:	e009      	b.n	800b7a2 <HAL_SD_ReadBlocks_DMA+0x13a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2281      	movs	r2, #129	@ 0x81
 800b792:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b79a:	4618      	mov	r0, r3
 800b79c:	f002 fd8a 	bl	800e2b4 <SDMMC_CmdReadSingleBlock>
 800b7a0:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800b7a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d012      	beq.n	800b7ce <HAL_SD_ReadBlocks_DMA+0x166>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	4a11      	ldr	r2, [pc, #68]	@ (800b7f4 <HAL_SD_ReadBlocks_DMA+0x18c>)
 800b7ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b7b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7b6:	431a      	orrs	r2, r3
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	2201      	movs	r2, #1
 800b7c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	e00a      	b.n	800b7e4 <HAL_SD_ReadBlocks_DMA+0x17c>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800b7dc:	63da      	str	r2, [r3, #60]	@ 0x3c

      return HAL_OK;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	e000      	b.n	800b7e4 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800b7e2:	2302      	movs	r3, #2
  }
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3730      	adds	r7, #48	@ 0x30
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}
 800b7ec:	0800bf27 	.word	0x0800bf27
 800b7f0:	0800bf99 	.word	0x0800bf99
 800b7f4:	004005ff 	.word	0x004005ff

0800b7f8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b08c      	sub	sp, #48	@ 0x30
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	60f8      	str	r0, [r7, #12]
 800b800:	60b9      	str	r1, [r7, #8]
 800b802:	607a      	str	r2, [r7, #4]
 800b804:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d107      	bne.n	800b820 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b814:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800b81c:	2301      	movs	r3, #1
 800b81e:	e0ac      	b.n	800b97a <HAL_SD_WriteBlocks_DMA+0x182>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b826:	b2db      	uxtb	r3, r3
 800b828:	2b01      	cmp	r3, #1
 800b82a:	f040 80a5 	bne.w	800b978 <HAL_SD_WriteBlocks_DMA+0x180>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	2200      	movs	r2, #0
 800b832:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b834:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	441a      	add	r2, r3
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b83e:	429a      	cmp	r2, r3
 800b840:	d907      	bls.n	800b852 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b846:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800b84e:	2301      	movs	r3, #1
 800b850:	e093      	b.n	800b97a <HAL_SD_WriteBlocks_DMA+0x182>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	2203      	movs	r2, #3
 800b856:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	2200      	movs	r2, #0
 800b860:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
#else
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b866:	4a47      	ldr	r2, [pc, #284]	@ (800b984 <HAL_SD_WriteBlocks_DMA+0x18c>)
 800b868:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b86e:	4a46      	ldr	r2, [pc, #280]	@ (800b988 <HAL_SD_WriteBlocks_DMA+0x190>)
 800b870:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b876:	2200      	movs	r2, #0
 800b878:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b87e:	2b01      	cmp	r3, #1
 800b880:	d002      	beq.n	800b888 <HAL_SD_WriteBlocks_DMA+0x90>
    {
      add *= 512U;
 800b882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b884:	025b      	lsls	r3, r3, #9
 800b886:	62bb      	str	r3, [r7, #40]	@ 0x28
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	d90a      	bls.n	800b8a4 <HAL_SD_WriteBlocks_DMA+0xac>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	22a0      	movs	r2, #160	@ 0xa0
 800b892:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b89a:	4618      	mov	r0, r3
 800b89c:	f002 fd70 	bl	800e380 <SDMMC_CmdWriteMultiBlock>
 800b8a0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800b8a2:	e009      	b.n	800b8b8 <HAL_SD_WriteBlocks_DMA+0xc0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2290      	movs	r2, #144	@ 0x90
 800b8a8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f002 fd43 	bl	800e33c <SDMMC_CmdWriteSingleBlock>
 800b8b6:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b8b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d012      	beq.n	800b8e4 <HAL_SD_WriteBlocks_DMA+0xec>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	4a32      	ldr	r2, [pc, #200]	@ (800b98c <HAL_SD_WriteBlocks_DMA+0x194>)
 800b8c4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b8ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8cc:	431a      	orrs	r2, r3
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2201      	movs	r2, #1
 800b8d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	e04a      	b.n	800b97a <HAL_SD_WriteBlocks_DMA+0x182>
    }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f042 0208 	orr.w	r2, r2, #8
 800b8f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800b8f8:	68b9      	ldr	r1, [r7, #8]
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	3380      	adds	r3, #128	@ 0x80
 800b900:	461a      	mov	r2, r3
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	025b      	lsls	r3, r3, #9
 800b906:	089b      	lsrs	r3, r3, #2
 800b908:	f7fb f864 	bl	80069d4 <HAL_DMA_Start_IT>
 800b90c:	4603      	mov	r3, r0
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d012      	beq.n	800b938 <HAL_SD_WriteBlocks_DMA+0x140>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4a1d      	ldr	r2, [pc, #116]	@ (800b98c <HAL_SD_WriteBlocks_DMA+0x194>)
 800b918:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b91e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2201      	movs	r2, #1
 800b92a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	2200      	movs	r2, #0
 800b932:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800b934:	2301      	movs	r3, #1
 800b936:	e020      	b.n	800b97a <HAL_SD_WriteBlocks_DMA+0x182>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b938:	f04f 33ff 	mov.w	r3, #4294967295
 800b93c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	025b      	lsls	r3, r3, #9
 800b942:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b944:	2390      	movs	r3, #144	@ 0x90
 800b946:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800b948:	2300      	movs	r3, #0
 800b94a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b94c:	2300      	movs	r3, #0
 800b94e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800b950:	2301      	movs	r3, #1
 800b952:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f107 0210 	add.w	r2, r7, #16
 800b95c:	4611      	mov	r1, r2
 800b95e:	4618      	mov	r0, r3
 800b960:	f002 fc5a 	bl	800e218 <SDMMC_ConfigData>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f042 021a 	orr.w	r2, r2, #26
 800b972:	63da      	str	r2, [r3, #60]	@ 0x3c
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 800b974:	2300      	movs	r3, #0
 800b976:	e000      	b.n	800b97a <HAL_SD_WriteBlocks_DMA+0x182>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800b978:	2302      	movs	r3, #2
  }
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3730      	adds	r7, #48	@ 0x30
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}
 800b982:	bf00      	nop
 800b984:	0800befd 	.word	0x0800befd
 800b988:	0800bf99 	.word	0x0800bf99
 800b98c:	004005ff 	.word	0x004005ff

0800b990 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800b990:	b480      	push	{r7}
 800b992:	b083      	sub	sp, #12
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800b998:	bf00      	nop
 800b99a:	370c      	adds	r7, #12
 800b99c:	46bd      	mov	sp, r7
 800b99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a2:	4770      	bx	lr

0800b9a4 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b083      	sub	sp, #12
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9b2:	0f9b      	lsrs	r3, r3, #30
 800b9b4:	b2da      	uxtb	r2, r3
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9be:	0e9b      	lsrs	r3, r3, #26
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	f003 030f 	and.w	r3, r3, #15
 800b9c6:	b2da      	uxtb	r2, r3
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9d0:	0e1b      	lsrs	r3, r3, #24
 800b9d2:	b2db      	uxtb	r3, r3
 800b9d4:	f003 0303 	and.w	r3, r3, #3
 800b9d8:	b2da      	uxtb	r2, r3
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9e2:	0c1b      	lsrs	r3, r3, #16
 800b9e4:	b2da      	uxtb	r2, r3
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9ee:	0a1b      	lsrs	r3, r3, #8
 800b9f0:	b2da      	uxtb	r2, r3
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9fa:	b2da      	uxtb	r2, r3
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ba04:	0d1b      	lsrs	r3, r3, #20
 800ba06:	b29a      	uxth	r2, r3
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ba10:	0c1b      	lsrs	r3, r3, #16
 800ba12:	b2db      	uxtb	r3, r3
 800ba14:	f003 030f 	and.w	r3, r3, #15
 800ba18:	b2da      	uxtb	r2, r3
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ba22:	0bdb      	lsrs	r3, r3, #15
 800ba24:	b2db      	uxtb	r3, r3
 800ba26:	f003 0301 	and.w	r3, r3, #1
 800ba2a:	b2da      	uxtb	r2, r3
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ba34:	0b9b      	lsrs	r3, r3, #14
 800ba36:	b2db      	uxtb	r3, r3
 800ba38:	f003 0301 	and.w	r3, r3, #1
 800ba3c:	b2da      	uxtb	r2, r3
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ba46:	0b5b      	lsrs	r3, r3, #13
 800ba48:	b2db      	uxtb	r3, r3
 800ba4a:	f003 0301 	and.w	r3, r3, #1
 800ba4e:	b2da      	uxtb	r2, r3
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ba58:	0b1b      	lsrs	r3, r3, #12
 800ba5a:	b2db      	uxtb	r3, r3
 800ba5c:	f003 0301 	and.w	r3, r3, #1
 800ba60:	b2da      	uxtb	r2, r3
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	2200      	movs	r2, #0
 800ba6a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d163      	bne.n	800bb3c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ba78:	009a      	lsls	r2, r3, #2
 800ba7a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800ba7e:	4013      	ands	r3, r2
 800ba80:	687a      	ldr	r2, [r7, #4]
 800ba82:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800ba84:	0f92      	lsrs	r2, r2, #30
 800ba86:	431a      	orrs	r2, r3
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba90:	0edb      	lsrs	r3, r3, #27
 800ba92:	b2db      	uxtb	r3, r3
 800ba94:	f003 0307 	and.w	r3, r3, #7
 800ba98:	b2da      	uxtb	r2, r3
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800baa2:	0e1b      	lsrs	r3, r3, #24
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	f003 0307 	and.w	r3, r3, #7
 800baaa:	b2da      	uxtb	r2, r3
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bab4:	0d5b      	lsrs	r3, r3, #21
 800bab6:	b2db      	uxtb	r3, r3
 800bab8:	f003 0307 	and.w	r3, r3, #7
 800babc:	b2da      	uxtb	r2, r3
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bac6:	0c9b      	lsrs	r3, r3, #18
 800bac8:	b2db      	uxtb	r3, r3
 800baca:	f003 0307 	and.w	r3, r3, #7
 800bace:	b2da      	uxtb	r2, r3
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bad8:	0bdb      	lsrs	r3, r3, #15
 800bada:	b2db      	uxtb	r3, r3
 800badc:	f003 0307 	and.w	r3, r3, #7
 800bae0:	b2da      	uxtb	r2, r3
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	691b      	ldr	r3, [r3, #16]
 800baea:	1c5a      	adds	r2, r3, #1
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	7e1b      	ldrb	r3, [r3, #24]
 800baf4:	b2db      	uxtb	r3, r3
 800baf6:	f003 0307 	and.w	r3, r3, #7
 800bafa:	3302      	adds	r3, #2
 800bafc:	2201      	movs	r2, #1
 800bafe:	fa02 f303 	lsl.w	r3, r2, r3
 800bb02:	687a      	ldr	r2, [r7, #4]
 800bb04:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800bb06:	fb03 f202 	mul.w	r2, r3, r2
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	7a1b      	ldrb	r3, [r3, #8]
 800bb12:	b2db      	uxtb	r3, r3
 800bb14:	f003 030f 	and.w	r3, r3, #15
 800bb18:	2201      	movs	r2, #1
 800bb1a:	409a      	lsls	r2, r3
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb24:	687a      	ldr	r2, [r7, #4]
 800bb26:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800bb28:	0a52      	lsrs	r2, r2, #9
 800bb2a:	fb03 f202 	mul.w	r2, r3, r2
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bb38:	661a      	str	r2, [r3, #96]	@ 0x60
 800bb3a:	e031      	b.n	800bba0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb40:	2b01      	cmp	r3, #1
 800bb42:	d11d      	bne.n	800bb80 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bb48:	041b      	lsls	r3, r3, #16
 800bb4a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb52:	0c1b      	lsrs	r3, r3, #16
 800bb54:	431a      	orrs	r2, r3
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	691b      	ldr	r3, [r3, #16]
 800bb5e:	3301      	adds	r3, #1
 800bb60:	029a      	lsls	r2, r3, #10
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bb74:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	661a      	str	r2, [r3, #96]	@ 0x60
 800bb7e:	e00f      	b.n	800bba0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	4a58      	ldr	r2, [pc, #352]	@ (800bce8 <HAL_SD_GetCardCSD+0x344>)
 800bb86:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb8c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2201      	movs	r2, #1
 800bb98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	e09d      	b.n	800bcdc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bba4:	0b9b      	lsrs	r3, r3, #14
 800bba6:	b2db      	uxtb	r3, r3
 800bba8:	f003 0301 	and.w	r3, r3, #1
 800bbac:	b2da      	uxtb	r2, r3
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bbb6:	09db      	lsrs	r3, r3, #7
 800bbb8:	b2db      	uxtb	r3, r3
 800bbba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bbbe:	b2da      	uxtb	r2, r3
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bbc8:	b2db      	uxtb	r3, r3
 800bbca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bbce:	b2da      	uxtb	r2, r3
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bbd8:	0fdb      	lsrs	r3, r3, #31
 800bbda:	b2da      	uxtb	r2, r3
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bbe4:	0f5b      	lsrs	r3, r3, #29
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	f003 0303 	and.w	r3, r3, #3
 800bbec:	b2da      	uxtb	r2, r3
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bbf6:	0e9b      	lsrs	r3, r3, #26
 800bbf8:	b2db      	uxtb	r3, r3
 800bbfa:	f003 0307 	and.w	r3, r3, #7
 800bbfe:	b2da      	uxtb	r2, r3
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc08:	0d9b      	lsrs	r3, r3, #22
 800bc0a:	b2db      	uxtb	r3, r3
 800bc0c:	f003 030f 	and.w	r3, r3, #15
 800bc10:	b2da      	uxtb	r2, r3
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc1a:	0d5b      	lsrs	r3, r3, #21
 800bc1c:	b2db      	uxtb	r3, r3
 800bc1e:	f003 0301 	and.w	r3, r3, #1
 800bc22:	b2da      	uxtb	r2, r3
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc36:	0c1b      	lsrs	r3, r3, #16
 800bc38:	b2db      	uxtb	r3, r3
 800bc3a:	f003 0301 	and.w	r3, r3, #1
 800bc3e:	b2da      	uxtb	r2, r3
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc4a:	0bdb      	lsrs	r3, r3, #15
 800bc4c:	b2db      	uxtb	r3, r3
 800bc4e:	f003 0301 	and.w	r3, r3, #1
 800bc52:	b2da      	uxtb	r2, r3
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc5e:	0b9b      	lsrs	r3, r3, #14
 800bc60:	b2db      	uxtb	r3, r3
 800bc62:	f003 0301 	and.w	r3, r3, #1
 800bc66:	b2da      	uxtb	r2, r3
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc72:	0b5b      	lsrs	r3, r3, #13
 800bc74:	b2db      	uxtb	r3, r3
 800bc76:	f003 0301 	and.w	r3, r3, #1
 800bc7a:	b2da      	uxtb	r2, r3
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc86:	0b1b      	lsrs	r3, r3, #12
 800bc88:	b2db      	uxtb	r3, r3
 800bc8a:	f003 0301 	and.w	r3, r3, #1
 800bc8e:	b2da      	uxtb	r2, r3
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc9a:	0a9b      	lsrs	r3, r3, #10
 800bc9c:	b2db      	uxtb	r3, r3
 800bc9e:	f003 0303 	and.w	r3, r3, #3
 800bca2:	b2da      	uxtb	r2, r3
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bcae:	0a1b      	lsrs	r3, r3, #8
 800bcb0:	b2db      	uxtb	r3, r3
 800bcb2:	f003 0303 	and.w	r3, r3, #3
 800bcb6:	b2da      	uxtb	r2, r3
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bcc2:	085b      	lsrs	r3, r3, #1
 800bcc4:	b2db      	uxtb	r3, r3
 800bcc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bcca:	b2da      	uxtb	r2, r3
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	2201      	movs	r2, #1
 800bcd6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800bcda:	2300      	movs	r3, #0
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	370c      	adds	r7, #12
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr
 800bce8:	004005ff 	.word	0x004005ff

0800bcec <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800bcec:	b480      	push	{r7}
 800bcee:	b083      	sub	sp, #12
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800bd36:	2300      	movs	r3, #0
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	370c      	adds	r7, #12
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	4770      	bx	lr

0800bd44 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800bd44:	b5b0      	push	{r4, r5, r7, lr}
 800bd46:	b090      	sub	sp, #64	@ 0x40
 800bd48:	af04      	add	r7, sp, #16
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2203      	movs	r2, #3
 800bd58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd60:	2b03      	cmp	r3, #3
 800bd62:	d02e      	beq.n	800bdc2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd6a:	d106      	bne.n	800bd7a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd70:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	639a      	str	r2, [r3, #56]	@ 0x38
 800bd78:	e029      	b.n	800bdce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bd80:	d10a      	bne.n	800bd98 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f000 faca 	bl	800c31c <SD_WideBus_Enable>
 800bd88:	62b8      	str	r0, [r7, #40]	@ 0x28

      hsd->ErrorCode |= errorstate;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bd8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd90:	431a      	orrs	r2, r3
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	639a      	str	r2, [r3, #56]	@ 0x38
 800bd96:	e01a      	b.n	800bdce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d10a      	bne.n	800bdb4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f000 fb07 	bl	800c3b2 <SD_WideBus_Disable>
 800bda4:	62b8      	str	r0, [r7, #40]	@ 0x28

      hsd->ErrorCode |= errorstate;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bdaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdac:	431a      	orrs	r2, r3
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	639a      	str	r2, [r3, #56]	@ 0x38
 800bdb2:	e00c      	b.n	800bdce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdb8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	639a      	str	r2, [r3, #56]	@ 0x38
 800bdc0:	e005      	b.n	800bdce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdc6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d007      	beq.n	800bde6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	4a35      	ldr	r2, [pc, #212]	@ (800beb0 <HAL_SD_ConfigWideBusOperation+0x16c>)
 800bddc:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800bdde:	2301      	movs	r3, #1
 800bde0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800bde4:	e042      	b.n	800be6c <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800bde6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800bdea:	f7fd fda7 	bl	800993c <HAL_RCCEx_GetPeriphCLKFreq>
 800bdee:	6278      	str	r0, [r7, #36]	@ 0x24
    if (sdmmc_clk != 0U)
 800bdf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d031      	beq.n	800be5a <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	685b      	ldr	r3, [r3, #4]
 800bdfa:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	689b      	ldr	r3, [r3, #8]
 800be00:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	68db      	ldr	r3, [r3, #12]
 800be06:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	695b      	ldr	r3, [r3, #20]
 800be10:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	699b      	ldr	r3, [r3, #24]
 800be16:	3302      	adds	r3, #2
 800be18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800be1e:	4a25      	ldr	r2, [pc, #148]	@ (800beb4 <HAL_SD_ConfigWideBusOperation+0x170>)
 800be20:	4293      	cmp	r3, r2
 800be22:	d907      	bls.n	800be34 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 800be24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be26:	4a24      	ldr	r2, [pc, #144]	@ (800beb8 <HAL_SD_ConfigWideBusOperation+0x174>)
 800be28:	fba2 2303 	umull	r2, r3, r2, r3
 800be2c:	0ddb      	lsrs	r3, r3, #23
 800be2e:	3b02      	subs	r3, #2
 800be30:	623b      	str	r3, [r7, #32]
 800be32:	e002      	b.n	800be3a <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	699b      	ldr	r3, [r3, #24]
 800be38:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681d      	ldr	r5, [r3, #0]
 800be3e:	466c      	mov	r4, sp
 800be40:	f107 0318 	add.w	r3, r7, #24
 800be44:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800be48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800be4c:	f107 030c 	add.w	r3, r7, #12
 800be50:	cb0e      	ldmia	r3, {r1, r2, r3}
 800be52:	4628      	mov	r0, r5
 800be54:	f002 f93f 	bl	800e0d6 <SDMMC_Init>
 800be58:	e008      	b.n	800be6c <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be5e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	639a      	str	r2, [r3, #56]	@ 0x38
      status = HAL_ERROR;
 800be66:	2301      	movs	r3, #1
 800be68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800be74:	4618      	mov	r0, r3
 800be76:	f002 f9fb 	bl	800e270 <SDMMC_CmdBlockLength>
 800be7a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800be7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d00c      	beq.n	800be9c <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	4a0a      	ldr	r2, [pc, #40]	@ (800beb0 <HAL_SD_ConfigWideBusOperation+0x16c>)
 800be88:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800be8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be90:	431a      	orrs	r2, r3
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800be96:	2301      	movs	r3, #1
 800be98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2201      	movs	r2, #1
 800bea0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 800bea4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3730      	adds	r7, #48	@ 0x30
 800beac:	46bd      	mov	sp, r7
 800beae:	bdb0      	pop	{r4, r5, r7, pc}
 800beb0:	004005ff 	.word	0x004005ff
 800beb4:	017d7840 	.word	0x017d7840
 800beb8:	55e63b89 	.word	0x55e63b89

0800bebc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b086      	sub	sp, #24
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800bec4:	2300      	movs	r3, #0
 800bec6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800bec8:	f107 030c 	add.w	r3, r7, #12
 800becc:	4619      	mov	r1, r3
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f000 f9fc 	bl	800c2cc <SD_SendStatus>
 800bed4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d005      	beq.n	800bee8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	431a      	orrs	r2, r3
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	0a5b      	lsrs	r3, r3, #9
 800beec:	f003 030f 	and.w	r3, r3, #15
 800bef0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800bef2:	693b      	ldr	r3, [r7, #16]
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3718      	adds	r7, #24
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}

0800befc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800befc:	b480      	push	{r7}
 800befe:	b085      	sub	sp, #20
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf08:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bf18:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800bf1a:	bf00      	nop
 800bf1c:	3714      	adds	r7, #20
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf24:	4770      	bx	lr

0800bf26 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bf26:	b580      	push	{r7, lr}
 800bf28:	b084      	sub	sp, #16
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf32:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf38:	2b82      	cmp	r3, #130	@ 0x82
 800bf3a:	d111      	bne.n	800bf60 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4618      	mov	r0, r3
 800bf42:	f002 fa3f 	bl	800e3c4 <SDMMC_CmdStopTransfer>
 800bf46:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d008      	beq.n	800bf60 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	431a      	orrs	r2, r3
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800bf5a:	68f8      	ldr	r0, [r7, #12]
 800bf5c:	f7ff fd18 	bl	800b990 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f022 0208 	bic.w	r2, r2, #8
 800bf6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f240 523a 	movw	r2, #1338	@ 0x53a
 800bf78:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	2201      	movs	r2, #1
 800bf7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2200      	movs	r2, #0
 800bf86:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800bf88:	68f8      	ldr	r0, [r7, #12]
 800bf8a:	f004 f905 	bl	8010198 <HAL_SD_RxCpltCallback>
#endif
}
 800bf8e:	bf00      	nop
 800bf90:	3710      	adds	r7, #16
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}
	...

0800bf98 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b086      	sub	sp, #24
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfa4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  RxErrorCode = hsd->hdmarx->ErrorCode;
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfac:	613b      	str	r3, [r7, #16]
  TxErrorCode = hsd->hdmatx->ErrorCode;
 800bfae:	697b      	ldr	r3, [r7, #20]
 800bfb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfb4:	60fb      	str	r3, [r7, #12]
  if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	2b01      	cmp	r3, #1
 800bfba:	d002      	beq.n	800bfc2 <SD_DMAError+0x2a>
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2b01      	cmp	r3, #1
 800bfc0:	d12d      	bne.n	800c01e <SD_DMAError+0x86>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	4a19      	ldr	r2, [pc, #100]	@ (800c02c <SD_DMAError+0x94>)
 800bfc8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800bfd8:	63da      	str	r2, [r3, #60]	@ 0x3c
      SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfde:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	639a      	str	r2, [r3, #56]	@ 0x38
    CardState = HAL_SD_GetCardState(hsd);
 800bfe6:	6978      	ldr	r0, [r7, #20]
 800bfe8:	f7ff ff68 	bl	800bebc <HAL_SD_GetCardState>
 800bfec:	60b8      	str	r0, [r7, #8]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	2b06      	cmp	r3, #6
 800bff2:	d002      	beq.n	800bffa <SD_DMAError+0x62>
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	2b05      	cmp	r3, #5
 800bff8:	d10a      	bne.n	800c010 <SD_DMAError+0x78>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	4618      	mov	r0, r3
 800c000:	f002 f9e0 	bl	800e3c4 <SDMMC_CmdStopTransfer>
 800c004:	4602      	mov	r2, r0
 800c006:	697b      	ldr	r3, [r7, #20]
 800c008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c00a:	431a      	orrs	r2, r3
 800c00c:	697b      	ldr	r3, [r7, #20]
 800c00e:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    hsd->State= HAL_SD_STATE_READY;
 800c010:	697b      	ldr	r3, [r7, #20]
 800c012:	2201      	movs	r2, #1
 800c014:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->Context = SD_CONTEXT_NONE;
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	2200      	movs	r2, #0
 800c01c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 800c01e:	6978      	ldr	r0, [r7, #20]
 800c020:	f7ff fcb6 	bl	800b990 <HAL_SD_ErrorCallback>
#endif
}
 800c024:	bf00      	nop
 800c026:	3718      	adds	r7, #24
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}
 800c02c:	004005ff 	.word	0x004005ff

0800c030 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c030:	b5b0      	push	{r4, r5, r7, lr}
 800c032:	b090      	sub	sp, #64	@ 0x40
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800c038:	2301      	movs	r3, #1
 800c03a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	4618      	mov	r0, r3
 800c042:	f002 f891 	bl	800e168 <SDMMC_GetPowerState>
 800c046:	4603      	mov	r3, r0
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d102      	bne.n	800c052 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c04c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800c050:	e0aa      	b.n	800c1a8 <SD_InitCard+0x178>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c056:	2b03      	cmp	r3, #3
 800c058:	d02f      	beq.n	800c0ba <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	4618      	mov	r0, r3
 800c060:	f002 faba 	bl	800e5d8 <SDMMC_CmdSendCID>
 800c064:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d001      	beq.n	800c070 <SD_InitCard+0x40>
    {
      return errorstate;
 800c06c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c06e:	e09b      	b.n	800c1a8 <SD_InitCard+0x178>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	2100      	movs	r1, #0
 800c076:	4618      	mov	r0, r3
 800c078:	f002 f8bb 	bl	800e1f2 <SDMMC_GetResponse>
 800c07c:	4602      	mov	r2, r0
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	2104      	movs	r1, #4
 800c088:	4618      	mov	r0, r3
 800c08a:	f002 f8b2 	bl	800e1f2 <SDMMC_GetResponse>
 800c08e:	4602      	mov	r2, r0
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	2108      	movs	r1, #8
 800c09a:	4618      	mov	r0, r3
 800c09c:	f002 f8a9 	bl	800e1f2 <SDMMC_GetResponse>
 800c0a0:	4602      	mov	r2, r0
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	210c      	movs	r1, #12
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f002 f8a0 	bl	800e1f2 <SDMMC_GetResponse>
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0be:	2b03      	cmp	r3, #3
 800c0c0:	d00d      	beq.n	800c0de <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f107 020e 	add.w	r2, r7, #14
 800c0ca:	4611      	mov	r1, r2
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f002 fac0 	bl	800e652 <SDMMC_CmdSetRelAdd>
 800c0d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c0d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d001      	beq.n	800c0de <SD_InitCard+0xae>
    {
      return errorstate;
 800c0da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0dc:	e064      	b.n	800c1a8 <SD_InitCard+0x178>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0e2:	2b03      	cmp	r3, #3
 800c0e4:	d036      	beq.n	800c154 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c0e6:	89fb      	ldrh	r3, [r7, #14]
 800c0e8:	461a      	mov	r2, r3
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681a      	ldr	r2, [r3, #0]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c0f6:	041b      	lsls	r3, r3, #16
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	4610      	mov	r0, r2
 800c0fc:	f002 fa8a 	bl	800e614 <SDMMC_CmdSendCSD>
 800c100:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c104:	2b00      	cmp	r3, #0
 800c106:	d001      	beq.n	800c10c <SD_InitCard+0xdc>
    {
      return errorstate;
 800c108:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c10a:	e04d      	b.n	800c1a8 <SD_InitCard+0x178>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	2100      	movs	r1, #0
 800c112:	4618      	mov	r0, r3
 800c114:	f002 f86d 	bl	800e1f2 <SDMMC_GetResponse>
 800c118:	4602      	mov	r2, r0
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	2104      	movs	r1, #4
 800c124:	4618      	mov	r0, r3
 800c126:	f002 f864 	bl	800e1f2 <SDMMC_GetResponse>
 800c12a:	4602      	mov	r2, r0
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	2108      	movs	r1, #8
 800c136:	4618      	mov	r0, r3
 800c138:	f002 f85b 	bl	800e1f2 <SDMMC_GetResponse>
 800c13c:	4602      	mov	r2, r0
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	210c      	movs	r1, #12
 800c148:	4618      	mov	r0, r3
 800c14a:	f002 f852 	bl	800e1f2 <SDMMC_GetResponse>
 800c14e:	4602      	mov	r2, r0
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	2104      	movs	r1, #4
 800c15a:	4618      	mov	r0, r3
 800c15c:	f002 f849 	bl	800e1f2 <SDMMC_GetResponse>
 800c160:	4603      	mov	r3, r0
 800c162:	0d1a      	lsrs	r2, r3, #20
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c168:	f107 0310 	add.w	r3, r7, #16
 800c16c:	4619      	mov	r1, r3
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f7ff fc18 	bl	800b9a4 <HAL_SD_GetCardCSD>
 800c174:	4603      	mov	r3, r0
 800c176:	2b00      	cmp	r3, #0
 800c178:	d002      	beq.n	800c180 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c17a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c17e:	e013      	b.n	800c1a8 <SD_InitCard+0x178>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6819      	ldr	r1, [r3, #0]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c188:	041b      	lsls	r3, r3, #16
 800c18a:	2200      	movs	r2, #0
 800c18c:	461c      	mov	r4, r3
 800c18e:	4615      	mov	r5, r2
 800c190:	4622      	mov	r2, r4
 800c192:	462b      	mov	r3, r5
 800c194:	4608      	mov	r0, r1
 800c196:	f002 f937 	bl	800e408 <SDMMC_CmdSelDesel>
 800c19a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800c19c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d001      	beq.n	800c1a6 <SD_InitCard+0x176>
  {
    return errorstate;
 800c1a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1a4:	e000      	b.n	800c1a8 <SD_InitCard+0x178>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c1a6:	2300      	movs	r3, #0
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3740      	adds	r7, #64	@ 0x40
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bdb0      	pop	{r4, r5, r7, pc}

0800c1b0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b086      	sub	sp, #24
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	617b      	str	r3, [r7, #20]
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f002 f940 	bl	800e44e <SDMMC_CmdGoIdleState>
 800c1ce:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d001      	beq.n	800c1da <SD_PowerON+0x2a>
  {
    return errorstate;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	e072      	b.n	800c2c0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f002 f953 	bl	800e48a <SDMMC_CmdOperCond>
 800c1e4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d00d      	beq.n	800c208 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f002 f929 	bl	800e44e <SDMMC_CmdGoIdleState>
 800c1fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d004      	beq.n	800c20e <SD_PowerON+0x5e>
    {
      return errorstate;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	e05b      	b.n	800c2c0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2201      	movs	r2, #1
 800c20c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c212:	2b01      	cmp	r3, #1
 800c214:	d137      	bne.n	800c286 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	2100      	movs	r1, #0
 800c21c:	4618      	mov	r0, r3
 800c21e:	f002 f953 	bl	800e4c8 <SDMMC_CmdAppCommand>
 800c222:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d02d      	beq.n	800c286 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c22a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c22e:	e047      	b.n	800c2c0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	2100      	movs	r1, #0
 800c236:	4618      	mov	r0, r3
 800c238:	f002 f946 	bl	800e4c8 <SDMMC_CmdAppCommand>
 800c23c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d001      	beq.n	800c248 <SD_PowerON+0x98>
    {
      return errorstate;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	e03b      	b.n	800c2c0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	491e      	ldr	r1, [pc, #120]	@ (800c2c8 <SD_PowerON+0x118>)
 800c24e:	4618      	mov	r0, r3
 800c250:	f002 f95c 	bl	800e50c <SDMMC_CmdAppOperCommand>
 800c254:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d002      	beq.n	800c262 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c25c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c260:	e02e      	b.n	800c2c0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	2100      	movs	r1, #0
 800c268:	4618      	mov	r0, r3
 800c26a:	f001 ffc2 	bl	800e1f2 <SDMMC_GetResponse>
 800c26e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c270:	697b      	ldr	r3, [r7, #20]
 800c272:	0fdb      	lsrs	r3, r3, #31
 800c274:	2b01      	cmp	r3, #1
 800c276:	d101      	bne.n	800c27c <SD_PowerON+0xcc>
 800c278:	2301      	movs	r3, #1
 800c27a:	e000      	b.n	800c27e <SD_PowerON+0xce>
 800c27c:	2300      	movs	r3, #0
 800c27e:	613b      	str	r3, [r7, #16]

    count++;
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	3301      	adds	r3, #1
 800c284:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d802      	bhi.n	800c296 <SD_PowerON+0xe6>
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d0cc      	beq.n	800c230 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d902      	bls.n	800c2a6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c2a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c2a4:	e00c      	b.n	800c2c0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d003      	beq.n	800c2b8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	645a      	str	r2, [r3, #68]	@ 0x44
 800c2b6:	e002      	b.n	800c2be <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800c2be:	2300      	movs	r3, #0
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3718      	adds	r7, #24
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	c1100000 	.word	0xc1100000

0800c2cc <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b084      	sub	sp, #16
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
 800c2d4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d102      	bne.n	800c2e2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800c2dc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c2e0:	e018      	b.n	800c314 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681a      	ldr	r2, [r3, #0]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c2ea:	041b      	lsls	r3, r3, #16
 800c2ec:	4619      	mov	r1, r3
 800c2ee:	4610      	mov	r0, r2
 800c2f0:	f002 f9d0 	bl	800e694 <SDMMC_CmdSendStatus>
 800c2f4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d001      	beq.n	800c300 <SD_SendStatus+0x34>
  {
    return errorstate;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	e009      	b.n	800c314 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	2100      	movs	r1, #0
 800c306:	4618      	mov	r0, r3
 800c308:	f001 ff73 	bl	800e1f2 <SDMMC_GetResponse>
 800c30c:	4602      	mov	r2, r0
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800c312:	2300      	movs	r3, #0
}
 800c314:	4618      	mov	r0, r3
 800c316:	3710      	adds	r7, #16
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b086      	sub	sp, #24
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800c324:	2300      	movs	r3, #0
 800c326:	60fb      	str	r3, [r7, #12]
 800c328:	2300      	movs	r3, #0
 800c32a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	2100      	movs	r1, #0
 800c332:	4618      	mov	r0, r3
 800c334:	f001 ff5d 	bl	800e1f2 <SDMMC_GetResponse>
 800c338:	4603      	mov	r3, r0
 800c33a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c33e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c342:	d102      	bne.n	800c34a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c344:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c348:	e02f      	b.n	800c3aa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c34a:	f107 030c 	add.w	r3, r7, #12
 800c34e:	4619      	mov	r1, r3
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f000 f879 	bl	800c448 <SD_FindSCR>
 800c356:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d001      	beq.n	800c362 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	e023      	b.n	800c3aa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d01c      	beq.n	800c3a6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681a      	ldr	r2, [r3, #0]
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c374:	041b      	lsls	r3, r3, #16
 800c376:	4619      	mov	r1, r3
 800c378:	4610      	mov	r0, r2
 800c37a:	f002 f8a5 	bl	800e4c8 <SDMMC_CmdAppCommand>
 800c37e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d001      	beq.n	800c38a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	e00f      	b.n	800c3aa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	2102      	movs	r1, #2
 800c390:	4618      	mov	r0, r3
 800c392:	f002 f8de 	bl	800e552 <SDMMC_CmdBusWidth>
 800c396:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d001      	beq.n	800c3a2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	e003      	b.n	800c3aa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	e001      	b.n	800c3aa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c3a6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	3718      	adds	r7, #24
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}

0800c3b2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800c3b2:	b580      	push	{r7, lr}
 800c3b4:	b086      	sub	sp, #24
 800c3b6:	af00      	add	r7, sp, #0
 800c3b8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	60fb      	str	r3, [r7, #12]
 800c3be:	2300      	movs	r3, #0
 800c3c0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	2100      	movs	r1, #0
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f001 ff12 	bl	800e1f2 <SDMMC_GetResponse>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c3d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c3d8:	d102      	bne.n	800c3e0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c3da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c3de:	e02f      	b.n	800c440 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c3e0:	f107 030c 	add.w	r3, r7, #12
 800c3e4:	4619      	mov	r1, r3
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f000 f82e 	bl	800c448 <SD_FindSCR>
 800c3ec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d001      	beq.n	800c3f8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800c3f4:	697b      	ldr	r3, [r7, #20]
 800c3f6:	e023      	b.n	800c440 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c3f8:	693b      	ldr	r3, [r7, #16]
 800c3fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d01c      	beq.n	800c43c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681a      	ldr	r2, [r3, #0]
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c40a:	041b      	lsls	r3, r3, #16
 800c40c:	4619      	mov	r1, r3
 800c40e:	4610      	mov	r0, r2
 800c410:	f002 f85a 	bl	800e4c8 <SDMMC_CmdAppCommand>
 800c414:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d001      	beq.n	800c420 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	e00f      	b.n	800c440 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	2100      	movs	r1, #0
 800c426:	4618      	mov	r0, r3
 800c428:	f002 f893 	bl	800e552 <SDMMC_CmdBusWidth>
 800c42c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d001      	beq.n	800c438 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800c434:	697b      	ldr	r3, [r7, #20]
 800c436:	e003      	b.n	800c440 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c438:	2300      	movs	r3, #0
 800c43a:	e001      	b.n	800c440 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c43c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800c440:	4618      	mov	r0, r3
 800c442:	3718      	adds	r7, #24
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800c448:	b590      	push	{r4, r7, lr}
 800c44a:	b08f      	sub	sp, #60	@ 0x3c
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
 800c450:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c452:	f7fa f8f5 	bl	8006640 <HAL_GetTick>
 800c456:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800c458:	2300      	movs	r3, #0
 800c45a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800c45c:	2300      	movs	r3, #0
 800c45e:	60bb      	str	r3, [r7, #8]
 800c460:	2300      	movs	r3, #0
 800c462:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	2108      	movs	r1, #8
 800c46e:	4618      	mov	r0, r3
 800c470:	f001 fefe 	bl	800e270 <SDMMC_CmdBlockLength>
 800c474:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d001      	beq.n	800c480 <SD_FindSCR+0x38>
  {
    return errorstate;
 800c47c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c47e:	e0a9      	b.n	800c5d4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681a      	ldr	r2, [r3, #0]
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c488:	041b      	lsls	r3, r3, #16
 800c48a:	4619      	mov	r1, r3
 800c48c:	4610      	mov	r0, r2
 800c48e:	f002 f81b 	bl	800e4c8 <SDMMC_CmdAppCommand>
 800c492:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c496:	2b00      	cmp	r3, #0
 800c498:	d001      	beq.n	800c49e <SD_FindSCR+0x56>
  {
    return errorstate;
 800c49a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c49c:	e09a      	b.n	800c5d4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c49e:	f04f 33ff 	mov.w	r3, #4294967295
 800c4a2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800c4a4:	2308      	movs	r3, #8
 800c4a6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800c4a8:	2330      	movs	r3, #48	@ 0x30
 800c4aa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c4ac:	2302      	movs	r3, #2
 800c4ae:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	f107 0210 	add.w	r2, r7, #16
 800c4c0:	4611      	mov	r1, r2
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f001 fea8 	bl	800e218 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f002 f862 	bl	800e596 <SDMMC_CmdSendSCR>
 800c4d2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c4d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d022      	beq.n	800c520 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800c4da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4dc:	e07a      	b.n	800c5d4 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d00e      	beq.n	800c50a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6819      	ldr	r1, [r3, #0]
 800c4f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4f2:	009b      	lsls	r3, r3, #2
 800c4f4:	f107 0208 	add.w	r2, r7, #8
 800c4f8:	18d4      	adds	r4, r2, r3
 800c4fa:	4608      	mov	r0, r1
 800c4fc:	f001 fe18 	bl	800e130 <SDMMC_ReadFIFO>
 800c500:	4603      	mov	r3, r0
 800c502:	6023      	str	r3, [r4, #0]
      index++;
 800c504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c506:	3301      	adds	r3, #1
 800c508:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c50a:	f7fa f899 	bl	8006640 <HAL_GetTick>
 800c50e:	4602      	mov	r2, r0
 800c510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c512:	1ad3      	subs	r3, r2, r3
 800c514:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c518:	d102      	bne.n	800c520 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c51a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c51e:	e059      	b.n	800c5d4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c526:	f240 432a 	movw	r3, #1066	@ 0x42a
 800c52a:	4013      	ands	r3, r2
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d0d6      	beq.n	800c4de <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c536:	f003 0308 	and.w	r3, r3, #8
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d005      	beq.n	800c54a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	2208      	movs	r2, #8
 800c544:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c546:	2308      	movs	r3, #8
 800c548:	e044      	b.n	800c5d4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c550:	f003 0302 	and.w	r3, r3, #2
 800c554:	2b00      	cmp	r3, #0
 800c556:	d005      	beq.n	800c564 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	2202      	movs	r2, #2
 800c55e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c560:	2302      	movs	r3, #2
 800c562:	e037      	b.n	800c5d4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c56a:	f003 0320 	and.w	r3, r3, #32
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d005      	beq.n	800c57e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	2220      	movs	r2, #32
 800c578:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800c57a:	2320      	movs	r3, #32
 800c57c:	e02a      	b.n	800c5d4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	f240 523a 	movw	r2, #1338	@ 0x53a
 800c586:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	061a      	lsls	r2, r3, #24
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	021b      	lsls	r3, r3, #8
 800c590:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c594:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	0a1b      	lsrs	r3, r3, #8
 800c59a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c59e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	0e1b      	lsrs	r3, r3, #24
 800c5a4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c5a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5a8:	601a      	str	r2, [r3, #0]
    scr++;
 800c5aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5ac:	3304      	adds	r3, #4
 800c5ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	061a      	lsls	r2, r3, #24
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	021b      	lsls	r3, r3, #8
 800c5b8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c5bc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	0a1b      	lsrs	r3, r3, #8
 800c5c2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c5c6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	0e1b      	lsrs	r3, r3, #24
 800c5cc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c5ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5d0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800c5d2:	2300      	movs	r3, #0
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	373c      	adds	r7, #60	@ 0x3c
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd90      	pop	{r4, r7, pc}

0800c5dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b084      	sub	sp, #16
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d101      	bne.n	800c5ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	e095      	b.n	800c71a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d108      	bne.n	800c608 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	685b      	ldr	r3, [r3, #4]
 800c5fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c5fe:	d009      	beq.n	800c614 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2200      	movs	r2, #0
 800c604:	61da      	str	r2, [r3, #28]
 800c606:	e005      	b.n	800c614 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2200      	movs	r2, #0
 800c60c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2200      	movs	r2, #0
 800c612:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2200      	movs	r2, #0
 800c618:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c620:	b2db      	uxtb	r3, r3
 800c622:	2b00      	cmp	r3, #0
 800c624:	d106      	bne.n	800c634 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2200      	movs	r2, #0
 800c62a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f7f9 fbda 	bl	8005de8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2202      	movs	r2, #2
 800c638:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	681a      	ldr	r2, [r3, #0]
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c64a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	68db      	ldr	r3, [r3, #12]
 800c650:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c654:	d902      	bls.n	800c65c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c656:	2300      	movs	r3, #0
 800c658:	60fb      	str	r3, [r7, #12]
 800c65a:	e002      	b.n	800c662 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c65c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c660:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	68db      	ldr	r3, [r3, #12]
 800c666:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800c66a:	d007      	beq.n	800c67c <HAL_SPI_Init+0xa0>
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	68db      	ldr	r3, [r3, #12]
 800c670:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c674:	d002      	beq.n	800c67c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2200      	movs	r2, #0
 800c67a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	685b      	ldr	r3, [r3, #4]
 800c680:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	689b      	ldr	r3, [r3, #8]
 800c688:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800c68c:	431a      	orrs	r2, r3
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	691b      	ldr	r3, [r3, #16]
 800c692:	f003 0302 	and.w	r3, r3, #2
 800c696:	431a      	orrs	r2, r3
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	695b      	ldr	r3, [r3, #20]
 800c69c:	f003 0301 	and.w	r3, r3, #1
 800c6a0:	431a      	orrs	r2, r3
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	699b      	ldr	r3, [r3, #24]
 800c6a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c6aa:	431a      	orrs	r2, r3
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	69db      	ldr	r3, [r3, #28]
 800c6b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c6b4:	431a      	orrs	r2, r3
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6a1b      	ldr	r3, [r3, #32]
 800c6ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c6be:	ea42 0103 	orr.w	r1, r2, r3
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6c6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	430a      	orrs	r2, r1
 800c6d0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	699b      	ldr	r3, [r3, #24]
 800c6d6:	0c1b      	lsrs	r3, r3, #16
 800c6d8:	f003 0204 	and.w	r2, r3, #4
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6e0:	f003 0310 	and.w	r3, r3, #16
 800c6e4:	431a      	orrs	r2, r3
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6ea:	f003 0308 	and.w	r3, r3, #8
 800c6ee:	431a      	orrs	r2, r3
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	68db      	ldr	r3, [r3, #12]
 800c6f4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800c6f8:	ea42 0103 	orr.w	r1, r2, r3
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	430a      	orrs	r2, r1
 800c708:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2200      	movs	r2, #0
 800c70e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2201      	movs	r2, #1
 800c714:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800c718:	2300      	movs	r3, #0
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3710      	adds	r7, #16
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}

0800c722 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c722:	b580      	push	{r7, lr}
 800c724:	b088      	sub	sp, #32
 800c726:	af00      	add	r7, sp, #0
 800c728:	60f8      	str	r0, [r7, #12]
 800c72a:	60b9      	str	r1, [r7, #8]
 800c72c:	603b      	str	r3, [r7, #0]
 800c72e:	4613      	mov	r3, r2
 800c730:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c732:	f7f9 ff85 	bl	8006640 <HAL_GetTick>
 800c736:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800c738:	88fb      	ldrh	r3, [r7, #6]
 800c73a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c742:	b2db      	uxtb	r3, r3
 800c744:	2b01      	cmp	r3, #1
 800c746:	d001      	beq.n	800c74c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800c748:	2302      	movs	r3, #2
 800c74a:	e15c      	b.n	800ca06 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d002      	beq.n	800c758 <HAL_SPI_Transmit+0x36>
 800c752:	88fb      	ldrh	r3, [r7, #6]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d101      	bne.n	800c75c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800c758:	2301      	movs	r3, #1
 800c75a:	e154      	b.n	800ca06 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800c762:	2b01      	cmp	r3, #1
 800c764:	d101      	bne.n	800c76a <HAL_SPI_Transmit+0x48>
 800c766:	2302      	movs	r3, #2
 800c768:	e14d      	b.n	800ca06 <HAL_SPI_Transmit+0x2e4>
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	2201      	movs	r2, #1
 800c76e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	2203      	movs	r2, #3
 800c776:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	2200      	movs	r2, #0
 800c77e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	68ba      	ldr	r2, [r7, #8]
 800c784:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	88fa      	ldrh	r2, [r7, #6]
 800c78a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	88fa      	ldrh	r2, [r7, #6]
 800c790:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	2200      	movs	r2, #0
 800c796:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	2200      	movs	r2, #0
 800c79c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	689b      	ldr	r3, [r3, #8]
 800c7b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c7bc:	d10f      	bne.n	800c7de <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	681a      	ldr	r2, [r3, #0]
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c7cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	681a      	ldr	r2, [r3, #0]
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c7dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7e8:	2b40      	cmp	r3, #64	@ 0x40
 800c7ea:	d007      	beq.n	800c7fc <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	681a      	ldr	r2, [r3, #0]
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c7fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	68db      	ldr	r3, [r3, #12]
 800c800:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c804:	d952      	bls.n	800c8ac <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	685b      	ldr	r3, [r3, #4]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d002      	beq.n	800c814 <HAL_SPI_Transmit+0xf2>
 800c80e:	8b7b      	ldrh	r3, [r7, #26]
 800c810:	2b01      	cmp	r3, #1
 800c812:	d145      	bne.n	800c8a0 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c818:	881a      	ldrh	r2, [r3, #0]
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c824:	1c9a      	adds	r2, r3, #2
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c82e:	b29b      	uxth	r3, r3
 800c830:	3b01      	subs	r3, #1
 800c832:	b29a      	uxth	r2, r3
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c838:	e032      	b.n	800c8a0 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	689b      	ldr	r3, [r3, #8]
 800c840:	f003 0302 	and.w	r3, r3, #2
 800c844:	2b02      	cmp	r3, #2
 800c846:	d112      	bne.n	800c86e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c84c:	881a      	ldrh	r2, [r3, #0]
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c858:	1c9a      	adds	r2, r3, #2
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c862:	b29b      	uxth	r3, r3
 800c864:	3b01      	subs	r3, #1
 800c866:	b29a      	uxth	r2, r3
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c86c:	e018      	b.n	800c8a0 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c86e:	f7f9 fee7 	bl	8006640 <HAL_GetTick>
 800c872:	4602      	mov	r2, r0
 800c874:	69fb      	ldr	r3, [r7, #28]
 800c876:	1ad3      	subs	r3, r2, r3
 800c878:	683a      	ldr	r2, [r7, #0]
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d803      	bhi.n	800c886 <HAL_SPI_Transmit+0x164>
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c884:	d102      	bne.n	800c88c <HAL_SPI_Transmit+0x16a>
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d109      	bne.n	800c8a0 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	2201      	movs	r2, #1
 800c890:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	2200      	movs	r2, #0
 800c898:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800c89c:	2303      	movs	r3, #3
 800c89e:	e0b2      	b.n	800ca06 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c8a4:	b29b      	uxth	r3, r3
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d1c7      	bne.n	800c83a <HAL_SPI_Transmit+0x118>
 800c8aa:	e083      	b.n	800c9b4 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	685b      	ldr	r3, [r3, #4]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d002      	beq.n	800c8ba <HAL_SPI_Transmit+0x198>
 800c8b4:	8b7b      	ldrh	r3, [r7, #26]
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	d177      	bne.n	800c9aa <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c8be:	b29b      	uxth	r3, r3
 800c8c0:	2b01      	cmp	r3, #1
 800c8c2:	d912      	bls.n	800c8ea <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8c8:	881a      	ldrh	r2, [r3, #0]
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8d4:	1c9a      	adds	r2, r3, #2
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c8de:	b29b      	uxth	r3, r3
 800c8e0:	3b02      	subs	r3, #2
 800c8e2:	b29a      	uxth	r2, r3
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c8e8:	e05f      	b.n	800c9aa <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	330c      	adds	r3, #12
 800c8f4:	7812      	ldrb	r2, [r2, #0]
 800c8f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8fc:	1c5a      	adds	r2, r3, #1
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c906:	b29b      	uxth	r3, r3
 800c908:	3b01      	subs	r3, #1
 800c90a:	b29a      	uxth	r2, r3
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800c910:	e04b      	b.n	800c9aa <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	689b      	ldr	r3, [r3, #8]
 800c918:	f003 0302 	and.w	r3, r3, #2
 800c91c:	2b02      	cmp	r3, #2
 800c91e:	d12b      	bne.n	800c978 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c924:	b29b      	uxth	r3, r3
 800c926:	2b01      	cmp	r3, #1
 800c928:	d912      	bls.n	800c950 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c92e:	881a      	ldrh	r2, [r3, #0]
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c93a:	1c9a      	adds	r2, r3, #2
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c944:	b29b      	uxth	r3, r3
 800c946:	3b02      	subs	r3, #2
 800c948:	b29a      	uxth	r2, r3
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c94e:	e02c      	b.n	800c9aa <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	330c      	adds	r3, #12
 800c95a:	7812      	ldrb	r2, [r2, #0]
 800c95c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c962:	1c5a      	adds	r2, r3, #1
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c96c:	b29b      	uxth	r3, r3
 800c96e:	3b01      	subs	r3, #1
 800c970:	b29a      	uxth	r2, r3
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c976:	e018      	b.n	800c9aa <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c978:	f7f9 fe62 	bl	8006640 <HAL_GetTick>
 800c97c:	4602      	mov	r2, r0
 800c97e:	69fb      	ldr	r3, [r7, #28]
 800c980:	1ad3      	subs	r3, r2, r3
 800c982:	683a      	ldr	r2, [r7, #0]
 800c984:	429a      	cmp	r2, r3
 800c986:	d803      	bhi.n	800c990 <HAL_SPI_Transmit+0x26e>
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c98e:	d102      	bne.n	800c996 <HAL_SPI_Transmit+0x274>
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d109      	bne.n	800c9aa <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	2201      	movs	r2, #1
 800c99a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800c9a6:	2303      	movs	r3, #3
 800c9a8:	e02d      	b.n	800ca06 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c9ae:	b29b      	uxth	r3, r3
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d1ae      	bne.n	800c912 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c9b4:	69fa      	ldr	r2, [r7, #28]
 800c9b6:	6839      	ldr	r1, [r7, #0]
 800c9b8:	68f8      	ldr	r0, [r7, #12]
 800c9ba:	f000 fad5 	bl	800cf68 <SPI_EndRxTxTransaction>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d002      	beq.n	800c9ca <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	2220      	movs	r2, #32
 800c9c8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	689b      	ldr	r3, [r3, #8]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d10a      	bne.n	800c9e8 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	617b      	str	r3, [r7, #20]
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	68db      	ldr	r3, [r3, #12]
 800c9dc:	617b      	str	r3, [r7, #20]
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	689b      	ldr	r3, [r3, #8]
 800c9e4:	617b      	str	r3, [r7, #20]
 800c9e6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	2201      	movs	r2, #1
 800c9ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d001      	beq.n	800ca04 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800ca00:	2301      	movs	r3, #1
 800ca02:	e000      	b.n	800ca06 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800ca04:	2300      	movs	r3, #0
  }
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3720      	adds	r7, #32
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}
	...

0800ca10 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b084      	sub	sp, #16
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	60f8      	str	r0, [r7, #12]
 800ca18:	60b9      	str	r1, [r7, #8]
 800ca1a:	4613      	mov	r3, r2
 800ca1c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ca24:	b2db      	uxtb	r3, r3
 800ca26:	2b01      	cmp	r3, #1
 800ca28:	d001      	beq.n	800ca2e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800ca2a:	2302      	movs	r3, #2
 800ca2c:	e0d4      	b.n	800cbd8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d002      	beq.n	800ca3a <HAL_SPI_Transmit_DMA+0x2a>
 800ca34:	88fb      	ldrh	r3, [r7, #6]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d101      	bne.n	800ca3e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	e0cc      	b.n	800cbd8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800ca44:	2b01      	cmp	r3, #1
 800ca46:	d101      	bne.n	800ca4c <HAL_SPI_Transmit_DMA+0x3c>
 800ca48:	2302      	movs	r3, #2
 800ca4a:	e0c5      	b.n	800cbd8 <HAL_SPI_Transmit_DMA+0x1c8>
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	2201      	movs	r2, #1
 800ca50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	2203      	movs	r2, #3
 800ca58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	2200      	movs	r2, #0
 800ca60:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	68ba      	ldr	r2, [r7, #8]
 800ca66:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	88fa      	ldrh	r2, [r7, #6]
 800ca6c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	88fa      	ldrh	r2, [r7, #6]
 800ca72:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	2200      	movs	r2, #0
 800ca78:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	2200      	movs	r2, #0
 800ca84:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	2200      	movs	r2, #0
 800ca92:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	689b      	ldr	r3, [r3, #8]
 800ca9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ca9e:	d10f      	bne.n	800cac0 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	681a      	ldr	r2, [r3, #0]
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800caae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	681a      	ldr	r2, [r3, #0]
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cabe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cac4:	4a46      	ldr	r2, [pc, #280]	@ (800cbe0 <HAL_SPI_Transmit_DMA+0x1d0>)
 800cac6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cacc:	4a45      	ldr	r2, [pc, #276]	@ (800cbe4 <HAL_SPI_Transmit_DMA+0x1d4>)
 800cace:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cad4:	4a44      	ldr	r2, [pc, #272]	@ (800cbe8 <HAL_SPI_Transmit_DMA+0x1d8>)
 800cad6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cadc:	2200      	movs	r2, #0
 800cade:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	685a      	ldr	r2, [r3, #4]
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800caee:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	68db      	ldr	r3, [r3, #12]
 800caf4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800caf8:	d82d      	bhi.n	800cb56 <HAL_SPI_Transmit_DMA+0x146>
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cafe:	699b      	ldr	r3, [r3, #24]
 800cb00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cb04:	d127      	bne.n	800cb56 <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cb0a:	b29b      	uxth	r3, r3
 800cb0c:	f003 0301 	and.w	r3, r3, #1
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d10f      	bne.n	800cb34 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	685a      	ldr	r2, [r3, #4]
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800cb22:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cb28:	b29b      	uxth	r3, r3
 800cb2a:	085b      	lsrs	r3, r3, #1
 800cb2c:	b29a      	uxth	r2, r3
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800cb32:	e010      	b.n	800cb56 <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	685a      	ldr	r2, [r3, #4]
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cb42:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cb48:	b29b      	uxth	r3, r3
 800cb4a:	085b      	lsrs	r3, r3, #1
 800cb4c:	b29b      	uxth	r3, r3
 800cb4e:	3301      	adds	r3, #1
 800cb50:	b29a      	uxth	r2, r3
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb5e:	4619      	mov	r1, r3
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	330c      	adds	r3, #12
 800cb66:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cb6c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800cb6e:	f7f9 ff31 	bl	80069d4 <HAL_DMA_Start_IT>
 800cb72:	4603      	mov	r3, r0
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d00b      	beq.n	800cb90 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cb7c:	f043 0210 	orr.w	r2, r3, #16
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	2200      	movs	r2, #0
 800cb88:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	e023      	b.n	800cbd8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb9a:	2b40      	cmp	r3, #64	@ 0x40
 800cb9c:	d007      	beq.n	800cbae <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	681a      	ldr	r2, [r3, #0]
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cbac:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	685a      	ldr	r2, [r3, #4]
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	f042 0220 	orr.w	r2, r2, #32
 800cbc4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	685a      	ldr	r2, [r3, #4]
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	f042 0202 	orr.w	r2, r2, #2
 800cbd4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800cbd6:	2300      	movs	r3, #0
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	3710      	adds	r7, #16
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}
 800cbe0:	0800cccf 	.word	0x0800cccf
 800cbe4:	0800cc29 	.word	0x0800cc29
 800cbe8:	0800cceb 	.word	0x0800cceb

0800cbec <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cbec:	b480      	push	{r7}
 800cbee:	b083      	sub	sp, #12
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800cbf4:	bf00      	nop
 800cbf6:	370c      	adds	r7, #12
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfe:	4770      	bx	lr

0800cc00 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cc00:	b480      	push	{r7}
 800cc02:	b083      	sub	sp, #12
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800cc08:	bf00      	nop
 800cc0a:	370c      	adds	r7, #12
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc12:	4770      	bx	lr

0800cc14 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800cc14:	b480      	push	{r7}
 800cc16:	b083      	sub	sp, #12
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800cc1c:	bf00      	nop
 800cc1e:	370c      	adds	r7, #12
 800cc20:	46bd      	mov	sp, r7
 800cc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc26:	4770      	bx	lr

0800cc28 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b086      	sub	sp, #24
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc34:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cc36:	f7f9 fd03 	bl	8006640 <HAL_GetTick>
 800cc3a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f003 0320 	and.w	r3, r3, #32
 800cc46:	2b20      	cmp	r3, #32
 800cc48:	d03b      	beq.n	800ccc2 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	685a      	ldr	r2, [r3, #4]
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	f022 0220 	bic.w	r2, r2, #32
 800cc58:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	685a      	ldr	r2, [r3, #4]
 800cc60:	697b      	ldr	r3, [r7, #20]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	f022 0202 	bic.w	r2, r2, #2
 800cc68:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800cc6a:	693a      	ldr	r2, [r7, #16]
 800cc6c:	2164      	movs	r1, #100	@ 0x64
 800cc6e:	6978      	ldr	r0, [r7, #20]
 800cc70:	f000 f97a 	bl	800cf68 <SPI_EndRxTxTransaction>
 800cc74:	4603      	mov	r3, r0
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d005      	beq.n	800cc86 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cc7a:	697b      	ldr	r3, [r7, #20]
 800cc7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cc7e:	f043 0220 	orr.w	r2, r3, #32
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	689b      	ldr	r3, [r3, #8]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d10a      	bne.n	800cca4 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cc8e:	2300      	movs	r3, #0
 800cc90:	60fb      	str	r3, [r7, #12]
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	68db      	ldr	r3, [r3, #12]
 800cc98:	60fb      	str	r3, [r7, #12]
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	689b      	ldr	r3, [r3, #8]
 800cca0:	60fb      	str	r3, [r7, #12]
 800cca2:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	2200      	movs	r2, #0
 800cca8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	2201      	movs	r2, #1
 800ccae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d003      	beq.n	800ccc2 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ccba:	6978      	ldr	r0, [r7, #20]
 800ccbc:	f7ff ffaa 	bl	800cc14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ccc0:	e002      	b.n	800ccc8 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800ccc2:	6978      	ldr	r0, [r7, #20]
 800ccc4:	f7ff ff92 	bl	800cbec <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ccc8:	3718      	adds	r7, #24
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}

0800ccce <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ccce:	b580      	push	{r7, lr}
 800ccd0:	b084      	sub	sp, #16
 800ccd2:	af00      	add	r7, sp, #0
 800ccd4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccda:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800ccdc:	68f8      	ldr	r0, [r7, #12]
 800ccde:	f7ff ff8f 	bl	800cc00 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cce2:	bf00      	nop
 800cce4:	3710      	adds	r7, #16
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bd80      	pop	{r7, pc}

0800ccea <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ccea:	b580      	push	{r7, lr}
 800ccec:	b084      	sub	sp, #16
 800ccee:	af00      	add	r7, sp, #0
 800ccf0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccf6:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	685a      	ldr	r2, [r3, #4]
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f022 0203 	bic.w	r2, r2, #3
 800cd06:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cd0c:	f043 0210 	orr.w	r2, r3, #16
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	2201      	movs	r2, #1
 800cd18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800cd1c:	68f8      	ldr	r0, [r7, #12]
 800cd1e:	f7ff ff79 	bl	800cc14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cd22:	bf00      	nop
 800cd24:	3710      	adds	r7, #16
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}
	...

0800cd2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b088      	sub	sp, #32
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	60f8      	str	r0, [r7, #12]
 800cd34:	60b9      	str	r1, [r7, #8]
 800cd36:	603b      	str	r3, [r7, #0]
 800cd38:	4613      	mov	r3, r2
 800cd3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800cd3c:	f7f9 fc80 	bl	8006640 <HAL_GetTick>
 800cd40:	4602      	mov	r2, r0
 800cd42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd44:	1a9b      	subs	r3, r3, r2
 800cd46:	683a      	ldr	r2, [r7, #0]
 800cd48:	4413      	add	r3, r2
 800cd4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800cd4c:	f7f9 fc78 	bl	8006640 <HAL_GetTick>
 800cd50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800cd52:	4b39      	ldr	r3, [pc, #228]	@ (800ce38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	015b      	lsls	r3, r3, #5
 800cd58:	0d1b      	lsrs	r3, r3, #20
 800cd5a:	69fa      	ldr	r2, [r7, #28]
 800cd5c:	fb02 f303 	mul.w	r3, r2, r3
 800cd60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cd62:	e054      	b.n	800ce0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd6a:	d050      	beq.n	800ce0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800cd6c:	f7f9 fc68 	bl	8006640 <HAL_GetTick>
 800cd70:	4602      	mov	r2, r0
 800cd72:	69bb      	ldr	r3, [r7, #24]
 800cd74:	1ad3      	subs	r3, r2, r3
 800cd76:	69fa      	ldr	r2, [r7, #28]
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	d902      	bls.n	800cd82 <SPI_WaitFlagStateUntilTimeout+0x56>
 800cd7c:	69fb      	ldr	r3, [r7, #28]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d13d      	bne.n	800cdfe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	685a      	ldr	r2, [r3, #4]
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800cd90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	685b      	ldr	r3, [r3, #4]
 800cd96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800cd9a:	d111      	bne.n	800cdc0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	689b      	ldr	r3, [r3, #8]
 800cda0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cda4:	d004      	beq.n	800cdb0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	689b      	ldr	r3, [r3, #8]
 800cdaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cdae:	d107      	bne.n	800cdc0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	681a      	ldr	r2, [r3, #0]
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cdbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cdc8:	d10f      	bne.n	800cdea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	681a      	ldr	r2, [r3, #0]
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800cdd8:	601a      	str	r2, [r3, #0]
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	681a      	ldr	r2, [r3, #0]
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800cde8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	2201      	movs	r2, #1
 800cdee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800cdfa:	2303      	movs	r3, #3
 800cdfc:	e017      	b.n	800ce2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d101      	bne.n	800ce08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ce04:	2300      	movs	r3, #0
 800ce06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ce08:	697b      	ldr	r3, [r7, #20]
 800ce0a:	3b01      	subs	r3, #1
 800ce0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	689a      	ldr	r2, [r3, #8]
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	4013      	ands	r3, r2
 800ce18:	68ba      	ldr	r2, [r7, #8]
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	bf0c      	ite	eq
 800ce1e:	2301      	moveq	r3, #1
 800ce20:	2300      	movne	r3, #0
 800ce22:	b2db      	uxtb	r3, r3
 800ce24:	461a      	mov	r2, r3
 800ce26:	79fb      	ldrb	r3, [r7, #7]
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d19b      	bne.n	800cd64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ce2c:	2300      	movs	r3, #0
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3720      	adds	r7, #32
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	bf00      	nop
 800ce38:	20000000 	.word	0x20000000

0800ce3c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b08a      	sub	sp, #40	@ 0x28
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	60f8      	str	r0, [r7, #12]
 800ce44:	60b9      	str	r1, [r7, #8]
 800ce46:	607a      	str	r2, [r7, #4]
 800ce48:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ce4e:	f7f9 fbf7 	bl	8006640 <HAL_GetTick>
 800ce52:	4602      	mov	r2, r0
 800ce54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce56:	1a9b      	subs	r3, r3, r2
 800ce58:	683a      	ldr	r2, [r7, #0]
 800ce5a:	4413      	add	r3, r2
 800ce5c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800ce5e:	f7f9 fbef 	bl	8006640 <HAL_GetTick>
 800ce62:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	330c      	adds	r3, #12
 800ce6a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ce6c:	4b3d      	ldr	r3, [pc, #244]	@ (800cf64 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800ce6e:	681a      	ldr	r2, [r3, #0]
 800ce70:	4613      	mov	r3, r2
 800ce72:	009b      	lsls	r3, r3, #2
 800ce74:	4413      	add	r3, r2
 800ce76:	00da      	lsls	r2, r3, #3
 800ce78:	1ad3      	subs	r3, r2, r3
 800ce7a:	0d1b      	lsrs	r3, r3, #20
 800ce7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce7e:	fb02 f303 	mul.w	r3, r2, r3
 800ce82:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800ce84:	e060      	b.n	800cf48 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ce86:	68bb      	ldr	r3, [r7, #8]
 800ce88:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800ce8c:	d107      	bne.n	800ce9e <SPI_WaitFifoStateUntilTimeout+0x62>
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d104      	bne.n	800ce9e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800ce94:	69fb      	ldr	r3, [r7, #28]
 800ce96:	781b      	ldrb	r3, [r3, #0]
 800ce98:	b2db      	uxtb	r3, r3
 800ce9a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800ce9c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cea4:	d050      	beq.n	800cf48 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800cea6:	f7f9 fbcb 	bl	8006640 <HAL_GetTick>
 800ceaa:	4602      	mov	r2, r0
 800ceac:	6a3b      	ldr	r3, [r7, #32]
 800ceae:	1ad3      	subs	r3, r2, r3
 800ceb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d902      	bls.n	800cebc <SPI_WaitFifoStateUntilTimeout+0x80>
 800ceb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d13d      	bne.n	800cf38 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	685a      	ldr	r2, [r3, #4]
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ceca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	685b      	ldr	r3, [r3, #4]
 800ced0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ced4:	d111      	bne.n	800cefa <SPI_WaitFifoStateUntilTimeout+0xbe>
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	689b      	ldr	r3, [r3, #8]
 800ceda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cede:	d004      	beq.n	800ceea <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	689b      	ldr	r3, [r3, #8]
 800cee4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cee8:	d107      	bne.n	800cefa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	681a      	ldr	r2, [r3, #0]
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cef8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cefe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cf02:	d10f      	bne.n	800cf24 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	681a      	ldr	r2, [r3, #0]
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800cf12:	601a      	str	r2, [r3, #0]
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	681a      	ldr	r2, [r3, #0]
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800cf22:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	2201      	movs	r2, #1
 800cf28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800cf34:	2303      	movs	r3, #3
 800cf36:	e010      	b.n	800cf5a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800cf38:	69bb      	ldr	r3, [r7, #24]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d101      	bne.n	800cf42 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800cf42:	69bb      	ldr	r3, [r7, #24]
 800cf44:	3b01      	subs	r3, #1
 800cf46:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	689a      	ldr	r2, [r3, #8]
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	4013      	ands	r3, r2
 800cf52:	687a      	ldr	r2, [r7, #4]
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d196      	bne.n	800ce86 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800cf58:	2300      	movs	r3, #0
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3728      	adds	r7, #40	@ 0x28
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}
 800cf62:	bf00      	nop
 800cf64:	20000000 	.word	0x20000000

0800cf68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b086      	sub	sp, #24
 800cf6c:	af02      	add	r7, sp, #8
 800cf6e:	60f8      	str	r0, [r7, #12]
 800cf70:	60b9      	str	r1, [r7, #8]
 800cf72:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	9300      	str	r3, [sp, #0]
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800cf80:	68f8      	ldr	r0, [r7, #12]
 800cf82:	f7ff ff5b 	bl	800ce3c <SPI_WaitFifoStateUntilTimeout>
 800cf86:	4603      	mov	r3, r0
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d007      	beq.n	800cf9c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cf90:	f043 0220 	orr.w	r2, r3, #32
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800cf98:	2303      	movs	r3, #3
 800cf9a:	e027      	b.n	800cfec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	9300      	str	r3, [sp, #0]
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	2180      	movs	r1, #128	@ 0x80
 800cfa6:	68f8      	ldr	r0, [r7, #12]
 800cfa8:	f7ff fec0 	bl	800cd2c <SPI_WaitFlagStateUntilTimeout>
 800cfac:	4603      	mov	r3, r0
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d007      	beq.n	800cfc2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cfb6:	f043 0220 	orr.w	r2, r3, #32
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800cfbe:	2303      	movs	r3, #3
 800cfc0:	e014      	b.n	800cfec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	9300      	str	r3, [sp, #0]
 800cfc6:	68bb      	ldr	r3, [r7, #8]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800cfce:	68f8      	ldr	r0, [r7, #12]
 800cfd0:	f7ff ff34 	bl	800ce3c <SPI_WaitFifoStateUntilTimeout>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d007      	beq.n	800cfea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cfde:	f043 0220 	orr.w	r2, r3, #32
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800cfe6:	2303      	movs	r3, #3
 800cfe8:	e000      	b.n	800cfec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800cfea:	2300      	movs	r3, #0
}
 800cfec:	4618      	mov	r0, r3
 800cfee:	3710      	adds	r7, #16
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}

0800cff4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b082      	sub	sp, #8
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d101      	bne.n	800d006 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d002:	2301      	movs	r3, #1
 800d004:	e049      	b.n	800d09a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d00c:	b2db      	uxtb	r3, r3
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d106      	bne.n	800d020 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2200      	movs	r2, #0
 800d016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f000 f841 	bl	800d0a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2202      	movs	r2, #2
 800d024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681a      	ldr	r2, [r3, #0]
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	3304      	adds	r3, #4
 800d030:	4619      	mov	r1, r3
 800d032:	4610      	mov	r0, r2
 800d034:	f000 f9e0 	bl	800d3f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2201      	movs	r2, #1
 800d03c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2201      	movs	r2, #1
 800d044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2201      	movs	r2, #1
 800d04c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2201      	movs	r2, #1
 800d054:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2201      	movs	r2, #1
 800d05c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2201      	movs	r2, #1
 800d064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2201      	movs	r2, #1
 800d06c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2201      	movs	r2, #1
 800d074:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2201      	movs	r2, #1
 800d07c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2201      	movs	r2, #1
 800d084:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2201      	movs	r2, #1
 800d08c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2201      	movs	r2, #1
 800d094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d098:	2300      	movs	r3, #0
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3708      	adds	r7, #8
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}

0800d0a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d0a2:	b480      	push	{r7}
 800d0a4:	b083      	sub	sp, #12
 800d0a6:	af00      	add	r7, sp, #0
 800d0a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d0aa:	bf00      	nop
 800d0ac:	370c      	adds	r7, #12
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b4:	4770      	bx	lr
	...

0800d0b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b085      	sub	sp, #20
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d0c6:	b2db      	uxtb	r3, r3
 800d0c8:	2b01      	cmp	r3, #1
 800d0ca:	d001      	beq.n	800d0d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d0cc:	2301      	movs	r3, #1
 800d0ce:	e04f      	b.n	800d170 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2202      	movs	r2, #2
 800d0d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	68da      	ldr	r2, [r3, #12]
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	f042 0201 	orr.w	r2, r2, #1
 800d0e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	4a23      	ldr	r2, [pc, #140]	@ (800d17c <HAL_TIM_Base_Start_IT+0xc4>)
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	d01d      	beq.n	800d12e <HAL_TIM_Base_Start_IT+0x76>
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d0fa:	d018      	beq.n	800d12e <HAL_TIM_Base_Start_IT+0x76>
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	4a1f      	ldr	r2, [pc, #124]	@ (800d180 <HAL_TIM_Base_Start_IT+0xc8>)
 800d102:	4293      	cmp	r3, r2
 800d104:	d013      	beq.n	800d12e <HAL_TIM_Base_Start_IT+0x76>
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	4a1e      	ldr	r2, [pc, #120]	@ (800d184 <HAL_TIM_Base_Start_IT+0xcc>)
 800d10c:	4293      	cmp	r3, r2
 800d10e:	d00e      	beq.n	800d12e <HAL_TIM_Base_Start_IT+0x76>
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	4a1c      	ldr	r2, [pc, #112]	@ (800d188 <HAL_TIM_Base_Start_IT+0xd0>)
 800d116:	4293      	cmp	r3, r2
 800d118:	d009      	beq.n	800d12e <HAL_TIM_Base_Start_IT+0x76>
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	4a1b      	ldr	r2, [pc, #108]	@ (800d18c <HAL_TIM_Base_Start_IT+0xd4>)
 800d120:	4293      	cmp	r3, r2
 800d122:	d004      	beq.n	800d12e <HAL_TIM_Base_Start_IT+0x76>
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	4a19      	ldr	r2, [pc, #100]	@ (800d190 <HAL_TIM_Base_Start_IT+0xd8>)
 800d12a:	4293      	cmp	r3, r2
 800d12c:	d115      	bne.n	800d15a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	689a      	ldr	r2, [r3, #8]
 800d134:	4b17      	ldr	r3, [pc, #92]	@ (800d194 <HAL_TIM_Base_Start_IT+0xdc>)
 800d136:	4013      	ands	r3, r2
 800d138:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	2b06      	cmp	r3, #6
 800d13e:	d015      	beq.n	800d16c <HAL_TIM_Base_Start_IT+0xb4>
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d146:	d011      	beq.n	800d16c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	681a      	ldr	r2, [r3, #0]
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	f042 0201 	orr.w	r2, r2, #1
 800d156:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d158:	e008      	b.n	800d16c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	681a      	ldr	r2, [r3, #0]
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	f042 0201 	orr.w	r2, r2, #1
 800d168:	601a      	str	r2, [r3, #0]
 800d16a:	e000      	b.n	800d16e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d16c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d16e:	2300      	movs	r3, #0
}
 800d170:	4618      	mov	r0, r3
 800d172:	3714      	adds	r7, #20
 800d174:	46bd      	mov	sp, r7
 800d176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17a:	4770      	bx	lr
 800d17c:	40012c00 	.word	0x40012c00
 800d180:	40000400 	.word	0x40000400
 800d184:	40000800 	.word	0x40000800
 800d188:	40000c00 	.word	0x40000c00
 800d18c:	40013400 	.word	0x40013400
 800d190:	40014000 	.word	0x40014000
 800d194:	00010007 	.word	0x00010007

0800d198 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b084      	sub	sp, #16
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	68db      	ldr	r3, [r3, #12]
 800d1a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	691b      	ldr	r3, [r3, #16]
 800d1ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	f003 0302 	and.w	r3, r3, #2
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d020      	beq.n	800d1fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	f003 0302 	and.w	r3, r3, #2
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d01b      	beq.n	800d1fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	f06f 0202 	mvn.w	r2, #2
 800d1cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2201      	movs	r2, #1
 800d1d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	699b      	ldr	r3, [r3, #24]
 800d1da:	f003 0303 	and.w	r3, r3, #3
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d003      	beq.n	800d1ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	f000 f8e9 	bl	800d3ba <HAL_TIM_IC_CaptureCallback>
 800d1e8:	e005      	b.n	800d1f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f000 f8db 	bl	800d3a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f000 f8ec 	bl	800d3ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	f003 0304 	and.w	r3, r3, #4
 800d202:	2b00      	cmp	r3, #0
 800d204:	d020      	beq.n	800d248 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	f003 0304 	and.w	r3, r3, #4
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d01b      	beq.n	800d248 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	f06f 0204 	mvn.w	r2, #4
 800d218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2202      	movs	r2, #2
 800d21e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	699b      	ldr	r3, [r3, #24]
 800d226:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d003      	beq.n	800d236 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f000 f8c3 	bl	800d3ba <HAL_TIM_IC_CaptureCallback>
 800d234:	e005      	b.n	800d242 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f000 f8b5 	bl	800d3a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f000 f8c6 	bl	800d3ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	2200      	movs	r2, #0
 800d246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	f003 0308 	and.w	r3, r3, #8
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d020      	beq.n	800d294 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	f003 0308 	and.w	r3, r3, #8
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d01b      	beq.n	800d294 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	f06f 0208 	mvn.w	r2, #8
 800d264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2204      	movs	r2, #4
 800d26a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	69db      	ldr	r3, [r3, #28]
 800d272:	f003 0303 	and.w	r3, r3, #3
 800d276:	2b00      	cmp	r3, #0
 800d278:	d003      	beq.n	800d282 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f000 f89d 	bl	800d3ba <HAL_TIM_IC_CaptureCallback>
 800d280:	e005      	b.n	800d28e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f000 f88f 	bl	800d3a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f000 f8a0 	bl	800d3ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2200      	movs	r2, #0
 800d292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d294:	68bb      	ldr	r3, [r7, #8]
 800d296:	f003 0310 	and.w	r3, r3, #16
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d020      	beq.n	800d2e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	f003 0310 	and.w	r3, r3, #16
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d01b      	beq.n	800d2e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	f06f 0210 	mvn.w	r2, #16
 800d2b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2208      	movs	r2, #8
 800d2b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	69db      	ldr	r3, [r3, #28]
 800d2be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d003      	beq.n	800d2ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f000 f877 	bl	800d3ba <HAL_TIM_IC_CaptureCallback>
 800d2cc:	e005      	b.n	800d2da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f000 f869 	bl	800d3a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f000 f87a 	bl	800d3ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2200      	movs	r2, #0
 800d2de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	f003 0301 	and.w	r3, r3, #1
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d00c      	beq.n	800d304 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	f003 0301 	and.w	r3, r3, #1
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d007      	beq.n	800d304 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	f06f 0201 	mvn.w	r2, #1
 800d2fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f7f8 fc10 	bl	8005b24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d104      	bne.n	800d318 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d314:	2b00      	cmp	r3, #0
 800d316:	d00c      	beq.n	800d332 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d007      	beq.n	800d332 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d32a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	f000 f913 	bl	800d558 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d00c      	beq.n	800d356 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d342:	2b00      	cmp	r3, #0
 800d344:	d007      	beq.n	800d356 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d34e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d350:	6878      	ldr	r0, [r7, #4]
 800d352:	f000 f90b 	bl	800d56c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d00c      	beq.n	800d37a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d366:	2b00      	cmp	r3, #0
 800d368:	d007      	beq.n	800d37a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f000 f834 	bl	800d3e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	f003 0320 	and.w	r3, r3, #32
 800d380:	2b00      	cmp	r3, #0
 800d382:	d00c      	beq.n	800d39e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	f003 0320 	and.w	r3, r3, #32
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d007      	beq.n	800d39e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	f06f 0220 	mvn.w	r2, #32
 800d396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f000 f8d3 	bl	800d544 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d39e:	bf00      	nop
 800d3a0:	3710      	adds	r7, #16
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}

0800d3a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d3a6:	b480      	push	{r7}
 800d3a8:	b083      	sub	sp, #12
 800d3aa:	af00      	add	r7, sp, #0
 800d3ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d3ae:	bf00      	nop
 800d3b0:	370c      	adds	r7, #12
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b8:	4770      	bx	lr

0800d3ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d3ba:	b480      	push	{r7}
 800d3bc:	b083      	sub	sp, #12
 800d3be:	af00      	add	r7, sp, #0
 800d3c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d3c2:	bf00      	nop
 800d3c4:	370c      	adds	r7, #12
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3cc:	4770      	bx	lr

0800d3ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d3ce:	b480      	push	{r7}
 800d3d0:	b083      	sub	sp, #12
 800d3d2:	af00      	add	r7, sp, #0
 800d3d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d3d6:	bf00      	nop
 800d3d8:	370c      	adds	r7, #12
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e0:	4770      	bx	lr

0800d3e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d3e2:	b480      	push	{r7}
 800d3e4:	b083      	sub	sp, #12
 800d3e6:	af00      	add	r7, sp, #0
 800d3e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d3ea:	bf00      	nop
 800d3ec:	370c      	adds	r7, #12
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f4:	4770      	bx	lr
	...

0800d3f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b085      	sub	sp, #20
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	4a46      	ldr	r2, [pc, #280]	@ (800d524 <TIM_Base_SetConfig+0x12c>)
 800d40c:	4293      	cmp	r3, r2
 800d40e:	d013      	beq.n	800d438 <TIM_Base_SetConfig+0x40>
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d416:	d00f      	beq.n	800d438 <TIM_Base_SetConfig+0x40>
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	4a43      	ldr	r2, [pc, #268]	@ (800d528 <TIM_Base_SetConfig+0x130>)
 800d41c:	4293      	cmp	r3, r2
 800d41e:	d00b      	beq.n	800d438 <TIM_Base_SetConfig+0x40>
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	4a42      	ldr	r2, [pc, #264]	@ (800d52c <TIM_Base_SetConfig+0x134>)
 800d424:	4293      	cmp	r3, r2
 800d426:	d007      	beq.n	800d438 <TIM_Base_SetConfig+0x40>
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	4a41      	ldr	r2, [pc, #260]	@ (800d530 <TIM_Base_SetConfig+0x138>)
 800d42c:	4293      	cmp	r3, r2
 800d42e:	d003      	beq.n	800d438 <TIM_Base_SetConfig+0x40>
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	4a40      	ldr	r2, [pc, #256]	@ (800d534 <TIM_Base_SetConfig+0x13c>)
 800d434:	4293      	cmp	r3, r2
 800d436:	d108      	bne.n	800d44a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d43e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	685b      	ldr	r3, [r3, #4]
 800d444:	68fa      	ldr	r2, [r7, #12]
 800d446:	4313      	orrs	r3, r2
 800d448:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	4a35      	ldr	r2, [pc, #212]	@ (800d524 <TIM_Base_SetConfig+0x12c>)
 800d44e:	4293      	cmp	r3, r2
 800d450:	d01f      	beq.n	800d492 <TIM_Base_SetConfig+0x9a>
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d458:	d01b      	beq.n	800d492 <TIM_Base_SetConfig+0x9a>
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	4a32      	ldr	r2, [pc, #200]	@ (800d528 <TIM_Base_SetConfig+0x130>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d017      	beq.n	800d492 <TIM_Base_SetConfig+0x9a>
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	4a31      	ldr	r2, [pc, #196]	@ (800d52c <TIM_Base_SetConfig+0x134>)
 800d466:	4293      	cmp	r3, r2
 800d468:	d013      	beq.n	800d492 <TIM_Base_SetConfig+0x9a>
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	4a30      	ldr	r2, [pc, #192]	@ (800d530 <TIM_Base_SetConfig+0x138>)
 800d46e:	4293      	cmp	r3, r2
 800d470:	d00f      	beq.n	800d492 <TIM_Base_SetConfig+0x9a>
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	4a2f      	ldr	r2, [pc, #188]	@ (800d534 <TIM_Base_SetConfig+0x13c>)
 800d476:	4293      	cmp	r3, r2
 800d478:	d00b      	beq.n	800d492 <TIM_Base_SetConfig+0x9a>
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	4a2e      	ldr	r2, [pc, #184]	@ (800d538 <TIM_Base_SetConfig+0x140>)
 800d47e:	4293      	cmp	r3, r2
 800d480:	d007      	beq.n	800d492 <TIM_Base_SetConfig+0x9a>
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	4a2d      	ldr	r2, [pc, #180]	@ (800d53c <TIM_Base_SetConfig+0x144>)
 800d486:	4293      	cmp	r3, r2
 800d488:	d003      	beq.n	800d492 <TIM_Base_SetConfig+0x9a>
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	4a2c      	ldr	r2, [pc, #176]	@ (800d540 <TIM_Base_SetConfig+0x148>)
 800d48e:	4293      	cmp	r3, r2
 800d490:	d108      	bne.n	800d4a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	68db      	ldr	r3, [r3, #12]
 800d49e:	68fa      	ldr	r2, [r7, #12]
 800d4a0:	4313      	orrs	r3, r2
 800d4a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	695b      	ldr	r3, [r3, #20]
 800d4ae:	4313      	orrs	r3, r2
 800d4b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	68fa      	ldr	r2, [r7, #12]
 800d4b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	689a      	ldr	r2, [r3, #8]
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	681a      	ldr	r2, [r3, #0]
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	4a16      	ldr	r2, [pc, #88]	@ (800d524 <TIM_Base_SetConfig+0x12c>)
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	d00f      	beq.n	800d4f0 <TIM_Base_SetConfig+0xf8>
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	4a18      	ldr	r2, [pc, #96]	@ (800d534 <TIM_Base_SetConfig+0x13c>)
 800d4d4:	4293      	cmp	r3, r2
 800d4d6:	d00b      	beq.n	800d4f0 <TIM_Base_SetConfig+0xf8>
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	4a17      	ldr	r2, [pc, #92]	@ (800d538 <TIM_Base_SetConfig+0x140>)
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	d007      	beq.n	800d4f0 <TIM_Base_SetConfig+0xf8>
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	4a16      	ldr	r2, [pc, #88]	@ (800d53c <TIM_Base_SetConfig+0x144>)
 800d4e4:	4293      	cmp	r3, r2
 800d4e6:	d003      	beq.n	800d4f0 <TIM_Base_SetConfig+0xf8>
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	4a15      	ldr	r2, [pc, #84]	@ (800d540 <TIM_Base_SetConfig+0x148>)
 800d4ec:	4293      	cmp	r3, r2
 800d4ee:	d103      	bne.n	800d4f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	691a      	ldr	r2, [r3, #16]
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	691b      	ldr	r3, [r3, #16]
 800d502:	f003 0301 	and.w	r3, r3, #1
 800d506:	2b01      	cmp	r3, #1
 800d508:	d105      	bne.n	800d516 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	691b      	ldr	r3, [r3, #16]
 800d50e:	f023 0201 	bic.w	r2, r3, #1
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	611a      	str	r2, [r3, #16]
  }
}
 800d516:	bf00      	nop
 800d518:	3714      	adds	r7, #20
 800d51a:	46bd      	mov	sp, r7
 800d51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d520:	4770      	bx	lr
 800d522:	bf00      	nop
 800d524:	40012c00 	.word	0x40012c00
 800d528:	40000400 	.word	0x40000400
 800d52c:	40000800 	.word	0x40000800
 800d530:	40000c00 	.word	0x40000c00
 800d534:	40013400 	.word	0x40013400
 800d538:	40014000 	.word	0x40014000
 800d53c:	40014400 	.word	0x40014400
 800d540:	40014800 	.word	0x40014800

0800d544 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d544:	b480      	push	{r7}
 800d546:	b083      	sub	sp, #12
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d54c:	bf00      	nop
 800d54e:	370c      	adds	r7, #12
 800d550:	46bd      	mov	sp, r7
 800d552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d556:	4770      	bx	lr

0800d558 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d558:	b480      	push	{r7}
 800d55a:	b083      	sub	sp, #12
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d560:	bf00      	nop
 800d562:	370c      	adds	r7, #12
 800d564:	46bd      	mov	sp, r7
 800d566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56a:	4770      	bx	lr

0800d56c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d56c:	b480      	push	{r7}
 800d56e:	b083      	sub	sp, #12
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d574:	bf00      	nop
 800d576:	370c      	adds	r7, #12
 800d578:	46bd      	mov	sp, r7
 800d57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57e:	4770      	bx	lr

0800d580 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b082      	sub	sp, #8
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d101      	bne.n	800d592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d58e:	2301      	movs	r3, #1
 800d590:	e040      	b.n	800d614 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d596:	2b00      	cmp	r3, #0
 800d598:	d106      	bne.n	800d5a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	2200      	movs	r2, #0
 800d59e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d5a2:	6878      	ldr	r0, [r7, #4]
 800d5a4:	f7f8 fcb0 	bl	8005f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2224      	movs	r2, #36	@ 0x24
 800d5ac:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	681a      	ldr	r2, [r3, #0]
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	f022 0201 	bic.w	r2, r2, #1
 800d5bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d002      	beq.n	800d5cc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f000 fb6a 	bl	800dca0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d5cc:	6878      	ldr	r0, [r7, #4]
 800d5ce:	f000 f8af 	bl	800d730 <UART_SetConfig>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	2b01      	cmp	r3, #1
 800d5d6:	d101      	bne.n	800d5dc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800d5d8:	2301      	movs	r3, #1
 800d5da:	e01b      	b.n	800d614 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	685a      	ldr	r2, [r3, #4]
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d5ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	689a      	ldr	r2, [r3, #8]
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d5fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	681a      	ldr	r2, [r3, #0]
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	f042 0201 	orr.w	r2, r2, #1
 800d60a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d60c:	6878      	ldr	r0, [r7, #4]
 800d60e:	f000 fbe9 	bl	800dde4 <UART_CheckIdleState>
 800d612:	4603      	mov	r3, r0
}
 800d614:	4618      	mov	r0, r3
 800d616:	3708      	adds	r7, #8
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd80      	pop	{r7, pc}

0800d61c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b08a      	sub	sp, #40	@ 0x28
 800d620:	af02      	add	r7, sp, #8
 800d622:	60f8      	str	r0, [r7, #12]
 800d624:	60b9      	str	r1, [r7, #8]
 800d626:	603b      	str	r3, [r7, #0]
 800d628:	4613      	mov	r3, r2
 800d62a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d630:	2b20      	cmp	r3, #32
 800d632:	d177      	bne.n	800d724 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d002      	beq.n	800d640 <HAL_UART_Transmit+0x24>
 800d63a:	88fb      	ldrh	r3, [r7, #6]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d101      	bne.n	800d644 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800d640:	2301      	movs	r3, #1
 800d642:	e070      	b.n	800d726 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	2200      	movs	r2, #0
 800d648:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	2221      	movs	r2, #33	@ 0x21
 800d650:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d652:	f7f8 fff5 	bl	8006640 <HAL_GetTick>
 800d656:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	88fa      	ldrh	r2, [r7, #6]
 800d65c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	88fa      	ldrh	r2, [r7, #6]
 800d664:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	689b      	ldr	r3, [r3, #8]
 800d66c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d670:	d108      	bne.n	800d684 <HAL_UART_Transmit+0x68>
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	691b      	ldr	r3, [r3, #16]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d104      	bne.n	800d684 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800d67a:	2300      	movs	r3, #0
 800d67c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	61bb      	str	r3, [r7, #24]
 800d682:	e003      	b.n	800d68c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d688:	2300      	movs	r3, #0
 800d68a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d68c:	e02f      	b.n	800d6ee <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	9300      	str	r3, [sp, #0]
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	2200      	movs	r2, #0
 800d696:	2180      	movs	r1, #128	@ 0x80
 800d698:	68f8      	ldr	r0, [r7, #12]
 800d69a:	f000 fc4b 	bl	800df34 <UART_WaitOnFlagUntilTimeout>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d004      	beq.n	800d6ae <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	2220      	movs	r2, #32
 800d6a8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800d6aa:	2303      	movs	r3, #3
 800d6ac:	e03b      	b.n	800d726 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800d6ae:	69fb      	ldr	r3, [r7, #28]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d10b      	bne.n	800d6cc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d6b4:	69bb      	ldr	r3, [r7, #24]
 800d6b6:	881a      	ldrh	r2, [r3, #0]
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d6c0:	b292      	uxth	r2, r2
 800d6c2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800d6c4:	69bb      	ldr	r3, [r7, #24]
 800d6c6:	3302      	adds	r3, #2
 800d6c8:	61bb      	str	r3, [r7, #24]
 800d6ca:	e007      	b.n	800d6dc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d6cc:	69fb      	ldr	r3, [r7, #28]
 800d6ce:	781a      	ldrb	r2, [r3, #0]
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800d6d6:	69fb      	ldr	r3, [r7, #28]
 800d6d8:	3301      	adds	r3, #1
 800d6da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800d6e2:	b29b      	uxth	r3, r3
 800d6e4:	3b01      	subs	r3, #1
 800d6e6:	b29a      	uxth	r2, r3
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800d6f4:	b29b      	uxth	r3, r3
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d1c9      	bne.n	800d68e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	9300      	str	r3, [sp, #0]
 800d6fe:	697b      	ldr	r3, [r7, #20]
 800d700:	2200      	movs	r2, #0
 800d702:	2140      	movs	r1, #64	@ 0x40
 800d704:	68f8      	ldr	r0, [r7, #12]
 800d706:	f000 fc15 	bl	800df34 <UART_WaitOnFlagUntilTimeout>
 800d70a:	4603      	mov	r3, r0
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d004      	beq.n	800d71a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	2220      	movs	r2, #32
 800d714:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800d716:	2303      	movs	r3, #3
 800d718:	e005      	b.n	800d726 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	2220      	movs	r2, #32
 800d71e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800d720:	2300      	movs	r3, #0
 800d722:	e000      	b.n	800d726 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800d724:	2302      	movs	r3, #2
  }
}
 800d726:	4618      	mov	r0, r3
 800d728:	3720      	adds	r7, #32
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}
	...

0800d730 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d734:	b08a      	sub	sp, #40	@ 0x28
 800d736:	af00      	add	r7, sp, #0
 800d738:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d73a:	2300      	movs	r3, #0
 800d73c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	689a      	ldr	r2, [r3, #8]
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	691b      	ldr	r3, [r3, #16]
 800d748:	431a      	orrs	r2, r3
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	695b      	ldr	r3, [r3, #20]
 800d74e:	431a      	orrs	r2, r3
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	69db      	ldr	r3, [r3, #28]
 800d754:	4313      	orrs	r3, r2
 800d756:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	681a      	ldr	r2, [r3, #0]
 800d75e:	4ba4      	ldr	r3, [pc, #656]	@ (800d9f0 <UART_SetConfig+0x2c0>)
 800d760:	4013      	ands	r3, r2
 800d762:	68fa      	ldr	r2, [r7, #12]
 800d764:	6812      	ldr	r2, [r2, #0]
 800d766:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d768:	430b      	orrs	r3, r1
 800d76a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	685b      	ldr	r3, [r3, #4]
 800d772:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	68da      	ldr	r2, [r3, #12]
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	430a      	orrs	r2, r1
 800d780:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	699b      	ldr	r3, [r3, #24]
 800d786:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	4a99      	ldr	r2, [pc, #612]	@ (800d9f4 <UART_SetConfig+0x2c4>)
 800d78e:	4293      	cmp	r3, r2
 800d790:	d004      	beq.n	800d79c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	6a1b      	ldr	r3, [r3, #32]
 800d796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d798:	4313      	orrs	r3, r2
 800d79a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	689b      	ldr	r3, [r3, #8]
 800d7a2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d7ac:	430a      	orrs	r2, r1
 800d7ae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	4a90      	ldr	r2, [pc, #576]	@ (800d9f8 <UART_SetConfig+0x2c8>)
 800d7b6:	4293      	cmp	r3, r2
 800d7b8:	d126      	bne.n	800d808 <UART_SetConfig+0xd8>
 800d7ba:	4b90      	ldr	r3, [pc, #576]	@ (800d9fc <UART_SetConfig+0x2cc>)
 800d7bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d7c0:	f003 0303 	and.w	r3, r3, #3
 800d7c4:	2b03      	cmp	r3, #3
 800d7c6:	d81b      	bhi.n	800d800 <UART_SetConfig+0xd0>
 800d7c8:	a201      	add	r2, pc, #4	@ (adr r2, 800d7d0 <UART_SetConfig+0xa0>)
 800d7ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7ce:	bf00      	nop
 800d7d0:	0800d7e1 	.word	0x0800d7e1
 800d7d4:	0800d7f1 	.word	0x0800d7f1
 800d7d8:	0800d7e9 	.word	0x0800d7e9
 800d7dc:	0800d7f9 	.word	0x0800d7f9
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d7e6:	e116      	b.n	800da16 <UART_SetConfig+0x2e6>
 800d7e8:	2302      	movs	r3, #2
 800d7ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d7ee:	e112      	b.n	800da16 <UART_SetConfig+0x2e6>
 800d7f0:	2304      	movs	r3, #4
 800d7f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d7f6:	e10e      	b.n	800da16 <UART_SetConfig+0x2e6>
 800d7f8:	2308      	movs	r3, #8
 800d7fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d7fe:	e10a      	b.n	800da16 <UART_SetConfig+0x2e6>
 800d800:	2310      	movs	r3, #16
 800d802:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d806:	e106      	b.n	800da16 <UART_SetConfig+0x2e6>
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	4a7c      	ldr	r2, [pc, #496]	@ (800da00 <UART_SetConfig+0x2d0>)
 800d80e:	4293      	cmp	r3, r2
 800d810:	d138      	bne.n	800d884 <UART_SetConfig+0x154>
 800d812:	4b7a      	ldr	r3, [pc, #488]	@ (800d9fc <UART_SetConfig+0x2cc>)
 800d814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d818:	f003 030c 	and.w	r3, r3, #12
 800d81c:	2b0c      	cmp	r3, #12
 800d81e:	d82d      	bhi.n	800d87c <UART_SetConfig+0x14c>
 800d820:	a201      	add	r2, pc, #4	@ (adr r2, 800d828 <UART_SetConfig+0xf8>)
 800d822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d826:	bf00      	nop
 800d828:	0800d85d 	.word	0x0800d85d
 800d82c:	0800d87d 	.word	0x0800d87d
 800d830:	0800d87d 	.word	0x0800d87d
 800d834:	0800d87d 	.word	0x0800d87d
 800d838:	0800d86d 	.word	0x0800d86d
 800d83c:	0800d87d 	.word	0x0800d87d
 800d840:	0800d87d 	.word	0x0800d87d
 800d844:	0800d87d 	.word	0x0800d87d
 800d848:	0800d865 	.word	0x0800d865
 800d84c:	0800d87d 	.word	0x0800d87d
 800d850:	0800d87d 	.word	0x0800d87d
 800d854:	0800d87d 	.word	0x0800d87d
 800d858:	0800d875 	.word	0x0800d875
 800d85c:	2300      	movs	r3, #0
 800d85e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d862:	e0d8      	b.n	800da16 <UART_SetConfig+0x2e6>
 800d864:	2302      	movs	r3, #2
 800d866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d86a:	e0d4      	b.n	800da16 <UART_SetConfig+0x2e6>
 800d86c:	2304      	movs	r3, #4
 800d86e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d872:	e0d0      	b.n	800da16 <UART_SetConfig+0x2e6>
 800d874:	2308      	movs	r3, #8
 800d876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d87a:	e0cc      	b.n	800da16 <UART_SetConfig+0x2e6>
 800d87c:	2310      	movs	r3, #16
 800d87e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d882:	e0c8      	b.n	800da16 <UART_SetConfig+0x2e6>
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	4a5e      	ldr	r2, [pc, #376]	@ (800da04 <UART_SetConfig+0x2d4>)
 800d88a:	4293      	cmp	r3, r2
 800d88c:	d125      	bne.n	800d8da <UART_SetConfig+0x1aa>
 800d88e:	4b5b      	ldr	r3, [pc, #364]	@ (800d9fc <UART_SetConfig+0x2cc>)
 800d890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d894:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d898:	2b30      	cmp	r3, #48	@ 0x30
 800d89a:	d016      	beq.n	800d8ca <UART_SetConfig+0x19a>
 800d89c:	2b30      	cmp	r3, #48	@ 0x30
 800d89e:	d818      	bhi.n	800d8d2 <UART_SetConfig+0x1a2>
 800d8a0:	2b20      	cmp	r3, #32
 800d8a2:	d00a      	beq.n	800d8ba <UART_SetConfig+0x18a>
 800d8a4:	2b20      	cmp	r3, #32
 800d8a6:	d814      	bhi.n	800d8d2 <UART_SetConfig+0x1a2>
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d002      	beq.n	800d8b2 <UART_SetConfig+0x182>
 800d8ac:	2b10      	cmp	r3, #16
 800d8ae:	d008      	beq.n	800d8c2 <UART_SetConfig+0x192>
 800d8b0:	e00f      	b.n	800d8d2 <UART_SetConfig+0x1a2>
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d8b8:	e0ad      	b.n	800da16 <UART_SetConfig+0x2e6>
 800d8ba:	2302      	movs	r3, #2
 800d8bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d8c0:	e0a9      	b.n	800da16 <UART_SetConfig+0x2e6>
 800d8c2:	2304      	movs	r3, #4
 800d8c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d8c8:	e0a5      	b.n	800da16 <UART_SetConfig+0x2e6>
 800d8ca:	2308      	movs	r3, #8
 800d8cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d8d0:	e0a1      	b.n	800da16 <UART_SetConfig+0x2e6>
 800d8d2:	2310      	movs	r3, #16
 800d8d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d8d8:	e09d      	b.n	800da16 <UART_SetConfig+0x2e6>
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	4a4a      	ldr	r2, [pc, #296]	@ (800da08 <UART_SetConfig+0x2d8>)
 800d8e0:	4293      	cmp	r3, r2
 800d8e2:	d125      	bne.n	800d930 <UART_SetConfig+0x200>
 800d8e4:	4b45      	ldr	r3, [pc, #276]	@ (800d9fc <UART_SetConfig+0x2cc>)
 800d8e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d8ea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d8ee:	2bc0      	cmp	r3, #192	@ 0xc0
 800d8f0:	d016      	beq.n	800d920 <UART_SetConfig+0x1f0>
 800d8f2:	2bc0      	cmp	r3, #192	@ 0xc0
 800d8f4:	d818      	bhi.n	800d928 <UART_SetConfig+0x1f8>
 800d8f6:	2b80      	cmp	r3, #128	@ 0x80
 800d8f8:	d00a      	beq.n	800d910 <UART_SetConfig+0x1e0>
 800d8fa:	2b80      	cmp	r3, #128	@ 0x80
 800d8fc:	d814      	bhi.n	800d928 <UART_SetConfig+0x1f8>
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d002      	beq.n	800d908 <UART_SetConfig+0x1d8>
 800d902:	2b40      	cmp	r3, #64	@ 0x40
 800d904:	d008      	beq.n	800d918 <UART_SetConfig+0x1e8>
 800d906:	e00f      	b.n	800d928 <UART_SetConfig+0x1f8>
 800d908:	2300      	movs	r3, #0
 800d90a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d90e:	e082      	b.n	800da16 <UART_SetConfig+0x2e6>
 800d910:	2302      	movs	r3, #2
 800d912:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d916:	e07e      	b.n	800da16 <UART_SetConfig+0x2e6>
 800d918:	2304      	movs	r3, #4
 800d91a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d91e:	e07a      	b.n	800da16 <UART_SetConfig+0x2e6>
 800d920:	2308      	movs	r3, #8
 800d922:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d926:	e076      	b.n	800da16 <UART_SetConfig+0x2e6>
 800d928:	2310      	movs	r3, #16
 800d92a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d92e:	e072      	b.n	800da16 <UART_SetConfig+0x2e6>
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	4a35      	ldr	r2, [pc, #212]	@ (800da0c <UART_SetConfig+0x2dc>)
 800d936:	4293      	cmp	r3, r2
 800d938:	d12a      	bne.n	800d990 <UART_SetConfig+0x260>
 800d93a:	4b30      	ldr	r3, [pc, #192]	@ (800d9fc <UART_SetConfig+0x2cc>)
 800d93c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d940:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d944:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d948:	d01a      	beq.n	800d980 <UART_SetConfig+0x250>
 800d94a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d94e:	d81b      	bhi.n	800d988 <UART_SetConfig+0x258>
 800d950:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d954:	d00c      	beq.n	800d970 <UART_SetConfig+0x240>
 800d956:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d95a:	d815      	bhi.n	800d988 <UART_SetConfig+0x258>
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d003      	beq.n	800d968 <UART_SetConfig+0x238>
 800d960:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d964:	d008      	beq.n	800d978 <UART_SetConfig+0x248>
 800d966:	e00f      	b.n	800d988 <UART_SetConfig+0x258>
 800d968:	2300      	movs	r3, #0
 800d96a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d96e:	e052      	b.n	800da16 <UART_SetConfig+0x2e6>
 800d970:	2302      	movs	r3, #2
 800d972:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d976:	e04e      	b.n	800da16 <UART_SetConfig+0x2e6>
 800d978:	2304      	movs	r3, #4
 800d97a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d97e:	e04a      	b.n	800da16 <UART_SetConfig+0x2e6>
 800d980:	2308      	movs	r3, #8
 800d982:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d986:	e046      	b.n	800da16 <UART_SetConfig+0x2e6>
 800d988:	2310      	movs	r3, #16
 800d98a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d98e:	e042      	b.n	800da16 <UART_SetConfig+0x2e6>
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	4a17      	ldr	r2, [pc, #92]	@ (800d9f4 <UART_SetConfig+0x2c4>)
 800d996:	4293      	cmp	r3, r2
 800d998:	d13a      	bne.n	800da10 <UART_SetConfig+0x2e0>
 800d99a:	4b18      	ldr	r3, [pc, #96]	@ (800d9fc <UART_SetConfig+0x2cc>)
 800d99c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d9a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d9a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d9a8:	d01a      	beq.n	800d9e0 <UART_SetConfig+0x2b0>
 800d9aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d9ae:	d81b      	bhi.n	800d9e8 <UART_SetConfig+0x2b8>
 800d9b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d9b4:	d00c      	beq.n	800d9d0 <UART_SetConfig+0x2a0>
 800d9b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d9ba:	d815      	bhi.n	800d9e8 <UART_SetConfig+0x2b8>
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d003      	beq.n	800d9c8 <UART_SetConfig+0x298>
 800d9c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d9c4:	d008      	beq.n	800d9d8 <UART_SetConfig+0x2a8>
 800d9c6:	e00f      	b.n	800d9e8 <UART_SetConfig+0x2b8>
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d9ce:	e022      	b.n	800da16 <UART_SetConfig+0x2e6>
 800d9d0:	2302      	movs	r3, #2
 800d9d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d9d6:	e01e      	b.n	800da16 <UART_SetConfig+0x2e6>
 800d9d8:	2304      	movs	r3, #4
 800d9da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d9de:	e01a      	b.n	800da16 <UART_SetConfig+0x2e6>
 800d9e0:	2308      	movs	r3, #8
 800d9e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d9e6:	e016      	b.n	800da16 <UART_SetConfig+0x2e6>
 800d9e8:	2310      	movs	r3, #16
 800d9ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d9ee:	e012      	b.n	800da16 <UART_SetConfig+0x2e6>
 800d9f0:	efff69f3 	.word	0xefff69f3
 800d9f4:	40008000 	.word	0x40008000
 800d9f8:	40013800 	.word	0x40013800
 800d9fc:	40021000 	.word	0x40021000
 800da00:	40004400 	.word	0x40004400
 800da04:	40004800 	.word	0x40004800
 800da08:	40004c00 	.word	0x40004c00
 800da0c:	40005000 	.word	0x40005000
 800da10:	2310      	movs	r3, #16
 800da12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	4a9f      	ldr	r2, [pc, #636]	@ (800dc98 <UART_SetConfig+0x568>)
 800da1c:	4293      	cmp	r3, r2
 800da1e:	d17a      	bne.n	800db16 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800da20:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800da24:	2b08      	cmp	r3, #8
 800da26:	d824      	bhi.n	800da72 <UART_SetConfig+0x342>
 800da28:	a201      	add	r2, pc, #4	@ (adr r2, 800da30 <UART_SetConfig+0x300>)
 800da2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da2e:	bf00      	nop
 800da30:	0800da55 	.word	0x0800da55
 800da34:	0800da73 	.word	0x0800da73
 800da38:	0800da5d 	.word	0x0800da5d
 800da3c:	0800da73 	.word	0x0800da73
 800da40:	0800da63 	.word	0x0800da63
 800da44:	0800da73 	.word	0x0800da73
 800da48:	0800da73 	.word	0x0800da73
 800da4c:	0800da73 	.word	0x0800da73
 800da50:	0800da6b 	.word	0x0800da6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800da54:	f7fb fbca 	bl	80091ec <HAL_RCC_GetPCLK1Freq>
 800da58:	61f8      	str	r0, [r7, #28]
        break;
 800da5a:	e010      	b.n	800da7e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800da5c:	4b8f      	ldr	r3, [pc, #572]	@ (800dc9c <UART_SetConfig+0x56c>)
 800da5e:	61fb      	str	r3, [r7, #28]
        break;
 800da60:	e00d      	b.n	800da7e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800da62:	f7fb fb2b 	bl	80090bc <HAL_RCC_GetSysClockFreq>
 800da66:	61f8      	str	r0, [r7, #28]
        break;
 800da68:	e009      	b.n	800da7e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800da6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800da6e:	61fb      	str	r3, [r7, #28]
        break;
 800da70:	e005      	b.n	800da7e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800da72:	2300      	movs	r3, #0
 800da74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800da76:	2301      	movs	r3, #1
 800da78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800da7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800da7e:	69fb      	ldr	r3, [r7, #28]
 800da80:	2b00      	cmp	r3, #0
 800da82:	f000 80fb 	beq.w	800dc7c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	685a      	ldr	r2, [r3, #4]
 800da8a:	4613      	mov	r3, r2
 800da8c:	005b      	lsls	r3, r3, #1
 800da8e:	4413      	add	r3, r2
 800da90:	69fa      	ldr	r2, [r7, #28]
 800da92:	429a      	cmp	r2, r3
 800da94:	d305      	bcc.n	800daa2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	685b      	ldr	r3, [r3, #4]
 800da9a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800da9c:	69fa      	ldr	r2, [r7, #28]
 800da9e:	429a      	cmp	r2, r3
 800daa0:	d903      	bls.n	800daaa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800daa2:	2301      	movs	r3, #1
 800daa4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800daa8:	e0e8      	b.n	800dc7c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800daaa:	69fb      	ldr	r3, [r7, #28]
 800daac:	2200      	movs	r2, #0
 800daae:	461c      	mov	r4, r3
 800dab0:	4615      	mov	r5, r2
 800dab2:	f04f 0200 	mov.w	r2, #0
 800dab6:	f04f 0300 	mov.w	r3, #0
 800daba:	022b      	lsls	r3, r5, #8
 800dabc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800dac0:	0222      	lsls	r2, r4, #8
 800dac2:	68f9      	ldr	r1, [r7, #12]
 800dac4:	6849      	ldr	r1, [r1, #4]
 800dac6:	0849      	lsrs	r1, r1, #1
 800dac8:	2000      	movs	r0, #0
 800daca:	4688      	mov	r8, r1
 800dacc:	4681      	mov	r9, r0
 800dace:	eb12 0a08 	adds.w	sl, r2, r8
 800dad2:	eb43 0b09 	adc.w	fp, r3, r9
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	685b      	ldr	r3, [r3, #4]
 800dada:	2200      	movs	r2, #0
 800dadc:	603b      	str	r3, [r7, #0]
 800dade:	607a      	str	r2, [r7, #4]
 800dae0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dae4:	4650      	mov	r0, sl
 800dae6:	4659      	mov	r1, fp
 800dae8:	f7f3 f8b8 	bl	8000c5c <__aeabi_uldivmod>
 800daec:	4602      	mov	r2, r0
 800daee:	460b      	mov	r3, r1
 800daf0:	4613      	mov	r3, r2
 800daf2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800daf4:	69bb      	ldr	r3, [r7, #24]
 800daf6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dafa:	d308      	bcc.n	800db0e <UART_SetConfig+0x3de>
 800dafc:	69bb      	ldr	r3, [r7, #24]
 800dafe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800db02:	d204      	bcs.n	800db0e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	69ba      	ldr	r2, [r7, #24]
 800db0a:	60da      	str	r2, [r3, #12]
 800db0c:	e0b6      	b.n	800dc7c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800db0e:	2301      	movs	r3, #1
 800db10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800db14:	e0b2      	b.n	800dc7c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	69db      	ldr	r3, [r3, #28]
 800db1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800db1e:	d15e      	bne.n	800dbde <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800db20:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800db24:	2b08      	cmp	r3, #8
 800db26:	d828      	bhi.n	800db7a <UART_SetConfig+0x44a>
 800db28:	a201      	add	r2, pc, #4	@ (adr r2, 800db30 <UART_SetConfig+0x400>)
 800db2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db2e:	bf00      	nop
 800db30:	0800db55 	.word	0x0800db55
 800db34:	0800db5d 	.word	0x0800db5d
 800db38:	0800db65 	.word	0x0800db65
 800db3c:	0800db7b 	.word	0x0800db7b
 800db40:	0800db6b 	.word	0x0800db6b
 800db44:	0800db7b 	.word	0x0800db7b
 800db48:	0800db7b 	.word	0x0800db7b
 800db4c:	0800db7b 	.word	0x0800db7b
 800db50:	0800db73 	.word	0x0800db73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800db54:	f7fb fb4a 	bl	80091ec <HAL_RCC_GetPCLK1Freq>
 800db58:	61f8      	str	r0, [r7, #28]
        break;
 800db5a:	e014      	b.n	800db86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800db5c:	f7fb fb5c 	bl	8009218 <HAL_RCC_GetPCLK2Freq>
 800db60:	61f8      	str	r0, [r7, #28]
        break;
 800db62:	e010      	b.n	800db86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800db64:	4b4d      	ldr	r3, [pc, #308]	@ (800dc9c <UART_SetConfig+0x56c>)
 800db66:	61fb      	str	r3, [r7, #28]
        break;
 800db68:	e00d      	b.n	800db86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800db6a:	f7fb faa7 	bl	80090bc <HAL_RCC_GetSysClockFreq>
 800db6e:	61f8      	str	r0, [r7, #28]
        break;
 800db70:	e009      	b.n	800db86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800db72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800db76:	61fb      	str	r3, [r7, #28]
        break;
 800db78:	e005      	b.n	800db86 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800db7a:	2300      	movs	r3, #0
 800db7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800db7e:	2301      	movs	r3, #1
 800db80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800db84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800db86:	69fb      	ldr	r3, [r7, #28]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d077      	beq.n	800dc7c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800db8c:	69fb      	ldr	r3, [r7, #28]
 800db8e:	005a      	lsls	r2, r3, #1
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	685b      	ldr	r3, [r3, #4]
 800db94:	085b      	lsrs	r3, r3, #1
 800db96:	441a      	add	r2, r3
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	685b      	ldr	r3, [r3, #4]
 800db9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800dba0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dba2:	69bb      	ldr	r3, [r7, #24]
 800dba4:	2b0f      	cmp	r3, #15
 800dba6:	d916      	bls.n	800dbd6 <UART_SetConfig+0x4a6>
 800dba8:	69bb      	ldr	r3, [r7, #24]
 800dbaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dbae:	d212      	bcs.n	800dbd6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dbb0:	69bb      	ldr	r3, [r7, #24]
 800dbb2:	b29b      	uxth	r3, r3
 800dbb4:	f023 030f 	bic.w	r3, r3, #15
 800dbb8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dbba:	69bb      	ldr	r3, [r7, #24]
 800dbbc:	085b      	lsrs	r3, r3, #1
 800dbbe:	b29b      	uxth	r3, r3
 800dbc0:	f003 0307 	and.w	r3, r3, #7
 800dbc4:	b29a      	uxth	r2, r3
 800dbc6:	8afb      	ldrh	r3, [r7, #22]
 800dbc8:	4313      	orrs	r3, r2
 800dbca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	8afa      	ldrh	r2, [r7, #22]
 800dbd2:	60da      	str	r2, [r3, #12]
 800dbd4:	e052      	b.n	800dc7c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800dbdc:	e04e      	b.n	800dc7c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800dbde:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800dbe2:	2b08      	cmp	r3, #8
 800dbe4:	d827      	bhi.n	800dc36 <UART_SetConfig+0x506>
 800dbe6:	a201      	add	r2, pc, #4	@ (adr r2, 800dbec <UART_SetConfig+0x4bc>)
 800dbe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbec:	0800dc11 	.word	0x0800dc11
 800dbf0:	0800dc19 	.word	0x0800dc19
 800dbf4:	0800dc21 	.word	0x0800dc21
 800dbf8:	0800dc37 	.word	0x0800dc37
 800dbfc:	0800dc27 	.word	0x0800dc27
 800dc00:	0800dc37 	.word	0x0800dc37
 800dc04:	0800dc37 	.word	0x0800dc37
 800dc08:	0800dc37 	.word	0x0800dc37
 800dc0c:	0800dc2f 	.word	0x0800dc2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dc10:	f7fb faec 	bl	80091ec <HAL_RCC_GetPCLK1Freq>
 800dc14:	61f8      	str	r0, [r7, #28]
        break;
 800dc16:	e014      	b.n	800dc42 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dc18:	f7fb fafe 	bl	8009218 <HAL_RCC_GetPCLK2Freq>
 800dc1c:	61f8      	str	r0, [r7, #28]
        break;
 800dc1e:	e010      	b.n	800dc42 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dc20:	4b1e      	ldr	r3, [pc, #120]	@ (800dc9c <UART_SetConfig+0x56c>)
 800dc22:	61fb      	str	r3, [r7, #28]
        break;
 800dc24:	e00d      	b.n	800dc42 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dc26:	f7fb fa49 	bl	80090bc <HAL_RCC_GetSysClockFreq>
 800dc2a:	61f8      	str	r0, [r7, #28]
        break;
 800dc2c:	e009      	b.n	800dc42 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dc2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dc32:	61fb      	str	r3, [r7, #28]
        break;
 800dc34:	e005      	b.n	800dc42 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800dc36:	2300      	movs	r3, #0
 800dc38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800dc40:	bf00      	nop
    }

    if (pclk != 0U)
 800dc42:	69fb      	ldr	r3, [r7, #28]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d019      	beq.n	800dc7c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	685b      	ldr	r3, [r3, #4]
 800dc4c:	085a      	lsrs	r2, r3, #1
 800dc4e:	69fb      	ldr	r3, [r7, #28]
 800dc50:	441a      	add	r2, r3
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	685b      	ldr	r3, [r3, #4]
 800dc56:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc5a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dc5c:	69bb      	ldr	r3, [r7, #24]
 800dc5e:	2b0f      	cmp	r3, #15
 800dc60:	d909      	bls.n	800dc76 <UART_SetConfig+0x546>
 800dc62:	69bb      	ldr	r3, [r7, #24]
 800dc64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dc68:	d205      	bcs.n	800dc76 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800dc6a:	69bb      	ldr	r3, [r7, #24]
 800dc6c:	b29a      	uxth	r2, r3
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	60da      	str	r2, [r3, #12]
 800dc74:	e002      	b.n	800dc7c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800dc76:	2301      	movs	r3, #1
 800dc78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	2200      	movs	r2, #0
 800dc80:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	2200      	movs	r2, #0
 800dc86:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800dc88:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3728      	adds	r7, #40	@ 0x28
 800dc90:	46bd      	mov	sp, r7
 800dc92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dc96:	bf00      	nop
 800dc98:	40008000 	.word	0x40008000
 800dc9c:	00f42400 	.word	0x00f42400

0800dca0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dca0:	b480      	push	{r7}
 800dca2:	b083      	sub	sp, #12
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcac:	f003 0308 	and.w	r3, r3, #8
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d00a      	beq.n	800dcca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	685b      	ldr	r3, [r3, #4]
 800dcba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	430a      	orrs	r2, r1
 800dcc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcce:	f003 0301 	and.w	r3, r3, #1
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d00a      	beq.n	800dcec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	685b      	ldr	r3, [r3, #4]
 800dcdc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	430a      	orrs	r2, r1
 800dcea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcf0:	f003 0302 	and.w	r3, r3, #2
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d00a      	beq.n	800dd0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	685b      	ldr	r3, [r3, #4]
 800dcfe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	430a      	orrs	r2, r1
 800dd0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd12:	f003 0304 	and.w	r3, r3, #4
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d00a      	beq.n	800dd30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	685b      	ldr	r3, [r3, #4]
 800dd20:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	430a      	orrs	r2, r1
 800dd2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd34:	f003 0310 	and.w	r3, r3, #16
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d00a      	beq.n	800dd52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	689b      	ldr	r3, [r3, #8]
 800dd42:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	430a      	orrs	r2, r1
 800dd50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd56:	f003 0320 	and.w	r3, r3, #32
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d00a      	beq.n	800dd74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	689b      	ldr	r3, [r3, #8]
 800dd64:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	430a      	orrs	r2, r1
 800dd72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d01a      	beq.n	800ddb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	685b      	ldr	r3, [r3, #4]
 800dd86:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	430a      	orrs	r2, r1
 800dd94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dd9e:	d10a      	bne.n	800ddb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	685b      	ldr	r3, [r3, #4]
 800dda6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	430a      	orrs	r2, r1
 800ddb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d00a      	beq.n	800ddd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	685b      	ldr	r3, [r3, #4]
 800ddc8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	430a      	orrs	r2, r1
 800ddd6:	605a      	str	r2, [r3, #4]
  }
}
 800ddd8:	bf00      	nop
 800ddda:	370c      	adds	r7, #12
 800dddc:	46bd      	mov	sp, r7
 800ddde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde2:	4770      	bx	lr

0800dde4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b098      	sub	sp, #96	@ 0x60
 800dde8:	af02      	add	r7, sp, #8
 800ddea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2200      	movs	r2, #0
 800ddf0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ddf4:	f7f8 fc24 	bl	8006640 <HAL_GetTick>
 800ddf8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	f003 0308 	and.w	r3, r3, #8
 800de04:	2b08      	cmp	r3, #8
 800de06:	d12e      	bne.n	800de66 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800de08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800de0c:	9300      	str	r3, [sp, #0]
 800de0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800de10:	2200      	movs	r2, #0
 800de12:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f000 f88c 	bl	800df34 <UART_WaitOnFlagUntilTimeout>
 800de1c:	4603      	mov	r3, r0
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d021      	beq.n	800de66 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de2a:	e853 3f00 	ldrex	r3, [r3]
 800de2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800de30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800de36:	653b      	str	r3, [r7, #80]	@ 0x50
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	461a      	mov	r2, r3
 800de3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de40:	647b      	str	r3, [r7, #68]	@ 0x44
 800de42:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800de46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800de48:	e841 2300 	strex	r3, r2, [r1]
 800de4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800de4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de50:	2b00      	cmp	r3, #0
 800de52:	d1e6      	bne.n	800de22 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2220      	movs	r2, #32
 800de58:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2200      	movs	r2, #0
 800de5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800de62:	2303      	movs	r3, #3
 800de64:	e062      	b.n	800df2c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	f003 0304 	and.w	r3, r3, #4
 800de70:	2b04      	cmp	r3, #4
 800de72:	d149      	bne.n	800df08 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800de74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800de78:	9300      	str	r3, [sp, #0]
 800de7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800de7c:	2200      	movs	r2, #0
 800de7e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800de82:	6878      	ldr	r0, [r7, #4]
 800de84:	f000 f856 	bl	800df34 <UART_WaitOnFlagUntilTimeout>
 800de88:	4603      	mov	r3, r0
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d03c      	beq.n	800df08 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de96:	e853 3f00 	ldrex	r3, [r3]
 800de9a:	623b      	str	r3, [r7, #32]
   return(result);
 800de9c:	6a3b      	ldr	r3, [r7, #32]
 800de9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	461a      	mov	r2, r3
 800deaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800deac:	633b      	str	r3, [r7, #48]	@ 0x30
 800deae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deb0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800deb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800deb4:	e841 2300 	strex	r3, r2, [r1]
 800deb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800deba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800debc:	2b00      	cmp	r3, #0
 800debe:	d1e6      	bne.n	800de8e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	3308      	adds	r3, #8
 800dec6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dec8:	693b      	ldr	r3, [r7, #16]
 800deca:	e853 3f00 	ldrex	r3, [r3]
 800dece:	60fb      	str	r3, [r7, #12]
   return(result);
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	f023 0301 	bic.w	r3, r3, #1
 800ded6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	3308      	adds	r3, #8
 800dede:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dee0:	61fa      	str	r2, [r7, #28]
 800dee2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dee4:	69b9      	ldr	r1, [r7, #24]
 800dee6:	69fa      	ldr	r2, [r7, #28]
 800dee8:	e841 2300 	strex	r3, r2, [r1]
 800deec:	617b      	str	r3, [r7, #20]
   return(result);
 800deee:	697b      	ldr	r3, [r7, #20]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d1e5      	bne.n	800dec0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2220      	movs	r2, #32
 800def8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	2200      	movs	r2, #0
 800df00:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800df04:	2303      	movs	r3, #3
 800df06:	e011      	b.n	800df2c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	2220      	movs	r2, #32
 800df0c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	2220      	movs	r2, #32
 800df12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	2200      	movs	r2, #0
 800df1a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2200      	movs	r2, #0
 800df20:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	2200      	movs	r2, #0
 800df26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800df2a:	2300      	movs	r3, #0
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3758      	adds	r7, #88	@ 0x58
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}

0800df34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b084      	sub	sp, #16
 800df38:	af00      	add	r7, sp, #0
 800df3a:	60f8      	str	r0, [r7, #12]
 800df3c:	60b9      	str	r1, [r7, #8]
 800df3e:	603b      	str	r3, [r7, #0]
 800df40:	4613      	mov	r3, r2
 800df42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800df44:	e04f      	b.n	800dfe6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800df46:	69bb      	ldr	r3, [r7, #24]
 800df48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df4c:	d04b      	beq.n	800dfe6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800df4e:	f7f8 fb77 	bl	8006640 <HAL_GetTick>
 800df52:	4602      	mov	r2, r0
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	1ad3      	subs	r3, r2, r3
 800df58:	69ba      	ldr	r2, [r7, #24]
 800df5a:	429a      	cmp	r2, r3
 800df5c:	d302      	bcc.n	800df64 <UART_WaitOnFlagUntilTimeout+0x30>
 800df5e:	69bb      	ldr	r3, [r7, #24]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d101      	bne.n	800df68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800df64:	2303      	movs	r3, #3
 800df66:	e04e      	b.n	800e006 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	f003 0304 	and.w	r3, r3, #4
 800df72:	2b00      	cmp	r3, #0
 800df74:	d037      	beq.n	800dfe6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	2b80      	cmp	r3, #128	@ 0x80
 800df7a:	d034      	beq.n	800dfe6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	2b40      	cmp	r3, #64	@ 0x40
 800df80:	d031      	beq.n	800dfe6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	69db      	ldr	r3, [r3, #28]
 800df88:	f003 0308 	and.w	r3, r3, #8
 800df8c:	2b08      	cmp	r3, #8
 800df8e:	d110      	bne.n	800dfb2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	2208      	movs	r2, #8
 800df96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800df98:	68f8      	ldr	r0, [r7, #12]
 800df9a:	f000 f838 	bl	800e00e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	2208      	movs	r2, #8
 800dfa2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800dfae:	2301      	movs	r3, #1
 800dfb0:	e029      	b.n	800e006 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	69db      	ldr	r3, [r3, #28]
 800dfb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dfbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dfc0:	d111      	bne.n	800dfe6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dfca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dfcc:	68f8      	ldr	r0, [r7, #12]
 800dfce:	f000 f81e 	bl	800e00e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	2220      	movs	r2, #32
 800dfd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	2200      	movs	r2, #0
 800dfde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800dfe2:	2303      	movs	r3, #3
 800dfe4:	e00f      	b.n	800e006 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	69da      	ldr	r2, [r3, #28]
 800dfec:	68bb      	ldr	r3, [r7, #8]
 800dfee:	4013      	ands	r3, r2
 800dff0:	68ba      	ldr	r2, [r7, #8]
 800dff2:	429a      	cmp	r2, r3
 800dff4:	bf0c      	ite	eq
 800dff6:	2301      	moveq	r3, #1
 800dff8:	2300      	movne	r3, #0
 800dffa:	b2db      	uxtb	r3, r3
 800dffc:	461a      	mov	r2, r3
 800dffe:	79fb      	ldrb	r3, [r7, #7]
 800e000:	429a      	cmp	r2, r3
 800e002:	d0a0      	beq.n	800df46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e004:	2300      	movs	r3, #0
}
 800e006:	4618      	mov	r0, r3
 800e008:	3710      	adds	r7, #16
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd80      	pop	{r7, pc}

0800e00e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e00e:	b480      	push	{r7}
 800e010:	b095      	sub	sp, #84	@ 0x54
 800e012:	af00      	add	r7, sp, #0
 800e014:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e01c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e01e:	e853 3f00 	ldrex	r3, [r3]
 800e022:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e026:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e02a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	461a      	mov	r2, r3
 800e032:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e034:	643b      	str	r3, [r7, #64]	@ 0x40
 800e036:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e038:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e03a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e03c:	e841 2300 	strex	r3, r2, [r1]
 800e040:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e044:	2b00      	cmp	r3, #0
 800e046:	d1e6      	bne.n	800e016 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	3308      	adds	r3, #8
 800e04e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e050:	6a3b      	ldr	r3, [r7, #32]
 800e052:	e853 3f00 	ldrex	r3, [r3]
 800e056:	61fb      	str	r3, [r7, #28]
   return(result);
 800e058:	69fb      	ldr	r3, [r7, #28]
 800e05a:	f023 0301 	bic.w	r3, r3, #1
 800e05e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	3308      	adds	r3, #8
 800e066:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e068:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e06a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e06c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e06e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e070:	e841 2300 	strex	r3, r2, [r1]
 800e074:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d1e5      	bne.n	800e048 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e080:	2b01      	cmp	r3, #1
 800e082:	d118      	bne.n	800e0b6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	e853 3f00 	ldrex	r3, [r3]
 800e090:	60bb      	str	r3, [r7, #8]
   return(result);
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	f023 0310 	bic.w	r3, r3, #16
 800e098:	647b      	str	r3, [r7, #68]	@ 0x44
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	461a      	mov	r2, r3
 800e0a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0a2:	61bb      	str	r3, [r7, #24]
 800e0a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0a6:	6979      	ldr	r1, [r7, #20]
 800e0a8:	69ba      	ldr	r2, [r7, #24]
 800e0aa:	e841 2300 	strex	r3, r2, [r1]
 800e0ae:	613b      	str	r3, [r7, #16]
   return(result);
 800e0b0:	693b      	ldr	r3, [r7, #16]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d1e6      	bne.n	800e084 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	2220      	movs	r2, #32
 800e0ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800e0ca:	bf00      	nop
 800e0cc:	3754      	adds	r7, #84	@ 0x54
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d4:	4770      	bx	lr

0800e0d6 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800e0d6:	b084      	sub	sp, #16
 800e0d8:	b480      	push	{r7}
 800e0da:	b085      	sub	sp, #20
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
 800e0e0:	f107 001c 	add.w	r0, r7, #28
 800e0e4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800e0ec:	6a3b      	ldr	r3, [r7, #32]
 800e0ee:	68fa      	ldr	r2, [r7, #12]
 800e0f0:	4313      	orrs	r3, r2
 800e0f2:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 800e0f4:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800e0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  tmpreg |= (Init.ClockEdge           |\
 800e0f8:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800e0fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800e0fc:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800e0fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800e100:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800e104:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800e106:	68fa      	ldr	r2, [r7, #12]
 800e108:	4313      	orrs	r3, r2
 800e10a:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	685b      	ldr	r3, [r3, #4]
 800e110:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800e114:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e118:	68fa      	ldr	r2, [r7, #12]
 800e11a:	431a      	orrs	r2, r3
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e120:	2300      	movs	r3, #0
}
 800e122:	4618      	mov	r0, r3
 800e124:	3714      	adds	r7, #20
 800e126:	46bd      	mov	sp, r7
 800e128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12c:	b004      	add	sp, #16
 800e12e:	4770      	bx	lr

0800e130 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800e130:	b480      	push	{r7}
 800e132:	b083      	sub	sp, #12
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800e13e:	4618      	mov	r0, r3
 800e140:	370c      	adds	r7, #12
 800e142:	46bd      	mov	sp, r7
 800e144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e148:	4770      	bx	lr

0800e14a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800e14a:	b580      	push	{r7, lr}
 800e14c:	b082      	sub	sp, #8
 800e14e:	af00      	add	r7, sp, #0
 800e150:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	2203      	movs	r2, #3
 800e156:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800e158:	2002      	movs	r0, #2
 800e15a:	f7f8 fa7d 	bl	8006658 <HAL_Delay>

  return HAL_OK;
 800e15e:	2300      	movs	r3, #0
}
 800e160:	4618      	mov	r0, r3
 800e162:	3708      	adds	r7, #8
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}

0800e168 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800e168:	b480      	push	{r7}
 800e16a:	b083      	sub	sp, #12
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	f003 0303 	and.w	r3, r3, #3
}
 800e178:	4618      	mov	r0, r3
 800e17a:	370c      	adds	r7, #12
 800e17c:	46bd      	mov	sp, r7
 800e17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e182:	4770      	bx	lr

0800e184 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800e184:	b480      	push	{r7}
 800e186:	b085      	sub	sp, #20
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
 800e18c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e18e:	2300      	movs	r3, #0
 800e190:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	681a      	ldr	r2, [r3, #0]
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e1a2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800e1a8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800e1ae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e1b0:	68fa      	ldr	r2, [r7, #12]
 800e1b2:	4313      	orrs	r3, r2
 800e1b4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	68db      	ldr	r3, [r3, #12]
 800e1ba:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800e1be:	f023 030f 	bic.w	r3, r3, #15
 800e1c2:	68fa      	ldr	r2, [r7, #12]
 800e1c4:	431a      	orrs	r2, r3
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e1ca:	2300      	movs	r3, #0
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3714      	adds	r7, #20
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d6:	4770      	bx	lr

0800e1d8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800e1d8:	b480      	push	{r7}
 800e1da:	b083      	sub	sp, #12
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	691b      	ldr	r3, [r3, #16]
 800e1e4:	b2db      	uxtb	r3, r3
}
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	370c      	adds	r7, #12
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f0:	4770      	bx	lr

0800e1f2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800e1f2:	b480      	push	{r7}
 800e1f4:	b085      	sub	sp, #20
 800e1f6:	af00      	add	r7, sp, #0
 800e1f8:	6078      	str	r0, [r7, #4]
 800e1fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	3314      	adds	r3, #20
 800e200:	461a      	mov	r2, r3
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	4413      	add	r3, r2
 800e206:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	681b      	ldr	r3, [r3, #0]
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	3714      	adds	r7, #20
 800e210:	46bd      	mov	sp, r7
 800e212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e216:	4770      	bx	lr

0800e218 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800e218:	b480      	push	{r7}
 800e21a:	b085      	sub	sp, #20
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
 800e220:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e222:	2300      	movs	r3, #0
 800e224:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	681a      	ldr	r2, [r3, #0]
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	685a      	ldr	r2, [r3, #4]
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e23e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800e244:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800e24a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e24c:	68fa      	ldr	r2, [r7, #12]
 800e24e:	4313      	orrs	r3, r2
 800e250:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e256:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	431a      	orrs	r2, r3
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800e262:	2300      	movs	r3, #0

}
 800e264:	4618      	mov	r0, r3
 800e266:	3714      	adds	r7, #20
 800e268:	46bd      	mov	sp, r7
 800e26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26e:	4770      	bx	lr

0800e270 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b088      	sub	sp, #32
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
 800e278:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e27e:	2310      	movs	r3, #16
 800e280:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e282:	2340      	movs	r3, #64	@ 0x40
 800e284:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e286:	2300      	movs	r3, #0
 800e288:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e28a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e28e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e290:	f107 0308 	add.w	r3, r7, #8
 800e294:	4619      	mov	r1, r3
 800e296:	6878      	ldr	r0, [r7, #4]
 800e298:	f7ff ff74 	bl	800e184 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800e29c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e2a0:	2110      	movs	r1, #16
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	f000 fa18 	bl	800e6d8 <SDMMC_GetCmdResp1>
 800e2a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e2aa:	69fb      	ldr	r3, [r7, #28]
}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3720      	adds	r7, #32
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}

0800e2b4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b088      	sub	sp, #32
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
 800e2bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e2be:	683b      	ldr	r3, [r7, #0]
 800e2c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e2c2:	2311      	movs	r3, #17
 800e2c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e2c6:	2340      	movs	r3, #64	@ 0x40
 800e2c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e2ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e2d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e2d4:	f107 0308 	add.w	r3, r7, #8
 800e2d8:	4619      	mov	r1, r3
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f7ff ff52 	bl	800e184 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e2e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e2e4:	2111      	movs	r1, #17
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	f000 f9f6 	bl	800e6d8 <SDMMC_GetCmdResp1>
 800e2ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e2ee:	69fb      	ldr	r3, [r7, #28]
}
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	3720      	adds	r7, #32
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}

0800e2f8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b088      	sub	sp, #32
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
 800e300:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e306:	2312      	movs	r3, #18
 800e308:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e30a:	2340      	movs	r3, #64	@ 0x40
 800e30c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e30e:	2300      	movs	r3, #0
 800e310:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e312:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e316:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e318:	f107 0308 	add.w	r3, r7, #8
 800e31c:	4619      	mov	r1, r3
 800e31e:	6878      	ldr	r0, [r7, #4]
 800e320:	f7ff ff30 	bl	800e184 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e324:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e328:	2112      	movs	r1, #18
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	f000 f9d4 	bl	800e6d8 <SDMMC_GetCmdResp1>
 800e330:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e332:	69fb      	ldr	r3, [r7, #28]
}
 800e334:	4618      	mov	r0, r3
 800e336:	3720      	adds	r7, #32
 800e338:	46bd      	mov	sp, r7
 800e33a:	bd80      	pop	{r7, pc}

0800e33c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b088      	sub	sp, #32
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
 800e344:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e34a:	2318      	movs	r3, #24
 800e34c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e34e:	2340      	movs	r3, #64	@ 0x40
 800e350:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e352:	2300      	movs	r3, #0
 800e354:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e356:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e35a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e35c:	f107 0308 	add.w	r3, r7, #8
 800e360:	4619      	mov	r1, r3
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	f7ff ff0e 	bl	800e184 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e368:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e36c:	2118      	movs	r1, #24
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f000 f9b2 	bl	800e6d8 <SDMMC_GetCmdResp1>
 800e374:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e376:	69fb      	ldr	r3, [r7, #28]
}
 800e378:	4618      	mov	r0, r3
 800e37a:	3720      	adds	r7, #32
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}

0800e380 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b088      	sub	sp, #32
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
 800e388:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e38e:	2319      	movs	r3, #25
 800e390:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e392:	2340      	movs	r3, #64	@ 0x40
 800e394:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e396:	2300      	movs	r3, #0
 800e398:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e39a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e39e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e3a0:	f107 0308 	add.w	r3, r7, #8
 800e3a4:	4619      	mov	r1, r3
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f7ff feec 	bl	800e184 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e3ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e3b0:	2119      	movs	r1, #25
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f000 f990 	bl	800e6d8 <SDMMC_GetCmdResp1>
 800e3b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e3ba:	69fb      	ldr	r3, [r7, #28]
}
 800e3bc:	4618      	mov	r0, r3
 800e3be:	3720      	adds	r7, #32
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd80      	pop	{r7, pc}

0800e3c4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b088      	sub	sp, #32
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e3d0:	230c      	movs	r3, #12
 800e3d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e3d4:	2340      	movs	r3, #64	@ 0x40
 800e3d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e3d8:	2300      	movs	r3, #0
 800e3da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e3dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e3e0:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e3e2:	f107 0308 	add.w	r3, r7, #8
 800e3e6:	4619      	mov	r1, r3
 800e3e8:	6878      	ldr	r0, [r7, #4]
 800e3ea:	f7ff fecb 	bl	800e184 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800e3ee:	4a05      	ldr	r2, [pc, #20]	@ (800e404 <SDMMC_CmdStopTransfer+0x40>)
 800e3f0:	210c      	movs	r1, #12
 800e3f2:	6878      	ldr	r0, [r7, #4]
 800e3f4:	f000 f970 	bl	800e6d8 <SDMMC_GetCmdResp1>
 800e3f8:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800e3fa:	69fb      	ldr	r3, [r7, #28]
}
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	3720      	adds	r7, #32
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}
 800e404:	05f5e100 	.word	0x05f5e100

0800e408 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b08a      	sub	sp, #40	@ 0x28
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	60f8      	str	r0, [r7, #12]
 800e410:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e418:	2307      	movs	r3, #7
 800e41a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e41c:	2340      	movs	r3, #64	@ 0x40
 800e41e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e420:	2300      	movs	r3, #0
 800e422:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e424:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e428:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e42a:	f107 0310 	add.w	r3, r7, #16
 800e42e:	4619      	mov	r1, r3
 800e430:	68f8      	ldr	r0, [r7, #12]
 800e432:	f7ff fea7 	bl	800e184 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800e436:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e43a:	2107      	movs	r1, #7
 800e43c:	68f8      	ldr	r0, [r7, #12]
 800e43e:	f000 f94b 	bl	800e6d8 <SDMMC_GetCmdResp1>
 800e442:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800e444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e446:	4618      	mov	r0, r3
 800e448:	3728      	adds	r7, #40	@ 0x28
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}

0800e44e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800e44e:	b580      	push	{r7, lr}
 800e450:	b088      	sub	sp, #32
 800e452:	af00      	add	r7, sp, #0
 800e454:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e456:	2300      	movs	r3, #0
 800e458:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e45a:	2300      	movs	r3, #0
 800e45c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800e45e:	2300      	movs	r3, #0
 800e460:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e462:	2300      	movs	r3, #0
 800e464:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e466:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e46a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e46c:	f107 0308 	add.w	r3, r7, #8
 800e470:	4619      	mov	r1, r3
 800e472:	6878      	ldr	r0, [r7, #4]
 800e474:	f7ff fe86 	bl	800e184 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800e478:	6878      	ldr	r0, [r7, #4]
 800e47a:	f000 fb65 	bl	800eb48 <SDMMC_GetCmdError>
 800e47e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e480:	69fb      	ldr	r3, [r7, #28]
}
 800e482:	4618      	mov	r0, r3
 800e484:	3720      	adds	r7, #32
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}

0800e48a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800e48a:	b580      	push	{r7, lr}
 800e48c:	b088      	sub	sp, #32
 800e48e:	af00      	add	r7, sp, #0
 800e490:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e492:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800e496:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e498:	2308      	movs	r3, #8
 800e49a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e49c:	2340      	movs	r3, #64	@ 0x40
 800e49e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e4a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e4a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e4aa:	f107 0308 	add.w	r3, r7, #8
 800e4ae:	4619      	mov	r1, r3
 800e4b0:	6878      	ldr	r0, [r7, #4]
 800e4b2:	f7ff fe67 	bl	800e184 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800e4b6:	6878      	ldr	r0, [r7, #4]
 800e4b8:	f000 faf8 	bl	800eaac <SDMMC_GetCmdResp7>
 800e4bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e4be:	69fb      	ldr	r3, [r7, #28]
}
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	3720      	adds	r7, #32
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}

0800e4c8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b088      	sub	sp, #32
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
 800e4d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e4d6:	2337      	movs	r3, #55	@ 0x37
 800e4d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e4da:	2340      	movs	r3, #64	@ 0x40
 800e4dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e4de:	2300      	movs	r3, #0
 800e4e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e4e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e4e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e4e8:	f107 0308 	add.w	r3, r7, #8
 800e4ec:	4619      	mov	r1, r3
 800e4ee:	6878      	ldr	r0, [r7, #4]
 800e4f0:	f7ff fe48 	bl	800e184 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800e4f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e4f8:	2137      	movs	r1, #55	@ 0x37
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	f000 f8ec 	bl	800e6d8 <SDMMC_GetCmdResp1>
 800e500:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e502:	69fb      	ldr	r3, [r7, #28]
}
 800e504:	4618      	mov	r0, r3
 800e506:	3720      	adds	r7, #32
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}

0800e50c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b088      	sub	sp, #32
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
 800e514:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800e516:	683b      	ldr	r3, [r7, #0]
 800e518:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e51c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e520:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e522:	2329      	movs	r3, #41	@ 0x29
 800e524:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e526:	2340      	movs	r3, #64	@ 0x40
 800e528:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e52a:	2300      	movs	r3, #0
 800e52c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e52e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e532:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e534:	f107 0308 	add.w	r3, r7, #8
 800e538:	4619      	mov	r1, r3
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f7ff fe22 	bl	800e184 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f000 f9ff 	bl	800e944 <SDMMC_GetCmdResp3>
 800e546:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e548:	69fb      	ldr	r3, [r7, #28]
}
 800e54a:	4618      	mov	r0, r3
 800e54c:	3720      	adds	r7, #32
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}

0800e552 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800e552:	b580      	push	{r7, lr}
 800e554:	b088      	sub	sp, #32
 800e556:	af00      	add	r7, sp, #0
 800e558:	6078      	str	r0, [r7, #4]
 800e55a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e560:	2306      	movs	r3, #6
 800e562:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e564:	2340      	movs	r3, #64	@ 0x40
 800e566:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e568:	2300      	movs	r3, #0
 800e56a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e56c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e570:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e572:	f107 0308 	add.w	r3, r7, #8
 800e576:	4619      	mov	r1, r3
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f7ff fe03 	bl	800e184 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800e57e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e582:	2106      	movs	r1, #6
 800e584:	6878      	ldr	r0, [r7, #4]
 800e586:	f000 f8a7 	bl	800e6d8 <SDMMC_GetCmdResp1>
 800e58a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e58c:	69fb      	ldr	r3, [r7, #28]
}
 800e58e:	4618      	mov	r0, r3
 800e590:	3720      	adds	r7, #32
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}

0800e596 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800e596:	b580      	push	{r7, lr}
 800e598:	b088      	sub	sp, #32
 800e59a:	af00      	add	r7, sp, #0
 800e59c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e59e:	2300      	movs	r3, #0
 800e5a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e5a2:	2333      	movs	r3, #51	@ 0x33
 800e5a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e5a6:	2340      	movs	r3, #64	@ 0x40
 800e5a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e5ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e5b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e5b4:	f107 0308 	add.w	r3, r7, #8
 800e5b8:	4619      	mov	r1, r3
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f7ff fde2 	bl	800e184 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800e5c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e5c4:	2133      	movs	r1, #51	@ 0x33
 800e5c6:	6878      	ldr	r0, [r7, #4]
 800e5c8:	f000 f886 	bl	800e6d8 <SDMMC_GetCmdResp1>
 800e5cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e5ce:	69fb      	ldr	r3, [r7, #28]
}
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	3720      	adds	r7, #32
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}

0800e5d8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b088      	sub	sp, #32
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e5e4:	2302      	movs	r3, #2
 800e5e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e5e8:	23c0      	movs	r3, #192	@ 0xc0
 800e5ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e5f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e5f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e5f6:	f107 0308 	add.w	r3, r7, #8
 800e5fa:	4619      	mov	r1, r3
 800e5fc:	6878      	ldr	r0, [r7, #4]
 800e5fe:	f7ff fdc1 	bl	800e184 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e602:	6878      	ldr	r0, [r7, #4]
 800e604:	f000 f956 	bl	800e8b4 <SDMMC_GetCmdResp2>
 800e608:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e60a:	69fb      	ldr	r3, [r7, #28]
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	3720      	adds	r7, #32
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}

0800e614 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b088      	sub	sp, #32
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
 800e61c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e622:	2309      	movs	r3, #9
 800e624:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e626:	23c0      	movs	r3, #192	@ 0xc0
 800e628:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e62a:	2300      	movs	r3, #0
 800e62c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e62e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e632:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e634:	f107 0308 	add.w	r3, r7, #8
 800e638:	4619      	mov	r1, r3
 800e63a:	6878      	ldr	r0, [r7, #4]
 800e63c:	f7ff fda2 	bl	800e184 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e640:	6878      	ldr	r0, [r7, #4]
 800e642:	f000 f937 	bl	800e8b4 <SDMMC_GetCmdResp2>
 800e646:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e648:	69fb      	ldr	r3, [r7, #28]
}
 800e64a:	4618      	mov	r0, r3
 800e64c:	3720      	adds	r7, #32
 800e64e:	46bd      	mov	sp, r7
 800e650:	bd80      	pop	{r7, pc}

0800e652 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800e652:	b580      	push	{r7, lr}
 800e654:	b088      	sub	sp, #32
 800e656:	af00      	add	r7, sp, #0
 800e658:	6078      	str	r0, [r7, #4]
 800e65a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e65c:	2300      	movs	r3, #0
 800e65e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e660:	2303      	movs	r3, #3
 800e662:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e664:	2340      	movs	r3, #64	@ 0x40
 800e666:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e668:	2300      	movs	r3, #0
 800e66a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e66c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e670:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e672:	f107 0308 	add.w	r3, r7, #8
 800e676:	4619      	mov	r1, r3
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	f7ff fd83 	bl	800e184 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e67e:	683a      	ldr	r2, [r7, #0]
 800e680:	2103      	movs	r1, #3
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	f000 f99c 	bl	800e9c0 <SDMMC_GetCmdResp6>
 800e688:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e68a:	69fb      	ldr	r3, [r7, #28]
}
 800e68c:	4618      	mov	r0, r3
 800e68e:	3720      	adds	r7, #32
 800e690:	46bd      	mov	sp, r7
 800e692:	bd80      	pop	{r7, pc}

0800e694 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b088      	sub	sp, #32
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
 800e69c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e6a2:	230d      	movs	r3, #13
 800e6a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e6a6:	2340      	movs	r3, #64	@ 0x40
 800e6a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e6ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e6b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e6b4:	f107 0308 	add.w	r3, r7, #8
 800e6b8:	4619      	mov	r1, r3
 800e6ba:	6878      	ldr	r0, [r7, #4]
 800e6bc:	f7ff fd62 	bl	800e184 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800e6c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e6c4:	210d      	movs	r1, #13
 800e6c6:	6878      	ldr	r0, [r7, #4]
 800e6c8:	f000 f806 	bl	800e6d8 <SDMMC_GetCmdResp1>
 800e6cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e6ce:	69fb      	ldr	r3, [r7, #28]
}
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	3720      	adds	r7, #32
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd80      	pop	{r7, pc}

0800e6d8 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b088      	sub	sp, #32
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	60f8      	str	r0, [r7, #12]
 800e6e0:	460b      	mov	r3, r1
 800e6e2:	607a      	str	r2, [r7, #4]
 800e6e4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e6e6:	4b70      	ldr	r3, [pc, #448]	@ (800e8a8 <SDMMC_GetCmdResp1+0x1d0>)
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	4a70      	ldr	r2, [pc, #448]	@ (800e8ac <SDMMC_GetCmdResp1+0x1d4>)
 800e6ec:	fba2 2303 	umull	r2, r3, r2, r3
 800e6f0:	0a5a      	lsrs	r2, r3, #9
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	fb02 f303 	mul.w	r3, r2, r3
 800e6f8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e6fa:	69fb      	ldr	r3, [r7, #28]
 800e6fc:	1e5a      	subs	r2, r3, #1
 800e6fe:	61fa      	str	r2, [r7, #28]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d102      	bne.n	800e70a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e704:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e708:	e0c9      	b.n	800e89e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e70e:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e710:	69bb      	ldr	r3, [r7, #24]
 800e712:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e716:	2b00      	cmp	r3, #0
 800e718:	d0ef      	beq.n	800e6fa <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e71a:	69bb      	ldr	r3, [r7, #24]
 800e71c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e720:	2b00      	cmp	r3, #0
 800e722:	d1ea      	bne.n	800e6fa <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e728:	f003 0304 	and.w	r3, r3, #4
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d004      	beq.n	800e73a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	2204      	movs	r2, #4
 800e734:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e736:	2304      	movs	r3, #4
 800e738:	e0b1      	b.n	800e89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e73e:	f003 0301 	and.w	r3, r3, #1
 800e742:	2b00      	cmp	r3, #0
 800e744:	d004      	beq.n	800e750 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	2201      	movs	r2, #1
 800e74a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e74c:	2301      	movs	r3, #1
 800e74e:	e0a6      	b.n	800e89e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	22c5      	movs	r2, #197	@ 0xc5
 800e754:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e756:	68f8      	ldr	r0, [r7, #12]
 800e758:	f7ff fd3e 	bl	800e1d8 <SDMMC_GetCommandResponse>
 800e75c:	4603      	mov	r3, r0
 800e75e:	461a      	mov	r2, r3
 800e760:	7afb      	ldrb	r3, [r7, #11]
 800e762:	4293      	cmp	r3, r2
 800e764:	d001      	beq.n	800e76a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e766:	2301      	movs	r3, #1
 800e768:	e099      	b.n	800e89e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e76a:	2100      	movs	r1, #0
 800e76c:	68f8      	ldr	r0, [r7, #12]
 800e76e:	f7ff fd40 	bl	800e1f2 <SDMMC_GetResponse>
 800e772:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e774:	697a      	ldr	r2, [r7, #20]
 800e776:	4b4e      	ldr	r3, [pc, #312]	@ (800e8b0 <SDMMC_GetCmdResp1+0x1d8>)
 800e778:	4013      	ands	r3, r2
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d101      	bne.n	800e782 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e77e:	2300      	movs	r3, #0
 800e780:	e08d      	b.n	800e89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e782:	697b      	ldr	r3, [r7, #20]
 800e784:	2b00      	cmp	r3, #0
 800e786:	da02      	bge.n	800e78e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e788:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e78c:	e087      	b.n	800e89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e78e:	697b      	ldr	r3, [r7, #20]
 800e790:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e794:	2b00      	cmp	r3, #0
 800e796:	d001      	beq.n	800e79c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e798:	2340      	movs	r3, #64	@ 0x40
 800e79a:	e080      	b.n	800e89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d001      	beq.n	800e7aa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e7a6:	2380      	movs	r3, #128	@ 0x80
 800e7a8:	e079      	b.n	800e89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e7aa:	697b      	ldr	r3, [r7, #20]
 800e7ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d002      	beq.n	800e7ba <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e7b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e7b8:	e071      	b.n	800e89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e7ba:	697b      	ldr	r3, [r7, #20]
 800e7bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d002      	beq.n	800e7ca <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e7c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e7c8:	e069      	b.n	800e89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d002      	beq.n	800e7da <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e7d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e7d8:	e061      	b.n	800e89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e7da:	697b      	ldr	r3, [r7, #20]
 800e7dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d002      	beq.n	800e7ea <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e7e4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e7e8:	e059      	b.n	800e89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e7ea:	697b      	ldr	r3, [r7, #20]
 800e7ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d002      	beq.n	800e7fa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e7f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e7f8:	e051      	b.n	800e89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e7fa:	697b      	ldr	r3, [r7, #20]
 800e7fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e800:	2b00      	cmp	r3, #0
 800e802:	d002      	beq.n	800e80a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e804:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e808:	e049      	b.n	800e89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e80a:	697b      	ldr	r3, [r7, #20]
 800e80c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e810:	2b00      	cmp	r3, #0
 800e812:	d002      	beq.n	800e81a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e814:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e818:	e041      	b.n	800e89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e81a:	697b      	ldr	r3, [r7, #20]
 800e81c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e820:	2b00      	cmp	r3, #0
 800e822:	d002      	beq.n	800e82a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e824:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e828:	e039      	b.n	800e89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e82a:	697b      	ldr	r3, [r7, #20]
 800e82c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e830:	2b00      	cmp	r3, #0
 800e832:	d002      	beq.n	800e83a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e834:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800e838:	e031      	b.n	800e89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e83a:	697b      	ldr	r3, [r7, #20]
 800e83c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e840:	2b00      	cmp	r3, #0
 800e842:	d002      	beq.n	800e84a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e844:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800e848:	e029      	b.n	800e89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e84a:	697b      	ldr	r3, [r7, #20]
 800e84c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e850:	2b00      	cmp	r3, #0
 800e852:	d002      	beq.n	800e85a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e854:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e858:	e021      	b.n	800e89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e85a:	697b      	ldr	r3, [r7, #20]
 800e85c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e860:	2b00      	cmp	r3, #0
 800e862:	d002      	beq.n	800e86a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e864:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800e868:	e019      	b.n	800e89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e86a:	697b      	ldr	r3, [r7, #20]
 800e86c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e870:	2b00      	cmp	r3, #0
 800e872:	d002      	beq.n	800e87a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e874:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800e878:	e011      	b.n	800e89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e87a:	697b      	ldr	r3, [r7, #20]
 800e87c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e880:	2b00      	cmp	r3, #0
 800e882:	d002      	beq.n	800e88a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e884:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800e888:	e009      	b.n	800e89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e88a:	697b      	ldr	r3, [r7, #20]
 800e88c:	f003 0308 	and.w	r3, r3, #8
 800e890:	2b00      	cmp	r3, #0
 800e892:	d002      	beq.n	800e89a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e894:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800e898:	e001      	b.n	800e89e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e89a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800e89e:	4618      	mov	r0, r3
 800e8a0:	3720      	adds	r7, #32
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd80      	pop	{r7, pc}
 800e8a6:	bf00      	nop
 800e8a8:	20000000 	.word	0x20000000
 800e8ac:	10624dd3 	.word	0x10624dd3
 800e8b0:	fdffe008 	.word	0xfdffe008

0800e8b4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800e8b4:	b480      	push	{r7}
 800e8b6:	b085      	sub	sp, #20
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e8bc:	4b1f      	ldr	r3, [pc, #124]	@ (800e93c <SDMMC_GetCmdResp2+0x88>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	4a1f      	ldr	r2, [pc, #124]	@ (800e940 <SDMMC_GetCmdResp2+0x8c>)
 800e8c2:	fba2 2303 	umull	r2, r3, r2, r3
 800e8c6:	0a5b      	lsrs	r3, r3, #9
 800e8c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e8cc:	fb02 f303 	mul.w	r3, r2, r3
 800e8d0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	1e5a      	subs	r2, r3, #1
 800e8d6:	60fa      	str	r2, [r7, #12]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d102      	bne.n	800e8e2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e8dc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e8e0:	e026      	b.n	800e930 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e8e6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e8e8:	68bb      	ldr	r3, [r7, #8]
 800e8ea:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d0ef      	beq.n	800e8d2 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e8f2:	68bb      	ldr	r3, [r7, #8]
 800e8f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d1ea      	bne.n	800e8d2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e900:	f003 0304 	and.w	r3, r3, #4
 800e904:	2b00      	cmp	r3, #0
 800e906:	d004      	beq.n	800e912 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2204      	movs	r2, #4
 800e90c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e90e:	2304      	movs	r3, #4
 800e910:	e00e      	b.n	800e930 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e916:	f003 0301 	and.w	r3, r3, #1
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d004      	beq.n	800e928 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2201      	movs	r2, #1
 800e922:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e924:	2301      	movs	r3, #1
 800e926:	e003      	b.n	800e930 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	22c5      	movs	r2, #197	@ 0xc5
 800e92c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800e92e:	2300      	movs	r3, #0
}
 800e930:	4618      	mov	r0, r3
 800e932:	3714      	adds	r7, #20
 800e934:	46bd      	mov	sp, r7
 800e936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93a:	4770      	bx	lr
 800e93c:	20000000 	.word	0x20000000
 800e940:	10624dd3 	.word	0x10624dd3

0800e944 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e944:	b480      	push	{r7}
 800e946:	b085      	sub	sp, #20
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e94c:	4b1a      	ldr	r3, [pc, #104]	@ (800e9b8 <SDMMC_GetCmdResp3+0x74>)
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	4a1a      	ldr	r2, [pc, #104]	@ (800e9bc <SDMMC_GetCmdResp3+0x78>)
 800e952:	fba2 2303 	umull	r2, r3, r2, r3
 800e956:	0a5b      	lsrs	r3, r3, #9
 800e958:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e95c:	fb02 f303 	mul.w	r3, r2, r3
 800e960:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	1e5a      	subs	r2, r3, #1
 800e966:	60fa      	str	r2, [r7, #12]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d102      	bne.n	800e972 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e96c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e970:	e01b      	b.n	800e9aa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e976:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e978:	68bb      	ldr	r3, [r7, #8]
 800e97a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d0ef      	beq.n	800e962 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e982:	68bb      	ldr	r3, [r7, #8]
 800e984:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d1ea      	bne.n	800e962 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e990:	f003 0304 	and.w	r3, r3, #4
 800e994:	2b00      	cmp	r3, #0
 800e996:	d004      	beq.n	800e9a2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2204      	movs	r2, #4
 800e99c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e99e:	2304      	movs	r3, #4
 800e9a0:	e003      	b.n	800e9aa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	22c5      	movs	r2, #197	@ 0xc5
 800e9a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800e9a8:	2300      	movs	r3, #0
}
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	3714      	adds	r7, #20
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b4:	4770      	bx	lr
 800e9b6:	bf00      	nop
 800e9b8:	20000000 	.word	0x20000000
 800e9bc:	10624dd3 	.word	0x10624dd3

0800e9c0 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b088      	sub	sp, #32
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	60f8      	str	r0, [r7, #12]
 800e9c8:	460b      	mov	r3, r1
 800e9ca:	607a      	str	r2, [r7, #4]
 800e9cc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e9ce:	4b35      	ldr	r3, [pc, #212]	@ (800eaa4 <SDMMC_GetCmdResp6+0xe4>)
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	4a35      	ldr	r2, [pc, #212]	@ (800eaa8 <SDMMC_GetCmdResp6+0xe8>)
 800e9d4:	fba2 2303 	umull	r2, r3, r2, r3
 800e9d8:	0a5b      	lsrs	r3, r3, #9
 800e9da:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e9de:	fb02 f303 	mul.w	r3, r2, r3
 800e9e2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e9e4:	69fb      	ldr	r3, [r7, #28]
 800e9e6:	1e5a      	subs	r2, r3, #1
 800e9e8:	61fa      	str	r2, [r7, #28]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d102      	bne.n	800e9f4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e9ee:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e9f2:	e052      	b.n	800ea9a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e9f8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e9fa:	69bb      	ldr	r3, [r7, #24]
 800e9fc:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d0ef      	beq.n	800e9e4 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ea04:	69bb      	ldr	r3, [r7, #24]
 800ea06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d1ea      	bne.n	800e9e4 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea12:	f003 0304 	and.w	r3, r3, #4
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d004      	beq.n	800ea24 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	2204      	movs	r2, #4
 800ea1e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ea20:	2304      	movs	r3, #4
 800ea22:	e03a      	b.n	800ea9a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea28:	f003 0301 	and.w	r3, r3, #1
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d004      	beq.n	800ea3a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	2201      	movs	r2, #1
 800ea34:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ea36:	2301      	movs	r3, #1
 800ea38:	e02f      	b.n	800ea9a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ea3a:	68f8      	ldr	r0, [r7, #12]
 800ea3c:	f7ff fbcc 	bl	800e1d8 <SDMMC_GetCommandResponse>
 800ea40:	4603      	mov	r3, r0
 800ea42:	461a      	mov	r2, r3
 800ea44:	7afb      	ldrb	r3, [r7, #11]
 800ea46:	4293      	cmp	r3, r2
 800ea48:	d001      	beq.n	800ea4e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	e025      	b.n	800ea9a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	22c5      	movs	r2, #197	@ 0xc5
 800ea52:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ea54:	2100      	movs	r1, #0
 800ea56:	68f8      	ldr	r0, [r7, #12]
 800ea58:	f7ff fbcb 	bl	800e1f2 <SDMMC_GetResponse>
 800ea5c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ea5e:	697b      	ldr	r3, [r7, #20]
 800ea60:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d106      	bne.n	800ea76 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ea68:	697b      	ldr	r3, [r7, #20]
 800ea6a:	0c1b      	lsrs	r3, r3, #16
 800ea6c:	b29a      	uxth	r2, r3
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800ea72:	2300      	movs	r3, #0
 800ea74:	e011      	b.n	800ea9a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ea76:	697b      	ldr	r3, [r7, #20]
 800ea78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d002      	beq.n	800ea86 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ea80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ea84:	e009      	b.n	800ea9a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ea86:	697b      	ldr	r3, [r7, #20]
 800ea88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d002      	beq.n	800ea96 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ea90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ea94:	e001      	b.n	800ea9a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ea96:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	3720      	adds	r7, #32
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd80      	pop	{r7, pc}
 800eaa2:	bf00      	nop
 800eaa4:	20000000 	.word	0x20000000
 800eaa8:	10624dd3 	.word	0x10624dd3

0800eaac <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800eaac:	b480      	push	{r7}
 800eaae:	b085      	sub	sp, #20
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800eab4:	4b22      	ldr	r3, [pc, #136]	@ (800eb40 <SDMMC_GetCmdResp7+0x94>)
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	4a22      	ldr	r2, [pc, #136]	@ (800eb44 <SDMMC_GetCmdResp7+0x98>)
 800eaba:	fba2 2303 	umull	r2, r3, r2, r3
 800eabe:	0a5b      	lsrs	r3, r3, #9
 800eac0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eac4:	fb02 f303 	mul.w	r3, r2, r3
 800eac8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	1e5a      	subs	r2, r3, #1
 800eace:	60fa      	str	r2, [r7, #12]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d102      	bne.n	800eada <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ead4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ead8:	e02c      	b.n	800eb34 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eade:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eae0:	68bb      	ldr	r3, [r7, #8]
 800eae2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d0ef      	beq.n	800eaca <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800eaea:	68bb      	ldr	r3, [r7, #8]
 800eaec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d1ea      	bne.n	800eaca <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eaf8:	f003 0304 	and.w	r3, r3, #4
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d004      	beq.n	800eb0a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2204      	movs	r2, #4
 800eb04:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eb06:	2304      	movs	r3, #4
 800eb08:	e014      	b.n	800eb34 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb0e:	f003 0301 	and.w	r3, r3, #1
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d004      	beq.n	800eb20 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	2201      	movs	r2, #1
 800eb1a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eb1c:	2301      	movs	r3, #1
 800eb1e:	e009      	b.n	800eb34 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d002      	beq.n	800eb32 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2240      	movs	r2, #64	@ 0x40
 800eb30:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800eb32:	2300      	movs	r3, #0

}
 800eb34:	4618      	mov	r0, r3
 800eb36:	3714      	adds	r7, #20
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3e:	4770      	bx	lr
 800eb40:	20000000 	.word	0x20000000
 800eb44:	10624dd3 	.word	0x10624dd3

0800eb48 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800eb48:	b480      	push	{r7}
 800eb4a:	b085      	sub	sp, #20
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800eb50:	4b11      	ldr	r3, [pc, #68]	@ (800eb98 <SDMMC_GetCmdError+0x50>)
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	4a11      	ldr	r2, [pc, #68]	@ (800eb9c <SDMMC_GetCmdError+0x54>)
 800eb56:	fba2 2303 	umull	r2, r3, r2, r3
 800eb5a:	0a5b      	lsrs	r3, r3, #9
 800eb5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eb60:	fb02 f303 	mul.w	r3, r2, r3
 800eb64:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	1e5a      	subs	r2, r3, #1
 800eb6a:	60fa      	str	r2, [r7, #12]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d102      	bne.n	800eb76 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eb70:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800eb74:	e009      	b.n	800eb8a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d0f1      	beq.n	800eb66 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	22c5      	movs	r2, #197	@ 0xc5
 800eb86:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800eb88:	2300      	movs	r3, #0
}
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	3714      	adds	r7, #20
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb94:	4770      	bx	lr
 800eb96:	bf00      	nop
 800eb98:	20000000 	.word	0x20000000
 800eb9c:	10624dd3 	.word	0x10624dd3

0800eba0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800eba0:	b084      	sub	sp, #16
 800eba2:	b580      	push	{r7, lr}
 800eba4:	b084      	sub	sp, #16
 800eba6:	af00      	add	r7, sp, #0
 800eba8:	6078      	str	r0, [r7, #4]
 800ebaa:	f107 001c 	add.w	r0, r7, #28
 800ebae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	68db      	ldr	r3, [r3, #12]
 800ebb6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800ebbe:	6878      	ldr	r0, [r7, #4]
 800ebc0:	f001 fa26 	bl	8010010 <USB_CoreReset>
 800ebc4:	4603      	mov	r3, r0
 800ebc6:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800ebc8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d106      	bne.n	800ebde <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ebd4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	639a      	str	r2, [r3, #56]	@ 0x38
 800ebdc:	e005      	b.n	800ebea <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ebe2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 800ebea:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebec:	4618      	mov	r0, r3
 800ebee:	3710      	adds	r7, #16
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ebf6:	b004      	add	sp, #16
 800ebf8:	4770      	bx	lr
	...

0800ebfc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	b087      	sub	sp, #28
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	60f8      	str	r0, [r7, #12]
 800ec04:	60b9      	str	r1, [r7, #8]
 800ec06:	4613      	mov	r3, r2
 800ec08:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ec0a:	79fb      	ldrb	r3, [r7, #7]
 800ec0c:	2b02      	cmp	r3, #2
 800ec0e:	d165      	bne.n	800ecdc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ec10:	68bb      	ldr	r3, [r7, #8]
 800ec12:	4a3e      	ldr	r2, [pc, #248]	@ (800ed0c <USB_SetTurnaroundTime+0x110>)
 800ec14:	4293      	cmp	r3, r2
 800ec16:	d906      	bls.n	800ec26 <USB_SetTurnaroundTime+0x2a>
 800ec18:	68bb      	ldr	r3, [r7, #8]
 800ec1a:	4a3d      	ldr	r2, [pc, #244]	@ (800ed10 <USB_SetTurnaroundTime+0x114>)
 800ec1c:	4293      	cmp	r3, r2
 800ec1e:	d202      	bcs.n	800ec26 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ec20:	230f      	movs	r3, #15
 800ec22:	617b      	str	r3, [r7, #20]
 800ec24:	e05c      	b.n	800ece0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ec26:	68bb      	ldr	r3, [r7, #8]
 800ec28:	4a39      	ldr	r2, [pc, #228]	@ (800ed10 <USB_SetTurnaroundTime+0x114>)
 800ec2a:	4293      	cmp	r3, r2
 800ec2c:	d306      	bcc.n	800ec3c <USB_SetTurnaroundTime+0x40>
 800ec2e:	68bb      	ldr	r3, [r7, #8]
 800ec30:	4a38      	ldr	r2, [pc, #224]	@ (800ed14 <USB_SetTurnaroundTime+0x118>)
 800ec32:	4293      	cmp	r3, r2
 800ec34:	d202      	bcs.n	800ec3c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ec36:	230e      	movs	r3, #14
 800ec38:	617b      	str	r3, [r7, #20]
 800ec3a:	e051      	b.n	800ece0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	4a35      	ldr	r2, [pc, #212]	@ (800ed14 <USB_SetTurnaroundTime+0x118>)
 800ec40:	4293      	cmp	r3, r2
 800ec42:	d306      	bcc.n	800ec52 <USB_SetTurnaroundTime+0x56>
 800ec44:	68bb      	ldr	r3, [r7, #8]
 800ec46:	4a34      	ldr	r2, [pc, #208]	@ (800ed18 <USB_SetTurnaroundTime+0x11c>)
 800ec48:	4293      	cmp	r3, r2
 800ec4a:	d202      	bcs.n	800ec52 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ec4c:	230d      	movs	r3, #13
 800ec4e:	617b      	str	r3, [r7, #20]
 800ec50:	e046      	b.n	800ece0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ec52:	68bb      	ldr	r3, [r7, #8]
 800ec54:	4a30      	ldr	r2, [pc, #192]	@ (800ed18 <USB_SetTurnaroundTime+0x11c>)
 800ec56:	4293      	cmp	r3, r2
 800ec58:	d306      	bcc.n	800ec68 <USB_SetTurnaroundTime+0x6c>
 800ec5a:	68bb      	ldr	r3, [r7, #8]
 800ec5c:	4a2f      	ldr	r2, [pc, #188]	@ (800ed1c <USB_SetTurnaroundTime+0x120>)
 800ec5e:	4293      	cmp	r3, r2
 800ec60:	d802      	bhi.n	800ec68 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ec62:	230c      	movs	r3, #12
 800ec64:	617b      	str	r3, [r7, #20]
 800ec66:	e03b      	b.n	800ece0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ec68:	68bb      	ldr	r3, [r7, #8]
 800ec6a:	4a2c      	ldr	r2, [pc, #176]	@ (800ed1c <USB_SetTurnaroundTime+0x120>)
 800ec6c:	4293      	cmp	r3, r2
 800ec6e:	d906      	bls.n	800ec7e <USB_SetTurnaroundTime+0x82>
 800ec70:	68bb      	ldr	r3, [r7, #8]
 800ec72:	4a2b      	ldr	r2, [pc, #172]	@ (800ed20 <USB_SetTurnaroundTime+0x124>)
 800ec74:	4293      	cmp	r3, r2
 800ec76:	d802      	bhi.n	800ec7e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ec78:	230b      	movs	r3, #11
 800ec7a:	617b      	str	r3, [r7, #20]
 800ec7c:	e030      	b.n	800ece0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	4a27      	ldr	r2, [pc, #156]	@ (800ed20 <USB_SetTurnaroundTime+0x124>)
 800ec82:	4293      	cmp	r3, r2
 800ec84:	d906      	bls.n	800ec94 <USB_SetTurnaroundTime+0x98>
 800ec86:	68bb      	ldr	r3, [r7, #8]
 800ec88:	4a26      	ldr	r2, [pc, #152]	@ (800ed24 <USB_SetTurnaroundTime+0x128>)
 800ec8a:	4293      	cmp	r3, r2
 800ec8c:	d802      	bhi.n	800ec94 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ec8e:	230a      	movs	r3, #10
 800ec90:	617b      	str	r3, [r7, #20]
 800ec92:	e025      	b.n	800ece0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ec94:	68bb      	ldr	r3, [r7, #8]
 800ec96:	4a23      	ldr	r2, [pc, #140]	@ (800ed24 <USB_SetTurnaroundTime+0x128>)
 800ec98:	4293      	cmp	r3, r2
 800ec9a:	d906      	bls.n	800ecaa <USB_SetTurnaroundTime+0xae>
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	4a22      	ldr	r2, [pc, #136]	@ (800ed28 <USB_SetTurnaroundTime+0x12c>)
 800eca0:	4293      	cmp	r3, r2
 800eca2:	d202      	bcs.n	800ecaa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800eca4:	2309      	movs	r3, #9
 800eca6:	617b      	str	r3, [r7, #20]
 800eca8:	e01a      	b.n	800ece0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ecaa:	68bb      	ldr	r3, [r7, #8]
 800ecac:	4a1e      	ldr	r2, [pc, #120]	@ (800ed28 <USB_SetTurnaroundTime+0x12c>)
 800ecae:	4293      	cmp	r3, r2
 800ecb0:	d306      	bcc.n	800ecc0 <USB_SetTurnaroundTime+0xc4>
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	4a1d      	ldr	r2, [pc, #116]	@ (800ed2c <USB_SetTurnaroundTime+0x130>)
 800ecb6:	4293      	cmp	r3, r2
 800ecb8:	d802      	bhi.n	800ecc0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ecba:	2308      	movs	r3, #8
 800ecbc:	617b      	str	r3, [r7, #20]
 800ecbe:	e00f      	b.n	800ece0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	4a1a      	ldr	r2, [pc, #104]	@ (800ed2c <USB_SetTurnaroundTime+0x130>)
 800ecc4:	4293      	cmp	r3, r2
 800ecc6:	d906      	bls.n	800ecd6 <USB_SetTurnaroundTime+0xda>
 800ecc8:	68bb      	ldr	r3, [r7, #8]
 800ecca:	4a19      	ldr	r2, [pc, #100]	@ (800ed30 <USB_SetTurnaroundTime+0x134>)
 800eccc:	4293      	cmp	r3, r2
 800ecce:	d202      	bcs.n	800ecd6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ecd0:	2307      	movs	r3, #7
 800ecd2:	617b      	str	r3, [r7, #20]
 800ecd4:	e004      	b.n	800ece0 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ecd6:	2306      	movs	r3, #6
 800ecd8:	617b      	str	r3, [r7, #20]
 800ecda:	e001      	b.n	800ece0 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ecdc:	2309      	movs	r3, #9
 800ecde:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	68db      	ldr	r3, [r3, #12]
 800ece4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	68da      	ldr	r2, [r3, #12]
 800ecf0:	697b      	ldr	r3, [r7, #20]
 800ecf2:	029b      	lsls	r3, r3, #10
 800ecf4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800ecf8:	431a      	orrs	r2, r3
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ecfe:	2300      	movs	r3, #0
}
 800ed00:	4618      	mov	r0, r3
 800ed02:	371c      	adds	r7, #28
 800ed04:	46bd      	mov	sp, r7
 800ed06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0a:	4770      	bx	lr
 800ed0c:	00d8acbf 	.word	0x00d8acbf
 800ed10:	00e4e1c0 	.word	0x00e4e1c0
 800ed14:	00f42400 	.word	0x00f42400
 800ed18:	01067380 	.word	0x01067380
 800ed1c:	011a499f 	.word	0x011a499f
 800ed20:	01312cff 	.word	0x01312cff
 800ed24:	014ca43f 	.word	0x014ca43f
 800ed28:	016e3600 	.word	0x016e3600
 800ed2c:	01a6ab1f 	.word	0x01a6ab1f
 800ed30:	01e84800 	.word	0x01e84800

0800ed34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ed34:	b480      	push	{r7}
 800ed36:	b083      	sub	sp, #12
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	689b      	ldr	r3, [r3, #8]
 800ed40:	f043 0201 	orr.w	r2, r3, #1
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ed48:	2300      	movs	r3, #0
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	370c      	adds	r7, #12
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed54:	4770      	bx	lr

0800ed56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ed56:	b480      	push	{r7}
 800ed58:	b083      	sub	sp, #12
 800ed5a:	af00      	add	r7, sp, #0
 800ed5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	689b      	ldr	r3, [r3, #8]
 800ed62:	f023 0201 	bic.w	r2, r3, #1
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ed6a:	2300      	movs	r3, #0
}
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	370c      	adds	r7, #12
 800ed70:	46bd      	mov	sp, r7
 800ed72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed76:	4770      	bx	lr

0800ed78 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b084      	sub	sp, #16
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
 800ed80:	460b      	mov	r3, r1
 800ed82:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ed84:	2300      	movs	r3, #0
 800ed86:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	68db      	ldr	r3, [r3, #12]
 800ed8c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ed94:	78fb      	ldrb	r3, [r7, #3]
 800ed96:	2b01      	cmp	r3, #1
 800ed98:	d115      	bne.n	800edc6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	68db      	ldr	r3, [r3, #12]
 800ed9e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800eda6:	200a      	movs	r0, #10
 800eda8:	f7f7 fc56 	bl	8006658 <HAL_Delay>
      ms += 10U;
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	330a      	adds	r3, #10
 800edb0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800edb2:	6878      	ldr	r0, [r7, #4]
 800edb4:	f001 f8b3 	bl	800ff1e <USB_GetMode>
 800edb8:	4603      	mov	r3, r0
 800edba:	2b01      	cmp	r3, #1
 800edbc:	d01e      	beq.n	800edfc <USB_SetCurrentMode+0x84>
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	2bc7      	cmp	r3, #199	@ 0xc7
 800edc2:	d9f0      	bls.n	800eda6 <USB_SetCurrentMode+0x2e>
 800edc4:	e01a      	b.n	800edfc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800edc6:	78fb      	ldrb	r3, [r7, #3]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d115      	bne.n	800edf8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	68db      	ldr	r3, [r3, #12]
 800edd0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800edd8:	200a      	movs	r0, #10
 800edda:	f7f7 fc3d 	bl	8006658 <HAL_Delay>
      ms += 10U;
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	330a      	adds	r3, #10
 800ede2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ede4:	6878      	ldr	r0, [r7, #4]
 800ede6:	f001 f89a 	bl	800ff1e <USB_GetMode>
 800edea:	4603      	mov	r3, r0
 800edec:	2b00      	cmp	r3, #0
 800edee:	d005      	beq.n	800edfc <USB_SetCurrentMode+0x84>
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	2bc7      	cmp	r3, #199	@ 0xc7
 800edf4:	d9f0      	bls.n	800edd8 <USB_SetCurrentMode+0x60>
 800edf6:	e001      	b.n	800edfc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800edf8:	2301      	movs	r3, #1
 800edfa:	e005      	b.n	800ee08 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	2bc8      	cmp	r3, #200	@ 0xc8
 800ee00:	d101      	bne.n	800ee06 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ee02:	2301      	movs	r3, #1
 800ee04:	e000      	b.n	800ee08 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ee06:	2300      	movs	r3, #0
}
 800ee08:	4618      	mov	r0, r3
 800ee0a:	3710      	adds	r7, #16
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}

0800ee10 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ee10:	b084      	sub	sp, #16
 800ee12:	b580      	push	{r7, lr}
 800ee14:	b086      	sub	sp, #24
 800ee16:	af00      	add	r7, sp, #0
 800ee18:	6078      	str	r0, [r7, #4]
 800ee1a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800ee1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ee22:	2300      	movs	r3, #0
 800ee24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	613b      	str	r3, [r7, #16]
 800ee2e:	e009      	b.n	800ee44 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ee30:	687a      	ldr	r2, [r7, #4]
 800ee32:	693b      	ldr	r3, [r7, #16]
 800ee34:	3340      	adds	r3, #64	@ 0x40
 800ee36:	009b      	lsls	r3, r3, #2
 800ee38:	4413      	add	r3, r2
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ee3e:	693b      	ldr	r3, [r7, #16]
 800ee40:	3301      	adds	r3, #1
 800ee42:	613b      	str	r3, [r7, #16]
 800ee44:	693b      	ldr	r3, [r7, #16]
 800ee46:	2b0e      	cmp	r3, #14
 800ee48:	d9f2      	bls.n	800ee30 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ee4a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d11c      	bne.n	800ee8c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ee58:	685b      	ldr	r3, [r3, #4]
 800ee5a:	68fa      	ldr	r2, [r7, #12]
 800ee5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ee60:	f043 0302 	orr.w	r3, r3, #2
 800ee64:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee6a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	601a      	str	r2, [r3, #0]
 800ee8a:	e005      	b.n	800ee98 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee90:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ee9e:	461a      	mov	r2, r3
 800eea0:	2300      	movs	r3, #0
 800eea2:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800eea4:	2103      	movs	r1, #3
 800eea6:	6878      	ldr	r0, [r7, #4]
 800eea8:	f000 f95a 	bl	800f160 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800eeac:	2110      	movs	r1, #16
 800eeae:	6878      	ldr	r0, [r7, #4]
 800eeb0:	f000 f8f6 	bl	800f0a0 <USB_FlushTxFifo>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d001      	beq.n	800eebe <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800eeba:	2301      	movs	r3, #1
 800eebc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	f000 f920 	bl	800f104 <USB_FlushRxFifo>
 800eec4:	4603      	mov	r3, r0
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d001      	beq.n	800eece <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800eeca:	2301      	movs	r3, #1
 800eecc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eed4:	461a      	mov	r2, r3
 800eed6:	2300      	movs	r3, #0
 800eed8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eee0:	461a      	mov	r2, r3
 800eee2:	2300      	movs	r3, #0
 800eee4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eeec:	461a      	mov	r2, r3
 800eeee:	2300      	movs	r3, #0
 800eef0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eef2:	2300      	movs	r3, #0
 800eef4:	613b      	str	r3, [r7, #16]
 800eef6:	e043      	b.n	800ef80 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800eef8:	693b      	ldr	r3, [r7, #16]
 800eefa:	015a      	lsls	r2, r3, #5
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	4413      	add	r3, r2
 800ef00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ef0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ef0e:	d118      	bne.n	800ef42 <USB_DevInit+0x132>
    {
      if (i == 0U)
 800ef10:	693b      	ldr	r3, [r7, #16]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d10a      	bne.n	800ef2c <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ef16:	693b      	ldr	r3, [r7, #16]
 800ef18:	015a      	lsls	r2, r3, #5
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	4413      	add	r3, r2
 800ef1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef22:	461a      	mov	r2, r3
 800ef24:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ef28:	6013      	str	r3, [r2, #0]
 800ef2a:	e013      	b.n	800ef54 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ef2c:	693b      	ldr	r3, [r7, #16]
 800ef2e:	015a      	lsls	r2, r3, #5
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	4413      	add	r3, r2
 800ef34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef38:	461a      	mov	r2, r3
 800ef3a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ef3e:	6013      	str	r3, [r2, #0]
 800ef40:	e008      	b.n	800ef54 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ef42:	693b      	ldr	r3, [r7, #16]
 800ef44:	015a      	lsls	r2, r3, #5
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	4413      	add	r3, r2
 800ef4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef4e:	461a      	mov	r2, r3
 800ef50:	2300      	movs	r3, #0
 800ef52:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ef54:	693b      	ldr	r3, [r7, #16]
 800ef56:	015a      	lsls	r2, r3, #5
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	4413      	add	r3, r2
 800ef5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef60:	461a      	mov	r2, r3
 800ef62:	2300      	movs	r3, #0
 800ef64:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ef66:	693b      	ldr	r3, [r7, #16]
 800ef68:	015a      	lsls	r2, r3, #5
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	4413      	add	r3, r2
 800ef6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef72:	461a      	mov	r2, r3
 800ef74:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ef78:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ef7a:	693b      	ldr	r3, [r7, #16]
 800ef7c:	3301      	adds	r3, #1
 800ef7e:	613b      	str	r3, [r7, #16]
 800ef80:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ef84:	461a      	mov	r2, r3
 800ef86:	693b      	ldr	r3, [r7, #16]
 800ef88:	4293      	cmp	r3, r2
 800ef8a:	d3b5      	bcc.n	800eef8 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	613b      	str	r3, [r7, #16]
 800ef90:	e043      	b.n	800f01a <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ef92:	693b      	ldr	r3, [r7, #16]
 800ef94:	015a      	lsls	r2, r3, #5
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	4413      	add	r3, r2
 800ef9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800efa4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800efa8:	d118      	bne.n	800efdc <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800efaa:	693b      	ldr	r3, [r7, #16]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d10a      	bne.n	800efc6 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800efb0:	693b      	ldr	r3, [r7, #16]
 800efb2:	015a      	lsls	r2, r3, #5
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	4413      	add	r3, r2
 800efb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efbc:	461a      	mov	r2, r3
 800efbe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800efc2:	6013      	str	r3, [r2, #0]
 800efc4:	e013      	b.n	800efee <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800efc6:	693b      	ldr	r3, [r7, #16]
 800efc8:	015a      	lsls	r2, r3, #5
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	4413      	add	r3, r2
 800efce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efd2:	461a      	mov	r2, r3
 800efd4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800efd8:	6013      	str	r3, [r2, #0]
 800efda:	e008      	b.n	800efee <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800efdc:	693b      	ldr	r3, [r7, #16]
 800efde:	015a      	lsls	r2, r3, #5
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	4413      	add	r3, r2
 800efe4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efe8:	461a      	mov	r2, r3
 800efea:	2300      	movs	r3, #0
 800efec:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800efee:	693b      	ldr	r3, [r7, #16]
 800eff0:	015a      	lsls	r2, r3, #5
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	4413      	add	r3, r2
 800eff6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800effa:	461a      	mov	r2, r3
 800effc:	2300      	movs	r3, #0
 800effe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f000:	693b      	ldr	r3, [r7, #16]
 800f002:	015a      	lsls	r2, r3, #5
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	4413      	add	r3, r2
 800f008:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f00c:	461a      	mov	r2, r3
 800f00e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800f012:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f014:	693b      	ldr	r3, [r7, #16]
 800f016:	3301      	adds	r3, #1
 800f018:	613b      	str	r3, [r7, #16]
 800f01a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f01e:	461a      	mov	r2, r3
 800f020:	693b      	ldr	r3, [r7, #16]
 800f022:	4293      	cmp	r3, r2
 800f024:	d3b5      	bcc.n	800ef92 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f02c:	691b      	ldr	r3, [r3, #16]
 800f02e:	68fa      	ldr	r2, [r7, #12]
 800f030:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f034:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f038:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	2200      	movs	r2, #0
 800f03e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800f046:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	699b      	ldr	r3, [r3, #24]
 800f04c:	f043 0210 	orr.w	r2, r3, #16
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	699a      	ldr	r2, [r3, #24]
 800f058:	4b10      	ldr	r3, [pc, #64]	@ (800f09c <USB_DevInit+0x28c>)
 800f05a:	4313      	orrs	r3, r2
 800f05c:	687a      	ldr	r2, [r7, #4]
 800f05e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f060:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800f064:	2b00      	cmp	r3, #0
 800f066:	d005      	beq.n	800f074 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	699b      	ldr	r3, [r3, #24]
 800f06c:	f043 0208 	orr.w	r2, r3, #8
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f074:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f078:	2b01      	cmp	r3, #1
 800f07a:	d107      	bne.n	800f08c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	699b      	ldr	r3, [r3, #24]
 800f080:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f084:	f043 0304 	orr.w	r3, r3, #4
 800f088:	687a      	ldr	r2, [r7, #4]
 800f08a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f08c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f08e:	4618      	mov	r0, r3
 800f090:	3718      	adds	r7, #24
 800f092:	46bd      	mov	sp, r7
 800f094:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f098:	b004      	add	sp, #16
 800f09a:	4770      	bx	lr
 800f09c:	803c3800 	.word	0x803c3800

0800f0a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f0a0:	b480      	push	{r7}
 800f0a2:	b085      	sub	sp, #20
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	6078      	str	r0, [r7, #4]
 800f0a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	3301      	adds	r3, #1
 800f0b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f0ba:	d901      	bls.n	800f0c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800f0bc:	2303      	movs	r3, #3
 800f0be:	e01b      	b.n	800f0f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	691b      	ldr	r3, [r3, #16]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	daf2      	bge.n	800f0ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f0cc:	683b      	ldr	r3, [r7, #0]
 800f0ce:	019b      	lsls	r3, r3, #6
 800f0d0:	f043 0220 	orr.w	r2, r3, #32
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	3301      	adds	r3, #1
 800f0dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f0e4:	d901      	bls.n	800f0ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800f0e6:	2303      	movs	r3, #3
 800f0e8:	e006      	b.n	800f0f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	691b      	ldr	r3, [r3, #16]
 800f0ee:	f003 0320 	and.w	r3, r3, #32
 800f0f2:	2b20      	cmp	r3, #32
 800f0f4:	d0f0      	beq.n	800f0d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800f0f6:	2300      	movs	r3, #0
}
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	3714      	adds	r7, #20
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f102:	4770      	bx	lr

0800f104 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f104:	b480      	push	{r7}
 800f106:	b085      	sub	sp, #20
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f10c:	2300      	movs	r3, #0
 800f10e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	3301      	adds	r3, #1
 800f114:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f11c:	d901      	bls.n	800f122 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800f11e:	2303      	movs	r3, #3
 800f120:	e018      	b.n	800f154 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	691b      	ldr	r3, [r3, #16]
 800f126:	2b00      	cmp	r3, #0
 800f128:	daf2      	bge.n	800f110 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800f12a:	2300      	movs	r3, #0
 800f12c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	2210      	movs	r2, #16
 800f132:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	3301      	adds	r3, #1
 800f138:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f140:	d901      	bls.n	800f146 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800f142:	2303      	movs	r3, #3
 800f144:	e006      	b.n	800f154 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	691b      	ldr	r3, [r3, #16]
 800f14a:	f003 0310 	and.w	r3, r3, #16
 800f14e:	2b10      	cmp	r3, #16
 800f150:	d0f0      	beq.n	800f134 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800f152:	2300      	movs	r3, #0
}
 800f154:	4618      	mov	r0, r3
 800f156:	3714      	adds	r7, #20
 800f158:	46bd      	mov	sp, r7
 800f15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15e:	4770      	bx	lr

0800f160 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f160:	b480      	push	{r7}
 800f162:	b085      	sub	sp, #20
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
 800f168:	460b      	mov	r3, r1
 800f16a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f176:	681a      	ldr	r2, [r3, #0]
 800f178:	78fb      	ldrb	r3, [r7, #3]
 800f17a:	68f9      	ldr	r1, [r7, #12]
 800f17c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f180:	4313      	orrs	r3, r2
 800f182:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f184:	2300      	movs	r3, #0
}
 800f186:	4618      	mov	r0, r3
 800f188:	3714      	adds	r7, #20
 800f18a:	46bd      	mov	sp, r7
 800f18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f190:	4770      	bx	lr

0800f192 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800f192:	b480      	push	{r7}
 800f194:	b087      	sub	sp, #28
 800f196:	af00      	add	r7, sp, #0
 800f198:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f19e:	693b      	ldr	r3, [r7, #16]
 800f1a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f1a4:	689b      	ldr	r3, [r3, #8]
 800f1a6:	f003 0306 	and.w	r3, r3, #6
 800f1aa:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	2b02      	cmp	r3, #2
 800f1b0:	d002      	beq.n	800f1b8 <USB_GetDevSpeed+0x26>
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	2b06      	cmp	r3, #6
 800f1b6:	d102      	bne.n	800f1be <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800f1b8:	2302      	movs	r3, #2
 800f1ba:	75fb      	strb	r3, [r7, #23]
 800f1bc:	e001      	b.n	800f1c2 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800f1be:	230f      	movs	r3, #15
 800f1c0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800f1c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	371c      	adds	r7, #28
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ce:	4770      	bx	lr

0800f1d0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f1d0:	b480      	push	{r7}
 800f1d2:	b085      	sub	sp, #20
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	6078      	str	r0, [r7, #4]
 800f1d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	781b      	ldrb	r3, [r3, #0]
 800f1e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	785b      	ldrb	r3, [r3, #1]
 800f1e8:	2b01      	cmp	r3, #1
 800f1ea:	d13a      	bne.n	800f262 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f1f2:	69da      	ldr	r2, [r3, #28]
 800f1f4:	683b      	ldr	r3, [r7, #0]
 800f1f6:	781b      	ldrb	r3, [r3, #0]
 800f1f8:	f003 030f 	and.w	r3, r3, #15
 800f1fc:	2101      	movs	r1, #1
 800f1fe:	fa01 f303 	lsl.w	r3, r1, r3
 800f202:	b29b      	uxth	r3, r3
 800f204:	68f9      	ldr	r1, [r7, #12]
 800f206:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f20a:	4313      	orrs	r3, r2
 800f20c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f20e:	68bb      	ldr	r3, [r7, #8]
 800f210:	015a      	lsls	r2, r3, #5
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	4413      	add	r3, r2
 800f216:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f220:	2b00      	cmp	r3, #0
 800f222:	d155      	bne.n	800f2d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	015a      	lsls	r2, r3, #5
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	4413      	add	r3, r2
 800f22c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f230:	681a      	ldr	r2, [r3, #0]
 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	689b      	ldr	r3, [r3, #8]
 800f236:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f23a:	683b      	ldr	r3, [r7, #0]
 800f23c:	791b      	ldrb	r3, [r3, #4]
 800f23e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f240:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	059b      	lsls	r3, r3, #22
 800f246:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f248:	4313      	orrs	r3, r2
 800f24a:	68ba      	ldr	r2, [r7, #8]
 800f24c:	0151      	lsls	r1, r2, #5
 800f24e:	68fa      	ldr	r2, [r7, #12]
 800f250:	440a      	add	r2, r1
 800f252:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f256:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f25a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f25e:	6013      	str	r3, [r2, #0]
 800f260:	e036      	b.n	800f2d0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f268:	69da      	ldr	r2, [r3, #28]
 800f26a:	683b      	ldr	r3, [r7, #0]
 800f26c:	781b      	ldrb	r3, [r3, #0]
 800f26e:	f003 030f 	and.w	r3, r3, #15
 800f272:	2101      	movs	r1, #1
 800f274:	fa01 f303 	lsl.w	r3, r1, r3
 800f278:	041b      	lsls	r3, r3, #16
 800f27a:	68f9      	ldr	r1, [r7, #12]
 800f27c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f280:	4313      	orrs	r3, r2
 800f282:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f284:	68bb      	ldr	r3, [r7, #8]
 800f286:	015a      	lsls	r2, r3, #5
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	4413      	add	r3, r2
 800f28c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f296:	2b00      	cmp	r3, #0
 800f298:	d11a      	bne.n	800f2d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f29a:	68bb      	ldr	r3, [r7, #8]
 800f29c:	015a      	lsls	r2, r3, #5
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	4413      	add	r3, r2
 800f2a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f2a6:	681a      	ldr	r2, [r3, #0]
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	689b      	ldr	r3, [r3, #8]
 800f2ac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	791b      	ldrb	r3, [r3, #4]
 800f2b4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f2b6:	430b      	orrs	r3, r1
 800f2b8:	4313      	orrs	r3, r2
 800f2ba:	68ba      	ldr	r2, [r7, #8]
 800f2bc:	0151      	lsls	r1, r2, #5
 800f2be:	68fa      	ldr	r2, [r7, #12]
 800f2c0:	440a      	add	r2, r1
 800f2c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f2c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f2ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f2ce:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800f2d0:	2300      	movs	r3, #0
}
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	3714      	adds	r7, #20
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2dc:	4770      	bx	lr
	...

0800f2e0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f2e0:	b480      	push	{r7}
 800f2e2:	b085      	sub	sp, #20
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
 800f2e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f2ee:	683b      	ldr	r3, [r7, #0]
 800f2f0:	781b      	ldrb	r3, [r3, #0]
 800f2f2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	785b      	ldrb	r3, [r3, #1]
 800f2f8:	2b01      	cmp	r3, #1
 800f2fa:	d161      	bne.n	800f3c0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f2fc:	68bb      	ldr	r3, [r7, #8]
 800f2fe:	015a      	lsls	r2, r3, #5
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	4413      	add	r3, r2
 800f304:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f30e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f312:	d11f      	bne.n	800f354 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	015a      	lsls	r2, r3, #5
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	4413      	add	r3, r2
 800f31c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	68ba      	ldr	r2, [r7, #8]
 800f324:	0151      	lsls	r1, r2, #5
 800f326:	68fa      	ldr	r2, [r7, #12]
 800f328:	440a      	add	r2, r1
 800f32a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f32e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f332:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800f334:	68bb      	ldr	r3, [r7, #8]
 800f336:	015a      	lsls	r2, r3, #5
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	4413      	add	r3, r2
 800f33c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	68ba      	ldr	r2, [r7, #8]
 800f344:	0151      	lsls	r1, r2, #5
 800f346:	68fa      	ldr	r2, [r7, #12]
 800f348:	440a      	add	r2, r1
 800f34a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f34e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f352:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f35a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	781b      	ldrb	r3, [r3, #0]
 800f360:	f003 030f 	and.w	r3, r3, #15
 800f364:	2101      	movs	r1, #1
 800f366:	fa01 f303 	lsl.w	r3, r1, r3
 800f36a:	b29b      	uxth	r3, r3
 800f36c:	43db      	mvns	r3, r3
 800f36e:	68f9      	ldr	r1, [r7, #12]
 800f370:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f374:	4013      	ands	r3, r2
 800f376:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f37e:	69da      	ldr	r2, [r3, #28]
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	781b      	ldrb	r3, [r3, #0]
 800f384:	f003 030f 	and.w	r3, r3, #15
 800f388:	2101      	movs	r1, #1
 800f38a:	fa01 f303 	lsl.w	r3, r1, r3
 800f38e:	b29b      	uxth	r3, r3
 800f390:	43db      	mvns	r3, r3
 800f392:	68f9      	ldr	r1, [r7, #12]
 800f394:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f398:	4013      	ands	r3, r2
 800f39a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f39c:	68bb      	ldr	r3, [r7, #8]
 800f39e:	015a      	lsls	r2, r3, #5
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	4413      	add	r3, r2
 800f3a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f3a8:	681a      	ldr	r2, [r3, #0]
 800f3aa:	68bb      	ldr	r3, [r7, #8]
 800f3ac:	0159      	lsls	r1, r3, #5
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	440b      	add	r3, r1
 800f3b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f3b6:	4619      	mov	r1, r3
 800f3b8:	4b35      	ldr	r3, [pc, #212]	@ (800f490 <USB_DeactivateEndpoint+0x1b0>)
 800f3ba:	4013      	ands	r3, r2
 800f3bc:	600b      	str	r3, [r1, #0]
 800f3be:	e060      	b.n	800f482 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	015a      	lsls	r2, r3, #5
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	4413      	add	r3, r2
 800f3c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f3d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f3d6:	d11f      	bne.n	800f418 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f3d8:	68bb      	ldr	r3, [r7, #8]
 800f3da:	015a      	lsls	r2, r3, #5
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	4413      	add	r3, r2
 800f3e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	68ba      	ldr	r2, [r7, #8]
 800f3e8:	0151      	lsls	r1, r2, #5
 800f3ea:	68fa      	ldr	r2, [r7, #12]
 800f3ec:	440a      	add	r2, r1
 800f3ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f3f2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f3f6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800f3f8:	68bb      	ldr	r3, [r7, #8]
 800f3fa:	015a      	lsls	r2, r3, #5
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	4413      	add	r3, r2
 800f400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	68ba      	ldr	r2, [r7, #8]
 800f408:	0151      	lsls	r1, r2, #5
 800f40a:	68fa      	ldr	r2, [r7, #12]
 800f40c:	440a      	add	r2, r1
 800f40e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f412:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f416:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f41e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f420:	683b      	ldr	r3, [r7, #0]
 800f422:	781b      	ldrb	r3, [r3, #0]
 800f424:	f003 030f 	and.w	r3, r3, #15
 800f428:	2101      	movs	r1, #1
 800f42a:	fa01 f303 	lsl.w	r3, r1, r3
 800f42e:	041b      	lsls	r3, r3, #16
 800f430:	43db      	mvns	r3, r3
 800f432:	68f9      	ldr	r1, [r7, #12]
 800f434:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f438:	4013      	ands	r3, r2
 800f43a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f442:	69da      	ldr	r2, [r3, #28]
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	781b      	ldrb	r3, [r3, #0]
 800f448:	f003 030f 	and.w	r3, r3, #15
 800f44c:	2101      	movs	r1, #1
 800f44e:	fa01 f303 	lsl.w	r3, r1, r3
 800f452:	041b      	lsls	r3, r3, #16
 800f454:	43db      	mvns	r3, r3
 800f456:	68f9      	ldr	r1, [r7, #12]
 800f458:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f45c:	4013      	ands	r3, r2
 800f45e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f460:	68bb      	ldr	r3, [r7, #8]
 800f462:	015a      	lsls	r2, r3, #5
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	4413      	add	r3, r2
 800f468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f46c:	681a      	ldr	r2, [r3, #0]
 800f46e:	68bb      	ldr	r3, [r7, #8]
 800f470:	0159      	lsls	r1, r3, #5
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	440b      	add	r3, r1
 800f476:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f47a:	4619      	mov	r1, r3
 800f47c:	4b05      	ldr	r3, [pc, #20]	@ (800f494 <USB_DeactivateEndpoint+0x1b4>)
 800f47e:	4013      	ands	r3, r2
 800f480:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f482:	2300      	movs	r3, #0
}
 800f484:	4618      	mov	r0, r3
 800f486:	3714      	adds	r7, #20
 800f488:	46bd      	mov	sp, r7
 800f48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48e:	4770      	bx	lr
 800f490:	ec337800 	.word	0xec337800
 800f494:	eff37800 	.word	0xeff37800

0800f498 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b086      	sub	sp, #24
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	781b      	ldrb	r3, [r3, #0]
 800f4aa:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f4ac:	683b      	ldr	r3, [r7, #0]
 800f4ae:	785b      	ldrb	r3, [r3, #1]
 800f4b0:	2b01      	cmp	r3, #1
 800f4b2:	f040 812d 	bne.w	800f710 <USB_EPStartXfer+0x278>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	691b      	ldr	r3, [r3, #16]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d132      	bne.n	800f524 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f4be:	693b      	ldr	r3, [r7, #16]
 800f4c0:	015a      	lsls	r2, r3, #5
 800f4c2:	697b      	ldr	r3, [r7, #20]
 800f4c4:	4413      	add	r3, r2
 800f4c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f4ca:	691b      	ldr	r3, [r3, #16]
 800f4cc:	693a      	ldr	r2, [r7, #16]
 800f4ce:	0151      	lsls	r1, r2, #5
 800f4d0:	697a      	ldr	r2, [r7, #20]
 800f4d2:	440a      	add	r2, r1
 800f4d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f4d8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800f4dc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800f4e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f4e2:	693b      	ldr	r3, [r7, #16]
 800f4e4:	015a      	lsls	r2, r3, #5
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	4413      	add	r3, r2
 800f4ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f4ee:	691b      	ldr	r3, [r3, #16]
 800f4f0:	693a      	ldr	r2, [r7, #16]
 800f4f2:	0151      	lsls	r1, r2, #5
 800f4f4:	697a      	ldr	r2, [r7, #20]
 800f4f6:	440a      	add	r2, r1
 800f4f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f4fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f500:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f502:	693b      	ldr	r3, [r7, #16]
 800f504:	015a      	lsls	r2, r3, #5
 800f506:	697b      	ldr	r3, [r7, #20]
 800f508:	4413      	add	r3, r2
 800f50a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f50e:	691b      	ldr	r3, [r3, #16]
 800f510:	693a      	ldr	r2, [r7, #16]
 800f512:	0151      	lsls	r1, r2, #5
 800f514:	697a      	ldr	r2, [r7, #20]
 800f516:	440a      	add	r2, r1
 800f518:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f51c:	0cdb      	lsrs	r3, r3, #19
 800f51e:	04db      	lsls	r3, r3, #19
 800f520:	6113      	str	r3, [r2, #16]
 800f522:	e097      	b.n	800f654 <USB_EPStartXfer+0x1bc>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f524:	693b      	ldr	r3, [r7, #16]
 800f526:	015a      	lsls	r2, r3, #5
 800f528:	697b      	ldr	r3, [r7, #20]
 800f52a:	4413      	add	r3, r2
 800f52c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f530:	691b      	ldr	r3, [r3, #16]
 800f532:	693a      	ldr	r2, [r7, #16]
 800f534:	0151      	lsls	r1, r2, #5
 800f536:	697a      	ldr	r2, [r7, #20]
 800f538:	440a      	add	r2, r1
 800f53a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f53e:	0cdb      	lsrs	r3, r3, #19
 800f540:	04db      	lsls	r3, r3, #19
 800f542:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f544:	693b      	ldr	r3, [r7, #16]
 800f546:	015a      	lsls	r2, r3, #5
 800f548:	697b      	ldr	r3, [r7, #20]
 800f54a:	4413      	add	r3, r2
 800f54c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f550:	691b      	ldr	r3, [r3, #16]
 800f552:	693a      	ldr	r2, [r7, #16]
 800f554:	0151      	lsls	r1, r2, #5
 800f556:	697a      	ldr	r2, [r7, #20]
 800f558:	440a      	add	r2, r1
 800f55a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f55e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800f562:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800f566:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800f568:	693b      	ldr	r3, [r7, #16]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d11a      	bne.n	800f5a4 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	691a      	ldr	r2, [r3, #16]
 800f572:	683b      	ldr	r3, [r7, #0]
 800f574:	689b      	ldr	r3, [r3, #8]
 800f576:	429a      	cmp	r2, r3
 800f578:	d903      	bls.n	800f582 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800f57a:	683b      	ldr	r3, [r7, #0]
 800f57c:	689a      	ldr	r2, [r3, #8]
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f582:	693b      	ldr	r3, [r7, #16]
 800f584:	015a      	lsls	r2, r3, #5
 800f586:	697b      	ldr	r3, [r7, #20]
 800f588:	4413      	add	r3, r2
 800f58a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f58e:	691b      	ldr	r3, [r3, #16]
 800f590:	693a      	ldr	r2, [r7, #16]
 800f592:	0151      	lsls	r1, r2, #5
 800f594:	697a      	ldr	r2, [r7, #20]
 800f596:	440a      	add	r2, r1
 800f598:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f59c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f5a0:	6113      	str	r3, [r2, #16]
 800f5a2:	e044      	b.n	800f62e <USB_EPStartXfer+0x196>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	691a      	ldr	r2, [r3, #16]
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	689b      	ldr	r3, [r3, #8]
 800f5ac:	4413      	add	r3, r2
 800f5ae:	1e5a      	subs	r2, r3, #1
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	689b      	ldr	r3, [r3, #8]
 800f5b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5b8:	81fb      	strh	r3, [r7, #14]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800f5ba:	693b      	ldr	r3, [r7, #16]
 800f5bc:	015a      	lsls	r2, r3, #5
 800f5be:	697b      	ldr	r3, [r7, #20]
 800f5c0:	4413      	add	r3, r2
 800f5c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f5c6:	691a      	ldr	r2, [r3, #16]
 800f5c8:	89fb      	ldrh	r3, [r7, #14]
 800f5ca:	04d9      	lsls	r1, r3, #19
 800f5cc:	4b8f      	ldr	r3, [pc, #572]	@ (800f80c <USB_EPStartXfer+0x374>)
 800f5ce:	400b      	ands	r3, r1
 800f5d0:	6939      	ldr	r1, [r7, #16]
 800f5d2:	0148      	lsls	r0, r1, #5
 800f5d4:	6979      	ldr	r1, [r7, #20]
 800f5d6:	4401      	add	r1, r0
 800f5d8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800f5dc:	4313      	orrs	r3, r2
 800f5de:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	791b      	ldrb	r3, [r3, #4]
 800f5e4:	2b01      	cmp	r3, #1
 800f5e6:	d122      	bne.n	800f62e <USB_EPStartXfer+0x196>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f5e8:	693b      	ldr	r3, [r7, #16]
 800f5ea:	015a      	lsls	r2, r3, #5
 800f5ec:	697b      	ldr	r3, [r7, #20]
 800f5ee:	4413      	add	r3, r2
 800f5f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f5f4:	691b      	ldr	r3, [r3, #16]
 800f5f6:	693a      	ldr	r2, [r7, #16]
 800f5f8:	0151      	lsls	r1, r2, #5
 800f5fa:	697a      	ldr	r2, [r7, #20]
 800f5fc:	440a      	add	r2, r1
 800f5fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f602:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800f606:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800f608:	693b      	ldr	r3, [r7, #16]
 800f60a:	015a      	lsls	r2, r3, #5
 800f60c:	697b      	ldr	r3, [r7, #20]
 800f60e:	4413      	add	r3, r2
 800f610:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f614:	691a      	ldr	r2, [r3, #16]
 800f616:	89fb      	ldrh	r3, [r7, #14]
 800f618:	075b      	lsls	r3, r3, #29
 800f61a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800f61e:	6939      	ldr	r1, [r7, #16]
 800f620:	0148      	lsls	r0, r1, #5
 800f622:	6979      	ldr	r1, [r7, #20]
 800f624:	4401      	add	r1, r0
 800f626:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800f62a:	4313      	orrs	r3, r2
 800f62c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f62e:	693b      	ldr	r3, [r7, #16]
 800f630:	015a      	lsls	r2, r3, #5
 800f632:	697b      	ldr	r3, [r7, #20]
 800f634:	4413      	add	r3, r2
 800f636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f63a:	691a      	ldr	r2, [r3, #16]
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	691b      	ldr	r3, [r3, #16]
 800f640:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f644:	6939      	ldr	r1, [r7, #16]
 800f646:	0148      	lsls	r0, r1, #5
 800f648:	6979      	ldr	r1, [r7, #20]
 800f64a:	4401      	add	r1, r0
 800f64c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800f650:	4313      	orrs	r3, r2
 800f652:	610b      	str	r3, [r1, #16]
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f654:	693b      	ldr	r3, [r7, #16]
 800f656:	015a      	lsls	r2, r3, #5
 800f658:	697b      	ldr	r3, [r7, #20]
 800f65a:	4413      	add	r3, r2
 800f65c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	693a      	ldr	r2, [r7, #16]
 800f664:	0151      	lsls	r1, r2, #5
 800f666:	697a      	ldr	r2, [r7, #20]
 800f668:	440a      	add	r2, r1
 800f66a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f66e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800f672:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	791b      	ldrb	r3, [r3, #4]
 800f678:	2b01      	cmp	r3, #1
 800f67a:	d015      	beq.n	800f6a8 <USB_EPStartXfer+0x210>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800f67c:	683b      	ldr	r3, [r7, #0]
 800f67e:	691b      	ldr	r3, [r3, #16]
 800f680:	2b00      	cmp	r3, #0
 800f682:	f000 813a 	beq.w	800f8fa <USB_EPStartXfer+0x462>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f68c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f68e:	683b      	ldr	r3, [r7, #0]
 800f690:	781b      	ldrb	r3, [r3, #0]
 800f692:	f003 030f 	and.w	r3, r3, #15
 800f696:	2101      	movs	r1, #1
 800f698:	fa01 f303 	lsl.w	r3, r1, r3
 800f69c:	6979      	ldr	r1, [r7, #20]
 800f69e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f6a2:	4313      	orrs	r3, r2
 800f6a4:	634b      	str	r3, [r1, #52]	@ 0x34
 800f6a6:	e128      	b.n	800f8fa <USB_EPStartXfer+0x462>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f6a8:	697b      	ldr	r3, [r7, #20]
 800f6aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f6ae:	689b      	ldr	r3, [r3, #8]
 800f6b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d110      	bne.n	800f6da <USB_EPStartXfer+0x242>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f6b8:	693b      	ldr	r3, [r7, #16]
 800f6ba:	015a      	lsls	r2, r3, #5
 800f6bc:	697b      	ldr	r3, [r7, #20]
 800f6be:	4413      	add	r3, r2
 800f6c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	693a      	ldr	r2, [r7, #16]
 800f6c8:	0151      	lsls	r1, r2, #5
 800f6ca:	697a      	ldr	r2, [r7, #20]
 800f6cc:	440a      	add	r2, r1
 800f6ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f6d2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f6d6:	6013      	str	r3, [r2, #0]
 800f6d8:	e00f      	b.n	800f6fa <USB_EPStartXfer+0x262>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f6da:	693b      	ldr	r3, [r7, #16]
 800f6dc:	015a      	lsls	r2, r3, #5
 800f6de:	697b      	ldr	r3, [r7, #20]
 800f6e0:	4413      	add	r3, r2
 800f6e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	693a      	ldr	r2, [r7, #16]
 800f6ea:	0151      	lsls	r1, r2, #5
 800f6ec:	697a      	ldr	r2, [r7, #20]
 800f6ee:	440a      	add	r2, r1
 800f6f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f6f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f6f8:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800f6fa:	683b      	ldr	r3, [r7, #0]
 800f6fc:	68d9      	ldr	r1, [r3, #12]
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	781a      	ldrb	r2, [r3, #0]
 800f702:	683b      	ldr	r3, [r7, #0]
 800f704:	691b      	ldr	r3, [r3, #16]
 800f706:	b29b      	uxth	r3, r3
 800f708:	6878      	ldr	r0, [r7, #4]
 800f70a:	f000 f9a7 	bl	800fa5c <USB_WritePacket>
 800f70e:	e0f4      	b.n	800f8fa <USB_EPStartXfer+0x462>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f710:	693b      	ldr	r3, [r7, #16]
 800f712:	015a      	lsls	r2, r3, #5
 800f714:	697b      	ldr	r3, [r7, #20]
 800f716:	4413      	add	r3, r2
 800f718:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f71c:	691b      	ldr	r3, [r3, #16]
 800f71e:	693a      	ldr	r2, [r7, #16]
 800f720:	0151      	lsls	r1, r2, #5
 800f722:	697a      	ldr	r2, [r7, #20]
 800f724:	440a      	add	r2, r1
 800f726:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f72a:	0cdb      	lsrs	r3, r3, #19
 800f72c:	04db      	lsls	r3, r3, #19
 800f72e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f730:	693b      	ldr	r3, [r7, #16]
 800f732:	015a      	lsls	r2, r3, #5
 800f734:	697b      	ldr	r3, [r7, #20]
 800f736:	4413      	add	r3, r2
 800f738:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f73c:	691b      	ldr	r3, [r3, #16]
 800f73e:	693a      	ldr	r2, [r7, #16]
 800f740:	0151      	lsls	r1, r2, #5
 800f742:	697a      	ldr	r2, [r7, #20]
 800f744:	440a      	add	r2, r1
 800f746:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f74a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800f74e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800f752:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800f754:	693b      	ldr	r3, [r7, #16]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d12f      	bne.n	800f7ba <USB_EPStartXfer+0x322>
    {
      if (ep->xfer_len > 0U)
 800f75a:	683b      	ldr	r3, [r7, #0]
 800f75c:	691b      	ldr	r3, [r3, #16]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d003      	beq.n	800f76a <USB_EPStartXfer+0x2d2>
      {
        ep->xfer_len = ep->maxpacket;
 800f762:	683b      	ldr	r3, [r7, #0]
 800f764:	689a      	ldr	r2, [r3, #8]
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800f76a:	683b      	ldr	r3, [r7, #0]
 800f76c:	689a      	ldr	r2, [r3, #8]
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800f772:	693b      	ldr	r3, [r7, #16]
 800f774:	015a      	lsls	r2, r3, #5
 800f776:	697b      	ldr	r3, [r7, #20]
 800f778:	4413      	add	r3, r2
 800f77a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f77e:	691a      	ldr	r2, [r3, #16]
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	6a1b      	ldr	r3, [r3, #32]
 800f784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f788:	6939      	ldr	r1, [r7, #16]
 800f78a:	0148      	lsls	r0, r1, #5
 800f78c:	6979      	ldr	r1, [r7, #20]
 800f78e:	4401      	add	r1, r0
 800f790:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f794:	4313      	orrs	r3, r2
 800f796:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f798:	693b      	ldr	r3, [r7, #16]
 800f79a:	015a      	lsls	r2, r3, #5
 800f79c:	697b      	ldr	r3, [r7, #20]
 800f79e:	4413      	add	r3, r2
 800f7a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f7a4:	691b      	ldr	r3, [r3, #16]
 800f7a6:	693a      	ldr	r2, [r7, #16]
 800f7a8:	0151      	lsls	r1, r2, #5
 800f7aa:	697a      	ldr	r2, [r7, #20]
 800f7ac:	440a      	add	r2, r1
 800f7ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f7b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f7b6:	6113      	str	r3, [r2, #16]
 800f7b8:	e062      	b.n	800f880 <USB_EPStartXfer+0x3e8>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	691b      	ldr	r3, [r3, #16]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d126      	bne.n	800f810 <USB_EPStartXfer+0x378>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f7c2:	693b      	ldr	r3, [r7, #16]
 800f7c4:	015a      	lsls	r2, r3, #5
 800f7c6:	697b      	ldr	r3, [r7, #20]
 800f7c8:	4413      	add	r3, r2
 800f7ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f7ce:	691a      	ldr	r2, [r3, #16]
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	689b      	ldr	r3, [r3, #8]
 800f7d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f7d8:	6939      	ldr	r1, [r7, #16]
 800f7da:	0148      	lsls	r0, r1, #5
 800f7dc:	6979      	ldr	r1, [r7, #20]
 800f7de:	4401      	add	r1, r0
 800f7e0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f7e4:	4313      	orrs	r3, r2
 800f7e6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f7e8:	693b      	ldr	r3, [r7, #16]
 800f7ea:	015a      	lsls	r2, r3, #5
 800f7ec:	697b      	ldr	r3, [r7, #20]
 800f7ee:	4413      	add	r3, r2
 800f7f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f7f4:	691b      	ldr	r3, [r3, #16]
 800f7f6:	693a      	ldr	r2, [r7, #16]
 800f7f8:	0151      	lsls	r1, r2, #5
 800f7fa:	697a      	ldr	r2, [r7, #20]
 800f7fc:	440a      	add	r2, r1
 800f7fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f802:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f806:	6113      	str	r3, [r2, #16]
 800f808:	e03a      	b.n	800f880 <USB_EPStartXfer+0x3e8>
 800f80a:	bf00      	nop
 800f80c:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f810:	683b      	ldr	r3, [r7, #0]
 800f812:	691a      	ldr	r2, [r3, #16]
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	689b      	ldr	r3, [r3, #8]
 800f818:	4413      	add	r3, r2
 800f81a:	1e5a      	subs	r2, r3, #1
 800f81c:	683b      	ldr	r3, [r7, #0]
 800f81e:	689b      	ldr	r3, [r3, #8]
 800f820:	fbb2 f3f3 	udiv	r3, r2, r3
 800f824:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800f826:	683b      	ldr	r3, [r7, #0]
 800f828:	689b      	ldr	r3, [r3, #8]
 800f82a:	89fa      	ldrh	r2, [r7, #14]
 800f82c:	fb03 f202 	mul.w	r2, r3, r2
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f834:	693b      	ldr	r3, [r7, #16]
 800f836:	015a      	lsls	r2, r3, #5
 800f838:	697b      	ldr	r3, [r7, #20]
 800f83a:	4413      	add	r3, r2
 800f83c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f840:	691a      	ldr	r2, [r3, #16]
 800f842:	89fb      	ldrh	r3, [r7, #14]
 800f844:	04d9      	lsls	r1, r3, #19
 800f846:	4b2f      	ldr	r3, [pc, #188]	@ (800f904 <USB_EPStartXfer+0x46c>)
 800f848:	400b      	ands	r3, r1
 800f84a:	6939      	ldr	r1, [r7, #16]
 800f84c:	0148      	lsls	r0, r1, #5
 800f84e:	6979      	ldr	r1, [r7, #20]
 800f850:	4401      	add	r1, r0
 800f852:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f856:	4313      	orrs	r3, r2
 800f858:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800f85a:	693b      	ldr	r3, [r7, #16]
 800f85c:	015a      	lsls	r2, r3, #5
 800f85e:	697b      	ldr	r3, [r7, #20]
 800f860:	4413      	add	r3, r2
 800f862:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f866:	691a      	ldr	r2, [r3, #16]
 800f868:	683b      	ldr	r3, [r7, #0]
 800f86a:	6a1b      	ldr	r3, [r3, #32]
 800f86c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f870:	6939      	ldr	r1, [r7, #16]
 800f872:	0148      	lsls	r0, r1, #5
 800f874:	6979      	ldr	r1, [r7, #20]
 800f876:	4401      	add	r1, r0
 800f878:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f87c:	4313      	orrs	r3, r2
 800f87e:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f880:	683b      	ldr	r3, [r7, #0]
 800f882:	791b      	ldrb	r3, [r3, #4]
 800f884:	2b01      	cmp	r3, #1
 800f886:	d128      	bne.n	800f8da <USB_EPStartXfer+0x442>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f888:	697b      	ldr	r3, [r7, #20]
 800f88a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f88e:	689b      	ldr	r3, [r3, #8]
 800f890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f894:	2b00      	cmp	r3, #0
 800f896:	d110      	bne.n	800f8ba <USB_EPStartXfer+0x422>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f898:	693b      	ldr	r3, [r7, #16]
 800f89a:	015a      	lsls	r2, r3, #5
 800f89c:	697b      	ldr	r3, [r7, #20]
 800f89e:	4413      	add	r3, r2
 800f8a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	693a      	ldr	r2, [r7, #16]
 800f8a8:	0151      	lsls	r1, r2, #5
 800f8aa:	697a      	ldr	r2, [r7, #20]
 800f8ac:	440a      	add	r2, r1
 800f8ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f8b2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f8b6:	6013      	str	r3, [r2, #0]
 800f8b8:	e00f      	b.n	800f8da <USB_EPStartXfer+0x442>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f8ba:	693b      	ldr	r3, [r7, #16]
 800f8bc:	015a      	lsls	r2, r3, #5
 800f8be:	697b      	ldr	r3, [r7, #20]
 800f8c0:	4413      	add	r3, r2
 800f8c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	693a      	ldr	r2, [r7, #16]
 800f8ca:	0151      	lsls	r1, r2, #5
 800f8cc:	697a      	ldr	r2, [r7, #20]
 800f8ce:	440a      	add	r2, r1
 800f8d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f8d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f8d8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f8da:	693b      	ldr	r3, [r7, #16]
 800f8dc:	015a      	lsls	r2, r3, #5
 800f8de:	697b      	ldr	r3, [r7, #20]
 800f8e0:	4413      	add	r3, r2
 800f8e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	693a      	ldr	r2, [r7, #16]
 800f8ea:	0151      	lsls	r1, r2, #5
 800f8ec:	697a      	ldr	r2, [r7, #20]
 800f8ee:	440a      	add	r2, r1
 800f8f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f8f4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800f8f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f8fa:	2300      	movs	r3, #0
}
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	3718      	adds	r7, #24
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}
 800f904:	1ff80000 	.word	0x1ff80000

0800f908 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f908:	b480      	push	{r7}
 800f90a:	b087      	sub	sp, #28
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
 800f910:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f912:	2300      	movs	r3, #0
 800f914:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800f916:	2300      	movs	r3, #0
 800f918:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f91e:	683b      	ldr	r3, [r7, #0]
 800f920:	785b      	ldrb	r3, [r3, #1]
 800f922:	2b01      	cmp	r3, #1
 800f924:	d14a      	bne.n	800f9bc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f926:	683b      	ldr	r3, [r7, #0]
 800f928:	781b      	ldrb	r3, [r3, #0]
 800f92a:	015a      	lsls	r2, r3, #5
 800f92c:	693b      	ldr	r3, [r7, #16]
 800f92e:	4413      	add	r3, r2
 800f930:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f93a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f93e:	f040 8086 	bne.w	800fa4e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	781b      	ldrb	r3, [r3, #0]
 800f946:	015a      	lsls	r2, r3, #5
 800f948:	693b      	ldr	r3, [r7, #16]
 800f94a:	4413      	add	r3, r2
 800f94c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	683a      	ldr	r2, [r7, #0]
 800f954:	7812      	ldrb	r2, [r2, #0]
 800f956:	0151      	lsls	r1, r2, #5
 800f958:	693a      	ldr	r2, [r7, #16]
 800f95a:	440a      	add	r2, r1
 800f95c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f960:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f964:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800f966:	683b      	ldr	r3, [r7, #0]
 800f968:	781b      	ldrb	r3, [r3, #0]
 800f96a:	015a      	lsls	r2, r3, #5
 800f96c:	693b      	ldr	r3, [r7, #16]
 800f96e:	4413      	add	r3, r2
 800f970:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	683a      	ldr	r2, [r7, #0]
 800f978:	7812      	ldrb	r2, [r2, #0]
 800f97a:	0151      	lsls	r1, r2, #5
 800f97c:	693a      	ldr	r2, [r7, #16]
 800f97e:	440a      	add	r2, r1
 800f980:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f984:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f988:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	3301      	adds	r3, #1
 800f98e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	f242 7210 	movw	r2, #10000	@ 0x2710
 800f996:	4293      	cmp	r3, r2
 800f998:	d902      	bls.n	800f9a0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800f99a:	2301      	movs	r3, #1
 800f99c:	75fb      	strb	r3, [r7, #23]
          break;
 800f99e:	e056      	b.n	800fa4e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800f9a0:	683b      	ldr	r3, [r7, #0]
 800f9a2:	781b      	ldrb	r3, [r3, #0]
 800f9a4:	015a      	lsls	r2, r3, #5
 800f9a6:	693b      	ldr	r3, [r7, #16]
 800f9a8:	4413      	add	r3, r2
 800f9aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f9b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f9b8:	d0e7      	beq.n	800f98a <USB_EPStopXfer+0x82>
 800f9ba:	e048      	b.n	800fa4e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	781b      	ldrb	r3, [r3, #0]
 800f9c0:	015a      	lsls	r2, r3, #5
 800f9c2:	693b      	ldr	r3, [r7, #16]
 800f9c4:	4413      	add	r3, r2
 800f9c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f9d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f9d4:	d13b      	bne.n	800fa4e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800f9d6:	683b      	ldr	r3, [r7, #0]
 800f9d8:	781b      	ldrb	r3, [r3, #0]
 800f9da:	015a      	lsls	r2, r3, #5
 800f9dc:	693b      	ldr	r3, [r7, #16]
 800f9de:	4413      	add	r3, r2
 800f9e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	683a      	ldr	r2, [r7, #0]
 800f9e8:	7812      	ldrb	r2, [r2, #0]
 800f9ea:	0151      	lsls	r1, r2, #5
 800f9ec:	693a      	ldr	r2, [r7, #16]
 800f9ee:	440a      	add	r2, r1
 800f9f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f9f4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f9f8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800f9fa:	683b      	ldr	r3, [r7, #0]
 800f9fc:	781b      	ldrb	r3, [r3, #0]
 800f9fe:	015a      	lsls	r2, r3, #5
 800fa00:	693b      	ldr	r3, [r7, #16]
 800fa02:	4413      	add	r3, r2
 800fa04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	683a      	ldr	r2, [r7, #0]
 800fa0c:	7812      	ldrb	r2, [r2, #0]
 800fa0e:	0151      	lsls	r1, r2, #5
 800fa10:	693a      	ldr	r2, [r7, #16]
 800fa12:	440a      	add	r2, r1
 800fa14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fa18:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800fa1c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	3301      	adds	r3, #1
 800fa22:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	f242 7210 	movw	r2, #10000	@ 0x2710
 800fa2a:	4293      	cmp	r3, r2
 800fa2c:	d902      	bls.n	800fa34 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800fa2e:	2301      	movs	r3, #1
 800fa30:	75fb      	strb	r3, [r7, #23]
          break;
 800fa32:	e00c      	b.n	800fa4e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800fa34:	683b      	ldr	r3, [r7, #0]
 800fa36:	781b      	ldrb	r3, [r3, #0]
 800fa38:	015a      	lsls	r2, r3, #5
 800fa3a:	693b      	ldr	r3, [r7, #16]
 800fa3c:	4413      	add	r3, r2
 800fa3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fa48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fa4c:	d0e7      	beq.n	800fa1e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800fa4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa50:	4618      	mov	r0, r3
 800fa52:	371c      	adds	r7, #28
 800fa54:	46bd      	mov	sp, r7
 800fa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5a:	4770      	bx	lr

0800fa5c <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800fa5c:	b480      	push	{r7}
 800fa5e:	b089      	sub	sp, #36	@ 0x24
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	60f8      	str	r0, [r7, #12]
 800fa64:	60b9      	str	r1, [r7, #8]
 800fa66:	4611      	mov	r1, r2
 800fa68:	461a      	mov	r2, r3
 800fa6a:	460b      	mov	r3, r1
 800fa6c:	71fb      	strb	r3, [r7, #7]
 800fa6e:	4613      	mov	r3, r2
 800fa70:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800fa76:	68bb      	ldr	r3, [r7, #8]
 800fa78:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800fa7a:	88bb      	ldrh	r3, [r7, #4]
 800fa7c:	3303      	adds	r3, #3
 800fa7e:	089b      	lsrs	r3, r3, #2
 800fa80:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800fa82:	2300      	movs	r3, #0
 800fa84:	61bb      	str	r3, [r7, #24]
 800fa86:	e018      	b.n	800faba <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800fa88:	79fb      	ldrb	r3, [r7, #7]
 800fa8a:	031a      	lsls	r2, r3, #12
 800fa8c:	697b      	ldr	r3, [r7, #20]
 800fa8e:	4413      	add	r3, r2
 800fa90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fa94:	461a      	mov	r2, r3
 800fa96:	69fb      	ldr	r3, [r7, #28]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	6013      	str	r3, [r2, #0]
    pSrc++;
 800fa9c:	69fb      	ldr	r3, [r7, #28]
 800fa9e:	3301      	adds	r3, #1
 800faa0:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800faa2:	69fb      	ldr	r3, [r7, #28]
 800faa4:	3301      	adds	r3, #1
 800faa6:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800faa8:	69fb      	ldr	r3, [r7, #28]
 800faaa:	3301      	adds	r3, #1
 800faac:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800faae:	69fb      	ldr	r3, [r7, #28]
 800fab0:	3301      	adds	r3, #1
 800fab2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800fab4:	69bb      	ldr	r3, [r7, #24]
 800fab6:	3301      	adds	r3, #1
 800fab8:	61bb      	str	r3, [r7, #24]
 800faba:	69ba      	ldr	r2, [r7, #24]
 800fabc:	693b      	ldr	r3, [r7, #16]
 800fabe:	429a      	cmp	r2, r3
 800fac0:	d3e2      	bcc.n	800fa88 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800fac2:	2300      	movs	r3, #0
}
 800fac4:	4618      	mov	r0, r3
 800fac6:	3724      	adds	r7, #36	@ 0x24
 800fac8:	46bd      	mov	sp, r7
 800faca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800face:	4770      	bx	lr

0800fad0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800fad0:	b480      	push	{r7}
 800fad2:	b08b      	sub	sp, #44	@ 0x2c
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	60f8      	str	r0, [r7, #12]
 800fad8:	60b9      	str	r1, [r7, #8]
 800fada:	4613      	mov	r3, r2
 800fadc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800fae2:	68bb      	ldr	r3, [r7, #8]
 800fae4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800fae6:	88fb      	ldrh	r3, [r7, #6]
 800fae8:	089b      	lsrs	r3, r3, #2
 800faea:	b29b      	uxth	r3, r3
 800faec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800faee:	88fb      	ldrh	r3, [r7, #6]
 800faf0:	f003 0303 	and.w	r3, r3, #3
 800faf4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800faf6:	2300      	movs	r3, #0
 800faf8:	623b      	str	r3, [r7, #32]
 800fafa:	e014      	b.n	800fb26 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800fafc:	69bb      	ldr	r3, [r7, #24]
 800fafe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fb02:	681a      	ldr	r2, [r3, #0]
 800fb04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb06:	601a      	str	r2, [r3, #0]
    pDest++;
 800fb08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb0a:	3301      	adds	r3, #1
 800fb0c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800fb0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb10:	3301      	adds	r3, #1
 800fb12:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800fb14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb16:	3301      	adds	r3, #1
 800fb18:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800fb1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb1c:	3301      	adds	r3, #1
 800fb1e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800fb20:	6a3b      	ldr	r3, [r7, #32]
 800fb22:	3301      	adds	r3, #1
 800fb24:	623b      	str	r3, [r7, #32]
 800fb26:	6a3a      	ldr	r2, [r7, #32]
 800fb28:	697b      	ldr	r3, [r7, #20]
 800fb2a:	429a      	cmp	r2, r3
 800fb2c:	d3e6      	bcc.n	800fafc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800fb2e:	8bfb      	ldrh	r3, [r7, #30]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d01e      	beq.n	800fb72 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800fb34:	2300      	movs	r3, #0
 800fb36:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800fb38:	69bb      	ldr	r3, [r7, #24]
 800fb3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fb3e:	461a      	mov	r2, r3
 800fb40:	f107 0310 	add.w	r3, r7, #16
 800fb44:	6812      	ldr	r2, [r2, #0]
 800fb46:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800fb48:	693a      	ldr	r2, [r7, #16]
 800fb4a:	6a3b      	ldr	r3, [r7, #32]
 800fb4c:	b2db      	uxtb	r3, r3
 800fb4e:	00db      	lsls	r3, r3, #3
 800fb50:	fa22 f303 	lsr.w	r3, r2, r3
 800fb54:	b2da      	uxtb	r2, r3
 800fb56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb58:	701a      	strb	r2, [r3, #0]
      i++;
 800fb5a:	6a3b      	ldr	r3, [r7, #32]
 800fb5c:	3301      	adds	r3, #1
 800fb5e:	623b      	str	r3, [r7, #32]
      pDest++;
 800fb60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb62:	3301      	adds	r3, #1
 800fb64:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800fb66:	8bfb      	ldrh	r3, [r7, #30]
 800fb68:	3b01      	subs	r3, #1
 800fb6a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800fb6c:	8bfb      	ldrh	r3, [r7, #30]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d1ea      	bne.n	800fb48 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800fb72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800fb74:	4618      	mov	r0, r3
 800fb76:	372c      	adds	r7, #44	@ 0x2c
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7e:	4770      	bx	lr

0800fb80 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800fb80:	b480      	push	{r7}
 800fb82:	b085      	sub	sp, #20
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
 800fb88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fb8e:	683b      	ldr	r3, [r7, #0]
 800fb90:	781b      	ldrb	r3, [r3, #0]
 800fb92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fb94:	683b      	ldr	r3, [r7, #0]
 800fb96:	785b      	ldrb	r3, [r3, #1]
 800fb98:	2b01      	cmp	r3, #1
 800fb9a:	d12c      	bne.n	800fbf6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800fb9c:	68bb      	ldr	r3, [r7, #8]
 800fb9e:	015a      	lsls	r2, r3, #5
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	4413      	add	r3, r2
 800fba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	db12      	blt.n	800fbd4 <USB_EPSetStall+0x54>
 800fbae:	68bb      	ldr	r3, [r7, #8]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d00f      	beq.n	800fbd4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800fbb4:	68bb      	ldr	r3, [r7, #8]
 800fbb6:	015a      	lsls	r2, r3, #5
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	4413      	add	r3, r2
 800fbbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	68ba      	ldr	r2, [r7, #8]
 800fbc4:	0151      	lsls	r1, r2, #5
 800fbc6:	68fa      	ldr	r2, [r7, #12]
 800fbc8:	440a      	add	r2, r1
 800fbca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fbce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800fbd2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800fbd4:	68bb      	ldr	r3, [r7, #8]
 800fbd6:	015a      	lsls	r2, r3, #5
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	4413      	add	r3, r2
 800fbdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	68ba      	ldr	r2, [r7, #8]
 800fbe4:	0151      	lsls	r1, r2, #5
 800fbe6:	68fa      	ldr	r2, [r7, #12]
 800fbe8:	440a      	add	r2, r1
 800fbea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fbee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800fbf2:	6013      	str	r3, [r2, #0]
 800fbf4:	e02b      	b.n	800fc4e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800fbf6:	68bb      	ldr	r3, [r7, #8]
 800fbf8:	015a      	lsls	r2, r3, #5
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	4413      	add	r3, r2
 800fbfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	db12      	blt.n	800fc2e <USB_EPSetStall+0xae>
 800fc08:	68bb      	ldr	r3, [r7, #8]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d00f      	beq.n	800fc2e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800fc0e:	68bb      	ldr	r3, [r7, #8]
 800fc10:	015a      	lsls	r2, r3, #5
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	4413      	add	r3, r2
 800fc16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	68ba      	ldr	r2, [r7, #8]
 800fc1e:	0151      	lsls	r1, r2, #5
 800fc20:	68fa      	ldr	r2, [r7, #12]
 800fc22:	440a      	add	r2, r1
 800fc24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fc28:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800fc2c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800fc2e:	68bb      	ldr	r3, [r7, #8]
 800fc30:	015a      	lsls	r2, r3, #5
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	4413      	add	r3, r2
 800fc36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	68ba      	ldr	r2, [r7, #8]
 800fc3e:	0151      	lsls	r1, r2, #5
 800fc40:	68fa      	ldr	r2, [r7, #12]
 800fc42:	440a      	add	r2, r1
 800fc44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fc48:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800fc4c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fc4e:	2300      	movs	r3, #0
}
 800fc50:	4618      	mov	r0, r3
 800fc52:	3714      	adds	r7, #20
 800fc54:	46bd      	mov	sp, r7
 800fc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5a:	4770      	bx	lr

0800fc5c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800fc5c:	b480      	push	{r7}
 800fc5e:	b085      	sub	sp, #20
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
 800fc64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	781b      	ldrb	r3, [r3, #0]
 800fc6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fc70:	683b      	ldr	r3, [r7, #0]
 800fc72:	785b      	ldrb	r3, [r3, #1]
 800fc74:	2b01      	cmp	r3, #1
 800fc76:	d128      	bne.n	800fcca <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800fc78:	68bb      	ldr	r3, [r7, #8]
 800fc7a:	015a      	lsls	r2, r3, #5
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	4413      	add	r3, r2
 800fc80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	68ba      	ldr	r2, [r7, #8]
 800fc88:	0151      	lsls	r1, r2, #5
 800fc8a:	68fa      	ldr	r2, [r7, #12]
 800fc8c:	440a      	add	r2, r1
 800fc8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fc92:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800fc96:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	791b      	ldrb	r3, [r3, #4]
 800fc9c:	2b03      	cmp	r3, #3
 800fc9e:	d003      	beq.n	800fca8 <USB_EPClearStall+0x4c>
 800fca0:	683b      	ldr	r3, [r7, #0]
 800fca2:	791b      	ldrb	r3, [r3, #4]
 800fca4:	2b02      	cmp	r3, #2
 800fca6:	d138      	bne.n	800fd1a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fca8:	68bb      	ldr	r3, [r7, #8]
 800fcaa:	015a      	lsls	r2, r3, #5
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	4413      	add	r3, r2
 800fcb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	68ba      	ldr	r2, [r7, #8]
 800fcb8:	0151      	lsls	r1, r2, #5
 800fcba:	68fa      	ldr	r2, [r7, #12]
 800fcbc:	440a      	add	r2, r1
 800fcbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fcc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fcc6:	6013      	str	r3, [r2, #0]
 800fcc8:	e027      	b.n	800fd1a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800fcca:	68bb      	ldr	r3, [r7, #8]
 800fccc:	015a      	lsls	r2, r3, #5
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	4413      	add	r3, r2
 800fcd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	68ba      	ldr	r2, [r7, #8]
 800fcda:	0151      	lsls	r1, r2, #5
 800fcdc:	68fa      	ldr	r2, [r7, #12]
 800fcde:	440a      	add	r2, r1
 800fce0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fce4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800fce8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fcea:	683b      	ldr	r3, [r7, #0]
 800fcec:	791b      	ldrb	r3, [r3, #4]
 800fcee:	2b03      	cmp	r3, #3
 800fcf0:	d003      	beq.n	800fcfa <USB_EPClearStall+0x9e>
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	791b      	ldrb	r3, [r3, #4]
 800fcf6:	2b02      	cmp	r3, #2
 800fcf8:	d10f      	bne.n	800fd1a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fcfa:	68bb      	ldr	r3, [r7, #8]
 800fcfc:	015a      	lsls	r2, r3, #5
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	4413      	add	r3, r2
 800fd02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	68ba      	ldr	r2, [r7, #8]
 800fd0a:	0151      	lsls	r1, r2, #5
 800fd0c:	68fa      	ldr	r2, [r7, #12]
 800fd0e:	440a      	add	r2, r1
 800fd10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fd14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fd18:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800fd1a:	2300      	movs	r3, #0
}
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	3714      	adds	r7, #20
 800fd20:	46bd      	mov	sp, r7
 800fd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd26:	4770      	bx	lr

0800fd28 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800fd28:	b480      	push	{r7}
 800fd2a:	b085      	sub	sp, #20
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
 800fd30:	460b      	mov	r3, r1
 800fd32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	68fa      	ldr	r2, [r7, #12]
 800fd42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800fd46:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800fd4a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fd52:	681a      	ldr	r2, [r3, #0]
 800fd54:	78fb      	ldrb	r3, [r7, #3]
 800fd56:	011b      	lsls	r3, r3, #4
 800fd58:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800fd5c:	68f9      	ldr	r1, [r7, #12]
 800fd5e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fd62:	4313      	orrs	r3, r2
 800fd64:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800fd66:	2300      	movs	r3, #0
}
 800fd68:	4618      	mov	r0, r3
 800fd6a:	3714      	adds	r7, #20
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd72:	4770      	bx	lr

0800fd74 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800fd74:	b480      	push	{r7}
 800fd76:	b085      	sub	sp, #20
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	68fa      	ldr	r2, [r7, #12]
 800fd8a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800fd8e:	f023 0303 	bic.w	r3, r3, #3
 800fd92:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fd9a:	685b      	ldr	r3, [r3, #4]
 800fd9c:	68fa      	ldr	r2, [r7, #12]
 800fd9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800fda2:	f023 0302 	bic.w	r3, r3, #2
 800fda6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fda8:	2300      	movs	r3, #0
}
 800fdaa:	4618      	mov	r0, r3
 800fdac:	3714      	adds	r7, #20
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb4:	4770      	bx	lr

0800fdb6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800fdb6:	b480      	push	{r7}
 800fdb8:	b085      	sub	sp, #20
 800fdba:	af00      	add	r7, sp, #0
 800fdbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	68fa      	ldr	r2, [r7, #12]
 800fdcc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800fdd0:	f023 0303 	bic.w	r3, r3, #3
 800fdd4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fddc:	685b      	ldr	r3, [r3, #4]
 800fdde:	68fa      	ldr	r2, [r7, #12]
 800fde0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800fde4:	f043 0302 	orr.w	r3, r3, #2
 800fde8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fdea:	2300      	movs	r3, #0
}
 800fdec:	4618      	mov	r0, r3
 800fdee:	3714      	adds	r7, #20
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf6:	4770      	bx	lr

0800fdf8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800fdf8:	b480      	push	{r7}
 800fdfa:	b085      	sub	sp, #20
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	695b      	ldr	r3, [r3, #20]
 800fe04:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	699b      	ldr	r3, [r3, #24]
 800fe0a:	68fa      	ldr	r2, [r7, #12]
 800fe0c:	4013      	ands	r3, r2
 800fe0e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800fe10:	68fb      	ldr	r3, [r7, #12]
}
 800fe12:	4618      	mov	r0, r3
 800fe14:	3714      	adds	r7, #20
 800fe16:	46bd      	mov	sp, r7
 800fe18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1c:	4770      	bx	lr

0800fe1e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800fe1e:	b480      	push	{r7}
 800fe20:	b085      	sub	sp, #20
 800fe22:	af00      	add	r7, sp, #0
 800fe24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fe30:	699b      	ldr	r3, [r3, #24]
 800fe32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fe3a:	69db      	ldr	r3, [r3, #28]
 800fe3c:	68ba      	ldr	r2, [r7, #8]
 800fe3e:	4013      	ands	r3, r2
 800fe40:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800fe42:	68bb      	ldr	r3, [r7, #8]
 800fe44:	0c1b      	lsrs	r3, r3, #16
}
 800fe46:	4618      	mov	r0, r3
 800fe48:	3714      	adds	r7, #20
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe50:	4770      	bx	lr

0800fe52 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800fe52:	b480      	push	{r7}
 800fe54:	b085      	sub	sp, #20
 800fe56:	af00      	add	r7, sp, #0
 800fe58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fe64:	699b      	ldr	r3, [r3, #24]
 800fe66:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fe6e:	69db      	ldr	r3, [r3, #28]
 800fe70:	68ba      	ldr	r2, [r7, #8]
 800fe72:	4013      	ands	r3, r2
 800fe74:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800fe76:	68bb      	ldr	r3, [r7, #8]
 800fe78:	b29b      	uxth	r3, r3
}
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	3714      	adds	r7, #20
 800fe7e:	46bd      	mov	sp, r7
 800fe80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe84:	4770      	bx	lr

0800fe86 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fe86:	b480      	push	{r7}
 800fe88:	b085      	sub	sp, #20
 800fe8a:	af00      	add	r7, sp, #0
 800fe8c:	6078      	str	r0, [r7, #4]
 800fe8e:	460b      	mov	r3, r1
 800fe90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800fe96:	78fb      	ldrb	r3, [r7, #3]
 800fe98:	015a      	lsls	r2, r3, #5
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	4413      	add	r3, r2
 800fe9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fea2:	689b      	ldr	r3, [r3, #8]
 800fea4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800feac:	695b      	ldr	r3, [r3, #20]
 800feae:	68ba      	ldr	r2, [r7, #8]
 800feb0:	4013      	ands	r3, r2
 800feb2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800feb4:	68bb      	ldr	r3, [r7, #8]
}
 800feb6:	4618      	mov	r0, r3
 800feb8:	3714      	adds	r7, #20
 800feba:	46bd      	mov	sp, r7
 800febc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec0:	4770      	bx	lr

0800fec2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fec2:	b480      	push	{r7}
 800fec4:	b087      	sub	sp, #28
 800fec6:	af00      	add	r7, sp, #0
 800fec8:	6078      	str	r0, [r7, #4]
 800feca:	460b      	mov	r3, r1
 800fecc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800fed2:	697b      	ldr	r3, [r7, #20]
 800fed4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fed8:	691b      	ldr	r3, [r3, #16]
 800feda:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800fedc:	697b      	ldr	r3, [r7, #20]
 800fede:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fee4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800fee6:	78fb      	ldrb	r3, [r7, #3]
 800fee8:	f003 030f 	and.w	r3, r3, #15
 800feec:	68fa      	ldr	r2, [r7, #12]
 800feee:	fa22 f303 	lsr.w	r3, r2, r3
 800fef2:	01db      	lsls	r3, r3, #7
 800fef4:	b2db      	uxtb	r3, r3
 800fef6:	693a      	ldr	r2, [r7, #16]
 800fef8:	4313      	orrs	r3, r2
 800fefa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800fefc:	78fb      	ldrb	r3, [r7, #3]
 800fefe:	015a      	lsls	r2, r3, #5
 800ff00:	697b      	ldr	r3, [r7, #20]
 800ff02:	4413      	add	r3, r2
 800ff04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ff08:	689b      	ldr	r3, [r3, #8]
 800ff0a:	693a      	ldr	r2, [r7, #16]
 800ff0c:	4013      	ands	r3, r2
 800ff0e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ff10:	68bb      	ldr	r3, [r7, #8]
}
 800ff12:	4618      	mov	r0, r3
 800ff14:	371c      	adds	r7, #28
 800ff16:	46bd      	mov	sp, r7
 800ff18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1c:	4770      	bx	lr

0800ff1e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ff1e:	b480      	push	{r7}
 800ff20:	b083      	sub	sp, #12
 800ff22:	af00      	add	r7, sp, #0
 800ff24:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	695b      	ldr	r3, [r3, #20]
 800ff2a:	f003 0301 	and.w	r3, r3, #1
}
 800ff2e:	4618      	mov	r0, r3
 800ff30:	370c      	adds	r7, #12
 800ff32:	46bd      	mov	sp, r7
 800ff34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff38:	4770      	bx	lr

0800ff3a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800ff3a:	b480      	push	{r7}
 800ff3c:	b085      	sub	sp, #20
 800ff3e:	af00      	add	r7, sp, #0
 800ff40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	68fa      	ldr	r2, [r7, #12]
 800ff50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ff54:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800ff58:	f023 0307 	bic.w	r3, r3, #7
 800ff5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ff64:	685b      	ldr	r3, [r3, #4]
 800ff66:	68fa      	ldr	r2, [r7, #12]
 800ff68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ff6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ff70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ff72:	2300      	movs	r3, #0
}
 800ff74:	4618      	mov	r0, r3
 800ff76:	3714      	adds	r7, #20
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7e:	4770      	bx	lr

0800ff80 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, const uint8_t *psetup)
{
 800ff80:	b480      	push	{r7}
 800ff82:	b085      	sub	sp, #20
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
 800ff88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	333c      	adds	r3, #60	@ 0x3c
 800ff92:	3304      	adds	r3, #4
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ff98:	68bb      	ldr	r3, [r7, #8]
 800ff9a:	4a1c      	ldr	r2, [pc, #112]	@ (801000c <USB_EP0_OutStart+0x8c>)
 800ff9c:	4293      	cmp	r3, r2
 800ff9e:	d90a      	bls.n	800ffb6 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ffac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ffb0:	d101      	bne.n	800ffb6 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	e024      	b.n	8010000 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ffbc:	461a      	mov	r2, r3
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ffc8:	691b      	ldr	r3, [r3, #16]
 800ffca:	68fa      	ldr	r2, [r7, #12]
 800ffcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ffd0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ffd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ffdc:	691b      	ldr	r3, [r3, #16]
 800ffde:	68fa      	ldr	r2, [r7, #12]
 800ffe0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ffe4:	f043 0318 	orr.w	r3, r3, #24
 800ffe8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fff0:	691b      	ldr	r3, [r3, #16]
 800fff2:	68fa      	ldr	r2, [r7, #12]
 800fff4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fff8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800fffc:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800fffe:	2300      	movs	r3, #0
}
 8010000:	4618      	mov	r0, r3
 8010002:	3714      	adds	r7, #20
 8010004:	46bd      	mov	sp, r7
 8010006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000a:	4770      	bx	lr
 801000c:	4f54300a 	.word	0x4f54300a

08010010 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010010:	b480      	push	{r7}
 8010012:	b085      	sub	sp, #20
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010018:	2300      	movs	r3, #0
 801001a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	3301      	adds	r3, #1
 8010020:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010028:	d901      	bls.n	801002e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801002a:	2303      	movs	r3, #3
 801002c:	e01b      	b.n	8010066 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	691b      	ldr	r3, [r3, #16]
 8010032:	2b00      	cmp	r3, #0
 8010034:	daf2      	bge.n	801001c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010036:	2300      	movs	r3, #0
 8010038:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	691b      	ldr	r3, [r3, #16]
 801003e:	f043 0201 	orr.w	r2, r3, #1
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	3301      	adds	r3, #1
 801004a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010052:	d901      	bls.n	8010058 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010054:	2303      	movs	r3, #3
 8010056:	e006      	b.n	8010066 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	691b      	ldr	r3, [r3, #16]
 801005c:	f003 0301 	and.w	r3, r3, #1
 8010060:	2b01      	cmp	r3, #1
 8010062:	d0f0      	beq.n	8010046 <USB_CoreReset+0x36>

  return HAL_OK;
 8010064:	2300      	movs	r3, #0
}
 8010066:	4618      	mov	r0, r3
 8010068:	3714      	adds	r7, #20
 801006a:	46bd      	mov	sp, r7
 801006c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010070:	4770      	bx	lr
	...

08010074 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010074:	b580      	push	{r7, lr}
 8010076:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010078:	4904      	ldr	r1, [pc, #16]	@ (801008c <MX_FATFS_Init+0x18>)
 801007a:	4805      	ldr	r0, [pc, #20]	@ (8010090 <MX_FATFS_Init+0x1c>)
 801007c:	f005 fb4a 	bl	8015714 <FATFS_LinkDriver>
 8010080:	4603      	mov	r3, r0
 8010082:	461a      	mov	r2, r3
 8010084:	4b03      	ldr	r3, [pc, #12]	@ (8010094 <MX_FATFS_Init+0x20>)
 8010086:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010088:	bf00      	nop
 801008a:	bd80      	pop	{r7, pc}
 801008c:	20003210 	.word	0x20003210
 8010090:	0801f2c0 	.word	0x0801f2c0
 8010094:	2000320c 	.word	0x2000320c

08010098 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8010098:	b480      	push	{r7}
 801009a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801009c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801009e:	4618      	mov	r0, r3
 80100a0:	46bd      	mov	sp, r7
 80100a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a6:	4770      	bx	lr

080100a8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b082      	sub	sp, #8
 80100ac:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80100ae:	2300      	movs	r3, #0
 80100b0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80100b2:	f000 f87b 	bl	80101ac <BSP_SD_IsDetected>
 80100b6:	4603      	mov	r3, r0
 80100b8:	2b01      	cmp	r3, #1
 80100ba:	d001      	beq.n	80100c0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80100bc:	2302      	movs	r3, #2
 80100be:	e012      	b.n	80100e6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80100c0:	480b      	ldr	r0, [pc, #44]	@ (80100f0 <BSP_SD_Init+0x48>)
 80100c2:	f7fb f9ef 	bl	800b4a4 <HAL_SD_Init>
 80100c6:	4603      	mov	r3, r0
 80100c8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80100ca:	79fb      	ldrb	r3, [r7, #7]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d109      	bne.n	80100e4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80100d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80100d4:	4806      	ldr	r0, [pc, #24]	@ (80100f0 <BSP_SD_Init+0x48>)
 80100d6:	f7fb fe35 	bl	800bd44 <HAL_SD_ConfigWideBusOperation>
 80100da:	4603      	mov	r3, r0
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d001      	beq.n	80100e4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80100e0:	2301      	movs	r3, #1
 80100e2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80100e4:	79fb      	ldrb	r3, [r7, #7]
}
 80100e6:	4618      	mov	r0, r3
 80100e8:	3708      	adds	r7, #8
 80100ea:	46bd      	mov	sp, r7
 80100ec:	bd80      	pop	{r7, pc}
 80100ee:	bf00      	nop
 80100f0:	20002e88 	.word	0x20002e88

080100f4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b086      	sub	sp, #24
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	60f8      	str	r0, [r7, #12]
 80100fc:	60b9      	str	r1, [r7, #8]
 80100fe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010100:	2300      	movs	r3, #0
 8010102:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	68ba      	ldr	r2, [r7, #8]
 8010108:	68f9      	ldr	r1, [r7, #12]
 801010a:	4806      	ldr	r0, [pc, #24]	@ (8010124 <BSP_SD_ReadBlocks_DMA+0x30>)
 801010c:	f7fb faac 	bl	800b668 <HAL_SD_ReadBlocks_DMA>
 8010110:	4603      	mov	r3, r0
 8010112:	2b00      	cmp	r3, #0
 8010114:	d001      	beq.n	801011a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010116:	2301      	movs	r3, #1
 8010118:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801011a:	7dfb      	ldrb	r3, [r7, #23]
}
 801011c:	4618      	mov	r0, r3
 801011e:	3718      	adds	r7, #24
 8010120:	46bd      	mov	sp, r7
 8010122:	bd80      	pop	{r7, pc}
 8010124:	20002e88 	.word	0x20002e88

08010128 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b086      	sub	sp, #24
 801012c:	af00      	add	r7, sp, #0
 801012e:	60f8      	str	r0, [r7, #12]
 8010130:	60b9      	str	r1, [r7, #8]
 8010132:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010134:	2300      	movs	r3, #0
 8010136:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	68ba      	ldr	r2, [r7, #8]
 801013c:	68f9      	ldr	r1, [r7, #12]
 801013e:	4806      	ldr	r0, [pc, #24]	@ (8010158 <BSP_SD_WriteBlocks_DMA+0x30>)
 8010140:	f7fb fb5a 	bl	800b7f8 <HAL_SD_WriteBlocks_DMA>
 8010144:	4603      	mov	r3, r0
 8010146:	2b00      	cmp	r3, #0
 8010148:	d001      	beq.n	801014e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801014a:	2301      	movs	r3, #1
 801014c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801014e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010150:	4618      	mov	r0, r3
 8010152:	3718      	adds	r7, #24
 8010154:	46bd      	mov	sp, r7
 8010156:	bd80      	pop	{r7, pc}
 8010158:	20002e88 	.word	0x20002e88

0801015c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 801015c:	b580      	push	{r7, lr}
 801015e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010160:	4805      	ldr	r0, [pc, #20]	@ (8010178 <BSP_SD_GetCardState+0x1c>)
 8010162:	f7fb feab 	bl	800bebc <HAL_SD_GetCardState>
 8010166:	4603      	mov	r3, r0
 8010168:	2b04      	cmp	r3, #4
 801016a:	bf14      	ite	ne
 801016c:	2301      	movne	r3, #1
 801016e:	2300      	moveq	r3, #0
 8010170:	b2db      	uxtb	r3, r3
}
 8010172:	4618      	mov	r0, r3
 8010174:	bd80      	pop	{r7, pc}
 8010176:	bf00      	nop
 8010178:	20002e88 	.word	0x20002e88

0801017c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 801017c:	b580      	push	{r7, lr}
 801017e:	b082      	sub	sp, #8
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8010184:	6879      	ldr	r1, [r7, #4]
 8010186:	4803      	ldr	r0, [pc, #12]	@ (8010194 <BSP_SD_GetCardInfo+0x18>)
 8010188:	f7fb fdb0 	bl	800bcec <HAL_SD_GetCardInfo>
}
 801018c:	bf00      	nop
 801018e:	3708      	adds	r7, #8
 8010190:	46bd      	mov	sp, r7
 8010192:	bd80      	pop	{r7, pc}
 8010194:	20002e88 	.word	0x20002e88

08010198 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010198:	b580      	push	{r7, lr}
 801019a:	b082      	sub	sp, #8
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80101a0:	f000 f9a2 	bl	80104e8 <BSP_SD_ReadCpltCallback>
}
 80101a4:	bf00      	nop
 80101a6:	3708      	adds	r7, #8
 80101a8:	46bd      	mov	sp, r7
 80101aa:	bd80      	pop	{r7, pc}

080101ac <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b082      	sub	sp, #8
 80101b0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80101b2:	2301      	movs	r3, #1
 80101b4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80101b6:	f000 f80b 	bl	80101d0 <BSP_PlatformIsDetected>
 80101ba:	4603      	mov	r3, r0
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d101      	bne.n	80101c4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80101c0:	2300      	movs	r3, #0
 80101c2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80101c4:	79fb      	ldrb	r3, [r7, #7]
 80101c6:	b2db      	uxtb	r3, r3
}
 80101c8:	4618      	mov	r0, r3
 80101ca:	3708      	adds	r7, #8
 80101cc:	46bd      	mov	sp, r7
 80101ce:	bd80      	pop	{r7, pc}

080101d0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b082      	sub	sp, #8
 80101d4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80101d6:	2301      	movs	r3, #1
 80101d8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80101da:	2180      	movs	r1, #128	@ 0x80
 80101dc:	4806      	ldr	r0, [pc, #24]	@ (80101f8 <BSP_PlatformIsDetected+0x28>)
 80101de:	f7f6 fee3 	bl	8006fa8 <HAL_GPIO_ReadPin>
 80101e2:	4603      	mov	r3, r0
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d001      	beq.n	80101ec <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80101e8:	2300      	movs	r3, #0
 80101ea:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80101ec:	79fb      	ldrb	r3, [r7, #7]
}
 80101ee:	4618      	mov	r0, r3
 80101f0:	3708      	adds	r7, #8
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bd80      	pop	{r7, pc}
 80101f6:	bf00      	nop
 80101f8:	48000800 	.word	0x48000800

080101fc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b084      	sub	sp, #16
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8010204:	f005 fc54 	bl	8015ab0 <osKernelGetTickCount>
 8010208:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 801020a:	e006      	b.n	801021a <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801020c:	f7ff ffa6 	bl	801015c <BSP_SD_GetCardState>
 8010210:	4603      	mov	r3, r0
 8010212:	2b00      	cmp	r3, #0
 8010214:	d101      	bne.n	801021a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8010216:	2300      	movs	r3, #0
 8010218:	e009      	b.n	801022e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 801021a:	f005 fc49 	bl	8015ab0 <osKernelGetTickCount>
 801021e:	4602      	mov	r2, r0
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	1ad3      	subs	r3, r2, r3
 8010224:	687a      	ldr	r2, [r7, #4]
 8010226:	429a      	cmp	r2, r3
 8010228:	d8f0      	bhi.n	801020c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801022a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801022e:	4618      	mov	r0, r3
 8010230:	3710      	adds	r7, #16
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}
	...

08010238 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b082      	sub	sp, #8
 801023c:	af00      	add	r7, sp, #0
 801023e:	4603      	mov	r3, r0
 8010240:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010242:	4b0b      	ldr	r3, [pc, #44]	@ (8010270 <SD_CheckStatus+0x38>)
 8010244:	2201      	movs	r2, #1
 8010246:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010248:	f7ff ff88 	bl	801015c <BSP_SD_GetCardState>
 801024c:	4603      	mov	r3, r0
 801024e:	2b00      	cmp	r3, #0
 8010250:	d107      	bne.n	8010262 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010252:	4b07      	ldr	r3, [pc, #28]	@ (8010270 <SD_CheckStatus+0x38>)
 8010254:	781b      	ldrb	r3, [r3, #0]
 8010256:	b2db      	uxtb	r3, r3
 8010258:	f023 0301 	bic.w	r3, r3, #1
 801025c:	b2da      	uxtb	r2, r3
 801025e:	4b04      	ldr	r3, [pc, #16]	@ (8010270 <SD_CheckStatus+0x38>)
 8010260:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010262:	4b03      	ldr	r3, [pc, #12]	@ (8010270 <SD_CheckStatus+0x38>)
 8010264:	781b      	ldrb	r3, [r3, #0]
 8010266:	b2db      	uxtb	r3, r3
}
 8010268:	4618      	mov	r0, r3
 801026a:	3708      	adds	r7, #8
 801026c:	46bd      	mov	sp, r7
 801026e:	bd80      	pop	{r7, pc}
 8010270:	20000009 	.word	0x20000009

08010274 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010274:	b580      	push	{r7, lr}
 8010276:	b082      	sub	sp, #8
 8010278:	af00      	add	r7, sp, #0
 801027a:	4603      	mov	r3, r0
 801027c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 801027e:	4b1c      	ldr	r3, [pc, #112]	@ (80102f0 <SD_initialize+0x7c>)
 8010280:	2201      	movs	r2, #1
 8010282:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8010284:	f005 fbcc 	bl	8015a20 <osKernelGetState>
 8010288:	4603      	mov	r3, r0
 801028a:	2b02      	cmp	r3, #2
 801028c:	d129      	bne.n	80102e2 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 801028e:	f7ff ff0b 	bl	80100a8 <BSP_SD_Init>
 8010292:	4603      	mov	r3, r0
 8010294:	2b00      	cmp	r3, #0
 8010296:	d107      	bne.n	80102a8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8010298:	79fb      	ldrb	r3, [r7, #7]
 801029a:	4618      	mov	r0, r3
 801029c:	f7ff ffcc 	bl	8010238 <SD_CheckStatus>
 80102a0:	4603      	mov	r3, r0
 80102a2:	461a      	mov	r2, r3
 80102a4:	4b12      	ldr	r3, [pc, #72]	@ (80102f0 <SD_initialize+0x7c>)
 80102a6:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 80102a8:	4b11      	ldr	r3, [pc, #68]	@ (80102f0 <SD_initialize+0x7c>)
 80102aa:	781b      	ldrb	r3, [r3, #0]
 80102ac:	b2db      	uxtb	r3, r3
 80102ae:	2b01      	cmp	r3, #1
 80102b0:	d017      	beq.n	80102e2 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 80102b2:	4b10      	ldr	r3, [pc, #64]	@ (80102f4 <SD_initialize+0x80>)
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d107      	bne.n	80102ca <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 80102ba:	2200      	movs	r2, #0
 80102bc:	2102      	movs	r1, #2
 80102be:	200a      	movs	r0, #10
 80102c0:	f005 ff0a 	bl	80160d8 <osMessageQueueNew>
 80102c4:	4603      	mov	r3, r0
 80102c6:	4a0b      	ldr	r2, [pc, #44]	@ (80102f4 <SD_initialize+0x80>)
 80102c8:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 80102ca:	4b0a      	ldr	r3, [pc, #40]	@ (80102f4 <SD_initialize+0x80>)
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d107      	bne.n	80102e2 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 80102d2:	4b07      	ldr	r3, [pc, #28]	@ (80102f0 <SD_initialize+0x7c>)
 80102d4:	781b      	ldrb	r3, [r3, #0]
 80102d6:	b2db      	uxtb	r3, r3
 80102d8:	f043 0301 	orr.w	r3, r3, #1
 80102dc:	b2da      	uxtb	r2, r3
 80102de:	4b04      	ldr	r3, [pc, #16]	@ (80102f0 <SD_initialize+0x7c>)
 80102e0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80102e2:	4b03      	ldr	r3, [pc, #12]	@ (80102f0 <SD_initialize+0x7c>)
 80102e4:	781b      	ldrb	r3, [r3, #0]
 80102e6:	b2db      	uxtb	r3, r3
}
 80102e8:	4618      	mov	r0, r3
 80102ea:	3708      	adds	r7, #8
 80102ec:	46bd      	mov	sp, r7
 80102ee:	bd80      	pop	{r7, pc}
 80102f0:	20000009 	.word	0x20000009
 80102f4:	2000367c 	.word	0x2000367c

080102f8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b082      	sub	sp, #8
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	4603      	mov	r3, r0
 8010300:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010302:	79fb      	ldrb	r3, [r7, #7]
 8010304:	4618      	mov	r0, r3
 8010306:	f7ff ff97 	bl	8010238 <SD_CheckStatus>
 801030a:	4603      	mov	r3, r0
}
 801030c:	4618      	mov	r0, r3
 801030e:	3708      	adds	r7, #8
 8010310:	46bd      	mov	sp, r7
 8010312:	bd80      	pop	{r7, pc}

08010314 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b088      	sub	sp, #32
 8010318:	af00      	add	r7, sp, #0
 801031a:	60b9      	str	r1, [r7, #8]
 801031c:	607a      	str	r2, [r7, #4]
 801031e:	603b      	str	r3, [r7, #0]
 8010320:	4603      	mov	r3, r0
 8010322:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8010324:	2301      	movs	r3, #1
 8010326:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010328:	f247 5030 	movw	r0, #30000	@ 0x7530
 801032c:	f7ff ff66 	bl	80101fc <SD_CheckStatusWithTimeout>
 8010330:	4603      	mov	r3, r0
 8010332:	2b00      	cmp	r3, #0
 8010334:	da01      	bge.n	801033a <SD_read+0x26>
  {
    return res;
 8010336:	7ffb      	ldrb	r3, [r7, #31]
 8010338:	e02f      	b.n	801039a <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 801033a:	683a      	ldr	r2, [r7, #0]
 801033c:	6879      	ldr	r1, [r7, #4]
 801033e:	68b8      	ldr	r0, [r7, #8]
 8010340:	f7ff fed8 	bl	80100f4 <BSP_SD_ReadBlocks_DMA>
 8010344:	4603      	mov	r3, r0
 8010346:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8010348:	7fbb      	ldrb	r3, [r7, #30]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d124      	bne.n	8010398 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 801034e:	4b15      	ldr	r3, [pc, #84]	@ (80103a4 <SD_read+0x90>)
 8010350:	6818      	ldr	r0, [r3, #0]
 8010352:	f107 0112 	add.w	r1, r7, #18
 8010356:	f247 5330 	movw	r3, #30000	@ 0x7530
 801035a:	2200      	movs	r2, #0
 801035c:	f005 ff90 	bl	8016280 <osMessageQueueGet>
 8010360:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8010362:	69bb      	ldr	r3, [r7, #24]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d117      	bne.n	8010398 <SD_read+0x84>
 8010368:	8a7b      	ldrh	r3, [r7, #18]
 801036a:	2b01      	cmp	r3, #1
 801036c:	d114      	bne.n	8010398 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 801036e:	f005 fb9f 	bl	8015ab0 <osKernelGetTickCount>
 8010372:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8010374:	e007      	b.n	8010386 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010376:	f7ff fef1 	bl	801015c <BSP_SD_GetCardState>
 801037a:	4603      	mov	r3, r0
 801037c:	2b00      	cmp	r3, #0
 801037e:	d102      	bne.n	8010386 <SD_read+0x72>
              {
                res = RES_OK;
 8010380:	2300      	movs	r3, #0
 8010382:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8010384:	e008      	b.n	8010398 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8010386:	f005 fb93 	bl	8015ab0 <osKernelGetTickCount>
 801038a:	4602      	mov	r2, r0
 801038c:	697b      	ldr	r3, [r7, #20]
 801038e:	1ad3      	subs	r3, r2, r3
 8010390:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010394:	4293      	cmp	r3, r2
 8010396:	d9ee      	bls.n	8010376 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8010398:	7ffb      	ldrb	r3, [r7, #31]
}
 801039a:	4618      	mov	r0, r3
 801039c:	3720      	adds	r7, #32
 801039e:	46bd      	mov	sp, r7
 80103a0:	bd80      	pop	{r7, pc}
 80103a2:	bf00      	nop
 80103a4:	2000367c 	.word	0x2000367c

080103a8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b088      	sub	sp, #32
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	60b9      	str	r1, [r7, #8]
 80103b0:	607a      	str	r2, [r7, #4]
 80103b2:	603b      	str	r3, [r7, #0]
 80103b4:	4603      	mov	r3, r0
 80103b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80103b8:	2301      	movs	r3, #1
 80103ba:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80103bc:	f247 5030 	movw	r0, #30000	@ 0x7530
 80103c0:	f7ff ff1c 	bl	80101fc <SD_CheckStatusWithTimeout>
 80103c4:	4603      	mov	r3, r0
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	da01      	bge.n	80103ce <SD_write+0x26>
  {
    return res;
 80103ca:	7ffb      	ldrb	r3, [r7, #31]
 80103cc:	e02d      	b.n	801042a <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80103ce:	683a      	ldr	r2, [r7, #0]
 80103d0:	6879      	ldr	r1, [r7, #4]
 80103d2:	68b8      	ldr	r0, [r7, #8]
 80103d4:	f7ff fea8 	bl	8010128 <BSP_SD_WriteBlocks_DMA>
 80103d8:	4603      	mov	r3, r0
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d124      	bne.n	8010428 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80103de:	4b15      	ldr	r3, [pc, #84]	@ (8010434 <SD_write+0x8c>)
 80103e0:	6818      	ldr	r0, [r3, #0]
 80103e2:	f107 0112 	add.w	r1, r7, #18
 80103e6:	f247 5330 	movw	r3, #30000	@ 0x7530
 80103ea:	2200      	movs	r2, #0
 80103ec:	f005 ff48 	bl	8016280 <osMessageQueueGet>
 80103f0:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 80103f2:	69bb      	ldr	r3, [r7, #24]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d117      	bne.n	8010428 <SD_write+0x80>
 80103f8:	8a7b      	ldrh	r3, [r7, #18]
 80103fa:	2b02      	cmp	r3, #2
 80103fc:	d114      	bne.n	8010428 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 80103fe:	f005 fb57 	bl	8015ab0 <osKernelGetTickCount>
 8010402:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8010404:	e007      	b.n	8010416 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010406:	f7ff fea9 	bl	801015c <BSP_SD_GetCardState>
 801040a:	4603      	mov	r3, r0
 801040c:	2b00      	cmp	r3, #0
 801040e:	d102      	bne.n	8010416 <SD_write+0x6e>
          {
            res = RES_OK;
 8010410:	2300      	movs	r3, #0
 8010412:	77fb      	strb	r3, [r7, #31]
            break;
 8010414:	e008      	b.n	8010428 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8010416:	f005 fb4b 	bl	8015ab0 <osKernelGetTickCount>
 801041a:	4602      	mov	r2, r0
 801041c:	697b      	ldr	r3, [r7, #20]
 801041e:	1ad3      	subs	r3, r2, r3
 8010420:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010424:	4293      	cmp	r3, r2
 8010426:	d9ee      	bls.n	8010406 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8010428:	7ffb      	ldrb	r3, [r7, #31]
}
 801042a:	4618      	mov	r0, r3
 801042c:	3720      	adds	r7, #32
 801042e:	46bd      	mov	sp, r7
 8010430:	bd80      	pop	{r7, pc}
 8010432:	bf00      	nop
 8010434:	2000367c 	.word	0x2000367c

08010438 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b08c      	sub	sp, #48	@ 0x30
 801043c:	af00      	add	r7, sp, #0
 801043e:	4603      	mov	r3, r0
 8010440:	603a      	str	r2, [r7, #0]
 8010442:	71fb      	strb	r3, [r7, #7]
 8010444:	460b      	mov	r3, r1
 8010446:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010448:	2301      	movs	r3, #1
 801044a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801044e:	4b25      	ldr	r3, [pc, #148]	@ (80104e4 <SD_ioctl+0xac>)
 8010450:	781b      	ldrb	r3, [r3, #0]
 8010452:	b2db      	uxtb	r3, r3
 8010454:	f003 0301 	and.w	r3, r3, #1
 8010458:	2b00      	cmp	r3, #0
 801045a:	d001      	beq.n	8010460 <SD_ioctl+0x28>
 801045c:	2303      	movs	r3, #3
 801045e:	e03c      	b.n	80104da <SD_ioctl+0xa2>

  switch (cmd)
 8010460:	79bb      	ldrb	r3, [r7, #6]
 8010462:	2b03      	cmp	r3, #3
 8010464:	d834      	bhi.n	80104d0 <SD_ioctl+0x98>
 8010466:	a201      	add	r2, pc, #4	@ (adr r2, 801046c <SD_ioctl+0x34>)
 8010468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801046c:	0801047d 	.word	0x0801047d
 8010470:	08010485 	.word	0x08010485
 8010474:	0801049d 	.word	0x0801049d
 8010478:	080104b7 	.word	0x080104b7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801047c:	2300      	movs	r3, #0
 801047e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010482:	e028      	b.n	80104d6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010484:	f107 030c 	add.w	r3, r7, #12
 8010488:	4618      	mov	r0, r3
 801048a:	f7ff fe77 	bl	801017c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801048e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010490:	683b      	ldr	r3, [r7, #0]
 8010492:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010494:	2300      	movs	r3, #0
 8010496:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801049a:	e01c      	b.n	80104d6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801049c:	f107 030c 	add.w	r3, r7, #12
 80104a0:	4618      	mov	r0, r3
 80104a2:	f7ff fe6b 	bl	801017c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80104a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104a8:	b29a      	uxth	r2, r3
 80104aa:	683b      	ldr	r3, [r7, #0]
 80104ac:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80104ae:	2300      	movs	r3, #0
 80104b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80104b4:	e00f      	b.n	80104d6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80104b6:	f107 030c 	add.w	r3, r7, #12
 80104ba:	4618      	mov	r0, r3
 80104bc:	f7ff fe5e 	bl	801017c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80104c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104c2:	0a5a      	lsrs	r2, r3, #9
 80104c4:	683b      	ldr	r3, [r7, #0]
 80104c6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80104c8:	2300      	movs	r3, #0
 80104ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80104ce:	e002      	b.n	80104d6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80104d0:	2304      	movs	r3, #4
 80104d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80104d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80104da:	4618      	mov	r0, r3
 80104dc:	3730      	adds	r7, #48	@ 0x30
 80104de:	46bd      	mov	sp, r7
 80104e0:	bd80      	pop	{r7, pc}
 80104e2:	bf00      	nop
 80104e4:	20000009 	.word	0x20000009

080104e8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b082      	sub	sp, #8
 80104ec:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 80104ee:	2301      	movs	r3, #1
 80104f0:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 80104f2:	4b05      	ldr	r3, [pc, #20]	@ (8010508 <BSP_SD_ReadCpltCallback+0x20>)
 80104f4:	6818      	ldr	r0, [r3, #0]
 80104f6:	1db9      	adds	r1, r7, #6
 80104f8:	2300      	movs	r3, #0
 80104fa:	2200      	movs	r2, #0
 80104fc:	f005 fe60 	bl	80161c0 <osMessageQueuePut>
#endif
}
 8010500:	bf00      	nop
 8010502:	3708      	adds	r7, #8
 8010504:	46bd      	mov	sp, r7
 8010506:	bd80      	pop	{r7, pc}
 8010508:	2000367c 	.word	0x2000367c

0801050c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801050c:	b580      	push	{r7, lr}
 801050e:	b084      	sub	sp, #16
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
 8010514:	460b      	mov	r3, r1
 8010516:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010518:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 801051c:	f009 fec0 	bl	801a2a0 <USBD_static_malloc>
 8010520:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d109      	bne.n	801053c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	32b0      	adds	r2, #176	@ 0xb0
 8010532:	2100      	movs	r1, #0
 8010534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8010538:	2302      	movs	r3, #2
 801053a:	e0d4      	b.n	80106e6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 801053c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8010540:	2100      	movs	r1, #0
 8010542:	68f8      	ldr	r0, [r7, #12]
 8010544:	f00a fed6 	bl	801b2f4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	32b0      	adds	r2, #176	@ 0xb0
 8010552:	68f9      	ldr	r1, [r7, #12]
 8010554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	32b0      	adds	r2, #176	@ 0xb0
 8010562:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	7c1b      	ldrb	r3, [r3, #16]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d138      	bne.n	80105e6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8010574:	4b5e      	ldr	r3, [pc, #376]	@ (80106f0 <USBD_CDC_Init+0x1e4>)
 8010576:	7819      	ldrb	r1, [r3, #0]
 8010578:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801057c:	2202      	movs	r2, #2
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f009 fc7a 	bl	8019e78 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010584:	4b5a      	ldr	r3, [pc, #360]	@ (80106f0 <USBD_CDC_Init+0x1e4>)
 8010586:	781b      	ldrb	r3, [r3, #0]
 8010588:	f003 020f 	and.w	r2, r3, #15
 801058c:	6879      	ldr	r1, [r7, #4]
 801058e:	4613      	mov	r3, r2
 8010590:	009b      	lsls	r3, r3, #2
 8010592:	4413      	add	r3, r2
 8010594:	009b      	lsls	r3, r3, #2
 8010596:	440b      	add	r3, r1
 8010598:	3324      	adds	r3, #36	@ 0x24
 801059a:	2201      	movs	r2, #1
 801059c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801059e:	4b55      	ldr	r3, [pc, #340]	@ (80106f4 <USBD_CDC_Init+0x1e8>)
 80105a0:	7819      	ldrb	r1, [r3, #0]
 80105a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80105a6:	2202      	movs	r2, #2
 80105a8:	6878      	ldr	r0, [r7, #4]
 80105aa:	f009 fc65 	bl	8019e78 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80105ae:	4b51      	ldr	r3, [pc, #324]	@ (80106f4 <USBD_CDC_Init+0x1e8>)
 80105b0:	781b      	ldrb	r3, [r3, #0]
 80105b2:	f003 020f 	and.w	r2, r3, #15
 80105b6:	6879      	ldr	r1, [r7, #4]
 80105b8:	4613      	mov	r3, r2
 80105ba:	009b      	lsls	r3, r3, #2
 80105bc:	4413      	add	r3, r2
 80105be:	009b      	lsls	r3, r3, #2
 80105c0:	440b      	add	r3, r1
 80105c2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80105c6:	2201      	movs	r2, #1
 80105c8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80105ca:	4b4b      	ldr	r3, [pc, #300]	@ (80106f8 <USBD_CDC_Init+0x1ec>)
 80105cc:	781b      	ldrb	r3, [r3, #0]
 80105ce:	f003 020f 	and.w	r2, r3, #15
 80105d2:	6879      	ldr	r1, [r7, #4]
 80105d4:	4613      	mov	r3, r2
 80105d6:	009b      	lsls	r3, r3, #2
 80105d8:	4413      	add	r3, r2
 80105da:	009b      	lsls	r3, r3, #2
 80105dc:	440b      	add	r3, r1
 80105de:	3326      	adds	r3, #38	@ 0x26
 80105e0:	2210      	movs	r2, #16
 80105e2:	801a      	strh	r2, [r3, #0]
 80105e4:	e035      	b.n	8010652 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80105e6:	4b42      	ldr	r3, [pc, #264]	@ (80106f0 <USBD_CDC_Init+0x1e4>)
 80105e8:	7819      	ldrb	r1, [r3, #0]
 80105ea:	2340      	movs	r3, #64	@ 0x40
 80105ec:	2202      	movs	r2, #2
 80105ee:	6878      	ldr	r0, [r7, #4]
 80105f0:	f009 fc42 	bl	8019e78 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80105f4:	4b3e      	ldr	r3, [pc, #248]	@ (80106f0 <USBD_CDC_Init+0x1e4>)
 80105f6:	781b      	ldrb	r3, [r3, #0]
 80105f8:	f003 020f 	and.w	r2, r3, #15
 80105fc:	6879      	ldr	r1, [r7, #4]
 80105fe:	4613      	mov	r3, r2
 8010600:	009b      	lsls	r3, r3, #2
 8010602:	4413      	add	r3, r2
 8010604:	009b      	lsls	r3, r3, #2
 8010606:	440b      	add	r3, r1
 8010608:	3324      	adds	r3, #36	@ 0x24
 801060a:	2201      	movs	r2, #1
 801060c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801060e:	4b39      	ldr	r3, [pc, #228]	@ (80106f4 <USBD_CDC_Init+0x1e8>)
 8010610:	7819      	ldrb	r1, [r3, #0]
 8010612:	2340      	movs	r3, #64	@ 0x40
 8010614:	2202      	movs	r2, #2
 8010616:	6878      	ldr	r0, [r7, #4]
 8010618:	f009 fc2e 	bl	8019e78 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801061c:	4b35      	ldr	r3, [pc, #212]	@ (80106f4 <USBD_CDC_Init+0x1e8>)
 801061e:	781b      	ldrb	r3, [r3, #0]
 8010620:	f003 020f 	and.w	r2, r3, #15
 8010624:	6879      	ldr	r1, [r7, #4]
 8010626:	4613      	mov	r3, r2
 8010628:	009b      	lsls	r3, r3, #2
 801062a:	4413      	add	r3, r2
 801062c:	009b      	lsls	r3, r3, #2
 801062e:	440b      	add	r3, r1
 8010630:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010634:	2201      	movs	r2, #1
 8010636:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010638:	4b2f      	ldr	r3, [pc, #188]	@ (80106f8 <USBD_CDC_Init+0x1ec>)
 801063a:	781b      	ldrb	r3, [r3, #0]
 801063c:	f003 020f 	and.w	r2, r3, #15
 8010640:	6879      	ldr	r1, [r7, #4]
 8010642:	4613      	mov	r3, r2
 8010644:	009b      	lsls	r3, r3, #2
 8010646:	4413      	add	r3, r2
 8010648:	009b      	lsls	r3, r3, #2
 801064a:	440b      	add	r3, r1
 801064c:	3326      	adds	r3, #38	@ 0x26
 801064e:	2210      	movs	r2, #16
 8010650:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010652:	4b29      	ldr	r3, [pc, #164]	@ (80106f8 <USBD_CDC_Init+0x1ec>)
 8010654:	7819      	ldrb	r1, [r3, #0]
 8010656:	2308      	movs	r3, #8
 8010658:	2203      	movs	r2, #3
 801065a:	6878      	ldr	r0, [r7, #4]
 801065c:	f009 fc0c 	bl	8019e78 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8010660:	4b25      	ldr	r3, [pc, #148]	@ (80106f8 <USBD_CDC_Init+0x1ec>)
 8010662:	781b      	ldrb	r3, [r3, #0]
 8010664:	f003 020f 	and.w	r2, r3, #15
 8010668:	6879      	ldr	r1, [r7, #4]
 801066a:	4613      	mov	r3, r2
 801066c:	009b      	lsls	r3, r3, #2
 801066e:	4413      	add	r3, r2
 8010670:	009b      	lsls	r3, r3, #2
 8010672:	440b      	add	r3, r1
 8010674:	3324      	adds	r3, #36	@ 0x24
 8010676:	2201      	movs	r2, #1
 8010678:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	2200      	movs	r2, #0
 801067e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010688:	687a      	ldr	r2, [r7, #4]
 801068a:	33b0      	adds	r3, #176	@ 0xb0
 801068c:	009b      	lsls	r3, r3, #2
 801068e:	4413      	add	r3, r2
 8010690:	685b      	ldr	r3, [r3, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	2200      	movs	r2, #0
 801069a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	2200      	movs	r2, #0
 80106a2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d101      	bne.n	80106b4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80106b0:	2302      	movs	r3, #2
 80106b2:	e018      	b.n	80106e6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	7c1b      	ldrb	r3, [r3, #16]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d10a      	bne.n	80106d2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80106bc:	4b0d      	ldr	r3, [pc, #52]	@ (80106f4 <USBD_CDC_Init+0x1e8>)
 80106be:	7819      	ldrb	r1, [r3, #0]
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80106c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80106ca:	6878      	ldr	r0, [r7, #4]
 80106cc:	f009 fd4e 	bl	801a16c <USBD_LL_PrepareReceive>
 80106d0:	e008      	b.n	80106e4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80106d2:	4b08      	ldr	r3, [pc, #32]	@ (80106f4 <USBD_CDC_Init+0x1e8>)
 80106d4:	7819      	ldrb	r1, [r3, #0]
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80106dc:	2340      	movs	r3, #64	@ 0x40
 80106de:	6878      	ldr	r0, [r7, #4]
 80106e0:	f009 fd44 	bl	801a16c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80106e4:	2300      	movs	r3, #0
}
 80106e6:	4618      	mov	r0, r3
 80106e8:	3710      	adds	r7, #16
 80106ea:	46bd      	mov	sp, r7
 80106ec:	bd80      	pop	{r7, pc}
 80106ee:	bf00      	nop
 80106f0:	20000093 	.word	0x20000093
 80106f4:	20000094 	.word	0x20000094
 80106f8:	20000095 	.word	0x20000095

080106fc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b082      	sub	sp, #8
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
 8010704:	460b      	mov	r3, r1
 8010706:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8010708:	4b3a      	ldr	r3, [pc, #232]	@ (80107f4 <USBD_CDC_DeInit+0xf8>)
 801070a:	781b      	ldrb	r3, [r3, #0]
 801070c:	4619      	mov	r1, r3
 801070e:	6878      	ldr	r0, [r7, #4]
 8010710:	f009 fbf0 	bl	8019ef4 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8010714:	4b37      	ldr	r3, [pc, #220]	@ (80107f4 <USBD_CDC_DeInit+0xf8>)
 8010716:	781b      	ldrb	r3, [r3, #0]
 8010718:	f003 020f 	and.w	r2, r3, #15
 801071c:	6879      	ldr	r1, [r7, #4]
 801071e:	4613      	mov	r3, r2
 8010720:	009b      	lsls	r3, r3, #2
 8010722:	4413      	add	r3, r2
 8010724:	009b      	lsls	r3, r3, #2
 8010726:	440b      	add	r3, r1
 8010728:	3324      	adds	r3, #36	@ 0x24
 801072a:	2200      	movs	r2, #0
 801072c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801072e:	4b32      	ldr	r3, [pc, #200]	@ (80107f8 <USBD_CDC_DeInit+0xfc>)
 8010730:	781b      	ldrb	r3, [r3, #0]
 8010732:	4619      	mov	r1, r3
 8010734:	6878      	ldr	r0, [r7, #4]
 8010736:	f009 fbdd 	bl	8019ef4 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801073a:	4b2f      	ldr	r3, [pc, #188]	@ (80107f8 <USBD_CDC_DeInit+0xfc>)
 801073c:	781b      	ldrb	r3, [r3, #0]
 801073e:	f003 020f 	and.w	r2, r3, #15
 8010742:	6879      	ldr	r1, [r7, #4]
 8010744:	4613      	mov	r3, r2
 8010746:	009b      	lsls	r3, r3, #2
 8010748:	4413      	add	r3, r2
 801074a:	009b      	lsls	r3, r3, #2
 801074c:	440b      	add	r3, r1
 801074e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010752:	2200      	movs	r2, #0
 8010754:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8010756:	4b29      	ldr	r3, [pc, #164]	@ (80107fc <USBD_CDC_DeInit+0x100>)
 8010758:	781b      	ldrb	r3, [r3, #0]
 801075a:	4619      	mov	r1, r3
 801075c:	6878      	ldr	r0, [r7, #4]
 801075e:	f009 fbc9 	bl	8019ef4 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8010762:	4b26      	ldr	r3, [pc, #152]	@ (80107fc <USBD_CDC_DeInit+0x100>)
 8010764:	781b      	ldrb	r3, [r3, #0]
 8010766:	f003 020f 	and.w	r2, r3, #15
 801076a:	6879      	ldr	r1, [r7, #4]
 801076c:	4613      	mov	r3, r2
 801076e:	009b      	lsls	r3, r3, #2
 8010770:	4413      	add	r3, r2
 8010772:	009b      	lsls	r3, r3, #2
 8010774:	440b      	add	r3, r1
 8010776:	3324      	adds	r3, #36	@ 0x24
 8010778:	2200      	movs	r2, #0
 801077a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 801077c:	4b1f      	ldr	r3, [pc, #124]	@ (80107fc <USBD_CDC_DeInit+0x100>)
 801077e:	781b      	ldrb	r3, [r3, #0]
 8010780:	f003 020f 	and.w	r2, r3, #15
 8010784:	6879      	ldr	r1, [r7, #4]
 8010786:	4613      	mov	r3, r2
 8010788:	009b      	lsls	r3, r3, #2
 801078a:	4413      	add	r3, r2
 801078c:	009b      	lsls	r3, r3, #2
 801078e:	440b      	add	r3, r1
 8010790:	3326      	adds	r3, #38	@ 0x26
 8010792:	2200      	movs	r2, #0
 8010794:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	32b0      	adds	r2, #176	@ 0xb0
 80107a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d01f      	beq.n	80107e8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80107ae:	687a      	ldr	r2, [r7, #4]
 80107b0:	33b0      	adds	r3, #176	@ 0xb0
 80107b2:	009b      	lsls	r3, r3, #2
 80107b4:	4413      	add	r3, r2
 80107b6:	685b      	ldr	r3, [r3, #4]
 80107b8:	685b      	ldr	r3, [r3, #4]
 80107ba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	32b0      	adds	r2, #176	@ 0xb0
 80107c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107ca:	4618      	mov	r0, r3
 80107cc:	f009 fd76 	bl	801a2bc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	32b0      	adds	r2, #176	@ 0xb0
 80107da:	2100      	movs	r1, #0
 80107dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	2200      	movs	r2, #0
 80107e4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80107e8:	2300      	movs	r3, #0
}
 80107ea:	4618      	mov	r0, r3
 80107ec:	3708      	adds	r7, #8
 80107ee:	46bd      	mov	sp, r7
 80107f0:	bd80      	pop	{r7, pc}
 80107f2:	bf00      	nop
 80107f4:	20000093 	.word	0x20000093
 80107f8:	20000094 	.word	0x20000094
 80107fc:	20000095 	.word	0x20000095

08010800 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b086      	sub	sp, #24
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
 8010808:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	32b0      	adds	r2, #176	@ 0xb0
 8010814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010818:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801081a:	2300      	movs	r3, #0
 801081c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801081e:	2300      	movs	r3, #0
 8010820:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8010822:	2300      	movs	r3, #0
 8010824:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8010826:	693b      	ldr	r3, [r7, #16]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d101      	bne.n	8010830 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 801082c:	2303      	movs	r3, #3
 801082e:	e0bf      	b.n	80109b0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	781b      	ldrb	r3, [r3, #0]
 8010834:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010838:	2b00      	cmp	r3, #0
 801083a:	d050      	beq.n	80108de <USBD_CDC_Setup+0xde>
 801083c:	2b20      	cmp	r3, #32
 801083e:	f040 80af 	bne.w	80109a0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8010842:	683b      	ldr	r3, [r7, #0]
 8010844:	88db      	ldrh	r3, [r3, #6]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d03a      	beq.n	80108c0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801084a:	683b      	ldr	r3, [r7, #0]
 801084c:	781b      	ldrb	r3, [r3, #0]
 801084e:	b25b      	sxtb	r3, r3
 8010850:	2b00      	cmp	r3, #0
 8010852:	da1b      	bge.n	801088c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801085a:	687a      	ldr	r2, [r7, #4]
 801085c:	33b0      	adds	r3, #176	@ 0xb0
 801085e:	009b      	lsls	r3, r3, #2
 8010860:	4413      	add	r3, r2
 8010862:	685b      	ldr	r3, [r3, #4]
 8010864:	689b      	ldr	r3, [r3, #8]
 8010866:	683a      	ldr	r2, [r7, #0]
 8010868:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801086a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801086c:	683a      	ldr	r2, [r7, #0]
 801086e:	88d2      	ldrh	r2, [r2, #6]
 8010870:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8010872:	683b      	ldr	r3, [r7, #0]
 8010874:	88db      	ldrh	r3, [r3, #6]
 8010876:	2b07      	cmp	r3, #7
 8010878:	bf28      	it	cs
 801087a:	2307      	movcs	r3, #7
 801087c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801087e:	693b      	ldr	r3, [r7, #16]
 8010880:	89fa      	ldrh	r2, [r7, #14]
 8010882:	4619      	mov	r1, r3
 8010884:	6878      	ldr	r0, [r7, #4]
 8010886:	f001 fd7d 	bl	8012384 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801088a:	e090      	b.n	80109ae <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 801088c:	683b      	ldr	r3, [r7, #0]
 801088e:	785a      	ldrb	r2, [r3, #1]
 8010890:	693b      	ldr	r3, [r7, #16]
 8010892:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8010896:	683b      	ldr	r3, [r7, #0]
 8010898:	88db      	ldrh	r3, [r3, #6]
 801089a:	2b3f      	cmp	r3, #63	@ 0x3f
 801089c:	d803      	bhi.n	80108a6 <USBD_CDC_Setup+0xa6>
 801089e:	683b      	ldr	r3, [r7, #0]
 80108a0:	88db      	ldrh	r3, [r3, #6]
 80108a2:	b2da      	uxtb	r2, r3
 80108a4:	e000      	b.n	80108a8 <USBD_CDC_Setup+0xa8>
 80108a6:	2240      	movs	r2, #64	@ 0x40
 80108a8:	693b      	ldr	r3, [r7, #16]
 80108aa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80108ae:	6939      	ldr	r1, [r7, #16]
 80108b0:	693b      	ldr	r3, [r7, #16]
 80108b2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80108b6:	461a      	mov	r2, r3
 80108b8:	6878      	ldr	r0, [r7, #4]
 80108ba:	f001 fd8f 	bl	80123dc <USBD_CtlPrepareRx>
      break;
 80108be:	e076      	b.n	80109ae <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80108c6:	687a      	ldr	r2, [r7, #4]
 80108c8:	33b0      	adds	r3, #176	@ 0xb0
 80108ca:	009b      	lsls	r3, r3, #2
 80108cc:	4413      	add	r3, r2
 80108ce:	685b      	ldr	r3, [r3, #4]
 80108d0:	689b      	ldr	r3, [r3, #8]
 80108d2:	683a      	ldr	r2, [r7, #0]
 80108d4:	7850      	ldrb	r0, [r2, #1]
 80108d6:	2200      	movs	r2, #0
 80108d8:	6839      	ldr	r1, [r7, #0]
 80108da:	4798      	blx	r3
      break;
 80108dc:	e067      	b.n	80109ae <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80108de:	683b      	ldr	r3, [r7, #0]
 80108e0:	785b      	ldrb	r3, [r3, #1]
 80108e2:	2b0b      	cmp	r3, #11
 80108e4:	d851      	bhi.n	801098a <USBD_CDC_Setup+0x18a>
 80108e6:	a201      	add	r2, pc, #4	@ (adr r2, 80108ec <USBD_CDC_Setup+0xec>)
 80108e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108ec:	0801091d 	.word	0x0801091d
 80108f0:	08010999 	.word	0x08010999
 80108f4:	0801098b 	.word	0x0801098b
 80108f8:	0801098b 	.word	0x0801098b
 80108fc:	0801098b 	.word	0x0801098b
 8010900:	0801098b 	.word	0x0801098b
 8010904:	0801098b 	.word	0x0801098b
 8010908:	0801098b 	.word	0x0801098b
 801090c:	0801098b 	.word	0x0801098b
 8010910:	0801098b 	.word	0x0801098b
 8010914:	08010947 	.word	0x08010947
 8010918:	08010971 	.word	0x08010971
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010922:	b2db      	uxtb	r3, r3
 8010924:	2b03      	cmp	r3, #3
 8010926:	d107      	bne.n	8010938 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010928:	f107 030a 	add.w	r3, r7, #10
 801092c:	2202      	movs	r2, #2
 801092e:	4619      	mov	r1, r3
 8010930:	6878      	ldr	r0, [r7, #4]
 8010932:	f001 fd27 	bl	8012384 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010936:	e032      	b.n	801099e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010938:	6839      	ldr	r1, [r7, #0]
 801093a:	6878      	ldr	r0, [r7, #4]
 801093c:	f001 fca5 	bl	801228a <USBD_CtlError>
            ret = USBD_FAIL;
 8010940:	2303      	movs	r3, #3
 8010942:	75fb      	strb	r3, [r7, #23]
          break;
 8010944:	e02b      	b.n	801099e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801094c:	b2db      	uxtb	r3, r3
 801094e:	2b03      	cmp	r3, #3
 8010950:	d107      	bne.n	8010962 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010952:	f107 030d 	add.w	r3, r7, #13
 8010956:	2201      	movs	r2, #1
 8010958:	4619      	mov	r1, r3
 801095a:	6878      	ldr	r0, [r7, #4]
 801095c:	f001 fd12 	bl	8012384 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010960:	e01d      	b.n	801099e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010962:	6839      	ldr	r1, [r7, #0]
 8010964:	6878      	ldr	r0, [r7, #4]
 8010966:	f001 fc90 	bl	801228a <USBD_CtlError>
            ret = USBD_FAIL;
 801096a:	2303      	movs	r3, #3
 801096c:	75fb      	strb	r3, [r7, #23]
          break;
 801096e:	e016      	b.n	801099e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010976:	b2db      	uxtb	r3, r3
 8010978:	2b03      	cmp	r3, #3
 801097a:	d00f      	beq.n	801099c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 801097c:	6839      	ldr	r1, [r7, #0]
 801097e:	6878      	ldr	r0, [r7, #4]
 8010980:	f001 fc83 	bl	801228a <USBD_CtlError>
            ret = USBD_FAIL;
 8010984:	2303      	movs	r3, #3
 8010986:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010988:	e008      	b.n	801099c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801098a:	6839      	ldr	r1, [r7, #0]
 801098c:	6878      	ldr	r0, [r7, #4]
 801098e:	f001 fc7c 	bl	801228a <USBD_CtlError>
          ret = USBD_FAIL;
 8010992:	2303      	movs	r3, #3
 8010994:	75fb      	strb	r3, [r7, #23]
          break;
 8010996:	e002      	b.n	801099e <USBD_CDC_Setup+0x19e>
          break;
 8010998:	bf00      	nop
 801099a:	e008      	b.n	80109ae <USBD_CDC_Setup+0x1ae>
          break;
 801099c:	bf00      	nop
      }
      break;
 801099e:	e006      	b.n	80109ae <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80109a0:	6839      	ldr	r1, [r7, #0]
 80109a2:	6878      	ldr	r0, [r7, #4]
 80109a4:	f001 fc71 	bl	801228a <USBD_CtlError>
      ret = USBD_FAIL;
 80109a8:	2303      	movs	r3, #3
 80109aa:	75fb      	strb	r3, [r7, #23]
      break;
 80109ac:	bf00      	nop
  }

  return (uint8_t)ret;
 80109ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80109b0:	4618      	mov	r0, r3
 80109b2:	3718      	adds	r7, #24
 80109b4:	46bd      	mov	sp, r7
 80109b6:	bd80      	pop	{r7, pc}

080109b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b084      	sub	sp, #16
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
 80109c0:	460b      	mov	r3, r1
 80109c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80109ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	32b0      	adds	r2, #176	@ 0xb0
 80109d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d101      	bne.n	80109e2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80109de:	2303      	movs	r3, #3
 80109e0:	e065      	b.n	8010aae <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	32b0      	adds	r2, #176	@ 0xb0
 80109ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80109f2:	78fb      	ldrb	r3, [r7, #3]
 80109f4:	f003 020f 	and.w	r2, r3, #15
 80109f8:	6879      	ldr	r1, [r7, #4]
 80109fa:	4613      	mov	r3, r2
 80109fc:	009b      	lsls	r3, r3, #2
 80109fe:	4413      	add	r3, r2
 8010a00:	009b      	lsls	r3, r3, #2
 8010a02:	440b      	add	r3, r1
 8010a04:	3318      	adds	r3, #24
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d02f      	beq.n	8010a6c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8010a0c:	78fb      	ldrb	r3, [r7, #3]
 8010a0e:	f003 020f 	and.w	r2, r3, #15
 8010a12:	6879      	ldr	r1, [r7, #4]
 8010a14:	4613      	mov	r3, r2
 8010a16:	009b      	lsls	r3, r3, #2
 8010a18:	4413      	add	r3, r2
 8010a1a:	009b      	lsls	r3, r3, #2
 8010a1c:	440b      	add	r3, r1
 8010a1e:	3318      	adds	r3, #24
 8010a20:	681a      	ldr	r2, [r3, #0]
 8010a22:	78fb      	ldrb	r3, [r7, #3]
 8010a24:	f003 010f 	and.w	r1, r3, #15
 8010a28:	68f8      	ldr	r0, [r7, #12]
 8010a2a:	460b      	mov	r3, r1
 8010a2c:	00db      	lsls	r3, r3, #3
 8010a2e:	440b      	add	r3, r1
 8010a30:	009b      	lsls	r3, r3, #2
 8010a32:	4403      	add	r3, r0
 8010a34:	331c      	adds	r3, #28
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	fbb2 f1f3 	udiv	r1, r2, r3
 8010a3c:	fb01 f303 	mul.w	r3, r1, r3
 8010a40:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d112      	bne.n	8010a6c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8010a46:	78fb      	ldrb	r3, [r7, #3]
 8010a48:	f003 020f 	and.w	r2, r3, #15
 8010a4c:	6879      	ldr	r1, [r7, #4]
 8010a4e:	4613      	mov	r3, r2
 8010a50:	009b      	lsls	r3, r3, #2
 8010a52:	4413      	add	r3, r2
 8010a54:	009b      	lsls	r3, r3, #2
 8010a56:	440b      	add	r3, r1
 8010a58:	3318      	adds	r3, #24
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010a5e:	78f9      	ldrb	r1, [r7, #3]
 8010a60:	2300      	movs	r3, #0
 8010a62:	2200      	movs	r2, #0
 8010a64:	6878      	ldr	r0, [r7, #4]
 8010a66:	f009 fb49 	bl	801a0fc <USBD_LL_Transmit>
 8010a6a:	e01f      	b.n	8010aac <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8010a6c:	68bb      	ldr	r3, [r7, #8]
 8010a6e:	2200      	movs	r2, #0
 8010a70:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010a7a:	687a      	ldr	r2, [r7, #4]
 8010a7c:	33b0      	adds	r3, #176	@ 0xb0
 8010a7e:	009b      	lsls	r3, r3, #2
 8010a80:	4413      	add	r3, r2
 8010a82:	685b      	ldr	r3, [r3, #4]
 8010a84:	691b      	ldr	r3, [r3, #16]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d010      	beq.n	8010aac <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010a90:	687a      	ldr	r2, [r7, #4]
 8010a92:	33b0      	adds	r3, #176	@ 0xb0
 8010a94:	009b      	lsls	r3, r3, #2
 8010a96:	4413      	add	r3, r2
 8010a98:	685b      	ldr	r3, [r3, #4]
 8010a9a:	691b      	ldr	r3, [r3, #16]
 8010a9c:	68ba      	ldr	r2, [r7, #8]
 8010a9e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8010aa2:	68ba      	ldr	r2, [r7, #8]
 8010aa4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8010aa8:	78fa      	ldrb	r2, [r7, #3]
 8010aaa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010aac:	2300      	movs	r3, #0
}
 8010aae:	4618      	mov	r0, r3
 8010ab0:	3710      	adds	r7, #16
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	bd80      	pop	{r7, pc}

08010ab6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010ab6:	b580      	push	{r7, lr}
 8010ab8:	b084      	sub	sp, #16
 8010aba:	af00      	add	r7, sp, #0
 8010abc:	6078      	str	r0, [r7, #4]
 8010abe:	460b      	mov	r3, r1
 8010ac0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	32b0      	adds	r2, #176	@ 0xb0
 8010acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ad0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	32b0      	adds	r2, #176	@ 0xb0
 8010adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d101      	bne.n	8010ae8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8010ae4:	2303      	movs	r3, #3
 8010ae6:	e01a      	b.n	8010b1e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010ae8:	78fb      	ldrb	r3, [r7, #3]
 8010aea:	4619      	mov	r1, r3
 8010aec:	6878      	ldr	r0, [r7, #4]
 8010aee:	f009 fb75 	bl	801a1dc <USBD_LL_GetRxDataSize>
 8010af2:	4602      	mov	r2, r0
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010b00:	687a      	ldr	r2, [r7, #4]
 8010b02:	33b0      	adds	r3, #176	@ 0xb0
 8010b04:	009b      	lsls	r3, r3, #2
 8010b06:	4413      	add	r3, r2
 8010b08:	685b      	ldr	r3, [r3, #4]
 8010b0a:	68db      	ldr	r3, [r3, #12]
 8010b0c:	68fa      	ldr	r2, [r7, #12]
 8010b0e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8010b12:	68fa      	ldr	r2, [r7, #12]
 8010b14:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8010b18:	4611      	mov	r1, r2
 8010b1a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010b1c:	2300      	movs	r3, #0
}
 8010b1e:	4618      	mov	r0, r3
 8010b20:	3710      	adds	r7, #16
 8010b22:	46bd      	mov	sp, r7
 8010b24:	bd80      	pop	{r7, pc}

08010b26 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010b26:	b580      	push	{r7, lr}
 8010b28:	b084      	sub	sp, #16
 8010b2a:	af00      	add	r7, sp, #0
 8010b2c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	32b0      	adds	r2, #176	@ 0xb0
 8010b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b3c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d101      	bne.n	8010b48 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010b44:	2303      	movs	r3, #3
 8010b46:	e024      	b.n	8010b92 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010b4e:	687a      	ldr	r2, [r7, #4]
 8010b50:	33b0      	adds	r3, #176	@ 0xb0
 8010b52:	009b      	lsls	r3, r3, #2
 8010b54:	4413      	add	r3, r2
 8010b56:	685b      	ldr	r3, [r3, #4]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d019      	beq.n	8010b90 <USBD_CDC_EP0_RxReady+0x6a>
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8010b62:	2bff      	cmp	r3, #255	@ 0xff
 8010b64:	d014      	beq.n	8010b90 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010b6c:	687a      	ldr	r2, [r7, #4]
 8010b6e:	33b0      	adds	r3, #176	@ 0xb0
 8010b70:	009b      	lsls	r3, r3, #2
 8010b72:	4413      	add	r3, r2
 8010b74:	685b      	ldr	r3, [r3, #4]
 8010b76:	689b      	ldr	r3, [r3, #8]
 8010b78:	68fa      	ldr	r2, [r7, #12]
 8010b7a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8010b7e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8010b80:	68fa      	ldr	r2, [r7, #12]
 8010b82:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010b86:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	22ff      	movs	r2, #255	@ 0xff
 8010b8c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8010b90:	2300      	movs	r3, #0
}
 8010b92:	4618      	mov	r0, r3
 8010b94:	3710      	adds	r7, #16
 8010b96:	46bd      	mov	sp, r7
 8010b98:	bd80      	pop	{r7, pc}
	...

08010b9c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b086      	sub	sp, #24
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010ba4:	2182      	movs	r1, #130	@ 0x82
 8010ba6:	4818      	ldr	r0, [pc, #96]	@ (8010c08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010ba8:	f000 fd0f 	bl	80115ca <USBD_GetEpDesc>
 8010bac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010bae:	2101      	movs	r1, #1
 8010bb0:	4815      	ldr	r0, [pc, #84]	@ (8010c08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010bb2:	f000 fd0a 	bl	80115ca <USBD_GetEpDesc>
 8010bb6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010bb8:	2181      	movs	r1, #129	@ 0x81
 8010bba:	4813      	ldr	r0, [pc, #76]	@ (8010c08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010bbc:	f000 fd05 	bl	80115ca <USBD_GetEpDesc>
 8010bc0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010bc2:	697b      	ldr	r3, [r7, #20]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d002      	beq.n	8010bce <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010bc8:	697b      	ldr	r3, [r7, #20]
 8010bca:	2210      	movs	r2, #16
 8010bcc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010bce:	693b      	ldr	r3, [r7, #16]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d006      	beq.n	8010be2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010bd4:	693b      	ldr	r3, [r7, #16]
 8010bd6:	2200      	movs	r2, #0
 8010bd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010bdc:	711a      	strb	r2, [r3, #4]
 8010bde:	2200      	movs	r2, #0
 8010be0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d006      	beq.n	8010bf6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	2200      	movs	r2, #0
 8010bec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010bf0:	711a      	strb	r2, [r3, #4]
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	2243      	movs	r2, #67	@ 0x43
 8010bfa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010bfc:	4b02      	ldr	r3, [pc, #8]	@ (8010c08 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8010bfe:	4618      	mov	r0, r3
 8010c00:	3718      	adds	r7, #24
 8010c02:	46bd      	mov	sp, r7
 8010c04:	bd80      	pop	{r7, pc}
 8010c06:	bf00      	nop
 8010c08:	20000050 	.word	0x20000050

08010c0c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b086      	sub	sp, #24
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010c14:	2182      	movs	r1, #130	@ 0x82
 8010c16:	4818      	ldr	r0, [pc, #96]	@ (8010c78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010c18:	f000 fcd7 	bl	80115ca <USBD_GetEpDesc>
 8010c1c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010c1e:	2101      	movs	r1, #1
 8010c20:	4815      	ldr	r0, [pc, #84]	@ (8010c78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010c22:	f000 fcd2 	bl	80115ca <USBD_GetEpDesc>
 8010c26:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010c28:	2181      	movs	r1, #129	@ 0x81
 8010c2a:	4813      	ldr	r0, [pc, #76]	@ (8010c78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010c2c:	f000 fccd 	bl	80115ca <USBD_GetEpDesc>
 8010c30:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010c32:	697b      	ldr	r3, [r7, #20]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d002      	beq.n	8010c3e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8010c38:	697b      	ldr	r3, [r7, #20]
 8010c3a:	2210      	movs	r2, #16
 8010c3c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010c3e:	693b      	ldr	r3, [r7, #16]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d006      	beq.n	8010c52 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010c44:	693b      	ldr	r3, [r7, #16]
 8010c46:	2200      	movs	r2, #0
 8010c48:	711a      	strb	r2, [r3, #4]
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	f042 0202 	orr.w	r2, r2, #2
 8010c50:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d006      	beq.n	8010c66 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	711a      	strb	r2, [r3, #4]
 8010c5e:	2200      	movs	r2, #0
 8010c60:	f042 0202 	orr.w	r2, r2, #2
 8010c64:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	2243      	movs	r2, #67	@ 0x43
 8010c6a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010c6c:	4b02      	ldr	r3, [pc, #8]	@ (8010c78 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8010c6e:	4618      	mov	r0, r3
 8010c70:	3718      	adds	r7, #24
 8010c72:	46bd      	mov	sp, r7
 8010c74:	bd80      	pop	{r7, pc}
 8010c76:	bf00      	nop
 8010c78:	20000050 	.word	0x20000050

08010c7c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b086      	sub	sp, #24
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010c84:	2182      	movs	r1, #130	@ 0x82
 8010c86:	4818      	ldr	r0, [pc, #96]	@ (8010ce8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010c88:	f000 fc9f 	bl	80115ca <USBD_GetEpDesc>
 8010c8c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010c8e:	2101      	movs	r1, #1
 8010c90:	4815      	ldr	r0, [pc, #84]	@ (8010ce8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010c92:	f000 fc9a 	bl	80115ca <USBD_GetEpDesc>
 8010c96:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010c98:	2181      	movs	r1, #129	@ 0x81
 8010c9a:	4813      	ldr	r0, [pc, #76]	@ (8010ce8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010c9c:	f000 fc95 	bl	80115ca <USBD_GetEpDesc>
 8010ca0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010ca2:	697b      	ldr	r3, [r7, #20]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d002      	beq.n	8010cae <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010ca8:	697b      	ldr	r3, [r7, #20]
 8010caa:	2210      	movs	r2, #16
 8010cac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010cae:	693b      	ldr	r3, [r7, #16]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d006      	beq.n	8010cc2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010cb4:	693b      	ldr	r3, [r7, #16]
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010cbc:	711a      	strb	r2, [r3, #4]
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d006      	beq.n	8010cd6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	2200      	movs	r2, #0
 8010ccc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010cd0:	711a      	strb	r2, [r3, #4]
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	2243      	movs	r2, #67	@ 0x43
 8010cda:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010cdc:	4b02      	ldr	r3, [pc, #8]	@ (8010ce8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8010cde:	4618      	mov	r0, r3
 8010ce0:	3718      	adds	r7, #24
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	bd80      	pop	{r7, pc}
 8010ce6:	bf00      	nop
 8010ce8:	20000050 	.word	0x20000050

08010cec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010cec:	b480      	push	{r7}
 8010cee:	b083      	sub	sp, #12
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	220a      	movs	r2, #10
 8010cf8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8010cfa:	4b03      	ldr	r3, [pc, #12]	@ (8010d08 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	370c      	adds	r7, #12
 8010d00:	46bd      	mov	sp, r7
 8010d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d06:	4770      	bx	lr
 8010d08:	2000000c 	.word	0x2000000c

08010d0c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010d0c:	b480      	push	{r7}
 8010d0e:	b083      	sub	sp, #12
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
 8010d14:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010d16:	683b      	ldr	r3, [r7, #0]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d101      	bne.n	8010d20 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010d1c:	2303      	movs	r3, #3
 8010d1e:	e009      	b.n	8010d34 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010d26:	687a      	ldr	r2, [r7, #4]
 8010d28:	33b0      	adds	r3, #176	@ 0xb0
 8010d2a:	009b      	lsls	r3, r3, #2
 8010d2c:	4413      	add	r3, r2
 8010d2e:	683a      	ldr	r2, [r7, #0]
 8010d30:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8010d32:	2300      	movs	r3, #0
}
 8010d34:	4618      	mov	r0, r3
 8010d36:	370c      	adds	r7, #12
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3e:	4770      	bx	lr

08010d40 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010d40:	b480      	push	{r7}
 8010d42:	b087      	sub	sp, #28
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	60f8      	str	r0, [r7, #12]
 8010d48:	60b9      	str	r1, [r7, #8]
 8010d4a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	32b0      	adds	r2, #176	@ 0xb0
 8010d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d5a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8010d5c:	697b      	ldr	r3, [r7, #20]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d101      	bne.n	8010d66 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8010d62:	2303      	movs	r3, #3
 8010d64:	e008      	b.n	8010d78 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8010d66:	697b      	ldr	r3, [r7, #20]
 8010d68:	68ba      	ldr	r2, [r7, #8]
 8010d6a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8010d6e:	697b      	ldr	r3, [r7, #20]
 8010d70:	687a      	ldr	r2, [r7, #4]
 8010d72:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8010d76:	2300      	movs	r3, #0
}
 8010d78:	4618      	mov	r0, r3
 8010d7a:	371c      	adds	r7, #28
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d82:	4770      	bx	lr

08010d84 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010d84:	b480      	push	{r7}
 8010d86:	b085      	sub	sp, #20
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
 8010d8c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	32b0      	adds	r2, #176	@ 0xb0
 8010d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d9c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d101      	bne.n	8010da8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8010da4:	2303      	movs	r3, #3
 8010da6:	e004      	b.n	8010db2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	683a      	ldr	r2, [r7, #0]
 8010dac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8010db0:	2300      	movs	r3, #0
}
 8010db2:	4618      	mov	r0, r3
 8010db4:	3714      	adds	r7, #20
 8010db6:	46bd      	mov	sp, r7
 8010db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dbc:	4770      	bx	lr
	...

08010dc0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b084      	sub	sp, #16
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	32b0      	adds	r2, #176	@ 0xb0
 8010dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010dd6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	32b0      	adds	r2, #176	@ 0xb0
 8010de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d101      	bne.n	8010dee <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8010dea:	2303      	movs	r3, #3
 8010dec:	e018      	b.n	8010e20 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	7c1b      	ldrb	r3, [r3, #16]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d10a      	bne.n	8010e0c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010df6:	4b0c      	ldr	r3, [pc, #48]	@ (8010e28 <USBD_CDC_ReceivePacket+0x68>)
 8010df8:	7819      	ldrb	r1, [r3, #0]
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010e00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010e04:	6878      	ldr	r0, [r7, #4]
 8010e06:	f009 f9b1 	bl	801a16c <USBD_LL_PrepareReceive>
 8010e0a:	e008      	b.n	8010e1e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010e0c:	4b06      	ldr	r3, [pc, #24]	@ (8010e28 <USBD_CDC_ReceivePacket+0x68>)
 8010e0e:	7819      	ldrb	r1, [r3, #0]
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010e16:	2340      	movs	r3, #64	@ 0x40
 8010e18:	6878      	ldr	r0, [r7, #4]
 8010e1a:	f009 f9a7 	bl	801a16c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010e1e:	2300      	movs	r3, #0
}
 8010e20:	4618      	mov	r0, r3
 8010e22:	3710      	adds	r7, #16
 8010e24:	46bd      	mov	sp, r7
 8010e26:	bd80      	pop	{r7, pc}
 8010e28:	20000094 	.word	0x20000094

08010e2c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	b086      	sub	sp, #24
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	60f8      	str	r0, [r7, #12]
 8010e34:	60b9      	str	r1, [r7, #8]
 8010e36:	4613      	mov	r3, r2
 8010e38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d101      	bne.n	8010e44 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010e40:	2303      	movs	r3, #3
 8010e42:	e01f      	b.n	8010e84 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	2200      	movs	r2, #0
 8010e48:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	2200      	movs	r2, #0
 8010e50:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	2200      	movs	r2, #0
 8010e58:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010e5c:	68bb      	ldr	r3, [r7, #8]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d003      	beq.n	8010e6a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	68ba      	ldr	r2, [r7, #8]
 8010e66:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	2201      	movs	r2, #1
 8010e6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	79fa      	ldrb	r2, [r7, #7]
 8010e76:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010e78:	68f8      	ldr	r0, [r7, #12]
 8010e7a:	f008 ff7f 	bl	8019d7c <USBD_LL_Init>
 8010e7e:	4603      	mov	r3, r0
 8010e80:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e84:	4618      	mov	r0, r3
 8010e86:	3718      	adds	r7, #24
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	bd80      	pop	{r7, pc}

08010e8c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b084      	sub	sp, #16
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
 8010e94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010e96:	2300      	movs	r3, #0
 8010e98:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010e9a:	683b      	ldr	r3, [r7, #0]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d101      	bne.n	8010ea4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010ea0:	2303      	movs	r3, #3
 8010ea2:	e025      	b.n	8010ef0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	683a      	ldr	r2, [r7, #0]
 8010ea8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	32ae      	adds	r2, #174	@ 0xae
 8010eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d00f      	beq.n	8010ee0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	32ae      	adds	r2, #174	@ 0xae
 8010eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ed0:	f107 020e 	add.w	r2, r7, #14
 8010ed4:	4610      	mov	r0, r2
 8010ed6:	4798      	blx	r3
 8010ed8:	4602      	mov	r2, r0
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010ee6:	1c5a      	adds	r2, r3, #1
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8010eee:	2300      	movs	r3, #0
}
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	3710      	adds	r7, #16
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	bd80      	pop	{r7, pc}

08010ef8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b082      	sub	sp, #8
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010f00:	6878      	ldr	r0, [r7, #4]
 8010f02:	f008 ff87 	bl	8019e14 <USBD_LL_Start>
 8010f06:	4603      	mov	r3, r0
}
 8010f08:	4618      	mov	r0, r3
 8010f0a:	3708      	adds	r7, #8
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	bd80      	pop	{r7, pc}

08010f10 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8010f10:	b480      	push	{r7}
 8010f12:	b083      	sub	sp, #12
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010f18:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	370c      	adds	r7, #12
 8010f1e:	46bd      	mov	sp, r7
 8010f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f24:	4770      	bx	lr

08010f26 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010f26:	b580      	push	{r7, lr}
 8010f28:	b084      	sub	sp, #16
 8010f2a:	af00      	add	r7, sp, #0
 8010f2c:	6078      	str	r0, [r7, #4]
 8010f2e:	460b      	mov	r3, r1
 8010f30:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010f32:	2300      	movs	r3, #0
 8010f34:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d009      	beq.n	8010f54 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	78fa      	ldrb	r2, [r7, #3]
 8010f4a:	4611      	mov	r1, r2
 8010f4c:	6878      	ldr	r0, [r7, #4]
 8010f4e:	4798      	blx	r3
 8010f50:	4603      	mov	r3, r0
 8010f52:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f56:	4618      	mov	r0, r3
 8010f58:	3710      	adds	r7, #16
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	bd80      	pop	{r7, pc}

08010f5e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010f5e:	b580      	push	{r7, lr}
 8010f60:	b084      	sub	sp, #16
 8010f62:	af00      	add	r7, sp, #0
 8010f64:	6078      	str	r0, [r7, #4]
 8010f66:	460b      	mov	r3, r1
 8010f68:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f74:	685b      	ldr	r3, [r3, #4]
 8010f76:	78fa      	ldrb	r2, [r7, #3]
 8010f78:	4611      	mov	r1, r2
 8010f7a:	6878      	ldr	r0, [r7, #4]
 8010f7c:	4798      	blx	r3
 8010f7e:	4603      	mov	r3, r0
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d001      	beq.n	8010f88 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8010f84:	2303      	movs	r3, #3
 8010f86:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	3710      	adds	r7, #16
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	bd80      	pop	{r7, pc}

08010f92 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010f92:	b580      	push	{r7, lr}
 8010f94:	b084      	sub	sp, #16
 8010f96:	af00      	add	r7, sp, #0
 8010f98:	6078      	str	r0, [r7, #4]
 8010f9a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010fa2:	6839      	ldr	r1, [r7, #0]
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f001 f936 	bl	8012216 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	2201      	movs	r2, #1
 8010fae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8010fb8:	461a      	mov	r2, r3
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010fc6:	f003 031f 	and.w	r3, r3, #31
 8010fca:	2b02      	cmp	r3, #2
 8010fcc:	d01a      	beq.n	8011004 <USBD_LL_SetupStage+0x72>
 8010fce:	2b02      	cmp	r3, #2
 8010fd0:	d822      	bhi.n	8011018 <USBD_LL_SetupStage+0x86>
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d002      	beq.n	8010fdc <USBD_LL_SetupStage+0x4a>
 8010fd6:	2b01      	cmp	r3, #1
 8010fd8:	d00a      	beq.n	8010ff0 <USBD_LL_SetupStage+0x5e>
 8010fda:	e01d      	b.n	8011018 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010fe2:	4619      	mov	r1, r3
 8010fe4:	6878      	ldr	r0, [r7, #4]
 8010fe6:	f000 fb63 	bl	80116b0 <USBD_StdDevReq>
 8010fea:	4603      	mov	r3, r0
 8010fec:	73fb      	strb	r3, [r7, #15]
      break;
 8010fee:	e020      	b.n	8011032 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010ff6:	4619      	mov	r1, r3
 8010ff8:	6878      	ldr	r0, [r7, #4]
 8010ffa:	f000 fbcb 	bl	8011794 <USBD_StdItfReq>
 8010ffe:	4603      	mov	r3, r0
 8011000:	73fb      	strb	r3, [r7, #15]
      break;
 8011002:	e016      	b.n	8011032 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801100a:	4619      	mov	r1, r3
 801100c:	6878      	ldr	r0, [r7, #4]
 801100e:	f000 fc2d 	bl	801186c <USBD_StdEPReq>
 8011012:	4603      	mov	r3, r0
 8011014:	73fb      	strb	r3, [r7, #15]
      break;
 8011016:	e00c      	b.n	8011032 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801101e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011022:	b2db      	uxtb	r3, r3
 8011024:	4619      	mov	r1, r3
 8011026:	6878      	ldr	r0, [r7, #4]
 8011028:	f008 ff9a 	bl	8019f60 <USBD_LL_StallEP>
 801102c:	4603      	mov	r3, r0
 801102e:	73fb      	strb	r3, [r7, #15]
      break;
 8011030:	bf00      	nop
  }

  return ret;
 8011032:	7bfb      	ldrb	r3, [r7, #15]
}
 8011034:	4618      	mov	r0, r3
 8011036:	3710      	adds	r7, #16
 8011038:	46bd      	mov	sp, r7
 801103a:	bd80      	pop	{r7, pc}

0801103c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801103c:	b580      	push	{r7, lr}
 801103e:	b086      	sub	sp, #24
 8011040:	af00      	add	r7, sp, #0
 8011042:	60f8      	str	r0, [r7, #12]
 8011044:	460b      	mov	r3, r1
 8011046:	607a      	str	r2, [r7, #4]
 8011048:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801104a:	2300      	movs	r3, #0
 801104c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801104e:	7afb      	ldrb	r3, [r7, #11]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d16e      	bne.n	8011132 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 801105a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8011062:	2b03      	cmp	r3, #3
 8011064:	f040 8098 	bne.w	8011198 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8011068:	693b      	ldr	r3, [r7, #16]
 801106a:	689a      	ldr	r2, [r3, #8]
 801106c:	693b      	ldr	r3, [r7, #16]
 801106e:	68db      	ldr	r3, [r3, #12]
 8011070:	429a      	cmp	r2, r3
 8011072:	d913      	bls.n	801109c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8011074:	693b      	ldr	r3, [r7, #16]
 8011076:	689a      	ldr	r2, [r3, #8]
 8011078:	693b      	ldr	r3, [r7, #16]
 801107a:	68db      	ldr	r3, [r3, #12]
 801107c:	1ad2      	subs	r2, r2, r3
 801107e:	693b      	ldr	r3, [r7, #16]
 8011080:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011082:	693b      	ldr	r3, [r7, #16]
 8011084:	68da      	ldr	r2, [r3, #12]
 8011086:	693b      	ldr	r3, [r7, #16]
 8011088:	689b      	ldr	r3, [r3, #8]
 801108a:	4293      	cmp	r3, r2
 801108c:	bf28      	it	cs
 801108e:	4613      	movcs	r3, r2
 8011090:	461a      	mov	r2, r3
 8011092:	6879      	ldr	r1, [r7, #4]
 8011094:	68f8      	ldr	r0, [r7, #12]
 8011096:	f001 f9be 	bl	8012416 <USBD_CtlContinueRx>
 801109a:	e07d      	b.n	8011198 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80110a2:	f003 031f 	and.w	r3, r3, #31
 80110a6:	2b02      	cmp	r3, #2
 80110a8:	d014      	beq.n	80110d4 <USBD_LL_DataOutStage+0x98>
 80110aa:	2b02      	cmp	r3, #2
 80110ac:	d81d      	bhi.n	80110ea <USBD_LL_DataOutStage+0xae>
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d002      	beq.n	80110b8 <USBD_LL_DataOutStage+0x7c>
 80110b2:	2b01      	cmp	r3, #1
 80110b4:	d003      	beq.n	80110be <USBD_LL_DataOutStage+0x82>
 80110b6:	e018      	b.n	80110ea <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80110b8:	2300      	movs	r3, #0
 80110ba:	75bb      	strb	r3, [r7, #22]
            break;
 80110bc:	e018      	b.n	80110f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80110c4:	b2db      	uxtb	r3, r3
 80110c6:	4619      	mov	r1, r3
 80110c8:	68f8      	ldr	r0, [r7, #12]
 80110ca:	f000 fa64 	bl	8011596 <USBD_CoreFindIF>
 80110ce:	4603      	mov	r3, r0
 80110d0:	75bb      	strb	r3, [r7, #22]
            break;
 80110d2:	e00d      	b.n	80110f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80110da:	b2db      	uxtb	r3, r3
 80110dc:	4619      	mov	r1, r3
 80110de:	68f8      	ldr	r0, [r7, #12]
 80110e0:	f000 fa66 	bl	80115b0 <USBD_CoreFindEP>
 80110e4:	4603      	mov	r3, r0
 80110e6:	75bb      	strb	r3, [r7, #22]
            break;
 80110e8:	e002      	b.n	80110f0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80110ea:	2300      	movs	r3, #0
 80110ec:	75bb      	strb	r3, [r7, #22]
            break;
 80110ee:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80110f0:	7dbb      	ldrb	r3, [r7, #22]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d119      	bne.n	801112a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80110fc:	b2db      	uxtb	r3, r3
 80110fe:	2b03      	cmp	r3, #3
 8011100:	d113      	bne.n	801112a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8011102:	7dba      	ldrb	r2, [r7, #22]
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	32ae      	adds	r2, #174	@ 0xae
 8011108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801110c:	691b      	ldr	r3, [r3, #16]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d00b      	beq.n	801112a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8011112:	7dba      	ldrb	r2, [r7, #22]
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801111a:	7dba      	ldrb	r2, [r7, #22]
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	32ae      	adds	r2, #174	@ 0xae
 8011120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011124:	691b      	ldr	r3, [r3, #16]
 8011126:	68f8      	ldr	r0, [r7, #12]
 8011128:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801112a:	68f8      	ldr	r0, [r7, #12]
 801112c:	f001 f984 	bl	8012438 <USBD_CtlSendStatus>
 8011130:	e032      	b.n	8011198 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8011132:	7afb      	ldrb	r3, [r7, #11]
 8011134:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011138:	b2db      	uxtb	r3, r3
 801113a:	4619      	mov	r1, r3
 801113c:	68f8      	ldr	r0, [r7, #12]
 801113e:	f000 fa37 	bl	80115b0 <USBD_CoreFindEP>
 8011142:	4603      	mov	r3, r0
 8011144:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011146:	7dbb      	ldrb	r3, [r7, #22]
 8011148:	2bff      	cmp	r3, #255	@ 0xff
 801114a:	d025      	beq.n	8011198 <USBD_LL_DataOutStage+0x15c>
 801114c:	7dbb      	ldrb	r3, [r7, #22]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d122      	bne.n	8011198 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011158:	b2db      	uxtb	r3, r3
 801115a:	2b03      	cmp	r3, #3
 801115c:	d117      	bne.n	801118e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801115e:	7dba      	ldrb	r2, [r7, #22]
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	32ae      	adds	r2, #174	@ 0xae
 8011164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011168:	699b      	ldr	r3, [r3, #24]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d00f      	beq.n	801118e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801116e:	7dba      	ldrb	r2, [r7, #22]
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8011176:	7dba      	ldrb	r2, [r7, #22]
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	32ae      	adds	r2, #174	@ 0xae
 801117c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011180:	699b      	ldr	r3, [r3, #24]
 8011182:	7afa      	ldrb	r2, [r7, #11]
 8011184:	4611      	mov	r1, r2
 8011186:	68f8      	ldr	r0, [r7, #12]
 8011188:	4798      	blx	r3
 801118a:	4603      	mov	r3, r0
 801118c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801118e:	7dfb      	ldrb	r3, [r7, #23]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d001      	beq.n	8011198 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8011194:	7dfb      	ldrb	r3, [r7, #23]
 8011196:	e000      	b.n	801119a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8011198:	2300      	movs	r3, #0
}
 801119a:	4618      	mov	r0, r3
 801119c:	3718      	adds	r7, #24
 801119e:	46bd      	mov	sp, r7
 80111a0:	bd80      	pop	{r7, pc}

080111a2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80111a2:	b580      	push	{r7, lr}
 80111a4:	b086      	sub	sp, #24
 80111a6:	af00      	add	r7, sp, #0
 80111a8:	60f8      	str	r0, [r7, #12]
 80111aa:	460b      	mov	r3, r1
 80111ac:	607a      	str	r2, [r7, #4]
 80111ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80111b0:	7afb      	ldrb	r3, [r7, #11]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d16f      	bne.n	8011296 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	3314      	adds	r3, #20
 80111ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80111c2:	2b02      	cmp	r3, #2
 80111c4:	d15a      	bne.n	801127c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80111c6:	693b      	ldr	r3, [r7, #16]
 80111c8:	689a      	ldr	r2, [r3, #8]
 80111ca:	693b      	ldr	r3, [r7, #16]
 80111cc:	68db      	ldr	r3, [r3, #12]
 80111ce:	429a      	cmp	r2, r3
 80111d0:	d914      	bls.n	80111fc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80111d2:	693b      	ldr	r3, [r7, #16]
 80111d4:	689a      	ldr	r2, [r3, #8]
 80111d6:	693b      	ldr	r3, [r7, #16]
 80111d8:	68db      	ldr	r3, [r3, #12]
 80111da:	1ad2      	subs	r2, r2, r3
 80111dc:	693b      	ldr	r3, [r7, #16]
 80111de:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80111e0:	693b      	ldr	r3, [r7, #16]
 80111e2:	689b      	ldr	r3, [r3, #8]
 80111e4:	461a      	mov	r2, r3
 80111e6:	6879      	ldr	r1, [r7, #4]
 80111e8:	68f8      	ldr	r0, [r7, #12]
 80111ea:	f001 f8e6 	bl	80123ba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80111ee:	2300      	movs	r3, #0
 80111f0:	2200      	movs	r2, #0
 80111f2:	2100      	movs	r1, #0
 80111f4:	68f8      	ldr	r0, [r7, #12]
 80111f6:	f008 ffb9 	bl	801a16c <USBD_LL_PrepareReceive>
 80111fa:	e03f      	b.n	801127c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80111fc:	693b      	ldr	r3, [r7, #16]
 80111fe:	68da      	ldr	r2, [r3, #12]
 8011200:	693b      	ldr	r3, [r7, #16]
 8011202:	689b      	ldr	r3, [r3, #8]
 8011204:	429a      	cmp	r2, r3
 8011206:	d11c      	bne.n	8011242 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011208:	693b      	ldr	r3, [r7, #16]
 801120a:	685a      	ldr	r2, [r3, #4]
 801120c:	693b      	ldr	r3, [r7, #16]
 801120e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011210:	429a      	cmp	r2, r3
 8011212:	d316      	bcc.n	8011242 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011214:	693b      	ldr	r3, [r7, #16]
 8011216:	685a      	ldr	r2, [r3, #4]
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 801121e:	429a      	cmp	r2, r3
 8011220:	d20f      	bcs.n	8011242 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011222:	2200      	movs	r2, #0
 8011224:	2100      	movs	r1, #0
 8011226:	68f8      	ldr	r0, [r7, #12]
 8011228:	f001 f8c7 	bl	80123ba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	2200      	movs	r2, #0
 8011230:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011234:	2300      	movs	r3, #0
 8011236:	2200      	movs	r2, #0
 8011238:	2100      	movs	r1, #0
 801123a:	68f8      	ldr	r0, [r7, #12]
 801123c:	f008 ff96 	bl	801a16c <USBD_LL_PrepareReceive>
 8011240:	e01c      	b.n	801127c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011248:	b2db      	uxtb	r3, r3
 801124a:	2b03      	cmp	r3, #3
 801124c:	d10f      	bne.n	801126e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011254:	68db      	ldr	r3, [r3, #12]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d009      	beq.n	801126e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	2200      	movs	r2, #0
 801125e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011268:	68db      	ldr	r3, [r3, #12]
 801126a:	68f8      	ldr	r0, [r7, #12]
 801126c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801126e:	2180      	movs	r1, #128	@ 0x80
 8011270:	68f8      	ldr	r0, [r7, #12]
 8011272:	f008 fe75 	bl	8019f60 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011276:	68f8      	ldr	r0, [r7, #12]
 8011278:	f001 f8f1 	bl	801245e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8011282:	2b00      	cmp	r3, #0
 8011284:	d03a      	beq.n	80112fc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8011286:	68f8      	ldr	r0, [r7, #12]
 8011288:	f7ff fe42 	bl	8010f10 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	2200      	movs	r2, #0
 8011290:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8011294:	e032      	b.n	80112fc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8011296:	7afb      	ldrb	r3, [r7, #11]
 8011298:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801129c:	b2db      	uxtb	r3, r3
 801129e:	4619      	mov	r1, r3
 80112a0:	68f8      	ldr	r0, [r7, #12]
 80112a2:	f000 f985 	bl	80115b0 <USBD_CoreFindEP>
 80112a6:	4603      	mov	r3, r0
 80112a8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80112aa:	7dfb      	ldrb	r3, [r7, #23]
 80112ac:	2bff      	cmp	r3, #255	@ 0xff
 80112ae:	d025      	beq.n	80112fc <USBD_LL_DataInStage+0x15a>
 80112b0:	7dfb      	ldrb	r3, [r7, #23]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d122      	bne.n	80112fc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80112bc:	b2db      	uxtb	r3, r3
 80112be:	2b03      	cmp	r3, #3
 80112c0:	d11c      	bne.n	80112fc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80112c2:	7dfa      	ldrb	r2, [r7, #23]
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	32ae      	adds	r2, #174	@ 0xae
 80112c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112cc:	695b      	ldr	r3, [r3, #20]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d014      	beq.n	80112fc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80112d2:	7dfa      	ldrb	r2, [r7, #23]
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80112da:	7dfa      	ldrb	r2, [r7, #23]
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	32ae      	adds	r2, #174	@ 0xae
 80112e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112e4:	695b      	ldr	r3, [r3, #20]
 80112e6:	7afa      	ldrb	r2, [r7, #11]
 80112e8:	4611      	mov	r1, r2
 80112ea:	68f8      	ldr	r0, [r7, #12]
 80112ec:	4798      	blx	r3
 80112ee:	4603      	mov	r3, r0
 80112f0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80112f2:	7dbb      	ldrb	r3, [r7, #22]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d001      	beq.n	80112fc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80112f8:	7dbb      	ldrb	r3, [r7, #22]
 80112fa:	e000      	b.n	80112fe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80112fc:	2300      	movs	r3, #0
}
 80112fe:	4618      	mov	r0, r3
 8011300:	3718      	adds	r7, #24
 8011302:	46bd      	mov	sp, r7
 8011304:	bd80      	pop	{r7, pc}

08011306 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011306:	b580      	push	{r7, lr}
 8011308:	b084      	sub	sp, #16
 801130a:	af00      	add	r7, sp, #0
 801130c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801130e:	2300      	movs	r3, #0
 8011310:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	2201      	movs	r2, #1
 8011316:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	2200      	movs	r2, #0
 801131e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	2200      	movs	r2, #0
 8011326:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	2200      	movs	r2, #0
 801132c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	2200      	movs	r2, #0
 8011334:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801133e:	2b00      	cmp	r3, #0
 8011340:	d014      	beq.n	801136c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011348:	685b      	ldr	r3, [r3, #4]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d00e      	beq.n	801136c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011354:	685b      	ldr	r3, [r3, #4]
 8011356:	687a      	ldr	r2, [r7, #4]
 8011358:	6852      	ldr	r2, [r2, #4]
 801135a:	b2d2      	uxtb	r2, r2
 801135c:	4611      	mov	r1, r2
 801135e:	6878      	ldr	r0, [r7, #4]
 8011360:	4798      	blx	r3
 8011362:	4603      	mov	r3, r0
 8011364:	2b00      	cmp	r3, #0
 8011366:	d001      	beq.n	801136c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8011368:	2303      	movs	r3, #3
 801136a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801136c:	2340      	movs	r3, #64	@ 0x40
 801136e:	2200      	movs	r2, #0
 8011370:	2100      	movs	r1, #0
 8011372:	6878      	ldr	r0, [r7, #4]
 8011374:	f008 fd80 	bl	8019e78 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	2201      	movs	r2, #1
 801137c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	2240      	movs	r2, #64	@ 0x40
 8011384:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011388:	2340      	movs	r3, #64	@ 0x40
 801138a:	2200      	movs	r2, #0
 801138c:	2180      	movs	r1, #128	@ 0x80
 801138e:	6878      	ldr	r0, [r7, #4]
 8011390:	f008 fd72 	bl	8019e78 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	2201      	movs	r2, #1
 8011398:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	2240      	movs	r2, #64	@ 0x40
 801139e:	621a      	str	r2, [r3, #32]

  return ret;
 80113a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80113a2:	4618      	mov	r0, r3
 80113a4:	3710      	adds	r7, #16
 80113a6:	46bd      	mov	sp, r7
 80113a8:	bd80      	pop	{r7, pc}

080113aa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80113aa:	b480      	push	{r7}
 80113ac:	b083      	sub	sp, #12
 80113ae:	af00      	add	r7, sp, #0
 80113b0:	6078      	str	r0, [r7, #4]
 80113b2:	460b      	mov	r3, r1
 80113b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	78fa      	ldrb	r2, [r7, #3]
 80113ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80113bc:	2300      	movs	r3, #0
}
 80113be:	4618      	mov	r0, r3
 80113c0:	370c      	adds	r7, #12
 80113c2:	46bd      	mov	sp, r7
 80113c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c8:	4770      	bx	lr

080113ca <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80113ca:	b480      	push	{r7}
 80113cc:	b083      	sub	sp, #12
 80113ce:	af00      	add	r7, sp, #0
 80113d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80113d8:	b2db      	uxtb	r3, r3
 80113da:	2b04      	cmp	r3, #4
 80113dc:	d006      	beq.n	80113ec <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80113e4:	b2da      	uxtb	r2, r3
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	2204      	movs	r2, #4
 80113f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80113f4:	2300      	movs	r3, #0
}
 80113f6:	4618      	mov	r0, r3
 80113f8:	370c      	adds	r7, #12
 80113fa:	46bd      	mov	sp, r7
 80113fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011400:	4770      	bx	lr

08011402 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011402:	b480      	push	{r7}
 8011404:	b083      	sub	sp, #12
 8011406:	af00      	add	r7, sp, #0
 8011408:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011410:	b2db      	uxtb	r3, r3
 8011412:	2b04      	cmp	r3, #4
 8011414:	d106      	bne.n	8011424 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 801141c:	b2da      	uxtb	r2, r3
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8011424:	2300      	movs	r3, #0
}
 8011426:	4618      	mov	r0, r3
 8011428:	370c      	adds	r7, #12
 801142a:	46bd      	mov	sp, r7
 801142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011430:	4770      	bx	lr

08011432 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011432:	b580      	push	{r7, lr}
 8011434:	b082      	sub	sp, #8
 8011436:	af00      	add	r7, sp, #0
 8011438:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011440:	b2db      	uxtb	r3, r3
 8011442:	2b03      	cmp	r3, #3
 8011444:	d110      	bne.n	8011468 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801144c:	2b00      	cmp	r3, #0
 801144e:	d00b      	beq.n	8011468 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011456:	69db      	ldr	r3, [r3, #28]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d005      	beq.n	8011468 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011462:	69db      	ldr	r3, [r3, #28]
 8011464:	6878      	ldr	r0, [r7, #4]
 8011466:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8011468:	2300      	movs	r3, #0
}
 801146a:	4618      	mov	r0, r3
 801146c:	3708      	adds	r7, #8
 801146e:	46bd      	mov	sp, r7
 8011470:	bd80      	pop	{r7, pc}

08011472 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8011472:	b580      	push	{r7, lr}
 8011474:	b082      	sub	sp, #8
 8011476:	af00      	add	r7, sp, #0
 8011478:	6078      	str	r0, [r7, #4]
 801147a:	460b      	mov	r3, r1
 801147c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	32ae      	adds	r2, #174	@ 0xae
 8011488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d101      	bne.n	8011494 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8011490:	2303      	movs	r3, #3
 8011492:	e01c      	b.n	80114ce <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801149a:	b2db      	uxtb	r3, r3
 801149c:	2b03      	cmp	r3, #3
 801149e:	d115      	bne.n	80114cc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	32ae      	adds	r2, #174	@ 0xae
 80114aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114ae:	6a1b      	ldr	r3, [r3, #32]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d00b      	beq.n	80114cc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	32ae      	adds	r2, #174	@ 0xae
 80114be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114c2:	6a1b      	ldr	r3, [r3, #32]
 80114c4:	78fa      	ldrb	r2, [r7, #3]
 80114c6:	4611      	mov	r1, r2
 80114c8:	6878      	ldr	r0, [r7, #4]
 80114ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80114cc:	2300      	movs	r3, #0
}
 80114ce:	4618      	mov	r0, r3
 80114d0:	3708      	adds	r7, #8
 80114d2:	46bd      	mov	sp, r7
 80114d4:	bd80      	pop	{r7, pc}

080114d6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80114d6:	b580      	push	{r7, lr}
 80114d8:	b082      	sub	sp, #8
 80114da:	af00      	add	r7, sp, #0
 80114dc:	6078      	str	r0, [r7, #4]
 80114de:	460b      	mov	r3, r1
 80114e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	32ae      	adds	r2, #174	@ 0xae
 80114ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d101      	bne.n	80114f8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80114f4:	2303      	movs	r3, #3
 80114f6:	e01c      	b.n	8011532 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80114fe:	b2db      	uxtb	r3, r3
 8011500:	2b03      	cmp	r3, #3
 8011502:	d115      	bne.n	8011530 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	32ae      	adds	r2, #174	@ 0xae
 801150e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011514:	2b00      	cmp	r3, #0
 8011516:	d00b      	beq.n	8011530 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	32ae      	adds	r2, #174	@ 0xae
 8011522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011528:	78fa      	ldrb	r2, [r7, #3]
 801152a:	4611      	mov	r1, r2
 801152c:	6878      	ldr	r0, [r7, #4]
 801152e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011530:	2300      	movs	r3, #0
}
 8011532:	4618      	mov	r0, r3
 8011534:	3708      	adds	r7, #8
 8011536:	46bd      	mov	sp, r7
 8011538:	bd80      	pop	{r7, pc}

0801153a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801153a:	b480      	push	{r7}
 801153c:	b083      	sub	sp, #12
 801153e:	af00      	add	r7, sp, #0
 8011540:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011542:	2300      	movs	r3, #0
}
 8011544:	4618      	mov	r0, r3
 8011546:	370c      	adds	r7, #12
 8011548:	46bd      	mov	sp, r7
 801154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154e:	4770      	bx	lr

08011550 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011550:	b580      	push	{r7, lr}
 8011552:	b084      	sub	sp, #16
 8011554:	af00      	add	r7, sp, #0
 8011556:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8011558:	2300      	movs	r3, #0
 801155a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	2201      	movs	r2, #1
 8011560:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801156a:	2b00      	cmp	r3, #0
 801156c:	d00e      	beq.n	801158c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011574:	685b      	ldr	r3, [r3, #4]
 8011576:	687a      	ldr	r2, [r7, #4]
 8011578:	6852      	ldr	r2, [r2, #4]
 801157a:	b2d2      	uxtb	r2, r2
 801157c:	4611      	mov	r1, r2
 801157e:	6878      	ldr	r0, [r7, #4]
 8011580:	4798      	blx	r3
 8011582:	4603      	mov	r3, r0
 8011584:	2b00      	cmp	r3, #0
 8011586:	d001      	beq.n	801158c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8011588:	2303      	movs	r3, #3
 801158a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801158c:	7bfb      	ldrb	r3, [r7, #15]
}
 801158e:	4618      	mov	r0, r3
 8011590:	3710      	adds	r7, #16
 8011592:	46bd      	mov	sp, r7
 8011594:	bd80      	pop	{r7, pc}

08011596 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011596:	b480      	push	{r7}
 8011598:	b083      	sub	sp, #12
 801159a:	af00      	add	r7, sp, #0
 801159c:	6078      	str	r0, [r7, #4]
 801159e:	460b      	mov	r3, r1
 80115a0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80115a2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80115a4:	4618      	mov	r0, r3
 80115a6:	370c      	adds	r7, #12
 80115a8:	46bd      	mov	sp, r7
 80115aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ae:	4770      	bx	lr

080115b0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80115b0:	b480      	push	{r7}
 80115b2:	b083      	sub	sp, #12
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
 80115b8:	460b      	mov	r3, r1
 80115ba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80115bc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80115be:	4618      	mov	r0, r3
 80115c0:	370c      	adds	r7, #12
 80115c2:	46bd      	mov	sp, r7
 80115c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c8:	4770      	bx	lr

080115ca <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80115ca:	b580      	push	{r7, lr}
 80115cc:	b086      	sub	sp, #24
 80115ce:	af00      	add	r7, sp, #0
 80115d0:	6078      	str	r0, [r7, #4]
 80115d2:	460b      	mov	r3, r1
 80115d4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80115de:	2300      	movs	r3, #0
 80115e0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	885b      	ldrh	r3, [r3, #2]
 80115e6:	b29b      	uxth	r3, r3
 80115e8:	68fa      	ldr	r2, [r7, #12]
 80115ea:	7812      	ldrb	r2, [r2, #0]
 80115ec:	4293      	cmp	r3, r2
 80115ee:	d91f      	bls.n	8011630 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	781b      	ldrb	r3, [r3, #0]
 80115f4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80115f6:	e013      	b.n	8011620 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80115f8:	f107 030a 	add.w	r3, r7, #10
 80115fc:	4619      	mov	r1, r3
 80115fe:	6978      	ldr	r0, [r7, #20]
 8011600:	f000 f81b 	bl	801163a <USBD_GetNextDesc>
 8011604:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8011606:	697b      	ldr	r3, [r7, #20]
 8011608:	785b      	ldrb	r3, [r3, #1]
 801160a:	2b05      	cmp	r3, #5
 801160c:	d108      	bne.n	8011620 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801160e:	697b      	ldr	r3, [r7, #20]
 8011610:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8011612:	693b      	ldr	r3, [r7, #16]
 8011614:	789b      	ldrb	r3, [r3, #2]
 8011616:	78fa      	ldrb	r2, [r7, #3]
 8011618:	429a      	cmp	r2, r3
 801161a:	d008      	beq.n	801162e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801161c:	2300      	movs	r3, #0
 801161e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	885b      	ldrh	r3, [r3, #2]
 8011624:	b29a      	uxth	r2, r3
 8011626:	897b      	ldrh	r3, [r7, #10]
 8011628:	429a      	cmp	r2, r3
 801162a:	d8e5      	bhi.n	80115f8 <USBD_GetEpDesc+0x2e>
 801162c:	e000      	b.n	8011630 <USBD_GetEpDesc+0x66>
          break;
 801162e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8011630:	693b      	ldr	r3, [r7, #16]
}
 8011632:	4618      	mov	r0, r3
 8011634:	3718      	adds	r7, #24
 8011636:	46bd      	mov	sp, r7
 8011638:	bd80      	pop	{r7, pc}

0801163a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801163a:	b480      	push	{r7}
 801163c:	b085      	sub	sp, #20
 801163e:	af00      	add	r7, sp, #0
 8011640:	6078      	str	r0, [r7, #4]
 8011642:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8011648:	683b      	ldr	r3, [r7, #0]
 801164a:	881b      	ldrh	r3, [r3, #0]
 801164c:	68fa      	ldr	r2, [r7, #12]
 801164e:	7812      	ldrb	r2, [r2, #0]
 8011650:	4413      	add	r3, r2
 8011652:	b29a      	uxth	r2, r3
 8011654:	683b      	ldr	r3, [r7, #0]
 8011656:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	781b      	ldrb	r3, [r3, #0]
 801165c:	461a      	mov	r2, r3
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	4413      	add	r3, r2
 8011662:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8011664:	68fb      	ldr	r3, [r7, #12]
}
 8011666:	4618      	mov	r0, r3
 8011668:	3714      	adds	r7, #20
 801166a:	46bd      	mov	sp, r7
 801166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011670:	4770      	bx	lr

08011672 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011672:	b480      	push	{r7}
 8011674:	b087      	sub	sp, #28
 8011676:	af00      	add	r7, sp, #0
 8011678:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801167e:	697b      	ldr	r3, [r7, #20]
 8011680:	781b      	ldrb	r3, [r3, #0]
 8011682:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011684:	697b      	ldr	r3, [r7, #20]
 8011686:	3301      	adds	r3, #1
 8011688:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801168a:	697b      	ldr	r3, [r7, #20]
 801168c:	781b      	ldrb	r3, [r3, #0]
 801168e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011690:	8a3b      	ldrh	r3, [r7, #16]
 8011692:	021b      	lsls	r3, r3, #8
 8011694:	b21a      	sxth	r2, r3
 8011696:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801169a:	4313      	orrs	r3, r2
 801169c:	b21b      	sxth	r3, r3
 801169e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80116a0:	89fb      	ldrh	r3, [r7, #14]
}
 80116a2:	4618      	mov	r0, r3
 80116a4:	371c      	adds	r7, #28
 80116a6:	46bd      	mov	sp, r7
 80116a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ac:	4770      	bx	lr
	...

080116b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80116b0:	b580      	push	{r7, lr}
 80116b2:	b084      	sub	sp, #16
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	6078      	str	r0, [r7, #4]
 80116b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80116ba:	2300      	movs	r3, #0
 80116bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80116be:	683b      	ldr	r3, [r7, #0]
 80116c0:	781b      	ldrb	r3, [r3, #0]
 80116c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80116c6:	2b40      	cmp	r3, #64	@ 0x40
 80116c8:	d005      	beq.n	80116d6 <USBD_StdDevReq+0x26>
 80116ca:	2b40      	cmp	r3, #64	@ 0x40
 80116cc:	d857      	bhi.n	801177e <USBD_StdDevReq+0xce>
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d00f      	beq.n	80116f2 <USBD_StdDevReq+0x42>
 80116d2:	2b20      	cmp	r3, #32
 80116d4:	d153      	bne.n	801177e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	32ae      	adds	r2, #174	@ 0xae
 80116e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116e4:	689b      	ldr	r3, [r3, #8]
 80116e6:	6839      	ldr	r1, [r7, #0]
 80116e8:	6878      	ldr	r0, [r7, #4]
 80116ea:	4798      	blx	r3
 80116ec:	4603      	mov	r3, r0
 80116ee:	73fb      	strb	r3, [r7, #15]
      break;
 80116f0:	e04a      	b.n	8011788 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80116f2:	683b      	ldr	r3, [r7, #0]
 80116f4:	785b      	ldrb	r3, [r3, #1]
 80116f6:	2b09      	cmp	r3, #9
 80116f8:	d83b      	bhi.n	8011772 <USBD_StdDevReq+0xc2>
 80116fa:	a201      	add	r2, pc, #4	@ (adr r2, 8011700 <USBD_StdDevReq+0x50>)
 80116fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011700:	08011755 	.word	0x08011755
 8011704:	08011769 	.word	0x08011769
 8011708:	08011773 	.word	0x08011773
 801170c:	0801175f 	.word	0x0801175f
 8011710:	08011773 	.word	0x08011773
 8011714:	08011733 	.word	0x08011733
 8011718:	08011729 	.word	0x08011729
 801171c:	08011773 	.word	0x08011773
 8011720:	0801174b 	.word	0x0801174b
 8011724:	0801173d 	.word	0x0801173d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011728:	6839      	ldr	r1, [r7, #0]
 801172a:	6878      	ldr	r0, [r7, #4]
 801172c:	f000 fa3c 	bl	8011ba8 <USBD_GetDescriptor>
          break;
 8011730:	e024      	b.n	801177c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011732:	6839      	ldr	r1, [r7, #0]
 8011734:	6878      	ldr	r0, [r7, #4]
 8011736:	f000 fbcb 	bl	8011ed0 <USBD_SetAddress>
          break;
 801173a:	e01f      	b.n	801177c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801173c:	6839      	ldr	r1, [r7, #0]
 801173e:	6878      	ldr	r0, [r7, #4]
 8011740:	f000 fc0a 	bl	8011f58 <USBD_SetConfig>
 8011744:	4603      	mov	r3, r0
 8011746:	73fb      	strb	r3, [r7, #15]
          break;
 8011748:	e018      	b.n	801177c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801174a:	6839      	ldr	r1, [r7, #0]
 801174c:	6878      	ldr	r0, [r7, #4]
 801174e:	f000 fcad 	bl	80120ac <USBD_GetConfig>
          break;
 8011752:	e013      	b.n	801177c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011754:	6839      	ldr	r1, [r7, #0]
 8011756:	6878      	ldr	r0, [r7, #4]
 8011758:	f000 fcde 	bl	8012118 <USBD_GetStatus>
          break;
 801175c:	e00e      	b.n	801177c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801175e:	6839      	ldr	r1, [r7, #0]
 8011760:	6878      	ldr	r0, [r7, #4]
 8011762:	f000 fd0d 	bl	8012180 <USBD_SetFeature>
          break;
 8011766:	e009      	b.n	801177c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011768:	6839      	ldr	r1, [r7, #0]
 801176a:	6878      	ldr	r0, [r7, #4]
 801176c:	f000 fd31 	bl	80121d2 <USBD_ClrFeature>
          break;
 8011770:	e004      	b.n	801177c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8011772:	6839      	ldr	r1, [r7, #0]
 8011774:	6878      	ldr	r0, [r7, #4]
 8011776:	f000 fd88 	bl	801228a <USBD_CtlError>
          break;
 801177a:	bf00      	nop
      }
      break;
 801177c:	e004      	b.n	8011788 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801177e:	6839      	ldr	r1, [r7, #0]
 8011780:	6878      	ldr	r0, [r7, #4]
 8011782:	f000 fd82 	bl	801228a <USBD_CtlError>
      break;
 8011786:	bf00      	nop
  }

  return ret;
 8011788:	7bfb      	ldrb	r3, [r7, #15]
}
 801178a:	4618      	mov	r0, r3
 801178c:	3710      	adds	r7, #16
 801178e:	46bd      	mov	sp, r7
 8011790:	bd80      	pop	{r7, pc}
 8011792:	bf00      	nop

08011794 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011794:	b580      	push	{r7, lr}
 8011796:	b084      	sub	sp, #16
 8011798:	af00      	add	r7, sp, #0
 801179a:	6078      	str	r0, [r7, #4]
 801179c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801179e:	2300      	movs	r3, #0
 80117a0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80117a2:	683b      	ldr	r3, [r7, #0]
 80117a4:	781b      	ldrb	r3, [r3, #0]
 80117a6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80117aa:	2b40      	cmp	r3, #64	@ 0x40
 80117ac:	d005      	beq.n	80117ba <USBD_StdItfReq+0x26>
 80117ae:	2b40      	cmp	r3, #64	@ 0x40
 80117b0:	d852      	bhi.n	8011858 <USBD_StdItfReq+0xc4>
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d001      	beq.n	80117ba <USBD_StdItfReq+0x26>
 80117b6:	2b20      	cmp	r3, #32
 80117b8:	d14e      	bne.n	8011858 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80117c0:	b2db      	uxtb	r3, r3
 80117c2:	3b01      	subs	r3, #1
 80117c4:	2b02      	cmp	r3, #2
 80117c6:	d840      	bhi.n	801184a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80117c8:	683b      	ldr	r3, [r7, #0]
 80117ca:	889b      	ldrh	r3, [r3, #4]
 80117cc:	b2db      	uxtb	r3, r3
 80117ce:	2b01      	cmp	r3, #1
 80117d0:	d836      	bhi.n	8011840 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80117d2:	683b      	ldr	r3, [r7, #0]
 80117d4:	889b      	ldrh	r3, [r3, #4]
 80117d6:	b2db      	uxtb	r3, r3
 80117d8:	4619      	mov	r1, r3
 80117da:	6878      	ldr	r0, [r7, #4]
 80117dc:	f7ff fedb 	bl	8011596 <USBD_CoreFindIF>
 80117e0:	4603      	mov	r3, r0
 80117e2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80117e4:	7bbb      	ldrb	r3, [r7, #14]
 80117e6:	2bff      	cmp	r3, #255	@ 0xff
 80117e8:	d01d      	beq.n	8011826 <USBD_StdItfReq+0x92>
 80117ea:	7bbb      	ldrb	r3, [r7, #14]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d11a      	bne.n	8011826 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80117f0:	7bba      	ldrb	r2, [r7, #14]
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	32ae      	adds	r2, #174	@ 0xae
 80117f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117fa:	689b      	ldr	r3, [r3, #8]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d00f      	beq.n	8011820 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8011800:	7bba      	ldrb	r2, [r7, #14]
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011808:	7bba      	ldrb	r2, [r7, #14]
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	32ae      	adds	r2, #174	@ 0xae
 801180e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011812:	689b      	ldr	r3, [r3, #8]
 8011814:	6839      	ldr	r1, [r7, #0]
 8011816:	6878      	ldr	r0, [r7, #4]
 8011818:	4798      	blx	r3
 801181a:	4603      	mov	r3, r0
 801181c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801181e:	e004      	b.n	801182a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8011820:	2303      	movs	r3, #3
 8011822:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011824:	e001      	b.n	801182a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8011826:	2303      	movs	r3, #3
 8011828:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801182a:	683b      	ldr	r3, [r7, #0]
 801182c:	88db      	ldrh	r3, [r3, #6]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d110      	bne.n	8011854 <USBD_StdItfReq+0xc0>
 8011832:	7bfb      	ldrb	r3, [r7, #15]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d10d      	bne.n	8011854 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011838:	6878      	ldr	r0, [r7, #4]
 801183a:	f000 fdfd 	bl	8012438 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801183e:	e009      	b.n	8011854 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8011840:	6839      	ldr	r1, [r7, #0]
 8011842:	6878      	ldr	r0, [r7, #4]
 8011844:	f000 fd21 	bl	801228a <USBD_CtlError>
          break;
 8011848:	e004      	b.n	8011854 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801184a:	6839      	ldr	r1, [r7, #0]
 801184c:	6878      	ldr	r0, [r7, #4]
 801184e:	f000 fd1c 	bl	801228a <USBD_CtlError>
          break;
 8011852:	e000      	b.n	8011856 <USBD_StdItfReq+0xc2>
          break;
 8011854:	bf00      	nop
      }
      break;
 8011856:	e004      	b.n	8011862 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8011858:	6839      	ldr	r1, [r7, #0]
 801185a:	6878      	ldr	r0, [r7, #4]
 801185c:	f000 fd15 	bl	801228a <USBD_CtlError>
      break;
 8011860:	bf00      	nop
  }

  return ret;
 8011862:	7bfb      	ldrb	r3, [r7, #15]
}
 8011864:	4618      	mov	r0, r3
 8011866:	3710      	adds	r7, #16
 8011868:	46bd      	mov	sp, r7
 801186a:	bd80      	pop	{r7, pc}

0801186c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801186c:	b580      	push	{r7, lr}
 801186e:	b084      	sub	sp, #16
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
 8011874:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8011876:	2300      	movs	r3, #0
 8011878:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801187a:	683b      	ldr	r3, [r7, #0]
 801187c:	889b      	ldrh	r3, [r3, #4]
 801187e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011880:	683b      	ldr	r3, [r7, #0]
 8011882:	781b      	ldrb	r3, [r3, #0]
 8011884:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011888:	2b40      	cmp	r3, #64	@ 0x40
 801188a:	d007      	beq.n	801189c <USBD_StdEPReq+0x30>
 801188c:	2b40      	cmp	r3, #64	@ 0x40
 801188e:	f200 817f 	bhi.w	8011b90 <USBD_StdEPReq+0x324>
 8011892:	2b00      	cmp	r3, #0
 8011894:	d02a      	beq.n	80118ec <USBD_StdEPReq+0x80>
 8011896:	2b20      	cmp	r3, #32
 8011898:	f040 817a 	bne.w	8011b90 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801189c:	7bbb      	ldrb	r3, [r7, #14]
 801189e:	4619      	mov	r1, r3
 80118a0:	6878      	ldr	r0, [r7, #4]
 80118a2:	f7ff fe85 	bl	80115b0 <USBD_CoreFindEP>
 80118a6:	4603      	mov	r3, r0
 80118a8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80118aa:	7b7b      	ldrb	r3, [r7, #13]
 80118ac:	2bff      	cmp	r3, #255	@ 0xff
 80118ae:	f000 8174 	beq.w	8011b9a <USBD_StdEPReq+0x32e>
 80118b2:	7b7b      	ldrb	r3, [r7, #13]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	f040 8170 	bne.w	8011b9a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80118ba:	7b7a      	ldrb	r2, [r7, #13]
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80118c2:	7b7a      	ldrb	r2, [r7, #13]
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	32ae      	adds	r2, #174	@ 0xae
 80118c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118cc:	689b      	ldr	r3, [r3, #8]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	f000 8163 	beq.w	8011b9a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80118d4:	7b7a      	ldrb	r2, [r7, #13]
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	32ae      	adds	r2, #174	@ 0xae
 80118da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118de:	689b      	ldr	r3, [r3, #8]
 80118e0:	6839      	ldr	r1, [r7, #0]
 80118e2:	6878      	ldr	r0, [r7, #4]
 80118e4:	4798      	blx	r3
 80118e6:	4603      	mov	r3, r0
 80118e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80118ea:	e156      	b.n	8011b9a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80118ec:	683b      	ldr	r3, [r7, #0]
 80118ee:	785b      	ldrb	r3, [r3, #1]
 80118f0:	2b03      	cmp	r3, #3
 80118f2:	d008      	beq.n	8011906 <USBD_StdEPReq+0x9a>
 80118f4:	2b03      	cmp	r3, #3
 80118f6:	f300 8145 	bgt.w	8011b84 <USBD_StdEPReq+0x318>
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	f000 809b 	beq.w	8011a36 <USBD_StdEPReq+0x1ca>
 8011900:	2b01      	cmp	r3, #1
 8011902:	d03c      	beq.n	801197e <USBD_StdEPReq+0x112>
 8011904:	e13e      	b.n	8011b84 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801190c:	b2db      	uxtb	r3, r3
 801190e:	2b02      	cmp	r3, #2
 8011910:	d002      	beq.n	8011918 <USBD_StdEPReq+0xac>
 8011912:	2b03      	cmp	r3, #3
 8011914:	d016      	beq.n	8011944 <USBD_StdEPReq+0xd8>
 8011916:	e02c      	b.n	8011972 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011918:	7bbb      	ldrb	r3, [r7, #14]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d00d      	beq.n	801193a <USBD_StdEPReq+0xce>
 801191e:	7bbb      	ldrb	r3, [r7, #14]
 8011920:	2b80      	cmp	r3, #128	@ 0x80
 8011922:	d00a      	beq.n	801193a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011924:	7bbb      	ldrb	r3, [r7, #14]
 8011926:	4619      	mov	r1, r3
 8011928:	6878      	ldr	r0, [r7, #4]
 801192a:	f008 fb19 	bl	8019f60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801192e:	2180      	movs	r1, #128	@ 0x80
 8011930:	6878      	ldr	r0, [r7, #4]
 8011932:	f008 fb15 	bl	8019f60 <USBD_LL_StallEP>
 8011936:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011938:	e020      	b.n	801197c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801193a:	6839      	ldr	r1, [r7, #0]
 801193c:	6878      	ldr	r0, [r7, #4]
 801193e:	f000 fca4 	bl	801228a <USBD_CtlError>
              break;
 8011942:	e01b      	b.n	801197c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011944:	683b      	ldr	r3, [r7, #0]
 8011946:	885b      	ldrh	r3, [r3, #2]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d10e      	bne.n	801196a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801194c:	7bbb      	ldrb	r3, [r7, #14]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d00b      	beq.n	801196a <USBD_StdEPReq+0xfe>
 8011952:	7bbb      	ldrb	r3, [r7, #14]
 8011954:	2b80      	cmp	r3, #128	@ 0x80
 8011956:	d008      	beq.n	801196a <USBD_StdEPReq+0xfe>
 8011958:	683b      	ldr	r3, [r7, #0]
 801195a:	88db      	ldrh	r3, [r3, #6]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d104      	bne.n	801196a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011960:	7bbb      	ldrb	r3, [r7, #14]
 8011962:	4619      	mov	r1, r3
 8011964:	6878      	ldr	r0, [r7, #4]
 8011966:	f008 fafb 	bl	8019f60 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801196a:	6878      	ldr	r0, [r7, #4]
 801196c:	f000 fd64 	bl	8012438 <USBD_CtlSendStatus>

              break;
 8011970:	e004      	b.n	801197c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8011972:	6839      	ldr	r1, [r7, #0]
 8011974:	6878      	ldr	r0, [r7, #4]
 8011976:	f000 fc88 	bl	801228a <USBD_CtlError>
              break;
 801197a:	bf00      	nop
          }
          break;
 801197c:	e107      	b.n	8011b8e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011984:	b2db      	uxtb	r3, r3
 8011986:	2b02      	cmp	r3, #2
 8011988:	d002      	beq.n	8011990 <USBD_StdEPReq+0x124>
 801198a:	2b03      	cmp	r3, #3
 801198c:	d016      	beq.n	80119bc <USBD_StdEPReq+0x150>
 801198e:	e04b      	b.n	8011a28 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011990:	7bbb      	ldrb	r3, [r7, #14]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d00d      	beq.n	80119b2 <USBD_StdEPReq+0x146>
 8011996:	7bbb      	ldrb	r3, [r7, #14]
 8011998:	2b80      	cmp	r3, #128	@ 0x80
 801199a:	d00a      	beq.n	80119b2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801199c:	7bbb      	ldrb	r3, [r7, #14]
 801199e:	4619      	mov	r1, r3
 80119a0:	6878      	ldr	r0, [r7, #4]
 80119a2:	f008 fadd 	bl	8019f60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80119a6:	2180      	movs	r1, #128	@ 0x80
 80119a8:	6878      	ldr	r0, [r7, #4]
 80119aa:	f008 fad9 	bl	8019f60 <USBD_LL_StallEP>
 80119ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80119b0:	e040      	b.n	8011a34 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80119b2:	6839      	ldr	r1, [r7, #0]
 80119b4:	6878      	ldr	r0, [r7, #4]
 80119b6:	f000 fc68 	bl	801228a <USBD_CtlError>
              break;
 80119ba:	e03b      	b.n	8011a34 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80119bc:	683b      	ldr	r3, [r7, #0]
 80119be:	885b      	ldrh	r3, [r3, #2]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d136      	bne.n	8011a32 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80119c4:	7bbb      	ldrb	r3, [r7, #14]
 80119c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d004      	beq.n	80119d8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80119ce:	7bbb      	ldrb	r3, [r7, #14]
 80119d0:	4619      	mov	r1, r3
 80119d2:	6878      	ldr	r0, [r7, #4]
 80119d4:	f008 fafa 	bl	8019fcc <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80119d8:	6878      	ldr	r0, [r7, #4]
 80119da:	f000 fd2d 	bl	8012438 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80119de:	7bbb      	ldrb	r3, [r7, #14]
 80119e0:	4619      	mov	r1, r3
 80119e2:	6878      	ldr	r0, [r7, #4]
 80119e4:	f7ff fde4 	bl	80115b0 <USBD_CoreFindEP>
 80119e8:	4603      	mov	r3, r0
 80119ea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80119ec:	7b7b      	ldrb	r3, [r7, #13]
 80119ee:	2bff      	cmp	r3, #255	@ 0xff
 80119f0:	d01f      	beq.n	8011a32 <USBD_StdEPReq+0x1c6>
 80119f2:	7b7b      	ldrb	r3, [r7, #13]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d11c      	bne.n	8011a32 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80119f8:	7b7a      	ldrb	r2, [r7, #13]
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8011a00:	7b7a      	ldrb	r2, [r7, #13]
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	32ae      	adds	r2, #174	@ 0xae
 8011a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a0a:	689b      	ldr	r3, [r3, #8]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d010      	beq.n	8011a32 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011a10:	7b7a      	ldrb	r2, [r7, #13]
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	32ae      	adds	r2, #174	@ 0xae
 8011a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a1a:	689b      	ldr	r3, [r3, #8]
 8011a1c:	6839      	ldr	r1, [r7, #0]
 8011a1e:	6878      	ldr	r0, [r7, #4]
 8011a20:	4798      	blx	r3
 8011a22:	4603      	mov	r3, r0
 8011a24:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8011a26:	e004      	b.n	8011a32 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8011a28:	6839      	ldr	r1, [r7, #0]
 8011a2a:	6878      	ldr	r0, [r7, #4]
 8011a2c:	f000 fc2d 	bl	801228a <USBD_CtlError>
              break;
 8011a30:	e000      	b.n	8011a34 <USBD_StdEPReq+0x1c8>
              break;
 8011a32:	bf00      	nop
          }
          break;
 8011a34:	e0ab      	b.n	8011b8e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011a3c:	b2db      	uxtb	r3, r3
 8011a3e:	2b02      	cmp	r3, #2
 8011a40:	d002      	beq.n	8011a48 <USBD_StdEPReq+0x1dc>
 8011a42:	2b03      	cmp	r3, #3
 8011a44:	d032      	beq.n	8011aac <USBD_StdEPReq+0x240>
 8011a46:	e097      	b.n	8011b78 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011a48:	7bbb      	ldrb	r3, [r7, #14]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d007      	beq.n	8011a5e <USBD_StdEPReq+0x1f2>
 8011a4e:	7bbb      	ldrb	r3, [r7, #14]
 8011a50:	2b80      	cmp	r3, #128	@ 0x80
 8011a52:	d004      	beq.n	8011a5e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8011a54:	6839      	ldr	r1, [r7, #0]
 8011a56:	6878      	ldr	r0, [r7, #4]
 8011a58:	f000 fc17 	bl	801228a <USBD_CtlError>
                break;
 8011a5c:	e091      	b.n	8011b82 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011a5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	da0b      	bge.n	8011a7e <USBD_StdEPReq+0x212>
 8011a66:	7bbb      	ldrb	r3, [r7, #14]
 8011a68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011a6c:	4613      	mov	r3, r2
 8011a6e:	009b      	lsls	r3, r3, #2
 8011a70:	4413      	add	r3, r2
 8011a72:	009b      	lsls	r3, r3, #2
 8011a74:	3310      	adds	r3, #16
 8011a76:	687a      	ldr	r2, [r7, #4]
 8011a78:	4413      	add	r3, r2
 8011a7a:	3304      	adds	r3, #4
 8011a7c:	e00b      	b.n	8011a96 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011a7e:	7bbb      	ldrb	r3, [r7, #14]
 8011a80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011a84:	4613      	mov	r3, r2
 8011a86:	009b      	lsls	r3, r3, #2
 8011a88:	4413      	add	r3, r2
 8011a8a:	009b      	lsls	r3, r3, #2
 8011a8c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011a90:	687a      	ldr	r2, [r7, #4]
 8011a92:	4413      	add	r3, r2
 8011a94:	3304      	adds	r3, #4
 8011a96:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011a98:	68bb      	ldr	r3, [r7, #8]
 8011a9a:	2200      	movs	r2, #0
 8011a9c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011a9e:	68bb      	ldr	r3, [r7, #8]
 8011aa0:	2202      	movs	r2, #2
 8011aa2:	4619      	mov	r1, r3
 8011aa4:	6878      	ldr	r0, [r7, #4]
 8011aa6:	f000 fc6d 	bl	8012384 <USBD_CtlSendData>
              break;
 8011aaa:	e06a      	b.n	8011b82 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011aac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	da11      	bge.n	8011ad8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011ab4:	7bbb      	ldrb	r3, [r7, #14]
 8011ab6:	f003 020f 	and.w	r2, r3, #15
 8011aba:	6879      	ldr	r1, [r7, #4]
 8011abc:	4613      	mov	r3, r2
 8011abe:	009b      	lsls	r3, r3, #2
 8011ac0:	4413      	add	r3, r2
 8011ac2:	009b      	lsls	r3, r3, #2
 8011ac4:	440b      	add	r3, r1
 8011ac6:	3324      	adds	r3, #36	@ 0x24
 8011ac8:	881b      	ldrh	r3, [r3, #0]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d117      	bne.n	8011afe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011ace:	6839      	ldr	r1, [r7, #0]
 8011ad0:	6878      	ldr	r0, [r7, #4]
 8011ad2:	f000 fbda 	bl	801228a <USBD_CtlError>
                  break;
 8011ad6:	e054      	b.n	8011b82 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011ad8:	7bbb      	ldrb	r3, [r7, #14]
 8011ada:	f003 020f 	and.w	r2, r3, #15
 8011ade:	6879      	ldr	r1, [r7, #4]
 8011ae0:	4613      	mov	r3, r2
 8011ae2:	009b      	lsls	r3, r3, #2
 8011ae4:	4413      	add	r3, r2
 8011ae6:	009b      	lsls	r3, r3, #2
 8011ae8:	440b      	add	r3, r1
 8011aea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011aee:	881b      	ldrh	r3, [r3, #0]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d104      	bne.n	8011afe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011af4:	6839      	ldr	r1, [r7, #0]
 8011af6:	6878      	ldr	r0, [r7, #4]
 8011af8:	f000 fbc7 	bl	801228a <USBD_CtlError>
                  break;
 8011afc:	e041      	b.n	8011b82 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011afe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	da0b      	bge.n	8011b1e <USBD_StdEPReq+0x2b2>
 8011b06:	7bbb      	ldrb	r3, [r7, #14]
 8011b08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011b0c:	4613      	mov	r3, r2
 8011b0e:	009b      	lsls	r3, r3, #2
 8011b10:	4413      	add	r3, r2
 8011b12:	009b      	lsls	r3, r3, #2
 8011b14:	3310      	adds	r3, #16
 8011b16:	687a      	ldr	r2, [r7, #4]
 8011b18:	4413      	add	r3, r2
 8011b1a:	3304      	adds	r3, #4
 8011b1c:	e00b      	b.n	8011b36 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011b1e:	7bbb      	ldrb	r3, [r7, #14]
 8011b20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011b24:	4613      	mov	r3, r2
 8011b26:	009b      	lsls	r3, r3, #2
 8011b28:	4413      	add	r3, r2
 8011b2a:	009b      	lsls	r3, r3, #2
 8011b2c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011b30:	687a      	ldr	r2, [r7, #4]
 8011b32:	4413      	add	r3, r2
 8011b34:	3304      	adds	r3, #4
 8011b36:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011b38:	7bbb      	ldrb	r3, [r7, #14]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d002      	beq.n	8011b44 <USBD_StdEPReq+0x2d8>
 8011b3e:	7bbb      	ldrb	r3, [r7, #14]
 8011b40:	2b80      	cmp	r3, #128	@ 0x80
 8011b42:	d103      	bne.n	8011b4c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8011b44:	68bb      	ldr	r3, [r7, #8]
 8011b46:	2200      	movs	r2, #0
 8011b48:	601a      	str	r2, [r3, #0]
 8011b4a:	e00e      	b.n	8011b6a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011b4c:	7bbb      	ldrb	r3, [r7, #14]
 8011b4e:	4619      	mov	r1, r3
 8011b50:	6878      	ldr	r0, [r7, #4]
 8011b52:	f008 fa71 	bl	801a038 <USBD_LL_IsStallEP>
 8011b56:	4603      	mov	r3, r0
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d003      	beq.n	8011b64 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8011b5c:	68bb      	ldr	r3, [r7, #8]
 8011b5e:	2201      	movs	r2, #1
 8011b60:	601a      	str	r2, [r3, #0]
 8011b62:	e002      	b.n	8011b6a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8011b64:	68bb      	ldr	r3, [r7, #8]
 8011b66:	2200      	movs	r2, #0
 8011b68:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011b6a:	68bb      	ldr	r3, [r7, #8]
 8011b6c:	2202      	movs	r2, #2
 8011b6e:	4619      	mov	r1, r3
 8011b70:	6878      	ldr	r0, [r7, #4]
 8011b72:	f000 fc07 	bl	8012384 <USBD_CtlSendData>
              break;
 8011b76:	e004      	b.n	8011b82 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8011b78:	6839      	ldr	r1, [r7, #0]
 8011b7a:	6878      	ldr	r0, [r7, #4]
 8011b7c:	f000 fb85 	bl	801228a <USBD_CtlError>
              break;
 8011b80:	bf00      	nop
          }
          break;
 8011b82:	e004      	b.n	8011b8e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8011b84:	6839      	ldr	r1, [r7, #0]
 8011b86:	6878      	ldr	r0, [r7, #4]
 8011b88:	f000 fb7f 	bl	801228a <USBD_CtlError>
          break;
 8011b8c:	bf00      	nop
      }
      break;
 8011b8e:	e005      	b.n	8011b9c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8011b90:	6839      	ldr	r1, [r7, #0]
 8011b92:	6878      	ldr	r0, [r7, #4]
 8011b94:	f000 fb79 	bl	801228a <USBD_CtlError>
      break;
 8011b98:	e000      	b.n	8011b9c <USBD_StdEPReq+0x330>
      break;
 8011b9a:	bf00      	nop
  }

  return ret;
 8011b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	3710      	adds	r7, #16
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	bd80      	pop	{r7, pc}
	...

08011ba8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ba8:	b580      	push	{r7, lr}
 8011baa:	b084      	sub	sp, #16
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	6078      	str	r0, [r7, #4]
 8011bb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011bb2:	2300      	movs	r3, #0
 8011bb4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011bba:	2300      	movs	r3, #0
 8011bbc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011bbe:	683b      	ldr	r3, [r7, #0]
 8011bc0:	885b      	ldrh	r3, [r3, #2]
 8011bc2:	0a1b      	lsrs	r3, r3, #8
 8011bc4:	b29b      	uxth	r3, r3
 8011bc6:	3b01      	subs	r3, #1
 8011bc8:	2b0e      	cmp	r3, #14
 8011bca:	f200 8152 	bhi.w	8011e72 <USBD_GetDescriptor+0x2ca>
 8011bce:	a201      	add	r2, pc, #4	@ (adr r2, 8011bd4 <USBD_GetDescriptor+0x2c>)
 8011bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bd4:	08011c45 	.word	0x08011c45
 8011bd8:	08011c5d 	.word	0x08011c5d
 8011bdc:	08011c9d 	.word	0x08011c9d
 8011be0:	08011e73 	.word	0x08011e73
 8011be4:	08011e73 	.word	0x08011e73
 8011be8:	08011e13 	.word	0x08011e13
 8011bec:	08011e3f 	.word	0x08011e3f
 8011bf0:	08011e73 	.word	0x08011e73
 8011bf4:	08011e73 	.word	0x08011e73
 8011bf8:	08011e73 	.word	0x08011e73
 8011bfc:	08011e73 	.word	0x08011e73
 8011c00:	08011e73 	.word	0x08011e73
 8011c04:	08011e73 	.word	0x08011e73
 8011c08:	08011e73 	.word	0x08011e73
 8011c0c:	08011c11 	.word	0x08011c11
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011c16:	69db      	ldr	r3, [r3, #28]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d00b      	beq.n	8011c34 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011c22:	69db      	ldr	r3, [r3, #28]
 8011c24:	687a      	ldr	r2, [r7, #4]
 8011c26:	7c12      	ldrb	r2, [r2, #16]
 8011c28:	f107 0108 	add.w	r1, r7, #8
 8011c2c:	4610      	mov	r0, r2
 8011c2e:	4798      	blx	r3
 8011c30:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011c32:	e126      	b.n	8011e82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011c34:	6839      	ldr	r1, [r7, #0]
 8011c36:	6878      	ldr	r0, [r7, #4]
 8011c38:	f000 fb27 	bl	801228a <USBD_CtlError>
        err++;
 8011c3c:	7afb      	ldrb	r3, [r7, #11]
 8011c3e:	3301      	adds	r3, #1
 8011c40:	72fb      	strb	r3, [r7, #11]
      break;
 8011c42:	e11e      	b.n	8011e82 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	687a      	ldr	r2, [r7, #4]
 8011c4e:	7c12      	ldrb	r2, [r2, #16]
 8011c50:	f107 0108 	add.w	r1, r7, #8
 8011c54:	4610      	mov	r0, r2
 8011c56:	4798      	blx	r3
 8011c58:	60f8      	str	r0, [r7, #12]
      break;
 8011c5a:	e112      	b.n	8011e82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	7c1b      	ldrb	r3, [r3, #16]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d10d      	bne.n	8011c80 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011c6c:	f107 0208 	add.w	r2, r7, #8
 8011c70:	4610      	mov	r0, r2
 8011c72:	4798      	blx	r3
 8011c74:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	3301      	adds	r3, #1
 8011c7a:	2202      	movs	r2, #2
 8011c7c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011c7e:	e100      	b.n	8011e82 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c88:	f107 0208 	add.w	r2, r7, #8
 8011c8c:	4610      	mov	r0, r2
 8011c8e:	4798      	blx	r3
 8011c90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	3301      	adds	r3, #1
 8011c96:	2202      	movs	r2, #2
 8011c98:	701a      	strb	r2, [r3, #0]
      break;
 8011c9a:	e0f2      	b.n	8011e82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011c9c:	683b      	ldr	r3, [r7, #0]
 8011c9e:	885b      	ldrh	r3, [r3, #2]
 8011ca0:	b2db      	uxtb	r3, r3
 8011ca2:	2b05      	cmp	r3, #5
 8011ca4:	f200 80ac 	bhi.w	8011e00 <USBD_GetDescriptor+0x258>
 8011ca8:	a201      	add	r2, pc, #4	@ (adr r2, 8011cb0 <USBD_GetDescriptor+0x108>)
 8011caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cae:	bf00      	nop
 8011cb0:	08011cc9 	.word	0x08011cc9
 8011cb4:	08011cfd 	.word	0x08011cfd
 8011cb8:	08011d31 	.word	0x08011d31
 8011cbc:	08011d65 	.word	0x08011d65
 8011cc0:	08011d99 	.word	0x08011d99
 8011cc4:	08011dcd 	.word	0x08011dcd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011cce:	685b      	ldr	r3, [r3, #4]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d00b      	beq.n	8011cec <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011cda:	685b      	ldr	r3, [r3, #4]
 8011cdc:	687a      	ldr	r2, [r7, #4]
 8011cde:	7c12      	ldrb	r2, [r2, #16]
 8011ce0:	f107 0108 	add.w	r1, r7, #8
 8011ce4:	4610      	mov	r0, r2
 8011ce6:	4798      	blx	r3
 8011ce8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011cea:	e091      	b.n	8011e10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011cec:	6839      	ldr	r1, [r7, #0]
 8011cee:	6878      	ldr	r0, [r7, #4]
 8011cf0:	f000 facb 	bl	801228a <USBD_CtlError>
            err++;
 8011cf4:	7afb      	ldrb	r3, [r7, #11]
 8011cf6:	3301      	adds	r3, #1
 8011cf8:	72fb      	strb	r3, [r7, #11]
          break;
 8011cfa:	e089      	b.n	8011e10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011d02:	689b      	ldr	r3, [r3, #8]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d00b      	beq.n	8011d20 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011d0e:	689b      	ldr	r3, [r3, #8]
 8011d10:	687a      	ldr	r2, [r7, #4]
 8011d12:	7c12      	ldrb	r2, [r2, #16]
 8011d14:	f107 0108 	add.w	r1, r7, #8
 8011d18:	4610      	mov	r0, r2
 8011d1a:	4798      	blx	r3
 8011d1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011d1e:	e077      	b.n	8011e10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011d20:	6839      	ldr	r1, [r7, #0]
 8011d22:	6878      	ldr	r0, [r7, #4]
 8011d24:	f000 fab1 	bl	801228a <USBD_CtlError>
            err++;
 8011d28:	7afb      	ldrb	r3, [r7, #11]
 8011d2a:	3301      	adds	r3, #1
 8011d2c:	72fb      	strb	r3, [r7, #11]
          break;
 8011d2e:	e06f      	b.n	8011e10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011d36:	68db      	ldr	r3, [r3, #12]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d00b      	beq.n	8011d54 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011d42:	68db      	ldr	r3, [r3, #12]
 8011d44:	687a      	ldr	r2, [r7, #4]
 8011d46:	7c12      	ldrb	r2, [r2, #16]
 8011d48:	f107 0108 	add.w	r1, r7, #8
 8011d4c:	4610      	mov	r0, r2
 8011d4e:	4798      	blx	r3
 8011d50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011d52:	e05d      	b.n	8011e10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011d54:	6839      	ldr	r1, [r7, #0]
 8011d56:	6878      	ldr	r0, [r7, #4]
 8011d58:	f000 fa97 	bl	801228a <USBD_CtlError>
            err++;
 8011d5c:	7afb      	ldrb	r3, [r7, #11]
 8011d5e:	3301      	adds	r3, #1
 8011d60:	72fb      	strb	r3, [r7, #11]
          break;
 8011d62:	e055      	b.n	8011e10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011d6a:	691b      	ldr	r3, [r3, #16]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d00b      	beq.n	8011d88 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011d76:	691b      	ldr	r3, [r3, #16]
 8011d78:	687a      	ldr	r2, [r7, #4]
 8011d7a:	7c12      	ldrb	r2, [r2, #16]
 8011d7c:	f107 0108 	add.w	r1, r7, #8
 8011d80:	4610      	mov	r0, r2
 8011d82:	4798      	blx	r3
 8011d84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011d86:	e043      	b.n	8011e10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011d88:	6839      	ldr	r1, [r7, #0]
 8011d8a:	6878      	ldr	r0, [r7, #4]
 8011d8c:	f000 fa7d 	bl	801228a <USBD_CtlError>
            err++;
 8011d90:	7afb      	ldrb	r3, [r7, #11]
 8011d92:	3301      	adds	r3, #1
 8011d94:	72fb      	strb	r3, [r7, #11]
          break;
 8011d96:	e03b      	b.n	8011e10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011d9e:	695b      	ldr	r3, [r3, #20]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d00b      	beq.n	8011dbc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011daa:	695b      	ldr	r3, [r3, #20]
 8011dac:	687a      	ldr	r2, [r7, #4]
 8011dae:	7c12      	ldrb	r2, [r2, #16]
 8011db0:	f107 0108 	add.w	r1, r7, #8
 8011db4:	4610      	mov	r0, r2
 8011db6:	4798      	blx	r3
 8011db8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011dba:	e029      	b.n	8011e10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011dbc:	6839      	ldr	r1, [r7, #0]
 8011dbe:	6878      	ldr	r0, [r7, #4]
 8011dc0:	f000 fa63 	bl	801228a <USBD_CtlError>
            err++;
 8011dc4:	7afb      	ldrb	r3, [r7, #11]
 8011dc6:	3301      	adds	r3, #1
 8011dc8:	72fb      	strb	r3, [r7, #11]
          break;
 8011dca:	e021      	b.n	8011e10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011dd2:	699b      	ldr	r3, [r3, #24]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d00b      	beq.n	8011df0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011dde:	699b      	ldr	r3, [r3, #24]
 8011de0:	687a      	ldr	r2, [r7, #4]
 8011de2:	7c12      	ldrb	r2, [r2, #16]
 8011de4:	f107 0108 	add.w	r1, r7, #8
 8011de8:	4610      	mov	r0, r2
 8011dea:	4798      	blx	r3
 8011dec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011dee:	e00f      	b.n	8011e10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011df0:	6839      	ldr	r1, [r7, #0]
 8011df2:	6878      	ldr	r0, [r7, #4]
 8011df4:	f000 fa49 	bl	801228a <USBD_CtlError>
            err++;
 8011df8:	7afb      	ldrb	r3, [r7, #11]
 8011dfa:	3301      	adds	r3, #1
 8011dfc:	72fb      	strb	r3, [r7, #11]
          break;
 8011dfe:	e007      	b.n	8011e10 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011e00:	6839      	ldr	r1, [r7, #0]
 8011e02:	6878      	ldr	r0, [r7, #4]
 8011e04:	f000 fa41 	bl	801228a <USBD_CtlError>
          err++;
 8011e08:	7afb      	ldrb	r3, [r7, #11]
 8011e0a:	3301      	adds	r3, #1
 8011e0c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8011e0e:	bf00      	nop
      }
      break;
 8011e10:	e037      	b.n	8011e82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	7c1b      	ldrb	r3, [r3, #16]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d109      	bne.n	8011e2e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011e22:	f107 0208 	add.w	r2, r7, #8
 8011e26:	4610      	mov	r0, r2
 8011e28:	4798      	blx	r3
 8011e2a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011e2c:	e029      	b.n	8011e82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011e2e:	6839      	ldr	r1, [r7, #0]
 8011e30:	6878      	ldr	r0, [r7, #4]
 8011e32:	f000 fa2a 	bl	801228a <USBD_CtlError>
        err++;
 8011e36:	7afb      	ldrb	r3, [r7, #11]
 8011e38:	3301      	adds	r3, #1
 8011e3a:	72fb      	strb	r3, [r7, #11]
      break;
 8011e3c:	e021      	b.n	8011e82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	7c1b      	ldrb	r3, [r3, #16]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d10d      	bne.n	8011e62 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e4e:	f107 0208 	add.w	r2, r7, #8
 8011e52:	4610      	mov	r0, r2
 8011e54:	4798      	blx	r3
 8011e56:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	3301      	adds	r3, #1
 8011e5c:	2207      	movs	r2, #7
 8011e5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011e60:	e00f      	b.n	8011e82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011e62:	6839      	ldr	r1, [r7, #0]
 8011e64:	6878      	ldr	r0, [r7, #4]
 8011e66:	f000 fa10 	bl	801228a <USBD_CtlError>
        err++;
 8011e6a:	7afb      	ldrb	r3, [r7, #11]
 8011e6c:	3301      	adds	r3, #1
 8011e6e:	72fb      	strb	r3, [r7, #11]
      break;
 8011e70:	e007      	b.n	8011e82 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8011e72:	6839      	ldr	r1, [r7, #0]
 8011e74:	6878      	ldr	r0, [r7, #4]
 8011e76:	f000 fa08 	bl	801228a <USBD_CtlError>
      err++;
 8011e7a:	7afb      	ldrb	r3, [r7, #11]
 8011e7c:	3301      	adds	r3, #1
 8011e7e:	72fb      	strb	r3, [r7, #11]
      break;
 8011e80:	bf00      	nop
  }

  if (err != 0U)
 8011e82:	7afb      	ldrb	r3, [r7, #11]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d11e      	bne.n	8011ec6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8011e88:	683b      	ldr	r3, [r7, #0]
 8011e8a:	88db      	ldrh	r3, [r3, #6]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d016      	beq.n	8011ebe <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8011e90:	893b      	ldrh	r3, [r7, #8]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d00e      	beq.n	8011eb4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8011e96:	683b      	ldr	r3, [r7, #0]
 8011e98:	88da      	ldrh	r2, [r3, #6]
 8011e9a:	893b      	ldrh	r3, [r7, #8]
 8011e9c:	4293      	cmp	r3, r2
 8011e9e:	bf28      	it	cs
 8011ea0:	4613      	movcs	r3, r2
 8011ea2:	b29b      	uxth	r3, r3
 8011ea4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8011ea6:	893b      	ldrh	r3, [r7, #8]
 8011ea8:	461a      	mov	r2, r3
 8011eaa:	68f9      	ldr	r1, [r7, #12]
 8011eac:	6878      	ldr	r0, [r7, #4]
 8011eae:	f000 fa69 	bl	8012384 <USBD_CtlSendData>
 8011eb2:	e009      	b.n	8011ec8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8011eb4:	6839      	ldr	r1, [r7, #0]
 8011eb6:	6878      	ldr	r0, [r7, #4]
 8011eb8:	f000 f9e7 	bl	801228a <USBD_CtlError>
 8011ebc:	e004      	b.n	8011ec8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8011ebe:	6878      	ldr	r0, [r7, #4]
 8011ec0:	f000 faba 	bl	8012438 <USBD_CtlSendStatus>
 8011ec4:	e000      	b.n	8011ec8 <USBD_GetDescriptor+0x320>
    return;
 8011ec6:	bf00      	nop
  }
}
 8011ec8:	3710      	adds	r7, #16
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	bd80      	pop	{r7, pc}
 8011ece:	bf00      	nop

08011ed0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ed0:	b580      	push	{r7, lr}
 8011ed2:	b084      	sub	sp, #16
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	6078      	str	r0, [r7, #4]
 8011ed8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011eda:	683b      	ldr	r3, [r7, #0]
 8011edc:	889b      	ldrh	r3, [r3, #4]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d131      	bne.n	8011f46 <USBD_SetAddress+0x76>
 8011ee2:	683b      	ldr	r3, [r7, #0]
 8011ee4:	88db      	ldrh	r3, [r3, #6]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d12d      	bne.n	8011f46 <USBD_SetAddress+0x76>
 8011eea:	683b      	ldr	r3, [r7, #0]
 8011eec:	885b      	ldrh	r3, [r3, #2]
 8011eee:	2b7f      	cmp	r3, #127	@ 0x7f
 8011ef0:	d829      	bhi.n	8011f46 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011ef2:	683b      	ldr	r3, [r7, #0]
 8011ef4:	885b      	ldrh	r3, [r3, #2]
 8011ef6:	b2db      	uxtb	r3, r3
 8011ef8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011efc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011f04:	b2db      	uxtb	r3, r3
 8011f06:	2b03      	cmp	r3, #3
 8011f08:	d104      	bne.n	8011f14 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011f0a:	6839      	ldr	r1, [r7, #0]
 8011f0c:	6878      	ldr	r0, [r7, #4]
 8011f0e:	f000 f9bc 	bl	801228a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f12:	e01d      	b.n	8011f50 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	7bfa      	ldrb	r2, [r7, #15]
 8011f18:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011f1c:	7bfb      	ldrb	r3, [r7, #15]
 8011f1e:	4619      	mov	r1, r3
 8011f20:	6878      	ldr	r0, [r7, #4]
 8011f22:	f008 f8b5 	bl	801a090 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011f26:	6878      	ldr	r0, [r7, #4]
 8011f28:	f000 fa86 	bl	8012438 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011f2c:	7bfb      	ldrb	r3, [r7, #15]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d004      	beq.n	8011f3c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	2202      	movs	r2, #2
 8011f36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f3a:	e009      	b.n	8011f50 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	2201      	movs	r2, #1
 8011f40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f44:	e004      	b.n	8011f50 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011f46:	6839      	ldr	r1, [r7, #0]
 8011f48:	6878      	ldr	r0, [r7, #4]
 8011f4a:	f000 f99e 	bl	801228a <USBD_CtlError>
  }
}
 8011f4e:	bf00      	nop
 8011f50:	bf00      	nop
 8011f52:	3710      	adds	r7, #16
 8011f54:	46bd      	mov	sp, r7
 8011f56:	bd80      	pop	{r7, pc}

08011f58 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b084      	sub	sp, #16
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
 8011f60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011f62:	2300      	movs	r3, #0
 8011f64:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011f66:	683b      	ldr	r3, [r7, #0]
 8011f68:	885b      	ldrh	r3, [r3, #2]
 8011f6a:	b2da      	uxtb	r2, r3
 8011f6c:	4b4e      	ldr	r3, [pc, #312]	@ (80120a8 <USBD_SetConfig+0x150>)
 8011f6e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011f70:	4b4d      	ldr	r3, [pc, #308]	@ (80120a8 <USBD_SetConfig+0x150>)
 8011f72:	781b      	ldrb	r3, [r3, #0]
 8011f74:	2b01      	cmp	r3, #1
 8011f76:	d905      	bls.n	8011f84 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011f78:	6839      	ldr	r1, [r7, #0]
 8011f7a:	6878      	ldr	r0, [r7, #4]
 8011f7c:	f000 f985 	bl	801228a <USBD_CtlError>
    return USBD_FAIL;
 8011f80:	2303      	movs	r3, #3
 8011f82:	e08c      	b.n	801209e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011f8a:	b2db      	uxtb	r3, r3
 8011f8c:	2b02      	cmp	r3, #2
 8011f8e:	d002      	beq.n	8011f96 <USBD_SetConfig+0x3e>
 8011f90:	2b03      	cmp	r3, #3
 8011f92:	d029      	beq.n	8011fe8 <USBD_SetConfig+0x90>
 8011f94:	e075      	b.n	8012082 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8011f96:	4b44      	ldr	r3, [pc, #272]	@ (80120a8 <USBD_SetConfig+0x150>)
 8011f98:	781b      	ldrb	r3, [r3, #0]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d020      	beq.n	8011fe0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8011f9e:	4b42      	ldr	r3, [pc, #264]	@ (80120a8 <USBD_SetConfig+0x150>)
 8011fa0:	781b      	ldrb	r3, [r3, #0]
 8011fa2:	461a      	mov	r2, r3
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011fa8:	4b3f      	ldr	r3, [pc, #252]	@ (80120a8 <USBD_SetConfig+0x150>)
 8011faa:	781b      	ldrb	r3, [r3, #0]
 8011fac:	4619      	mov	r1, r3
 8011fae:	6878      	ldr	r0, [r7, #4]
 8011fb0:	f7fe ffb9 	bl	8010f26 <USBD_SetClassConfig>
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011fb8:	7bfb      	ldrb	r3, [r7, #15]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d008      	beq.n	8011fd0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8011fbe:	6839      	ldr	r1, [r7, #0]
 8011fc0:	6878      	ldr	r0, [r7, #4]
 8011fc2:	f000 f962 	bl	801228a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	2202      	movs	r2, #2
 8011fca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011fce:	e065      	b.n	801209c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011fd0:	6878      	ldr	r0, [r7, #4]
 8011fd2:	f000 fa31 	bl	8012438 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	2203      	movs	r2, #3
 8011fda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011fde:	e05d      	b.n	801209c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011fe0:	6878      	ldr	r0, [r7, #4]
 8011fe2:	f000 fa29 	bl	8012438 <USBD_CtlSendStatus>
      break;
 8011fe6:	e059      	b.n	801209c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011fe8:	4b2f      	ldr	r3, [pc, #188]	@ (80120a8 <USBD_SetConfig+0x150>)
 8011fea:	781b      	ldrb	r3, [r3, #0]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d112      	bne.n	8012016 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	2202      	movs	r2, #2
 8011ff4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8011ff8:	4b2b      	ldr	r3, [pc, #172]	@ (80120a8 <USBD_SetConfig+0x150>)
 8011ffa:	781b      	ldrb	r3, [r3, #0]
 8011ffc:	461a      	mov	r2, r3
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012002:	4b29      	ldr	r3, [pc, #164]	@ (80120a8 <USBD_SetConfig+0x150>)
 8012004:	781b      	ldrb	r3, [r3, #0]
 8012006:	4619      	mov	r1, r3
 8012008:	6878      	ldr	r0, [r7, #4]
 801200a:	f7fe ffa8 	bl	8010f5e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801200e:	6878      	ldr	r0, [r7, #4]
 8012010:	f000 fa12 	bl	8012438 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012014:	e042      	b.n	801209c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8012016:	4b24      	ldr	r3, [pc, #144]	@ (80120a8 <USBD_SetConfig+0x150>)
 8012018:	781b      	ldrb	r3, [r3, #0]
 801201a:	461a      	mov	r2, r3
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	685b      	ldr	r3, [r3, #4]
 8012020:	429a      	cmp	r2, r3
 8012022:	d02a      	beq.n	801207a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	685b      	ldr	r3, [r3, #4]
 8012028:	b2db      	uxtb	r3, r3
 801202a:	4619      	mov	r1, r3
 801202c:	6878      	ldr	r0, [r7, #4]
 801202e:	f7fe ff96 	bl	8010f5e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012032:	4b1d      	ldr	r3, [pc, #116]	@ (80120a8 <USBD_SetConfig+0x150>)
 8012034:	781b      	ldrb	r3, [r3, #0]
 8012036:	461a      	mov	r2, r3
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801203c:	4b1a      	ldr	r3, [pc, #104]	@ (80120a8 <USBD_SetConfig+0x150>)
 801203e:	781b      	ldrb	r3, [r3, #0]
 8012040:	4619      	mov	r1, r3
 8012042:	6878      	ldr	r0, [r7, #4]
 8012044:	f7fe ff6f 	bl	8010f26 <USBD_SetClassConfig>
 8012048:	4603      	mov	r3, r0
 801204a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801204c:	7bfb      	ldrb	r3, [r7, #15]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d00f      	beq.n	8012072 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8012052:	6839      	ldr	r1, [r7, #0]
 8012054:	6878      	ldr	r0, [r7, #4]
 8012056:	f000 f918 	bl	801228a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	685b      	ldr	r3, [r3, #4]
 801205e:	b2db      	uxtb	r3, r3
 8012060:	4619      	mov	r1, r3
 8012062:	6878      	ldr	r0, [r7, #4]
 8012064:	f7fe ff7b 	bl	8010f5e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	2202      	movs	r2, #2
 801206c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8012070:	e014      	b.n	801209c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012072:	6878      	ldr	r0, [r7, #4]
 8012074:	f000 f9e0 	bl	8012438 <USBD_CtlSendStatus>
      break;
 8012078:	e010      	b.n	801209c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801207a:	6878      	ldr	r0, [r7, #4]
 801207c:	f000 f9dc 	bl	8012438 <USBD_CtlSendStatus>
      break;
 8012080:	e00c      	b.n	801209c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8012082:	6839      	ldr	r1, [r7, #0]
 8012084:	6878      	ldr	r0, [r7, #4]
 8012086:	f000 f900 	bl	801228a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801208a:	4b07      	ldr	r3, [pc, #28]	@ (80120a8 <USBD_SetConfig+0x150>)
 801208c:	781b      	ldrb	r3, [r3, #0]
 801208e:	4619      	mov	r1, r3
 8012090:	6878      	ldr	r0, [r7, #4]
 8012092:	f7fe ff64 	bl	8010f5e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012096:	2303      	movs	r3, #3
 8012098:	73fb      	strb	r3, [r7, #15]
      break;
 801209a:	bf00      	nop
  }

  return ret;
 801209c:	7bfb      	ldrb	r3, [r7, #15]
}
 801209e:	4618      	mov	r0, r3
 80120a0:	3710      	adds	r7, #16
 80120a2:	46bd      	mov	sp, r7
 80120a4:	bd80      	pop	{r7, pc}
 80120a6:	bf00      	nop
 80120a8:	20003680 	.word	0x20003680

080120ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80120ac:	b580      	push	{r7, lr}
 80120ae:	b082      	sub	sp, #8
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	6078      	str	r0, [r7, #4]
 80120b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80120b6:	683b      	ldr	r3, [r7, #0]
 80120b8:	88db      	ldrh	r3, [r3, #6]
 80120ba:	2b01      	cmp	r3, #1
 80120bc:	d004      	beq.n	80120c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80120be:	6839      	ldr	r1, [r7, #0]
 80120c0:	6878      	ldr	r0, [r7, #4]
 80120c2:	f000 f8e2 	bl	801228a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80120c6:	e023      	b.n	8012110 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80120ce:	b2db      	uxtb	r3, r3
 80120d0:	2b02      	cmp	r3, #2
 80120d2:	dc02      	bgt.n	80120da <USBD_GetConfig+0x2e>
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	dc03      	bgt.n	80120e0 <USBD_GetConfig+0x34>
 80120d8:	e015      	b.n	8012106 <USBD_GetConfig+0x5a>
 80120da:	2b03      	cmp	r3, #3
 80120dc:	d00b      	beq.n	80120f6 <USBD_GetConfig+0x4a>
 80120de:	e012      	b.n	8012106 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	2200      	movs	r2, #0
 80120e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	3308      	adds	r3, #8
 80120ea:	2201      	movs	r2, #1
 80120ec:	4619      	mov	r1, r3
 80120ee:	6878      	ldr	r0, [r7, #4]
 80120f0:	f000 f948 	bl	8012384 <USBD_CtlSendData>
        break;
 80120f4:	e00c      	b.n	8012110 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	3304      	adds	r3, #4
 80120fa:	2201      	movs	r2, #1
 80120fc:	4619      	mov	r1, r3
 80120fe:	6878      	ldr	r0, [r7, #4]
 8012100:	f000 f940 	bl	8012384 <USBD_CtlSendData>
        break;
 8012104:	e004      	b.n	8012110 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012106:	6839      	ldr	r1, [r7, #0]
 8012108:	6878      	ldr	r0, [r7, #4]
 801210a:	f000 f8be 	bl	801228a <USBD_CtlError>
        break;
 801210e:	bf00      	nop
}
 8012110:	bf00      	nop
 8012112:	3708      	adds	r7, #8
 8012114:	46bd      	mov	sp, r7
 8012116:	bd80      	pop	{r7, pc}

08012118 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012118:	b580      	push	{r7, lr}
 801211a:	b082      	sub	sp, #8
 801211c:	af00      	add	r7, sp, #0
 801211e:	6078      	str	r0, [r7, #4]
 8012120:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012128:	b2db      	uxtb	r3, r3
 801212a:	3b01      	subs	r3, #1
 801212c:	2b02      	cmp	r3, #2
 801212e:	d81e      	bhi.n	801216e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012130:	683b      	ldr	r3, [r7, #0]
 8012132:	88db      	ldrh	r3, [r3, #6]
 8012134:	2b02      	cmp	r3, #2
 8012136:	d004      	beq.n	8012142 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012138:	6839      	ldr	r1, [r7, #0]
 801213a:	6878      	ldr	r0, [r7, #4]
 801213c:	f000 f8a5 	bl	801228a <USBD_CtlError>
        break;
 8012140:	e01a      	b.n	8012178 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	2201      	movs	r2, #1
 8012146:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801214e:	2b00      	cmp	r3, #0
 8012150:	d005      	beq.n	801215e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	68db      	ldr	r3, [r3, #12]
 8012156:	f043 0202 	orr.w	r2, r3, #2
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	330c      	adds	r3, #12
 8012162:	2202      	movs	r2, #2
 8012164:	4619      	mov	r1, r3
 8012166:	6878      	ldr	r0, [r7, #4]
 8012168:	f000 f90c 	bl	8012384 <USBD_CtlSendData>
      break;
 801216c:	e004      	b.n	8012178 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801216e:	6839      	ldr	r1, [r7, #0]
 8012170:	6878      	ldr	r0, [r7, #4]
 8012172:	f000 f88a 	bl	801228a <USBD_CtlError>
      break;
 8012176:	bf00      	nop
  }
}
 8012178:	bf00      	nop
 801217a:	3708      	adds	r7, #8
 801217c:	46bd      	mov	sp, r7
 801217e:	bd80      	pop	{r7, pc}

08012180 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012180:	b580      	push	{r7, lr}
 8012182:	b082      	sub	sp, #8
 8012184:	af00      	add	r7, sp, #0
 8012186:	6078      	str	r0, [r7, #4]
 8012188:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801218a:	683b      	ldr	r3, [r7, #0]
 801218c:	885b      	ldrh	r3, [r3, #2]
 801218e:	2b01      	cmp	r3, #1
 8012190:	d107      	bne.n	80121a2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	2201      	movs	r2, #1
 8012196:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801219a:	6878      	ldr	r0, [r7, #4]
 801219c:	f000 f94c 	bl	8012438 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80121a0:	e013      	b.n	80121ca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80121a2:	683b      	ldr	r3, [r7, #0]
 80121a4:	885b      	ldrh	r3, [r3, #2]
 80121a6:	2b02      	cmp	r3, #2
 80121a8:	d10b      	bne.n	80121c2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80121aa:	683b      	ldr	r3, [r7, #0]
 80121ac:	889b      	ldrh	r3, [r3, #4]
 80121ae:	0a1b      	lsrs	r3, r3, #8
 80121b0:	b29b      	uxth	r3, r3
 80121b2:	b2da      	uxtb	r2, r3
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80121ba:	6878      	ldr	r0, [r7, #4]
 80121bc:	f000 f93c 	bl	8012438 <USBD_CtlSendStatus>
}
 80121c0:	e003      	b.n	80121ca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80121c2:	6839      	ldr	r1, [r7, #0]
 80121c4:	6878      	ldr	r0, [r7, #4]
 80121c6:	f000 f860 	bl	801228a <USBD_CtlError>
}
 80121ca:	bf00      	nop
 80121cc:	3708      	adds	r7, #8
 80121ce:	46bd      	mov	sp, r7
 80121d0:	bd80      	pop	{r7, pc}

080121d2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80121d2:	b580      	push	{r7, lr}
 80121d4:	b082      	sub	sp, #8
 80121d6:	af00      	add	r7, sp, #0
 80121d8:	6078      	str	r0, [r7, #4]
 80121da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80121e2:	b2db      	uxtb	r3, r3
 80121e4:	3b01      	subs	r3, #1
 80121e6:	2b02      	cmp	r3, #2
 80121e8:	d80b      	bhi.n	8012202 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80121ea:	683b      	ldr	r3, [r7, #0]
 80121ec:	885b      	ldrh	r3, [r3, #2]
 80121ee:	2b01      	cmp	r3, #1
 80121f0:	d10c      	bne.n	801220c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	2200      	movs	r2, #0
 80121f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80121fa:	6878      	ldr	r0, [r7, #4]
 80121fc:	f000 f91c 	bl	8012438 <USBD_CtlSendStatus>
      }
      break;
 8012200:	e004      	b.n	801220c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8012202:	6839      	ldr	r1, [r7, #0]
 8012204:	6878      	ldr	r0, [r7, #4]
 8012206:	f000 f840 	bl	801228a <USBD_CtlError>
      break;
 801220a:	e000      	b.n	801220e <USBD_ClrFeature+0x3c>
      break;
 801220c:	bf00      	nop
  }
}
 801220e:	bf00      	nop
 8012210:	3708      	adds	r7, #8
 8012212:	46bd      	mov	sp, r7
 8012214:	bd80      	pop	{r7, pc}

08012216 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012216:	b580      	push	{r7, lr}
 8012218:	b084      	sub	sp, #16
 801221a:	af00      	add	r7, sp, #0
 801221c:	6078      	str	r0, [r7, #4]
 801221e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012220:	683b      	ldr	r3, [r7, #0]
 8012222:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	781a      	ldrb	r2, [r3, #0]
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	3301      	adds	r3, #1
 8012230:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	781a      	ldrb	r2, [r3, #0]
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	3301      	adds	r3, #1
 801223e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012240:	68f8      	ldr	r0, [r7, #12]
 8012242:	f7ff fa16 	bl	8011672 <SWAPBYTE>
 8012246:	4603      	mov	r3, r0
 8012248:	461a      	mov	r2, r3
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	3301      	adds	r3, #1
 8012252:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	3301      	adds	r3, #1
 8012258:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801225a:	68f8      	ldr	r0, [r7, #12]
 801225c:	f7ff fa09 	bl	8011672 <SWAPBYTE>
 8012260:	4603      	mov	r3, r0
 8012262:	461a      	mov	r2, r3
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	3301      	adds	r3, #1
 801226c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	3301      	adds	r3, #1
 8012272:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012274:	68f8      	ldr	r0, [r7, #12]
 8012276:	f7ff f9fc 	bl	8011672 <SWAPBYTE>
 801227a:	4603      	mov	r3, r0
 801227c:	461a      	mov	r2, r3
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	80da      	strh	r2, [r3, #6]
}
 8012282:	bf00      	nop
 8012284:	3710      	adds	r7, #16
 8012286:	46bd      	mov	sp, r7
 8012288:	bd80      	pop	{r7, pc}

0801228a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801228a:	b580      	push	{r7, lr}
 801228c:	b082      	sub	sp, #8
 801228e:	af00      	add	r7, sp, #0
 8012290:	6078      	str	r0, [r7, #4]
 8012292:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012294:	2180      	movs	r1, #128	@ 0x80
 8012296:	6878      	ldr	r0, [r7, #4]
 8012298:	f007 fe62 	bl	8019f60 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801229c:	2100      	movs	r1, #0
 801229e:	6878      	ldr	r0, [r7, #4]
 80122a0:	f007 fe5e 	bl	8019f60 <USBD_LL_StallEP>
}
 80122a4:	bf00      	nop
 80122a6:	3708      	adds	r7, #8
 80122a8:	46bd      	mov	sp, r7
 80122aa:	bd80      	pop	{r7, pc}

080122ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80122ac:	b580      	push	{r7, lr}
 80122ae:	b086      	sub	sp, #24
 80122b0:	af00      	add	r7, sp, #0
 80122b2:	60f8      	str	r0, [r7, #12]
 80122b4:	60b9      	str	r1, [r7, #8]
 80122b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80122b8:	2300      	movs	r3, #0
 80122ba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d042      	beq.n	8012348 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80122c6:	6938      	ldr	r0, [r7, #16]
 80122c8:	f000 f842 	bl	8012350 <USBD_GetLen>
 80122cc:	4603      	mov	r3, r0
 80122ce:	3301      	adds	r3, #1
 80122d0:	005b      	lsls	r3, r3, #1
 80122d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80122d6:	d808      	bhi.n	80122ea <USBD_GetString+0x3e>
 80122d8:	6938      	ldr	r0, [r7, #16]
 80122da:	f000 f839 	bl	8012350 <USBD_GetLen>
 80122de:	4603      	mov	r3, r0
 80122e0:	3301      	adds	r3, #1
 80122e2:	b29b      	uxth	r3, r3
 80122e4:	005b      	lsls	r3, r3, #1
 80122e6:	b29a      	uxth	r2, r3
 80122e8:	e001      	b.n	80122ee <USBD_GetString+0x42>
 80122ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80122f2:	7dfb      	ldrb	r3, [r7, #23]
 80122f4:	68ba      	ldr	r2, [r7, #8]
 80122f6:	4413      	add	r3, r2
 80122f8:	687a      	ldr	r2, [r7, #4]
 80122fa:	7812      	ldrb	r2, [r2, #0]
 80122fc:	701a      	strb	r2, [r3, #0]
  idx++;
 80122fe:	7dfb      	ldrb	r3, [r7, #23]
 8012300:	3301      	adds	r3, #1
 8012302:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012304:	7dfb      	ldrb	r3, [r7, #23]
 8012306:	68ba      	ldr	r2, [r7, #8]
 8012308:	4413      	add	r3, r2
 801230a:	2203      	movs	r2, #3
 801230c:	701a      	strb	r2, [r3, #0]
  idx++;
 801230e:	7dfb      	ldrb	r3, [r7, #23]
 8012310:	3301      	adds	r3, #1
 8012312:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012314:	e013      	b.n	801233e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8012316:	7dfb      	ldrb	r3, [r7, #23]
 8012318:	68ba      	ldr	r2, [r7, #8]
 801231a:	4413      	add	r3, r2
 801231c:	693a      	ldr	r2, [r7, #16]
 801231e:	7812      	ldrb	r2, [r2, #0]
 8012320:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012322:	693b      	ldr	r3, [r7, #16]
 8012324:	3301      	adds	r3, #1
 8012326:	613b      	str	r3, [r7, #16]
    idx++;
 8012328:	7dfb      	ldrb	r3, [r7, #23]
 801232a:	3301      	adds	r3, #1
 801232c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801232e:	7dfb      	ldrb	r3, [r7, #23]
 8012330:	68ba      	ldr	r2, [r7, #8]
 8012332:	4413      	add	r3, r2
 8012334:	2200      	movs	r2, #0
 8012336:	701a      	strb	r2, [r3, #0]
    idx++;
 8012338:	7dfb      	ldrb	r3, [r7, #23]
 801233a:	3301      	adds	r3, #1
 801233c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801233e:	693b      	ldr	r3, [r7, #16]
 8012340:	781b      	ldrb	r3, [r3, #0]
 8012342:	2b00      	cmp	r3, #0
 8012344:	d1e7      	bne.n	8012316 <USBD_GetString+0x6a>
 8012346:	e000      	b.n	801234a <USBD_GetString+0x9e>
    return;
 8012348:	bf00      	nop
  }
}
 801234a:	3718      	adds	r7, #24
 801234c:	46bd      	mov	sp, r7
 801234e:	bd80      	pop	{r7, pc}

08012350 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012350:	b480      	push	{r7}
 8012352:	b085      	sub	sp, #20
 8012354:	af00      	add	r7, sp, #0
 8012356:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012358:	2300      	movs	r3, #0
 801235a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012360:	e005      	b.n	801236e <USBD_GetLen+0x1e>
  {
    len++;
 8012362:	7bfb      	ldrb	r3, [r7, #15]
 8012364:	3301      	adds	r3, #1
 8012366:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012368:	68bb      	ldr	r3, [r7, #8]
 801236a:	3301      	adds	r3, #1
 801236c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801236e:	68bb      	ldr	r3, [r7, #8]
 8012370:	781b      	ldrb	r3, [r3, #0]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d1f5      	bne.n	8012362 <USBD_GetLen+0x12>
  }

  return len;
 8012376:	7bfb      	ldrb	r3, [r7, #15]
}
 8012378:	4618      	mov	r0, r3
 801237a:	3714      	adds	r7, #20
 801237c:	46bd      	mov	sp, r7
 801237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012382:	4770      	bx	lr

08012384 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012384:	b580      	push	{r7, lr}
 8012386:	b084      	sub	sp, #16
 8012388:	af00      	add	r7, sp, #0
 801238a:	60f8      	str	r0, [r7, #12]
 801238c:	60b9      	str	r1, [r7, #8]
 801238e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	2202      	movs	r2, #2
 8012394:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	687a      	ldr	r2, [r7, #4]
 801239c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	687a      	ldr	r2, [r7, #4]
 80123a2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	68ba      	ldr	r2, [r7, #8]
 80123a8:	2100      	movs	r1, #0
 80123aa:	68f8      	ldr	r0, [r7, #12]
 80123ac:	f007 fea6 	bl	801a0fc <USBD_LL_Transmit>

  return USBD_OK;
 80123b0:	2300      	movs	r3, #0
}
 80123b2:	4618      	mov	r0, r3
 80123b4:	3710      	adds	r7, #16
 80123b6:	46bd      	mov	sp, r7
 80123b8:	bd80      	pop	{r7, pc}

080123ba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80123ba:	b580      	push	{r7, lr}
 80123bc:	b084      	sub	sp, #16
 80123be:	af00      	add	r7, sp, #0
 80123c0:	60f8      	str	r0, [r7, #12]
 80123c2:	60b9      	str	r1, [r7, #8]
 80123c4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	68ba      	ldr	r2, [r7, #8]
 80123ca:	2100      	movs	r1, #0
 80123cc:	68f8      	ldr	r0, [r7, #12]
 80123ce:	f007 fe95 	bl	801a0fc <USBD_LL_Transmit>

  return USBD_OK;
 80123d2:	2300      	movs	r3, #0
}
 80123d4:	4618      	mov	r0, r3
 80123d6:	3710      	adds	r7, #16
 80123d8:	46bd      	mov	sp, r7
 80123da:	bd80      	pop	{r7, pc}

080123dc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b084      	sub	sp, #16
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	60f8      	str	r0, [r7, #12]
 80123e4:	60b9      	str	r1, [r7, #8]
 80123e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	2203      	movs	r2, #3
 80123ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	687a      	ldr	r2, [r7, #4]
 80123f4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	687a      	ldr	r2, [r7, #4]
 80123fc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	68ba      	ldr	r2, [r7, #8]
 8012404:	2100      	movs	r1, #0
 8012406:	68f8      	ldr	r0, [r7, #12]
 8012408:	f007 feb0 	bl	801a16c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801240c:	2300      	movs	r3, #0
}
 801240e:	4618      	mov	r0, r3
 8012410:	3710      	adds	r7, #16
 8012412:	46bd      	mov	sp, r7
 8012414:	bd80      	pop	{r7, pc}

08012416 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012416:	b580      	push	{r7, lr}
 8012418:	b084      	sub	sp, #16
 801241a:	af00      	add	r7, sp, #0
 801241c:	60f8      	str	r0, [r7, #12]
 801241e:	60b9      	str	r1, [r7, #8]
 8012420:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	68ba      	ldr	r2, [r7, #8]
 8012426:	2100      	movs	r1, #0
 8012428:	68f8      	ldr	r0, [r7, #12]
 801242a:	f007 fe9f 	bl	801a16c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801242e:	2300      	movs	r3, #0
}
 8012430:	4618      	mov	r0, r3
 8012432:	3710      	adds	r7, #16
 8012434:	46bd      	mov	sp, r7
 8012436:	bd80      	pop	{r7, pc}

08012438 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012438:	b580      	push	{r7, lr}
 801243a:	b082      	sub	sp, #8
 801243c:	af00      	add	r7, sp, #0
 801243e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	2204      	movs	r2, #4
 8012444:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012448:	2300      	movs	r3, #0
 801244a:	2200      	movs	r2, #0
 801244c:	2100      	movs	r1, #0
 801244e:	6878      	ldr	r0, [r7, #4]
 8012450:	f007 fe54 	bl	801a0fc <USBD_LL_Transmit>

  return USBD_OK;
 8012454:	2300      	movs	r3, #0
}
 8012456:	4618      	mov	r0, r3
 8012458:	3708      	adds	r7, #8
 801245a:	46bd      	mov	sp, r7
 801245c:	bd80      	pop	{r7, pc}

0801245e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801245e:	b580      	push	{r7, lr}
 8012460:	b082      	sub	sp, #8
 8012462:	af00      	add	r7, sp, #0
 8012464:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	2205      	movs	r2, #5
 801246a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801246e:	2300      	movs	r3, #0
 8012470:	2200      	movs	r2, #0
 8012472:	2100      	movs	r1, #0
 8012474:	6878      	ldr	r0, [r7, #4]
 8012476:	f007 fe79 	bl	801a16c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801247a:	2300      	movs	r3, #0
}
 801247c:	4618      	mov	r0, r3
 801247e:	3708      	adds	r7, #8
 8012480:	46bd      	mov	sp, r7
 8012482:	bd80      	pop	{r7, pc}

08012484 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012484:	b580      	push	{r7, lr}
 8012486:	b084      	sub	sp, #16
 8012488:	af00      	add	r7, sp, #0
 801248a:	4603      	mov	r3, r0
 801248c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801248e:	79fb      	ldrb	r3, [r7, #7]
 8012490:	4a08      	ldr	r2, [pc, #32]	@ (80124b4 <disk_status+0x30>)
 8012492:	009b      	lsls	r3, r3, #2
 8012494:	4413      	add	r3, r2
 8012496:	685b      	ldr	r3, [r3, #4]
 8012498:	685b      	ldr	r3, [r3, #4]
 801249a:	79fa      	ldrb	r2, [r7, #7]
 801249c:	4905      	ldr	r1, [pc, #20]	@ (80124b4 <disk_status+0x30>)
 801249e:	440a      	add	r2, r1
 80124a0:	7a12      	ldrb	r2, [r2, #8]
 80124a2:	4610      	mov	r0, r2
 80124a4:	4798      	blx	r3
 80124a6:	4603      	mov	r3, r0
 80124a8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80124aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80124ac:	4618      	mov	r0, r3
 80124ae:	3710      	adds	r7, #16
 80124b0:	46bd      	mov	sp, r7
 80124b2:	bd80      	pop	{r7, pc}
 80124b4:	200036ac 	.word	0x200036ac

080124b8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b084      	sub	sp, #16
 80124bc:	af00      	add	r7, sp, #0
 80124be:	4603      	mov	r3, r0
 80124c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80124c2:	2300      	movs	r3, #0
 80124c4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80124c6:	79fb      	ldrb	r3, [r7, #7]
 80124c8:	4a0d      	ldr	r2, [pc, #52]	@ (8012500 <disk_initialize+0x48>)
 80124ca:	5cd3      	ldrb	r3, [r2, r3]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d111      	bne.n	80124f4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80124d0:	79fb      	ldrb	r3, [r7, #7]
 80124d2:	4a0b      	ldr	r2, [pc, #44]	@ (8012500 <disk_initialize+0x48>)
 80124d4:	2101      	movs	r1, #1
 80124d6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80124d8:	79fb      	ldrb	r3, [r7, #7]
 80124da:	4a09      	ldr	r2, [pc, #36]	@ (8012500 <disk_initialize+0x48>)
 80124dc:	009b      	lsls	r3, r3, #2
 80124de:	4413      	add	r3, r2
 80124e0:	685b      	ldr	r3, [r3, #4]
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	79fa      	ldrb	r2, [r7, #7]
 80124e6:	4906      	ldr	r1, [pc, #24]	@ (8012500 <disk_initialize+0x48>)
 80124e8:	440a      	add	r2, r1
 80124ea:	7a12      	ldrb	r2, [r2, #8]
 80124ec:	4610      	mov	r0, r2
 80124ee:	4798      	blx	r3
 80124f0:	4603      	mov	r3, r0
 80124f2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80124f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80124f6:	4618      	mov	r0, r3
 80124f8:	3710      	adds	r7, #16
 80124fa:	46bd      	mov	sp, r7
 80124fc:	bd80      	pop	{r7, pc}
 80124fe:	bf00      	nop
 8012500:	200036ac 	.word	0x200036ac

08012504 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012504:	b590      	push	{r4, r7, lr}
 8012506:	b087      	sub	sp, #28
 8012508:	af00      	add	r7, sp, #0
 801250a:	60b9      	str	r1, [r7, #8]
 801250c:	607a      	str	r2, [r7, #4]
 801250e:	603b      	str	r3, [r7, #0]
 8012510:	4603      	mov	r3, r0
 8012512:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012514:	7bfb      	ldrb	r3, [r7, #15]
 8012516:	4a0a      	ldr	r2, [pc, #40]	@ (8012540 <disk_read+0x3c>)
 8012518:	009b      	lsls	r3, r3, #2
 801251a:	4413      	add	r3, r2
 801251c:	685b      	ldr	r3, [r3, #4]
 801251e:	689c      	ldr	r4, [r3, #8]
 8012520:	7bfb      	ldrb	r3, [r7, #15]
 8012522:	4a07      	ldr	r2, [pc, #28]	@ (8012540 <disk_read+0x3c>)
 8012524:	4413      	add	r3, r2
 8012526:	7a18      	ldrb	r0, [r3, #8]
 8012528:	683b      	ldr	r3, [r7, #0]
 801252a:	687a      	ldr	r2, [r7, #4]
 801252c:	68b9      	ldr	r1, [r7, #8]
 801252e:	47a0      	blx	r4
 8012530:	4603      	mov	r3, r0
 8012532:	75fb      	strb	r3, [r7, #23]
  return res;
 8012534:	7dfb      	ldrb	r3, [r7, #23]
}
 8012536:	4618      	mov	r0, r3
 8012538:	371c      	adds	r7, #28
 801253a:	46bd      	mov	sp, r7
 801253c:	bd90      	pop	{r4, r7, pc}
 801253e:	bf00      	nop
 8012540:	200036ac 	.word	0x200036ac

08012544 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012544:	b590      	push	{r4, r7, lr}
 8012546:	b087      	sub	sp, #28
 8012548:	af00      	add	r7, sp, #0
 801254a:	60b9      	str	r1, [r7, #8]
 801254c:	607a      	str	r2, [r7, #4]
 801254e:	603b      	str	r3, [r7, #0]
 8012550:	4603      	mov	r3, r0
 8012552:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012554:	7bfb      	ldrb	r3, [r7, #15]
 8012556:	4a0a      	ldr	r2, [pc, #40]	@ (8012580 <disk_write+0x3c>)
 8012558:	009b      	lsls	r3, r3, #2
 801255a:	4413      	add	r3, r2
 801255c:	685b      	ldr	r3, [r3, #4]
 801255e:	68dc      	ldr	r4, [r3, #12]
 8012560:	7bfb      	ldrb	r3, [r7, #15]
 8012562:	4a07      	ldr	r2, [pc, #28]	@ (8012580 <disk_write+0x3c>)
 8012564:	4413      	add	r3, r2
 8012566:	7a18      	ldrb	r0, [r3, #8]
 8012568:	683b      	ldr	r3, [r7, #0]
 801256a:	687a      	ldr	r2, [r7, #4]
 801256c:	68b9      	ldr	r1, [r7, #8]
 801256e:	47a0      	blx	r4
 8012570:	4603      	mov	r3, r0
 8012572:	75fb      	strb	r3, [r7, #23]
  return res;
 8012574:	7dfb      	ldrb	r3, [r7, #23]
}
 8012576:	4618      	mov	r0, r3
 8012578:	371c      	adds	r7, #28
 801257a:	46bd      	mov	sp, r7
 801257c:	bd90      	pop	{r4, r7, pc}
 801257e:	bf00      	nop
 8012580:	200036ac 	.word	0x200036ac

08012584 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012584:	b580      	push	{r7, lr}
 8012586:	b084      	sub	sp, #16
 8012588:	af00      	add	r7, sp, #0
 801258a:	4603      	mov	r3, r0
 801258c:	603a      	str	r2, [r7, #0]
 801258e:	71fb      	strb	r3, [r7, #7]
 8012590:	460b      	mov	r3, r1
 8012592:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012594:	79fb      	ldrb	r3, [r7, #7]
 8012596:	4a09      	ldr	r2, [pc, #36]	@ (80125bc <disk_ioctl+0x38>)
 8012598:	009b      	lsls	r3, r3, #2
 801259a:	4413      	add	r3, r2
 801259c:	685b      	ldr	r3, [r3, #4]
 801259e:	691b      	ldr	r3, [r3, #16]
 80125a0:	79fa      	ldrb	r2, [r7, #7]
 80125a2:	4906      	ldr	r1, [pc, #24]	@ (80125bc <disk_ioctl+0x38>)
 80125a4:	440a      	add	r2, r1
 80125a6:	7a10      	ldrb	r0, [r2, #8]
 80125a8:	79b9      	ldrb	r1, [r7, #6]
 80125aa:	683a      	ldr	r2, [r7, #0]
 80125ac:	4798      	blx	r3
 80125ae:	4603      	mov	r3, r0
 80125b0:	73fb      	strb	r3, [r7, #15]
  return res;
 80125b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80125b4:	4618      	mov	r0, r3
 80125b6:	3710      	adds	r7, #16
 80125b8:	46bd      	mov	sp, r7
 80125ba:	bd80      	pop	{r7, pc}
 80125bc:	200036ac 	.word	0x200036ac

080125c0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80125c0:	b480      	push	{r7}
 80125c2:	b085      	sub	sp, #20
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	3301      	adds	r3, #1
 80125cc:	781b      	ldrb	r3, [r3, #0]
 80125ce:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80125d0:	89fb      	ldrh	r3, [r7, #14]
 80125d2:	021b      	lsls	r3, r3, #8
 80125d4:	b21a      	sxth	r2, r3
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	781b      	ldrb	r3, [r3, #0]
 80125da:	b21b      	sxth	r3, r3
 80125dc:	4313      	orrs	r3, r2
 80125de:	b21b      	sxth	r3, r3
 80125e0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80125e2:	89fb      	ldrh	r3, [r7, #14]
}
 80125e4:	4618      	mov	r0, r3
 80125e6:	3714      	adds	r7, #20
 80125e8:	46bd      	mov	sp, r7
 80125ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ee:	4770      	bx	lr

080125f0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80125f0:	b480      	push	{r7}
 80125f2:	b085      	sub	sp, #20
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	3303      	adds	r3, #3
 80125fc:	781b      	ldrb	r3, [r3, #0]
 80125fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	021b      	lsls	r3, r3, #8
 8012604:	687a      	ldr	r2, [r7, #4]
 8012606:	3202      	adds	r2, #2
 8012608:	7812      	ldrb	r2, [r2, #0]
 801260a:	4313      	orrs	r3, r2
 801260c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	021b      	lsls	r3, r3, #8
 8012612:	687a      	ldr	r2, [r7, #4]
 8012614:	3201      	adds	r2, #1
 8012616:	7812      	ldrb	r2, [r2, #0]
 8012618:	4313      	orrs	r3, r2
 801261a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	021b      	lsls	r3, r3, #8
 8012620:	687a      	ldr	r2, [r7, #4]
 8012622:	7812      	ldrb	r2, [r2, #0]
 8012624:	4313      	orrs	r3, r2
 8012626:	60fb      	str	r3, [r7, #12]
	return rv;
 8012628:	68fb      	ldr	r3, [r7, #12]
}
 801262a:	4618      	mov	r0, r3
 801262c:	3714      	adds	r7, #20
 801262e:	46bd      	mov	sp, r7
 8012630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012634:	4770      	bx	lr

08012636 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8012636:	b480      	push	{r7}
 8012638:	b083      	sub	sp, #12
 801263a:	af00      	add	r7, sp, #0
 801263c:	6078      	str	r0, [r7, #4]
 801263e:	460b      	mov	r3, r1
 8012640:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	1c5a      	adds	r2, r3, #1
 8012646:	607a      	str	r2, [r7, #4]
 8012648:	887a      	ldrh	r2, [r7, #2]
 801264a:	b2d2      	uxtb	r2, r2
 801264c:	701a      	strb	r2, [r3, #0]
 801264e:	887b      	ldrh	r3, [r7, #2]
 8012650:	0a1b      	lsrs	r3, r3, #8
 8012652:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	1c5a      	adds	r2, r3, #1
 8012658:	607a      	str	r2, [r7, #4]
 801265a:	887a      	ldrh	r2, [r7, #2]
 801265c:	b2d2      	uxtb	r2, r2
 801265e:	701a      	strb	r2, [r3, #0]
}
 8012660:	bf00      	nop
 8012662:	370c      	adds	r7, #12
 8012664:	46bd      	mov	sp, r7
 8012666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801266a:	4770      	bx	lr

0801266c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801266c:	b480      	push	{r7}
 801266e:	b083      	sub	sp, #12
 8012670:	af00      	add	r7, sp, #0
 8012672:	6078      	str	r0, [r7, #4]
 8012674:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	1c5a      	adds	r2, r3, #1
 801267a:	607a      	str	r2, [r7, #4]
 801267c:	683a      	ldr	r2, [r7, #0]
 801267e:	b2d2      	uxtb	r2, r2
 8012680:	701a      	strb	r2, [r3, #0]
 8012682:	683b      	ldr	r3, [r7, #0]
 8012684:	0a1b      	lsrs	r3, r3, #8
 8012686:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	1c5a      	adds	r2, r3, #1
 801268c:	607a      	str	r2, [r7, #4]
 801268e:	683a      	ldr	r2, [r7, #0]
 8012690:	b2d2      	uxtb	r2, r2
 8012692:	701a      	strb	r2, [r3, #0]
 8012694:	683b      	ldr	r3, [r7, #0]
 8012696:	0a1b      	lsrs	r3, r3, #8
 8012698:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	1c5a      	adds	r2, r3, #1
 801269e:	607a      	str	r2, [r7, #4]
 80126a0:	683a      	ldr	r2, [r7, #0]
 80126a2:	b2d2      	uxtb	r2, r2
 80126a4:	701a      	strb	r2, [r3, #0]
 80126a6:	683b      	ldr	r3, [r7, #0]
 80126a8:	0a1b      	lsrs	r3, r3, #8
 80126aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	1c5a      	adds	r2, r3, #1
 80126b0:	607a      	str	r2, [r7, #4]
 80126b2:	683a      	ldr	r2, [r7, #0]
 80126b4:	b2d2      	uxtb	r2, r2
 80126b6:	701a      	strb	r2, [r3, #0]
}
 80126b8:	bf00      	nop
 80126ba:	370c      	adds	r7, #12
 80126bc:	46bd      	mov	sp, r7
 80126be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c2:	4770      	bx	lr

080126c4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80126c4:	b480      	push	{r7}
 80126c6:	b087      	sub	sp, #28
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	60f8      	str	r0, [r7, #12]
 80126cc:	60b9      	str	r1, [r7, #8]
 80126ce:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80126d4:	68bb      	ldr	r3, [r7, #8]
 80126d6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d00d      	beq.n	80126fa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80126de:	693a      	ldr	r2, [r7, #16]
 80126e0:	1c53      	adds	r3, r2, #1
 80126e2:	613b      	str	r3, [r7, #16]
 80126e4:	697b      	ldr	r3, [r7, #20]
 80126e6:	1c59      	adds	r1, r3, #1
 80126e8:	6179      	str	r1, [r7, #20]
 80126ea:	7812      	ldrb	r2, [r2, #0]
 80126ec:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	3b01      	subs	r3, #1
 80126f2:	607b      	str	r3, [r7, #4]
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d1f1      	bne.n	80126de <mem_cpy+0x1a>
	}
}
 80126fa:	bf00      	nop
 80126fc:	371c      	adds	r7, #28
 80126fe:	46bd      	mov	sp, r7
 8012700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012704:	4770      	bx	lr

08012706 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8012706:	b480      	push	{r7}
 8012708:	b087      	sub	sp, #28
 801270a:	af00      	add	r7, sp, #0
 801270c:	60f8      	str	r0, [r7, #12]
 801270e:	60b9      	str	r1, [r7, #8]
 8012710:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8012716:	697b      	ldr	r3, [r7, #20]
 8012718:	1c5a      	adds	r2, r3, #1
 801271a:	617a      	str	r2, [r7, #20]
 801271c:	68ba      	ldr	r2, [r7, #8]
 801271e:	b2d2      	uxtb	r2, r2
 8012720:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	3b01      	subs	r3, #1
 8012726:	607b      	str	r3, [r7, #4]
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	2b00      	cmp	r3, #0
 801272c:	d1f3      	bne.n	8012716 <mem_set+0x10>
}
 801272e:	bf00      	nop
 8012730:	bf00      	nop
 8012732:	371c      	adds	r7, #28
 8012734:	46bd      	mov	sp, r7
 8012736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801273a:	4770      	bx	lr

0801273c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801273c:	b480      	push	{r7}
 801273e:	b089      	sub	sp, #36	@ 0x24
 8012740:	af00      	add	r7, sp, #0
 8012742:	60f8      	str	r0, [r7, #12]
 8012744:	60b9      	str	r1, [r7, #8]
 8012746:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	61fb      	str	r3, [r7, #28]
 801274c:	68bb      	ldr	r3, [r7, #8]
 801274e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8012750:	2300      	movs	r3, #0
 8012752:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8012754:	69fb      	ldr	r3, [r7, #28]
 8012756:	1c5a      	adds	r2, r3, #1
 8012758:	61fa      	str	r2, [r7, #28]
 801275a:	781b      	ldrb	r3, [r3, #0]
 801275c:	4619      	mov	r1, r3
 801275e:	69bb      	ldr	r3, [r7, #24]
 8012760:	1c5a      	adds	r2, r3, #1
 8012762:	61ba      	str	r2, [r7, #24]
 8012764:	781b      	ldrb	r3, [r3, #0]
 8012766:	1acb      	subs	r3, r1, r3
 8012768:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	3b01      	subs	r3, #1
 801276e:	607b      	str	r3, [r7, #4]
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d002      	beq.n	801277c <mem_cmp+0x40>
 8012776:	697b      	ldr	r3, [r7, #20]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d0eb      	beq.n	8012754 <mem_cmp+0x18>

	return r;
 801277c:	697b      	ldr	r3, [r7, #20]
}
 801277e:	4618      	mov	r0, r3
 8012780:	3724      	adds	r7, #36	@ 0x24
 8012782:	46bd      	mov	sp, r7
 8012784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012788:	4770      	bx	lr

0801278a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801278a:	b480      	push	{r7}
 801278c:	b083      	sub	sp, #12
 801278e:	af00      	add	r7, sp, #0
 8012790:	6078      	str	r0, [r7, #4]
 8012792:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8012794:	e002      	b.n	801279c <chk_chr+0x12>
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	3301      	adds	r3, #1
 801279a:	607b      	str	r3, [r7, #4]
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	781b      	ldrb	r3, [r3, #0]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d005      	beq.n	80127b0 <chk_chr+0x26>
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	781b      	ldrb	r3, [r3, #0]
 80127a8:	461a      	mov	r2, r3
 80127aa:	683b      	ldr	r3, [r7, #0]
 80127ac:	4293      	cmp	r3, r2
 80127ae:	d1f2      	bne.n	8012796 <chk_chr+0xc>
	return *str;
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	781b      	ldrb	r3, [r3, #0]
}
 80127b4:	4618      	mov	r0, r3
 80127b6:	370c      	adds	r7, #12
 80127b8:	46bd      	mov	sp, r7
 80127ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127be:	4770      	bx	lr

080127c0 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80127c0:	b580      	push	{r7, lr}
 80127c2:	b082      	sub	sp, #8
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d009      	beq.n	80127e2 <lock_fs+0x22>
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	691b      	ldr	r3, [r3, #16]
 80127d2:	4618      	mov	r0, r3
 80127d4:	f003 f89b 	bl	801590e <ff_req_grant>
 80127d8:	4603      	mov	r3, r0
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d001      	beq.n	80127e2 <lock_fs+0x22>
 80127de:	2301      	movs	r3, #1
 80127e0:	e000      	b.n	80127e4 <lock_fs+0x24>
 80127e2:	2300      	movs	r3, #0
}
 80127e4:	4618      	mov	r0, r3
 80127e6:	3708      	adds	r7, #8
 80127e8:	46bd      	mov	sp, r7
 80127ea:	bd80      	pop	{r7, pc}

080127ec <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80127ec:	b580      	push	{r7, lr}
 80127ee:	b082      	sub	sp, #8
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	6078      	str	r0, [r7, #4]
 80127f4:	460b      	mov	r3, r1
 80127f6:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d00d      	beq.n	801281a <unlock_fs+0x2e>
 80127fe:	78fb      	ldrb	r3, [r7, #3]
 8012800:	2b0c      	cmp	r3, #12
 8012802:	d00a      	beq.n	801281a <unlock_fs+0x2e>
 8012804:	78fb      	ldrb	r3, [r7, #3]
 8012806:	2b0b      	cmp	r3, #11
 8012808:	d007      	beq.n	801281a <unlock_fs+0x2e>
 801280a:	78fb      	ldrb	r3, [r7, #3]
 801280c:	2b0f      	cmp	r3, #15
 801280e:	d004      	beq.n	801281a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	691b      	ldr	r3, [r3, #16]
 8012814:	4618      	mov	r0, r3
 8012816:	f003 f88f 	bl	8015938 <ff_rel_grant>
	}
}
 801281a:	bf00      	nop
 801281c:	3708      	adds	r7, #8
 801281e:	46bd      	mov	sp, r7
 8012820:	bd80      	pop	{r7, pc}
	...

08012824 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012824:	b480      	push	{r7}
 8012826:	b085      	sub	sp, #20
 8012828:	af00      	add	r7, sp, #0
 801282a:	6078      	str	r0, [r7, #4]
 801282c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801282e:	2300      	movs	r3, #0
 8012830:	60bb      	str	r3, [r7, #8]
 8012832:	68bb      	ldr	r3, [r7, #8]
 8012834:	60fb      	str	r3, [r7, #12]
 8012836:	e029      	b.n	801288c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8012838:	4a27      	ldr	r2, [pc, #156]	@ (80128d8 <chk_lock+0xb4>)
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	011b      	lsls	r3, r3, #4
 801283e:	4413      	add	r3, r2
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d01d      	beq.n	8012882 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012846:	4a24      	ldr	r2, [pc, #144]	@ (80128d8 <chk_lock+0xb4>)
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	011b      	lsls	r3, r3, #4
 801284c:	4413      	add	r3, r2
 801284e:	681a      	ldr	r2, [r3, #0]
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	429a      	cmp	r2, r3
 8012856:	d116      	bne.n	8012886 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8012858:	4a1f      	ldr	r2, [pc, #124]	@ (80128d8 <chk_lock+0xb4>)
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	011b      	lsls	r3, r3, #4
 801285e:	4413      	add	r3, r2
 8012860:	3304      	adds	r3, #4
 8012862:	681a      	ldr	r2, [r3, #0]
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012868:	429a      	cmp	r2, r3
 801286a:	d10c      	bne.n	8012886 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801286c:	4a1a      	ldr	r2, [pc, #104]	@ (80128d8 <chk_lock+0xb4>)
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	011b      	lsls	r3, r3, #4
 8012872:	4413      	add	r3, r2
 8012874:	3308      	adds	r3, #8
 8012876:	681a      	ldr	r2, [r3, #0]
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801287c:	429a      	cmp	r2, r3
 801287e:	d102      	bne.n	8012886 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012880:	e007      	b.n	8012892 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8012882:	2301      	movs	r3, #1
 8012884:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	3301      	adds	r3, #1
 801288a:	60fb      	str	r3, [r7, #12]
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	2b01      	cmp	r3, #1
 8012890:	d9d2      	bls.n	8012838 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	2b02      	cmp	r3, #2
 8012896:	d109      	bne.n	80128ac <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8012898:	68bb      	ldr	r3, [r7, #8]
 801289a:	2b00      	cmp	r3, #0
 801289c:	d102      	bne.n	80128a4 <chk_lock+0x80>
 801289e:	683b      	ldr	r3, [r7, #0]
 80128a0:	2b02      	cmp	r3, #2
 80128a2:	d101      	bne.n	80128a8 <chk_lock+0x84>
 80128a4:	2300      	movs	r3, #0
 80128a6:	e010      	b.n	80128ca <chk_lock+0xa6>
 80128a8:	2312      	movs	r3, #18
 80128aa:	e00e      	b.n	80128ca <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80128ac:	683b      	ldr	r3, [r7, #0]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d108      	bne.n	80128c4 <chk_lock+0xa0>
 80128b2:	4a09      	ldr	r2, [pc, #36]	@ (80128d8 <chk_lock+0xb4>)
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	011b      	lsls	r3, r3, #4
 80128b8:	4413      	add	r3, r2
 80128ba:	330c      	adds	r3, #12
 80128bc:	881b      	ldrh	r3, [r3, #0]
 80128be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80128c2:	d101      	bne.n	80128c8 <chk_lock+0xa4>
 80128c4:	2310      	movs	r3, #16
 80128c6:	e000      	b.n	80128ca <chk_lock+0xa6>
 80128c8:	2300      	movs	r3, #0
}
 80128ca:	4618      	mov	r0, r3
 80128cc:	3714      	adds	r7, #20
 80128ce:	46bd      	mov	sp, r7
 80128d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d4:	4770      	bx	lr
 80128d6:	bf00      	nop
 80128d8:	2000368c 	.word	0x2000368c

080128dc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80128dc:	b480      	push	{r7}
 80128de:	b083      	sub	sp, #12
 80128e0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80128e2:	2300      	movs	r3, #0
 80128e4:	607b      	str	r3, [r7, #4]
 80128e6:	e002      	b.n	80128ee <enq_lock+0x12>
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	3301      	adds	r3, #1
 80128ec:	607b      	str	r3, [r7, #4]
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	2b01      	cmp	r3, #1
 80128f2:	d806      	bhi.n	8012902 <enq_lock+0x26>
 80128f4:	4a09      	ldr	r2, [pc, #36]	@ (801291c <enq_lock+0x40>)
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	011b      	lsls	r3, r3, #4
 80128fa:	4413      	add	r3, r2
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d1f2      	bne.n	80128e8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	2b02      	cmp	r3, #2
 8012906:	bf14      	ite	ne
 8012908:	2301      	movne	r3, #1
 801290a:	2300      	moveq	r3, #0
 801290c:	b2db      	uxtb	r3, r3
}
 801290e:	4618      	mov	r0, r3
 8012910:	370c      	adds	r7, #12
 8012912:	46bd      	mov	sp, r7
 8012914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012918:	4770      	bx	lr
 801291a:	bf00      	nop
 801291c:	2000368c 	.word	0x2000368c

08012920 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012920:	b480      	push	{r7}
 8012922:	b085      	sub	sp, #20
 8012924:	af00      	add	r7, sp, #0
 8012926:	6078      	str	r0, [r7, #4]
 8012928:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801292a:	2300      	movs	r3, #0
 801292c:	60fb      	str	r3, [r7, #12]
 801292e:	e01f      	b.n	8012970 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8012930:	4a41      	ldr	r2, [pc, #260]	@ (8012a38 <inc_lock+0x118>)
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	011b      	lsls	r3, r3, #4
 8012936:	4413      	add	r3, r2
 8012938:	681a      	ldr	r2, [r3, #0]
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	429a      	cmp	r2, r3
 8012940:	d113      	bne.n	801296a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8012942:	4a3d      	ldr	r2, [pc, #244]	@ (8012a38 <inc_lock+0x118>)
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	011b      	lsls	r3, r3, #4
 8012948:	4413      	add	r3, r2
 801294a:	3304      	adds	r3, #4
 801294c:	681a      	ldr	r2, [r3, #0]
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8012952:	429a      	cmp	r2, r3
 8012954:	d109      	bne.n	801296a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8012956:	4a38      	ldr	r2, [pc, #224]	@ (8012a38 <inc_lock+0x118>)
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	011b      	lsls	r3, r3, #4
 801295c:	4413      	add	r3, r2
 801295e:	3308      	adds	r3, #8
 8012960:	681a      	ldr	r2, [r3, #0]
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8012966:	429a      	cmp	r2, r3
 8012968:	d006      	beq.n	8012978 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	3301      	adds	r3, #1
 801296e:	60fb      	str	r3, [r7, #12]
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	2b01      	cmp	r3, #1
 8012974:	d9dc      	bls.n	8012930 <inc_lock+0x10>
 8012976:	e000      	b.n	801297a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8012978:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	2b02      	cmp	r3, #2
 801297e:	d132      	bne.n	80129e6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012980:	2300      	movs	r3, #0
 8012982:	60fb      	str	r3, [r7, #12]
 8012984:	e002      	b.n	801298c <inc_lock+0x6c>
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	3301      	adds	r3, #1
 801298a:	60fb      	str	r3, [r7, #12]
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	2b01      	cmp	r3, #1
 8012990:	d806      	bhi.n	80129a0 <inc_lock+0x80>
 8012992:	4a29      	ldr	r2, [pc, #164]	@ (8012a38 <inc_lock+0x118>)
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	011b      	lsls	r3, r3, #4
 8012998:	4413      	add	r3, r2
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	2b00      	cmp	r3, #0
 801299e:	d1f2      	bne.n	8012986 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	2b02      	cmp	r3, #2
 80129a4:	d101      	bne.n	80129aa <inc_lock+0x8a>
 80129a6:	2300      	movs	r3, #0
 80129a8:	e040      	b.n	8012a2c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	681a      	ldr	r2, [r3, #0]
 80129ae:	4922      	ldr	r1, [pc, #136]	@ (8012a38 <inc_lock+0x118>)
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	011b      	lsls	r3, r3, #4
 80129b4:	440b      	add	r3, r1
 80129b6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	689a      	ldr	r2, [r3, #8]
 80129bc:	491e      	ldr	r1, [pc, #120]	@ (8012a38 <inc_lock+0x118>)
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	011b      	lsls	r3, r3, #4
 80129c2:	440b      	add	r3, r1
 80129c4:	3304      	adds	r3, #4
 80129c6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	695a      	ldr	r2, [r3, #20]
 80129cc:	491a      	ldr	r1, [pc, #104]	@ (8012a38 <inc_lock+0x118>)
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	011b      	lsls	r3, r3, #4
 80129d2:	440b      	add	r3, r1
 80129d4:	3308      	adds	r3, #8
 80129d6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80129d8:	4a17      	ldr	r2, [pc, #92]	@ (8012a38 <inc_lock+0x118>)
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	011b      	lsls	r3, r3, #4
 80129de:	4413      	add	r3, r2
 80129e0:	330c      	adds	r3, #12
 80129e2:	2200      	movs	r2, #0
 80129e4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80129e6:	683b      	ldr	r3, [r7, #0]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d009      	beq.n	8012a00 <inc_lock+0xe0>
 80129ec:	4a12      	ldr	r2, [pc, #72]	@ (8012a38 <inc_lock+0x118>)
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	011b      	lsls	r3, r3, #4
 80129f2:	4413      	add	r3, r2
 80129f4:	330c      	adds	r3, #12
 80129f6:	881b      	ldrh	r3, [r3, #0]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d001      	beq.n	8012a00 <inc_lock+0xe0>
 80129fc:	2300      	movs	r3, #0
 80129fe:	e015      	b.n	8012a2c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8012a00:	683b      	ldr	r3, [r7, #0]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d108      	bne.n	8012a18 <inc_lock+0xf8>
 8012a06:	4a0c      	ldr	r2, [pc, #48]	@ (8012a38 <inc_lock+0x118>)
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	011b      	lsls	r3, r3, #4
 8012a0c:	4413      	add	r3, r2
 8012a0e:	330c      	adds	r3, #12
 8012a10:	881b      	ldrh	r3, [r3, #0]
 8012a12:	3301      	adds	r3, #1
 8012a14:	b29a      	uxth	r2, r3
 8012a16:	e001      	b.n	8012a1c <inc_lock+0xfc>
 8012a18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012a1c:	4906      	ldr	r1, [pc, #24]	@ (8012a38 <inc_lock+0x118>)
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	011b      	lsls	r3, r3, #4
 8012a22:	440b      	add	r3, r1
 8012a24:	330c      	adds	r3, #12
 8012a26:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	3301      	adds	r3, #1
}
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	3714      	adds	r7, #20
 8012a30:	46bd      	mov	sp, r7
 8012a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a36:	4770      	bx	lr
 8012a38:	2000368c 	.word	0x2000368c

08012a3c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8012a3c:	b480      	push	{r7}
 8012a3e:	b085      	sub	sp, #20
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	3b01      	subs	r3, #1
 8012a48:	607b      	str	r3, [r7, #4]
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	2b01      	cmp	r3, #1
 8012a4e:	d825      	bhi.n	8012a9c <dec_lock+0x60>
		n = Files[i].ctr;
 8012a50:	4a17      	ldr	r2, [pc, #92]	@ (8012ab0 <dec_lock+0x74>)
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	011b      	lsls	r3, r3, #4
 8012a56:	4413      	add	r3, r2
 8012a58:	330c      	adds	r3, #12
 8012a5a:	881b      	ldrh	r3, [r3, #0]
 8012a5c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8012a5e:	89fb      	ldrh	r3, [r7, #14]
 8012a60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012a64:	d101      	bne.n	8012a6a <dec_lock+0x2e>
 8012a66:	2300      	movs	r3, #0
 8012a68:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8012a6a:	89fb      	ldrh	r3, [r7, #14]
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d002      	beq.n	8012a76 <dec_lock+0x3a>
 8012a70:	89fb      	ldrh	r3, [r7, #14]
 8012a72:	3b01      	subs	r3, #1
 8012a74:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8012a76:	4a0e      	ldr	r2, [pc, #56]	@ (8012ab0 <dec_lock+0x74>)
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	011b      	lsls	r3, r3, #4
 8012a7c:	4413      	add	r3, r2
 8012a7e:	330c      	adds	r3, #12
 8012a80:	89fa      	ldrh	r2, [r7, #14]
 8012a82:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8012a84:	89fb      	ldrh	r3, [r7, #14]
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d105      	bne.n	8012a96 <dec_lock+0x5a>
 8012a8a:	4a09      	ldr	r2, [pc, #36]	@ (8012ab0 <dec_lock+0x74>)
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	011b      	lsls	r3, r3, #4
 8012a90:	4413      	add	r3, r2
 8012a92:	2200      	movs	r2, #0
 8012a94:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8012a96:	2300      	movs	r3, #0
 8012a98:	737b      	strb	r3, [r7, #13]
 8012a9a:	e001      	b.n	8012aa0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8012a9c:	2302      	movs	r3, #2
 8012a9e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8012aa0:	7b7b      	ldrb	r3, [r7, #13]
}
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	3714      	adds	r7, #20
 8012aa6:	46bd      	mov	sp, r7
 8012aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aac:	4770      	bx	lr
 8012aae:	bf00      	nop
 8012ab0:	2000368c 	.word	0x2000368c

08012ab4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8012ab4:	b480      	push	{r7}
 8012ab6:	b085      	sub	sp, #20
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8012abc:	2300      	movs	r3, #0
 8012abe:	60fb      	str	r3, [r7, #12]
 8012ac0:	e010      	b.n	8012ae4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8012ac2:	4a0d      	ldr	r2, [pc, #52]	@ (8012af8 <clear_lock+0x44>)
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	011b      	lsls	r3, r3, #4
 8012ac8:	4413      	add	r3, r2
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	687a      	ldr	r2, [r7, #4]
 8012ace:	429a      	cmp	r2, r3
 8012ad0:	d105      	bne.n	8012ade <clear_lock+0x2a>
 8012ad2:	4a09      	ldr	r2, [pc, #36]	@ (8012af8 <clear_lock+0x44>)
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	011b      	lsls	r3, r3, #4
 8012ad8:	4413      	add	r3, r2
 8012ada:	2200      	movs	r2, #0
 8012adc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	3301      	adds	r3, #1
 8012ae2:	60fb      	str	r3, [r7, #12]
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	2b01      	cmp	r3, #1
 8012ae8:	d9eb      	bls.n	8012ac2 <clear_lock+0xe>
	}
}
 8012aea:	bf00      	nop
 8012aec:	bf00      	nop
 8012aee:	3714      	adds	r7, #20
 8012af0:	46bd      	mov	sp, r7
 8012af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af6:	4770      	bx	lr
 8012af8:	2000368c 	.word	0x2000368c

08012afc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b086      	sub	sp, #24
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8012b04:	2300      	movs	r3, #0
 8012b06:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	78db      	ldrb	r3, [r3, #3]
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d034      	beq.n	8012b7a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012b14:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	7858      	ldrb	r0, [r3, #1]
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8012b20:	2301      	movs	r3, #1
 8012b22:	697a      	ldr	r2, [r7, #20]
 8012b24:	f7ff fd0e 	bl	8012544 <disk_write>
 8012b28:	4603      	mov	r3, r0
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d002      	beq.n	8012b34 <sync_window+0x38>
			res = FR_DISK_ERR;
 8012b2e:	2301      	movs	r3, #1
 8012b30:	73fb      	strb	r3, [r7, #15]
 8012b32:	e022      	b.n	8012b7a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	2200      	movs	r2, #0
 8012b38:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012b3e:	697a      	ldr	r2, [r7, #20]
 8012b40:	1ad2      	subs	r2, r2, r3
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	6a1b      	ldr	r3, [r3, #32]
 8012b46:	429a      	cmp	r2, r3
 8012b48:	d217      	bcs.n	8012b7a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	789b      	ldrb	r3, [r3, #2]
 8012b4e:	613b      	str	r3, [r7, #16]
 8012b50:	e010      	b.n	8012b74 <sync_window+0x78>
					wsect += fs->fsize;
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	6a1b      	ldr	r3, [r3, #32]
 8012b56:	697a      	ldr	r2, [r7, #20]
 8012b58:	4413      	add	r3, r2
 8012b5a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	7858      	ldrb	r0, [r3, #1]
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8012b66:	2301      	movs	r3, #1
 8012b68:	697a      	ldr	r2, [r7, #20]
 8012b6a:	f7ff fceb 	bl	8012544 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012b6e:	693b      	ldr	r3, [r7, #16]
 8012b70:	3b01      	subs	r3, #1
 8012b72:	613b      	str	r3, [r7, #16]
 8012b74:	693b      	ldr	r3, [r7, #16]
 8012b76:	2b01      	cmp	r3, #1
 8012b78:	d8eb      	bhi.n	8012b52 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8012b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	3718      	adds	r7, #24
 8012b80:	46bd      	mov	sp, r7
 8012b82:	bd80      	pop	{r7, pc}

08012b84 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b084      	sub	sp, #16
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	6078      	str	r0, [r7, #4]
 8012b8c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8012b8e:	2300      	movs	r3, #0
 8012b90:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012b96:	683a      	ldr	r2, [r7, #0]
 8012b98:	429a      	cmp	r2, r3
 8012b9a:	d01b      	beq.n	8012bd4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8012b9c:	6878      	ldr	r0, [r7, #4]
 8012b9e:	f7ff ffad 	bl	8012afc <sync_window>
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8012ba6:	7bfb      	ldrb	r3, [r7, #15]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d113      	bne.n	8012bd4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	7858      	ldrb	r0, [r3, #1]
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8012bb6:	2301      	movs	r3, #1
 8012bb8:	683a      	ldr	r2, [r7, #0]
 8012bba:	f7ff fca3 	bl	8012504 <disk_read>
 8012bbe:	4603      	mov	r3, r0
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d004      	beq.n	8012bce <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8012bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8012bc8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8012bca:	2301      	movs	r3, #1
 8012bcc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	683a      	ldr	r2, [r7, #0]
 8012bd2:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8012bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	3710      	adds	r7, #16
 8012bda:	46bd      	mov	sp, r7
 8012bdc:	bd80      	pop	{r7, pc}
	...

08012be0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b084      	sub	sp, #16
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8012be8:	6878      	ldr	r0, [r7, #4]
 8012bea:	f7ff ff87 	bl	8012afc <sync_window>
 8012bee:	4603      	mov	r3, r0
 8012bf0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012bf2:	7bfb      	ldrb	r3, [r7, #15]
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d158      	bne.n	8012caa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	781b      	ldrb	r3, [r3, #0]
 8012bfc:	2b03      	cmp	r3, #3
 8012bfe:	d148      	bne.n	8012c92 <sync_fs+0xb2>
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	791b      	ldrb	r3, [r3, #4]
 8012c04:	2b01      	cmp	r3, #1
 8012c06:	d144      	bne.n	8012c92 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	3338      	adds	r3, #56	@ 0x38
 8012c0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012c10:	2100      	movs	r1, #0
 8012c12:	4618      	mov	r0, r3
 8012c14:	f7ff fd77 	bl	8012706 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	3338      	adds	r3, #56	@ 0x38
 8012c1c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8012c20:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8012c24:	4618      	mov	r0, r3
 8012c26:	f7ff fd06 	bl	8012636 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	3338      	adds	r3, #56	@ 0x38
 8012c2e:	4921      	ldr	r1, [pc, #132]	@ (8012cb4 <sync_fs+0xd4>)
 8012c30:	4618      	mov	r0, r3
 8012c32:	f7ff fd1b 	bl	801266c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	3338      	adds	r3, #56	@ 0x38
 8012c3a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8012c3e:	491e      	ldr	r1, [pc, #120]	@ (8012cb8 <sync_fs+0xd8>)
 8012c40:	4618      	mov	r0, r3
 8012c42:	f7ff fd13 	bl	801266c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	3338      	adds	r3, #56	@ 0x38
 8012c4a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	699b      	ldr	r3, [r3, #24]
 8012c52:	4619      	mov	r1, r3
 8012c54:	4610      	mov	r0, r2
 8012c56:	f7ff fd09 	bl	801266c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	3338      	adds	r3, #56	@ 0x38
 8012c5e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	695b      	ldr	r3, [r3, #20]
 8012c66:	4619      	mov	r1, r3
 8012c68:	4610      	mov	r0, r2
 8012c6a:	f7ff fcff 	bl	801266c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c72:	1c5a      	adds	r2, r3, #1
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	7858      	ldrb	r0, [r3, #1]
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012c86:	2301      	movs	r3, #1
 8012c88:	f7ff fc5c 	bl	8012544 <disk_write>
			fs->fsi_flag = 0;
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	2200      	movs	r2, #0
 8012c90:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	785b      	ldrb	r3, [r3, #1]
 8012c96:	2200      	movs	r2, #0
 8012c98:	2100      	movs	r1, #0
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	f7ff fc72 	bl	8012584 <disk_ioctl>
 8012ca0:	4603      	mov	r3, r0
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d001      	beq.n	8012caa <sync_fs+0xca>
 8012ca6:	2301      	movs	r3, #1
 8012ca8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8012caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cac:	4618      	mov	r0, r3
 8012cae:	3710      	adds	r7, #16
 8012cb0:	46bd      	mov	sp, r7
 8012cb2:	bd80      	pop	{r7, pc}
 8012cb4:	41615252 	.word	0x41615252
 8012cb8:	61417272 	.word	0x61417272

08012cbc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8012cbc:	b480      	push	{r7}
 8012cbe:	b083      	sub	sp, #12
 8012cc0:	af00      	add	r7, sp, #0
 8012cc2:	6078      	str	r0, [r7, #4]
 8012cc4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8012cc6:	683b      	ldr	r3, [r7, #0]
 8012cc8:	3b02      	subs	r3, #2
 8012cca:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	69db      	ldr	r3, [r3, #28]
 8012cd0:	3b02      	subs	r3, #2
 8012cd2:	683a      	ldr	r2, [r7, #0]
 8012cd4:	429a      	cmp	r2, r3
 8012cd6:	d301      	bcc.n	8012cdc <clust2sect+0x20>
 8012cd8:	2300      	movs	r3, #0
 8012cda:	e008      	b.n	8012cee <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	895b      	ldrh	r3, [r3, #10]
 8012ce0:	461a      	mov	r2, r3
 8012ce2:	683b      	ldr	r3, [r7, #0]
 8012ce4:	fb03 f202 	mul.w	r2, r3, r2
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012cec:	4413      	add	r3, r2
}
 8012cee:	4618      	mov	r0, r3
 8012cf0:	370c      	adds	r7, #12
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf8:	4770      	bx	lr

08012cfa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8012cfa:	b580      	push	{r7, lr}
 8012cfc:	b086      	sub	sp, #24
 8012cfe:	af00      	add	r7, sp, #0
 8012d00:	6078      	str	r0, [r7, #4]
 8012d02:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8012d0a:	683b      	ldr	r3, [r7, #0]
 8012d0c:	2b01      	cmp	r3, #1
 8012d0e:	d904      	bls.n	8012d1a <get_fat+0x20>
 8012d10:	693b      	ldr	r3, [r7, #16]
 8012d12:	69db      	ldr	r3, [r3, #28]
 8012d14:	683a      	ldr	r2, [r7, #0]
 8012d16:	429a      	cmp	r2, r3
 8012d18:	d302      	bcc.n	8012d20 <get_fat+0x26>
		val = 1;	/* Internal error */
 8012d1a:	2301      	movs	r3, #1
 8012d1c:	617b      	str	r3, [r7, #20]
 8012d1e:	e08e      	b.n	8012e3e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8012d20:	f04f 33ff 	mov.w	r3, #4294967295
 8012d24:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8012d26:	693b      	ldr	r3, [r7, #16]
 8012d28:	781b      	ldrb	r3, [r3, #0]
 8012d2a:	2b03      	cmp	r3, #3
 8012d2c:	d061      	beq.n	8012df2 <get_fat+0xf8>
 8012d2e:	2b03      	cmp	r3, #3
 8012d30:	dc7b      	bgt.n	8012e2a <get_fat+0x130>
 8012d32:	2b01      	cmp	r3, #1
 8012d34:	d002      	beq.n	8012d3c <get_fat+0x42>
 8012d36:	2b02      	cmp	r3, #2
 8012d38:	d041      	beq.n	8012dbe <get_fat+0xc4>
 8012d3a:	e076      	b.n	8012e2a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012d3c:	683b      	ldr	r3, [r7, #0]
 8012d3e:	60fb      	str	r3, [r7, #12]
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	085b      	lsrs	r3, r3, #1
 8012d44:	68fa      	ldr	r2, [r7, #12]
 8012d46:	4413      	add	r3, r2
 8012d48:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012d4a:	693b      	ldr	r3, [r7, #16]
 8012d4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	0a5b      	lsrs	r3, r3, #9
 8012d52:	4413      	add	r3, r2
 8012d54:	4619      	mov	r1, r3
 8012d56:	6938      	ldr	r0, [r7, #16]
 8012d58:	f7ff ff14 	bl	8012b84 <move_window>
 8012d5c:	4603      	mov	r3, r0
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d166      	bne.n	8012e30 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	1c5a      	adds	r2, r3, #1
 8012d66:	60fa      	str	r2, [r7, #12]
 8012d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012d6c:	693a      	ldr	r2, [r7, #16]
 8012d6e:	4413      	add	r3, r2
 8012d70:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012d74:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012d76:	693b      	ldr	r3, [r7, #16]
 8012d78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	0a5b      	lsrs	r3, r3, #9
 8012d7e:	4413      	add	r3, r2
 8012d80:	4619      	mov	r1, r3
 8012d82:	6938      	ldr	r0, [r7, #16]
 8012d84:	f7ff fefe 	bl	8012b84 <move_window>
 8012d88:	4603      	mov	r3, r0
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d152      	bne.n	8012e34 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012d94:	693a      	ldr	r2, [r7, #16]
 8012d96:	4413      	add	r3, r2
 8012d98:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012d9c:	021b      	lsls	r3, r3, #8
 8012d9e:	68ba      	ldr	r2, [r7, #8]
 8012da0:	4313      	orrs	r3, r2
 8012da2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012da4:	683b      	ldr	r3, [r7, #0]
 8012da6:	f003 0301 	and.w	r3, r3, #1
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d002      	beq.n	8012db4 <get_fat+0xba>
 8012dae:	68bb      	ldr	r3, [r7, #8]
 8012db0:	091b      	lsrs	r3, r3, #4
 8012db2:	e002      	b.n	8012dba <get_fat+0xc0>
 8012db4:	68bb      	ldr	r3, [r7, #8]
 8012db6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012dba:	617b      	str	r3, [r7, #20]
			break;
 8012dbc:	e03f      	b.n	8012e3e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012dbe:	693b      	ldr	r3, [r7, #16]
 8012dc0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012dc2:	683b      	ldr	r3, [r7, #0]
 8012dc4:	0a1b      	lsrs	r3, r3, #8
 8012dc6:	4413      	add	r3, r2
 8012dc8:	4619      	mov	r1, r3
 8012dca:	6938      	ldr	r0, [r7, #16]
 8012dcc:	f7ff feda 	bl	8012b84 <move_window>
 8012dd0:	4603      	mov	r3, r0
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d130      	bne.n	8012e38 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012dd6:	693b      	ldr	r3, [r7, #16]
 8012dd8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8012ddc:	683b      	ldr	r3, [r7, #0]
 8012dde:	005b      	lsls	r3, r3, #1
 8012de0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8012de4:	4413      	add	r3, r2
 8012de6:	4618      	mov	r0, r3
 8012de8:	f7ff fbea 	bl	80125c0 <ld_word>
 8012dec:	4603      	mov	r3, r0
 8012dee:	617b      	str	r3, [r7, #20]
			break;
 8012df0:	e025      	b.n	8012e3e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012df2:	693b      	ldr	r3, [r7, #16]
 8012df4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012df6:	683b      	ldr	r3, [r7, #0]
 8012df8:	09db      	lsrs	r3, r3, #7
 8012dfa:	4413      	add	r3, r2
 8012dfc:	4619      	mov	r1, r3
 8012dfe:	6938      	ldr	r0, [r7, #16]
 8012e00:	f7ff fec0 	bl	8012b84 <move_window>
 8012e04:	4603      	mov	r3, r0
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d118      	bne.n	8012e3c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012e0a:	693b      	ldr	r3, [r7, #16]
 8012e0c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8012e10:	683b      	ldr	r3, [r7, #0]
 8012e12:	009b      	lsls	r3, r3, #2
 8012e14:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012e18:	4413      	add	r3, r2
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	f7ff fbe8 	bl	80125f0 <ld_dword>
 8012e20:	4603      	mov	r3, r0
 8012e22:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8012e26:	617b      	str	r3, [r7, #20]
			break;
 8012e28:	e009      	b.n	8012e3e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8012e2a:	2301      	movs	r3, #1
 8012e2c:	617b      	str	r3, [r7, #20]
 8012e2e:	e006      	b.n	8012e3e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012e30:	bf00      	nop
 8012e32:	e004      	b.n	8012e3e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012e34:	bf00      	nop
 8012e36:	e002      	b.n	8012e3e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012e38:	bf00      	nop
 8012e3a:	e000      	b.n	8012e3e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012e3c:	bf00      	nop
		}
	}

	return val;
 8012e3e:	697b      	ldr	r3, [r7, #20]
}
 8012e40:	4618      	mov	r0, r3
 8012e42:	3718      	adds	r7, #24
 8012e44:	46bd      	mov	sp, r7
 8012e46:	bd80      	pop	{r7, pc}

08012e48 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8012e48:	b590      	push	{r4, r7, lr}
 8012e4a:	b089      	sub	sp, #36	@ 0x24
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	60f8      	str	r0, [r7, #12]
 8012e50:	60b9      	str	r1, [r7, #8]
 8012e52:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8012e54:	2302      	movs	r3, #2
 8012e56:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012e58:	68bb      	ldr	r3, [r7, #8]
 8012e5a:	2b01      	cmp	r3, #1
 8012e5c:	f240 80d9 	bls.w	8013012 <put_fat+0x1ca>
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	69db      	ldr	r3, [r3, #28]
 8012e64:	68ba      	ldr	r2, [r7, #8]
 8012e66:	429a      	cmp	r2, r3
 8012e68:	f080 80d3 	bcs.w	8013012 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	781b      	ldrb	r3, [r3, #0]
 8012e70:	2b03      	cmp	r3, #3
 8012e72:	f000 8096 	beq.w	8012fa2 <put_fat+0x15a>
 8012e76:	2b03      	cmp	r3, #3
 8012e78:	f300 80cb 	bgt.w	8013012 <put_fat+0x1ca>
 8012e7c:	2b01      	cmp	r3, #1
 8012e7e:	d002      	beq.n	8012e86 <put_fat+0x3e>
 8012e80:	2b02      	cmp	r3, #2
 8012e82:	d06e      	beq.n	8012f62 <put_fat+0x11a>
 8012e84:	e0c5      	b.n	8013012 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012e86:	68bb      	ldr	r3, [r7, #8]
 8012e88:	61bb      	str	r3, [r7, #24]
 8012e8a:	69bb      	ldr	r3, [r7, #24]
 8012e8c:	085b      	lsrs	r3, r3, #1
 8012e8e:	69ba      	ldr	r2, [r7, #24]
 8012e90:	4413      	add	r3, r2
 8012e92:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012e98:	69bb      	ldr	r3, [r7, #24]
 8012e9a:	0a5b      	lsrs	r3, r3, #9
 8012e9c:	4413      	add	r3, r2
 8012e9e:	4619      	mov	r1, r3
 8012ea0:	68f8      	ldr	r0, [r7, #12]
 8012ea2:	f7ff fe6f 	bl	8012b84 <move_window>
 8012ea6:	4603      	mov	r3, r0
 8012ea8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012eaa:	7ffb      	ldrb	r3, [r7, #31]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	f040 80a9 	bne.w	8013004 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8012eb8:	69bb      	ldr	r3, [r7, #24]
 8012eba:	1c59      	adds	r1, r3, #1
 8012ebc:	61b9      	str	r1, [r7, #24]
 8012ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012ec2:	4413      	add	r3, r2
 8012ec4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012ec6:	68bb      	ldr	r3, [r7, #8]
 8012ec8:	f003 0301 	and.w	r3, r3, #1
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d00d      	beq.n	8012eec <put_fat+0xa4>
 8012ed0:	697b      	ldr	r3, [r7, #20]
 8012ed2:	781b      	ldrb	r3, [r3, #0]
 8012ed4:	b25b      	sxtb	r3, r3
 8012ed6:	f003 030f 	and.w	r3, r3, #15
 8012eda:	b25a      	sxtb	r2, r3
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	b2db      	uxtb	r3, r3
 8012ee0:	011b      	lsls	r3, r3, #4
 8012ee2:	b25b      	sxtb	r3, r3
 8012ee4:	4313      	orrs	r3, r2
 8012ee6:	b25b      	sxtb	r3, r3
 8012ee8:	b2db      	uxtb	r3, r3
 8012eea:	e001      	b.n	8012ef0 <put_fat+0xa8>
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	b2db      	uxtb	r3, r3
 8012ef0:	697a      	ldr	r2, [r7, #20]
 8012ef2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	2201      	movs	r2, #1
 8012ef8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012efe:	69bb      	ldr	r3, [r7, #24]
 8012f00:	0a5b      	lsrs	r3, r3, #9
 8012f02:	4413      	add	r3, r2
 8012f04:	4619      	mov	r1, r3
 8012f06:	68f8      	ldr	r0, [r7, #12]
 8012f08:	f7ff fe3c 	bl	8012b84 <move_window>
 8012f0c:	4603      	mov	r3, r0
 8012f0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012f10:	7ffb      	ldrb	r3, [r7, #31]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d178      	bne.n	8013008 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8012f1c:	69bb      	ldr	r3, [r7, #24]
 8012f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012f22:	4413      	add	r3, r2
 8012f24:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012f26:	68bb      	ldr	r3, [r7, #8]
 8012f28:	f003 0301 	and.w	r3, r3, #1
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d003      	beq.n	8012f38 <put_fat+0xf0>
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	091b      	lsrs	r3, r3, #4
 8012f34:	b2db      	uxtb	r3, r3
 8012f36:	e00e      	b.n	8012f56 <put_fat+0x10e>
 8012f38:	697b      	ldr	r3, [r7, #20]
 8012f3a:	781b      	ldrb	r3, [r3, #0]
 8012f3c:	b25b      	sxtb	r3, r3
 8012f3e:	f023 030f 	bic.w	r3, r3, #15
 8012f42:	b25a      	sxtb	r2, r3
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	0a1b      	lsrs	r3, r3, #8
 8012f48:	b25b      	sxtb	r3, r3
 8012f4a:	f003 030f 	and.w	r3, r3, #15
 8012f4e:	b25b      	sxtb	r3, r3
 8012f50:	4313      	orrs	r3, r2
 8012f52:	b25b      	sxtb	r3, r3
 8012f54:	b2db      	uxtb	r3, r3
 8012f56:	697a      	ldr	r2, [r7, #20]
 8012f58:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	2201      	movs	r2, #1
 8012f5e:	70da      	strb	r2, [r3, #3]
			break;
 8012f60:	e057      	b.n	8013012 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012f66:	68bb      	ldr	r3, [r7, #8]
 8012f68:	0a1b      	lsrs	r3, r3, #8
 8012f6a:	4413      	add	r3, r2
 8012f6c:	4619      	mov	r1, r3
 8012f6e:	68f8      	ldr	r0, [r7, #12]
 8012f70:	f7ff fe08 	bl	8012b84 <move_window>
 8012f74:	4603      	mov	r3, r0
 8012f76:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012f78:	7ffb      	ldrb	r3, [r7, #31]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d146      	bne.n	801300c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8012f84:	68bb      	ldr	r3, [r7, #8]
 8012f86:	005b      	lsls	r3, r3, #1
 8012f88:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8012f8c:	4413      	add	r3, r2
 8012f8e:	687a      	ldr	r2, [r7, #4]
 8012f90:	b292      	uxth	r2, r2
 8012f92:	4611      	mov	r1, r2
 8012f94:	4618      	mov	r0, r3
 8012f96:	f7ff fb4e 	bl	8012636 <st_word>
			fs->wflag = 1;
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	2201      	movs	r2, #1
 8012f9e:	70da      	strb	r2, [r3, #3]
			break;
 8012fa0:	e037      	b.n	8013012 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012fa6:	68bb      	ldr	r3, [r7, #8]
 8012fa8:	09db      	lsrs	r3, r3, #7
 8012faa:	4413      	add	r3, r2
 8012fac:	4619      	mov	r1, r3
 8012fae:	68f8      	ldr	r0, [r7, #12]
 8012fb0:	f7ff fde8 	bl	8012b84 <move_window>
 8012fb4:	4603      	mov	r3, r0
 8012fb6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012fb8:	7ffb      	ldrb	r3, [r7, #31]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d128      	bne.n	8013010 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8012fca:	68bb      	ldr	r3, [r7, #8]
 8012fcc:	009b      	lsls	r3, r3, #2
 8012fce:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012fd2:	4413      	add	r3, r2
 8012fd4:	4618      	mov	r0, r3
 8012fd6:	f7ff fb0b 	bl	80125f0 <ld_dword>
 8012fda:	4603      	mov	r3, r0
 8012fdc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8012fe0:	4323      	orrs	r3, r4
 8012fe2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8012fea:	68bb      	ldr	r3, [r7, #8]
 8012fec:	009b      	lsls	r3, r3, #2
 8012fee:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012ff2:	4413      	add	r3, r2
 8012ff4:	6879      	ldr	r1, [r7, #4]
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	f7ff fb38 	bl	801266c <st_dword>
			fs->wflag = 1;
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	2201      	movs	r2, #1
 8013000:	70da      	strb	r2, [r3, #3]
			break;
 8013002:	e006      	b.n	8013012 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8013004:	bf00      	nop
 8013006:	e004      	b.n	8013012 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8013008:	bf00      	nop
 801300a:	e002      	b.n	8013012 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801300c:	bf00      	nop
 801300e:	e000      	b.n	8013012 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8013010:	bf00      	nop
		}
	}
	return res;
 8013012:	7ffb      	ldrb	r3, [r7, #31]
}
 8013014:	4618      	mov	r0, r3
 8013016:	3724      	adds	r7, #36	@ 0x24
 8013018:	46bd      	mov	sp, r7
 801301a:	bd90      	pop	{r4, r7, pc}

0801301c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801301c:	b580      	push	{r7, lr}
 801301e:	b088      	sub	sp, #32
 8013020:	af00      	add	r7, sp, #0
 8013022:	60f8      	str	r0, [r7, #12]
 8013024:	60b9      	str	r1, [r7, #8]
 8013026:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8013028:	2300      	movs	r3, #0
 801302a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8013032:	68bb      	ldr	r3, [r7, #8]
 8013034:	2b01      	cmp	r3, #1
 8013036:	d904      	bls.n	8013042 <remove_chain+0x26>
 8013038:	69bb      	ldr	r3, [r7, #24]
 801303a:	69db      	ldr	r3, [r3, #28]
 801303c:	68ba      	ldr	r2, [r7, #8]
 801303e:	429a      	cmp	r2, r3
 8013040:	d301      	bcc.n	8013046 <remove_chain+0x2a>
 8013042:	2302      	movs	r3, #2
 8013044:	e04b      	b.n	80130de <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	2b00      	cmp	r3, #0
 801304a:	d00c      	beq.n	8013066 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801304c:	f04f 32ff 	mov.w	r2, #4294967295
 8013050:	6879      	ldr	r1, [r7, #4]
 8013052:	69b8      	ldr	r0, [r7, #24]
 8013054:	f7ff fef8 	bl	8012e48 <put_fat>
 8013058:	4603      	mov	r3, r0
 801305a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801305c:	7ffb      	ldrb	r3, [r7, #31]
 801305e:	2b00      	cmp	r3, #0
 8013060:	d001      	beq.n	8013066 <remove_chain+0x4a>
 8013062:	7ffb      	ldrb	r3, [r7, #31]
 8013064:	e03b      	b.n	80130de <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8013066:	68b9      	ldr	r1, [r7, #8]
 8013068:	68f8      	ldr	r0, [r7, #12]
 801306a:	f7ff fe46 	bl	8012cfa <get_fat>
 801306e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8013070:	697b      	ldr	r3, [r7, #20]
 8013072:	2b00      	cmp	r3, #0
 8013074:	d031      	beq.n	80130da <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8013076:	697b      	ldr	r3, [r7, #20]
 8013078:	2b01      	cmp	r3, #1
 801307a:	d101      	bne.n	8013080 <remove_chain+0x64>
 801307c:	2302      	movs	r3, #2
 801307e:	e02e      	b.n	80130de <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8013080:	697b      	ldr	r3, [r7, #20]
 8013082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013086:	d101      	bne.n	801308c <remove_chain+0x70>
 8013088:	2301      	movs	r3, #1
 801308a:	e028      	b.n	80130de <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801308c:	2200      	movs	r2, #0
 801308e:	68b9      	ldr	r1, [r7, #8]
 8013090:	69b8      	ldr	r0, [r7, #24]
 8013092:	f7ff fed9 	bl	8012e48 <put_fat>
 8013096:	4603      	mov	r3, r0
 8013098:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801309a:	7ffb      	ldrb	r3, [r7, #31]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d001      	beq.n	80130a4 <remove_chain+0x88>
 80130a0:	7ffb      	ldrb	r3, [r7, #31]
 80130a2:	e01c      	b.n	80130de <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80130a4:	69bb      	ldr	r3, [r7, #24]
 80130a6:	699a      	ldr	r2, [r3, #24]
 80130a8:	69bb      	ldr	r3, [r7, #24]
 80130aa:	69db      	ldr	r3, [r3, #28]
 80130ac:	3b02      	subs	r3, #2
 80130ae:	429a      	cmp	r2, r3
 80130b0:	d20b      	bcs.n	80130ca <remove_chain+0xae>
			fs->free_clst++;
 80130b2:	69bb      	ldr	r3, [r7, #24]
 80130b4:	699b      	ldr	r3, [r3, #24]
 80130b6:	1c5a      	adds	r2, r3, #1
 80130b8:	69bb      	ldr	r3, [r7, #24]
 80130ba:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80130bc:	69bb      	ldr	r3, [r7, #24]
 80130be:	791b      	ldrb	r3, [r3, #4]
 80130c0:	f043 0301 	orr.w	r3, r3, #1
 80130c4:	b2da      	uxtb	r2, r3
 80130c6:	69bb      	ldr	r3, [r7, #24]
 80130c8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80130ca:	697b      	ldr	r3, [r7, #20]
 80130cc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80130ce:	69bb      	ldr	r3, [r7, #24]
 80130d0:	69db      	ldr	r3, [r3, #28]
 80130d2:	68ba      	ldr	r2, [r7, #8]
 80130d4:	429a      	cmp	r2, r3
 80130d6:	d3c6      	bcc.n	8013066 <remove_chain+0x4a>
 80130d8:	e000      	b.n	80130dc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80130da:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80130dc:	2300      	movs	r3, #0
}
 80130de:	4618      	mov	r0, r3
 80130e0:	3720      	adds	r7, #32
 80130e2:	46bd      	mov	sp, r7
 80130e4:	bd80      	pop	{r7, pc}

080130e6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80130e6:	b580      	push	{r7, lr}
 80130e8:	b088      	sub	sp, #32
 80130ea:	af00      	add	r7, sp, #0
 80130ec:	6078      	str	r0, [r7, #4]
 80130ee:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80130f6:	683b      	ldr	r3, [r7, #0]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d10d      	bne.n	8013118 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80130fc:	693b      	ldr	r3, [r7, #16]
 80130fe:	695b      	ldr	r3, [r3, #20]
 8013100:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8013102:	69bb      	ldr	r3, [r7, #24]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d004      	beq.n	8013112 <create_chain+0x2c>
 8013108:	693b      	ldr	r3, [r7, #16]
 801310a:	69db      	ldr	r3, [r3, #28]
 801310c:	69ba      	ldr	r2, [r7, #24]
 801310e:	429a      	cmp	r2, r3
 8013110:	d31b      	bcc.n	801314a <create_chain+0x64>
 8013112:	2301      	movs	r3, #1
 8013114:	61bb      	str	r3, [r7, #24]
 8013116:	e018      	b.n	801314a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8013118:	6839      	ldr	r1, [r7, #0]
 801311a:	6878      	ldr	r0, [r7, #4]
 801311c:	f7ff fded 	bl	8012cfa <get_fat>
 8013120:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	2b01      	cmp	r3, #1
 8013126:	d801      	bhi.n	801312c <create_chain+0x46>
 8013128:	2301      	movs	r3, #1
 801312a:	e070      	b.n	801320e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013132:	d101      	bne.n	8013138 <create_chain+0x52>
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	e06a      	b.n	801320e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8013138:	693b      	ldr	r3, [r7, #16]
 801313a:	69db      	ldr	r3, [r3, #28]
 801313c:	68fa      	ldr	r2, [r7, #12]
 801313e:	429a      	cmp	r2, r3
 8013140:	d201      	bcs.n	8013146 <create_chain+0x60>
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	e063      	b.n	801320e <create_chain+0x128>
		scl = clst;
 8013146:	683b      	ldr	r3, [r7, #0]
 8013148:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801314a:	69bb      	ldr	r3, [r7, #24]
 801314c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801314e:	69fb      	ldr	r3, [r7, #28]
 8013150:	3301      	adds	r3, #1
 8013152:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8013154:	693b      	ldr	r3, [r7, #16]
 8013156:	69db      	ldr	r3, [r3, #28]
 8013158:	69fa      	ldr	r2, [r7, #28]
 801315a:	429a      	cmp	r2, r3
 801315c:	d307      	bcc.n	801316e <create_chain+0x88>
				ncl = 2;
 801315e:	2302      	movs	r3, #2
 8013160:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8013162:	69fa      	ldr	r2, [r7, #28]
 8013164:	69bb      	ldr	r3, [r7, #24]
 8013166:	429a      	cmp	r2, r3
 8013168:	d901      	bls.n	801316e <create_chain+0x88>
 801316a:	2300      	movs	r3, #0
 801316c:	e04f      	b.n	801320e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801316e:	69f9      	ldr	r1, [r7, #28]
 8013170:	6878      	ldr	r0, [r7, #4]
 8013172:	f7ff fdc2 	bl	8012cfa <get_fat>
 8013176:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	2b00      	cmp	r3, #0
 801317c:	d00e      	beq.n	801319c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	2b01      	cmp	r3, #1
 8013182:	d003      	beq.n	801318c <create_chain+0xa6>
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	f1b3 3fff 	cmp.w	r3, #4294967295
 801318a:	d101      	bne.n	8013190 <create_chain+0xaa>
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	e03e      	b.n	801320e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8013190:	69fa      	ldr	r2, [r7, #28]
 8013192:	69bb      	ldr	r3, [r7, #24]
 8013194:	429a      	cmp	r2, r3
 8013196:	d1da      	bne.n	801314e <create_chain+0x68>
 8013198:	2300      	movs	r3, #0
 801319a:	e038      	b.n	801320e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801319c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801319e:	f04f 32ff 	mov.w	r2, #4294967295
 80131a2:	69f9      	ldr	r1, [r7, #28]
 80131a4:	6938      	ldr	r0, [r7, #16]
 80131a6:	f7ff fe4f 	bl	8012e48 <put_fat>
 80131aa:	4603      	mov	r3, r0
 80131ac:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80131ae:	7dfb      	ldrb	r3, [r7, #23]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d109      	bne.n	80131c8 <create_chain+0xe2>
 80131b4:	683b      	ldr	r3, [r7, #0]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d006      	beq.n	80131c8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80131ba:	69fa      	ldr	r2, [r7, #28]
 80131bc:	6839      	ldr	r1, [r7, #0]
 80131be:	6938      	ldr	r0, [r7, #16]
 80131c0:	f7ff fe42 	bl	8012e48 <put_fat>
 80131c4:	4603      	mov	r3, r0
 80131c6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80131c8:	7dfb      	ldrb	r3, [r7, #23]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d116      	bne.n	80131fc <create_chain+0x116>
		fs->last_clst = ncl;
 80131ce:	693b      	ldr	r3, [r7, #16]
 80131d0:	69fa      	ldr	r2, [r7, #28]
 80131d2:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80131d4:	693b      	ldr	r3, [r7, #16]
 80131d6:	699a      	ldr	r2, [r3, #24]
 80131d8:	693b      	ldr	r3, [r7, #16]
 80131da:	69db      	ldr	r3, [r3, #28]
 80131dc:	3b02      	subs	r3, #2
 80131de:	429a      	cmp	r2, r3
 80131e0:	d804      	bhi.n	80131ec <create_chain+0x106>
 80131e2:	693b      	ldr	r3, [r7, #16]
 80131e4:	699b      	ldr	r3, [r3, #24]
 80131e6:	1e5a      	subs	r2, r3, #1
 80131e8:	693b      	ldr	r3, [r7, #16]
 80131ea:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80131ec:	693b      	ldr	r3, [r7, #16]
 80131ee:	791b      	ldrb	r3, [r3, #4]
 80131f0:	f043 0301 	orr.w	r3, r3, #1
 80131f4:	b2da      	uxtb	r2, r3
 80131f6:	693b      	ldr	r3, [r7, #16]
 80131f8:	711a      	strb	r2, [r3, #4]
 80131fa:	e007      	b.n	801320c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80131fc:	7dfb      	ldrb	r3, [r7, #23]
 80131fe:	2b01      	cmp	r3, #1
 8013200:	d102      	bne.n	8013208 <create_chain+0x122>
 8013202:	f04f 33ff 	mov.w	r3, #4294967295
 8013206:	e000      	b.n	801320a <create_chain+0x124>
 8013208:	2301      	movs	r3, #1
 801320a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801320c:	69fb      	ldr	r3, [r7, #28]
}
 801320e:	4618      	mov	r0, r3
 8013210:	3720      	adds	r7, #32
 8013212:	46bd      	mov	sp, r7
 8013214:	bd80      	pop	{r7, pc}

08013216 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8013216:	b480      	push	{r7}
 8013218:	b087      	sub	sp, #28
 801321a:	af00      	add	r7, sp, #0
 801321c:	6078      	str	r0, [r7, #4]
 801321e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801322a:	3304      	adds	r3, #4
 801322c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801322e:	683b      	ldr	r3, [r7, #0]
 8013230:	0a5b      	lsrs	r3, r3, #9
 8013232:	68fa      	ldr	r2, [r7, #12]
 8013234:	8952      	ldrh	r2, [r2, #10]
 8013236:	fbb3 f3f2 	udiv	r3, r3, r2
 801323a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801323c:	693b      	ldr	r3, [r7, #16]
 801323e:	1d1a      	adds	r2, r3, #4
 8013240:	613a      	str	r2, [r7, #16]
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8013246:	68bb      	ldr	r3, [r7, #8]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d101      	bne.n	8013250 <clmt_clust+0x3a>
 801324c:	2300      	movs	r3, #0
 801324e:	e010      	b.n	8013272 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8013250:	697a      	ldr	r2, [r7, #20]
 8013252:	68bb      	ldr	r3, [r7, #8]
 8013254:	429a      	cmp	r2, r3
 8013256:	d307      	bcc.n	8013268 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8013258:	697a      	ldr	r2, [r7, #20]
 801325a:	68bb      	ldr	r3, [r7, #8]
 801325c:	1ad3      	subs	r3, r2, r3
 801325e:	617b      	str	r3, [r7, #20]
 8013260:	693b      	ldr	r3, [r7, #16]
 8013262:	3304      	adds	r3, #4
 8013264:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013266:	e7e9      	b.n	801323c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8013268:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801326a:	693b      	ldr	r3, [r7, #16]
 801326c:	681a      	ldr	r2, [r3, #0]
 801326e:	697b      	ldr	r3, [r7, #20]
 8013270:	4413      	add	r3, r2
}
 8013272:	4618      	mov	r0, r3
 8013274:	371c      	adds	r7, #28
 8013276:	46bd      	mov	sp, r7
 8013278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801327c:	4770      	bx	lr

0801327e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801327e:	b580      	push	{r7, lr}
 8013280:	b086      	sub	sp, #24
 8013282:	af00      	add	r7, sp, #0
 8013284:	6078      	str	r0, [r7, #4]
 8013286:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801328e:	683b      	ldr	r3, [r7, #0]
 8013290:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8013294:	d204      	bcs.n	80132a0 <dir_sdi+0x22>
 8013296:	683b      	ldr	r3, [r7, #0]
 8013298:	f003 031f 	and.w	r3, r3, #31
 801329c:	2b00      	cmp	r3, #0
 801329e:	d001      	beq.n	80132a4 <dir_sdi+0x26>
		return FR_INT_ERR;
 80132a0:	2302      	movs	r3, #2
 80132a2:	e063      	b.n	801336c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	683a      	ldr	r2, [r7, #0]
 80132a8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	689b      	ldr	r3, [r3, #8]
 80132ae:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80132b0:	697b      	ldr	r3, [r7, #20]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d106      	bne.n	80132c4 <dir_sdi+0x46>
 80132b6:	693b      	ldr	r3, [r7, #16]
 80132b8:	781b      	ldrb	r3, [r3, #0]
 80132ba:	2b02      	cmp	r3, #2
 80132bc:	d902      	bls.n	80132c4 <dir_sdi+0x46>
		clst = fs->dirbase;
 80132be:	693b      	ldr	r3, [r7, #16]
 80132c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80132c2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80132c4:	697b      	ldr	r3, [r7, #20]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d10c      	bne.n	80132e4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80132ca:	683b      	ldr	r3, [r7, #0]
 80132cc:	095b      	lsrs	r3, r3, #5
 80132ce:	693a      	ldr	r2, [r7, #16]
 80132d0:	8912      	ldrh	r2, [r2, #8]
 80132d2:	4293      	cmp	r3, r2
 80132d4:	d301      	bcc.n	80132da <dir_sdi+0x5c>
 80132d6:	2302      	movs	r3, #2
 80132d8:	e048      	b.n	801336c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80132da:	693b      	ldr	r3, [r7, #16]
 80132dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	61da      	str	r2, [r3, #28]
 80132e2:	e029      	b.n	8013338 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80132e4:	693b      	ldr	r3, [r7, #16]
 80132e6:	895b      	ldrh	r3, [r3, #10]
 80132e8:	025b      	lsls	r3, r3, #9
 80132ea:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80132ec:	e019      	b.n	8013322 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	6979      	ldr	r1, [r7, #20]
 80132f2:	4618      	mov	r0, r3
 80132f4:	f7ff fd01 	bl	8012cfa <get_fat>
 80132f8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80132fa:	697b      	ldr	r3, [r7, #20]
 80132fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013300:	d101      	bne.n	8013306 <dir_sdi+0x88>
 8013302:	2301      	movs	r3, #1
 8013304:	e032      	b.n	801336c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8013306:	697b      	ldr	r3, [r7, #20]
 8013308:	2b01      	cmp	r3, #1
 801330a:	d904      	bls.n	8013316 <dir_sdi+0x98>
 801330c:	693b      	ldr	r3, [r7, #16]
 801330e:	69db      	ldr	r3, [r3, #28]
 8013310:	697a      	ldr	r2, [r7, #20]
 8013312:	429a      	cmp	r2, r3
 8013314:	d301      	bcc.n	801331a <dir_sdi+0x9c>
 8013316:	2302      	movs	r3, #2
 8013318:	e028      	b.n	801336c <dir_sdi+0xee>
			ofs -= csz;
 801331a:	683a      	ldr	r2, [r7, #0]
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	1ad3      	subs	r3, r2, r3
 8013320:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013322:	683a      	ldr	r2, [r7, #0]
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	429a      	cmp	r2, r3
 8013328:	d2e1      	bcs.n	80132ee <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801332a:	6979      	ldr	r1, [r7, #20]
 801332c:	6938      	ldr	r0, [r7, #16]
 801332e:	f7ff fcc5 	bl	8012cbc <clust2sect>
 8013332:	4602      	mov	r2, r0
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	697a      	ldr	r2, [r7, #20]
 801333c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	69db      	ldr	r3, [r3, #28]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d101      	bne.n	801334a <dir_sdi+0xcc>
 8013346:	2302      	movs	r3, #2
 8013348:	e010      	b.n	801336c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	69da      	ldr	r2, [r3, #28]
 801334e:	683b      	ldr	r3, [r7, #0]
 8013350:	0a5b      	lsrs	r3, r3, #9
 8013352:	441a      	add	r2, r3
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8013358:	693b      	ldr	r3, [r7, #16]
 801335a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801335e:	683b      	ldr	r3, [r7, #0]
 8013360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013364:	441a      	add	r2, r3
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801336a:	2300      	movs	r3, #0
}
 801336c:	4618      	mov	r0, r3
 801336e:	3718      	adds	r7, #24
 8013370:	46bd      	mov	sp, r7
 8013372:	bd80      	pop	{r7, pc}

08013374 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013374:	b580      	push	{r7, lr}
 8013376:	b086      	sub	sp, #24
 8013378:	af00      	add	r7, sp, #0
 801337a:	6078      	str	r0, [r7, #4]
 801337c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	695b      	ldr	r3, [r3, #20]
 8013388:	3320      	adds	r3, #32
 801338a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	69db      	ldr	r3, [r3, #28]
 8013390:	2b00      	cmp	r3, #0
 8013392:	d003      	beq.n	801339c <dir_next+0x28>
 8013394:	68bb      	ldr	r3, [r7, #8]
 8013396:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801339a:	d301      	bcc.n	80133a0 <dir_next+0x2c>
 801339c:	2304      	movs	r3, #4
 801339e:	e0aa      	b.n	80134f6 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80133a0:	68bb      	ldr	r3, [r7, #8]
 80133a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	f040 8098 	bne.w	80134dc <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	69db      	ldr	r3, [r3, #28]
 80133b0:	1c5a      	adds	r2, r3, #1
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	699b      	ldr	r3, [r3, #24]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d10b      	bne.n	80133d6 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80133be:	68bb      	ldr	r3, [r7, #8]
 80133c0:	095b      	lsrs	r3, r3, #5
 80133c2:	68fa      	ldr	r2, [r7, #12]
 80133c4:	8912      	ldrh	r2, [r2, #8]
 80133c6:	4293      	cmp	r3, r2
 80133c8:	f0c0 8088 	bcc.w	80134dc <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	2200      	movs	r2, #0
 80133d0:	61da      	str	r2, [r3, #28]
 80133d2:	2304      	movs	r3, #4
 80133d4:	e08f      	b.n	80134f6 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80133d6:	68bb      	ldr	r3, [r7, #8]
 80133d8:	0a5b      	lsrs	r3, r3, #9
 80133da:	68fa      	ldr	r2, [r7, #12]
 80133dc:	8952      	ldrh	r2, [r2, #10]
 80133de:	3a01      	subs	r2, #1
 80133e0:	4013      	ands	r3, r2
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d17a      	bne.n	80134dc <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80133e6:	687a      	ldr	r2, [r7, #4]
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	699b      	ldr	r3, [r3, #24]
 80133ec:	4619      	mov	r1, r3
 80133ee:	4610      	mov	r0, r2
 80133f0:	f7ff fc83 	bl	8012cfa <get_fat>
 80133f4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80133f6:	697b      	ldr	r3, [r7, #20]
 80133f8:	2b01      	cmp	r3, #1
 80133fa:	d801      	bhi.n	8013400 <dir_next+0x8c>
 80133fc:	2302      	movs	r3, #2
 80133fe:	e07a      	b.n	80134f6 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013400:	697b      	ldr	r3, [r7, #20]
 8013402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013406:	d101      	bne.n	801340c <dir_next+0x98>
 8013408:	2301      	movs	r3, #1
 801340a:	e074      	b.n	80134f6 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	69db      	ldr	r3, [r3, #28]
 8013410:	697a      	ldr	r2, [r7, #20]
 8013412:	429a      	cmp	r2, r3
 8013414:	d358      	bcc.n	80134c8 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8013416:	683b      	ldr	r3, [r7, #0]
 8013418:	2b00      	cmp	r3, #0
 801341a:	d104      	bne.n	8013426 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	2200      	movs	r2, #0
 8013420:	61da      	str	r2, [r3, #28]
 8013422:	2304      	movs	r3, #4
 8013424:	e067      	b.n	80134f6 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8013426:	687a      	ldr	r2, [r7, #4]
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	699b      	ldr	r3, [r3, #24]
 801342c:	4619      	mov	r1, r3
 801342e:	4610      	mov	r0, r2
 8013430:	f7ff fe59 	bl	80130e6 <create_chain>
 8013434:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8013436:	697b      	ldr	r3, [r7, #20]
 8013438:	2b00      	cmp	r3, #0
 801343a:	d101      	bne.n	8013440 <dir_next+0xcc>
 801343c:	2307      	movs	r3, #7
 801343e:	e05a      	b.n	80134f6 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8013440:	697b      	ldr	r3, [r7, #20]
 8013442:	2b01      	cmp	r3, #1
 8013444:	d101      	bne.n	801344a <dir_next+0xd6>
 8013446:	2302      	movs	r3, #2
 8013448:	e055      	b.n	80134f6 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801344a:	697b      	ldr	r3, [r7, #20]
 801344c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013450:	d101      	bne.n	8013456 <dir_next+0xe2>
 8013452:	2301      	movs	r3, #1
 8013454:	e04f      	b.n	80134f6 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8013456:	68f8      	ldr	r0, [r7, #12]
 8013458:	f7ff fb50 	bl	8012afc <sync_window>
 801345c:	4603      	mov	r3, r0
 801345e:	2b00      	cmp	r3, #0
 8013460:	d001      	beq.n	8013466 <dir_next+0xf2>
 8013462:	2301      	movs	r3, #1
 8013464:	e047      	b.n	80134f6 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	3338      	adds	r3, #56	@ 0x38
 801346a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801346e:	2100      	movs	r1, #0
 8013470:	4618      	mov	r0, r3
 8013472:	f7ff f948 	bl	8012706 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013476:	2300      	movs	r3, #0
 8013478:	613b      	str	r3, [r7, #16]
 801347a:	6979      	ldr	r1, [r7, #20]
 801347c:	68f8      	ldr	r0, [r7, #12]
 801347e:	f7ff fc1d 	bl	8012cbc <clust2sect>
 8013482:	4602      	mov	r2, r0
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	635a      	str	r2, [r3, #52]	@ 0x34
 8013488:	e012      	b.n	80134b0 <dir_next+0x13c>
						fs->wflag = 1;
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	2201      	movs	r2, #1
 801348e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8013490:	68f8      	ldr	r0, [r7, #12]
 8013492:	f7ff fb33 	bl	8012afc <sync_window>
 8013496:	4603      	mov	r3, r0
 8013498:	2b00      	cmp	r3, #0
 801349a:	d001      	beq.n	80134a0 <dir_next+0x12c>
 801349c:	2301      	movs	r3, #1
 801349e:	e02a      	b.n	80134f6 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80134a0:	693b      	ldr	r3, [r7, #16]
 80134a2:	3301      	adds	r3, #1
 80134a4:	613b      	str	r3, [r7, #16]
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80134aa:	1c5a      	adds	r2, r3, #1
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	635a      	str	r2, [r3, #52]	@ 0x34
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	895b      	ldrh	r3, [r3, #10]
 80134b4:	461a      	mov	r2, r3
 80134b6:	693b      	ldr	r3, [r7, #16]
 80134b8:	4293      	cmp	r3, r2
 80134ba:	d3e6      	bcc.n	801348a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80134c0:	693b      	ldr	r3, [r7, #16]
 80134c2:	1ad2      	subs	r2, r2, r3
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	697a      	ldr	r2, [r7, #20]
 80134cc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80134ce:	6979      	ldr	r1, [r7, #20]
 80134d0:	68f8      	ldr	r0, [r7, #12]
 80134d2:	f7ff fbf3 	bl	8012cbc <clust2sect>
 80134d6:	4602      	mov	r2, r0
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	68ba      	ldr	r2, [r7, #8]
 80134e0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80134e8:	68bb      	ldr	r3, [r7, #8]
 80134ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80134ee:	441a      	add	r2, r3
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80134f4:	2300      	movs	r3, #0
}
 80134f6:	4618      	mov	r0, r3
 80134f8:	3718      	adds	r7, #24
 80134fa:	46bd      	mov	sp, r7
 80134fc:	bd80      	pop	{r7, pc}

080134fe <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80134fe:	b580      	push	{r7, lr}
 8013500:	b086      	sub	sp, #24
 8013502:	af00      	add	r7, sp, #0
 8013504:	6078      	str	r0, [r7, #4]
 8013506:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801350e:	2100      	movs	r1, #0
 8013510:	6878      	ldr	r0, [r7, #4]
 8013512:	f7ff feb4 	bl	801327e <dir_sdi>
 8013516:	4603      	mov	r3, r0
 8013518:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801351a:	7dfb      	ldrb	r3, [r7, #23]
 801351c:	2b00      	cmp	r3, #0
 801351e:	d12b      	bne.n	8013578 <dir_alloc+0x7a>
		n = 0;
 8013520:	2300      	movs	r3, #0
 8013522:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	69db      	ldr	r3, [r3, #28]
 8013528:	4619      	mov	r1, r3
 801352a:	68f8      	ldr	r0, [r7, #12]
 801352c:	f7ff fb2a 	bl	8012b84 <move_window>
 8013530:	4603      	mov	r3, r0
 8013532:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013534:	7dfb      	ldrb	r3, [r7, #23]
 8013536:	2b00      	cmp	r3, #0
 8013538:	d11d      	bne.n	8013576 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	6a1b      	ldr	r3, [r3, #32]
 801353e:	781b      	ldrb	r3, [r3, #0]
 8013540:	2be5      	cmp	r3, #229	@ 0xe5
 8013542:	d004      	beq.n	801354e <dir_alloc+0x50>
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	6a1b      	ldr	r3, [r3, #32]
 8013548:	781b      	ldrb	r3, [r3, #0]
 801354a:	2b00      	cmp	r3, #0
 801354c:	d107      	bne.n	801355e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801354e:	693b      	ldr	r3, [r7, #16]
 8013550:	3301      	adds	r3, #1
 8013552:	613b      	str	r3, [r7, #16]
 8013554:	693a      	ldr	r2, [r7, #16]
 8013556:	683b      	ldr	r3, [r7, #0]
 8013558:	429a      	cmp	r2, r3
 801355a:	d102      	bne.n	8013562 <dir_alloc+0x64>
 801355c:	e00c      	b.n	8013578 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801355e:	2300      	movs	r3, #0
 8013560:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8013562:	2101      	movs	r1, #1
 8013564:	6878      	ldr	r0, [r7, #4]
 8013566:	f7ff ff05 	bl	8013374 <dir_next>
 801356a:	4603      	mov	r3, r0
 801356c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801356e:	7dfb      	ldrb	r3, [r7, #23]
 8013570:	2b00      	cmp	r3, #0
 8013572:	d0d7      	beq.n	8013524 <dir_alloc+0x26>
 8013574:	e000      	b.n	8013578 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8013576:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8013578:	7dfb      	ldrb	r3, [r7, #23]
 801357a:	2b04      	cmp	r3, #4
 801357c:	d101      	bne.n	8013582 <dir_alloc+0x84>
 801357e:	2307      	movs	r3, #7
 8013580:	75fb      	strb	r3, [r7, #23]
	return res;
 8013582:	7dfb      	ldrb	r3, [r7, #23]
}
 8013584:	4618      	mov	r0, r3
 8013586:	3718      	adds	r7, #24
 8013588:	46bd      	mov	sp, r7
 801358a:	bd80      	pop	{r7, pc}

0801358c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801358c:	b580      	push	{r7, lr}
 801358e:	b084      	sub	sp, #16
 8013590:	af00      	add	r7, sp, #0
 8013592:	6078      	str	r0, [r7, #4]
 8013594:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8013596:	683b      	ldr	r3, [r7, #0]
 8013598:	331a      	adds	r3, #26
 801359a:	4618      	mov	r0, r3
 801359c:	f7ff f810 	bl	80125c0 <ld_word>
 80135a0:	4603      	mov	r3, r0
 80135a2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	781b      	ldrb	r3, [r3, #0]
 80135a8:	2b03      	cmp	r3, #3
 80135aa:	d109      	bne.n	80135c0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80135ac:	683b      	ldr	r3, [r7, #0]
 80135ae:	3314      	adds	r3, #20
 80135b0:	4618      	mov	r0, r3
 80135b2:	f7ff f805 	bl	80125c0 <ld_word>
 80135b6:	4603      	mov	r3, r0
 80135b8:	041b      	lsls	r3, r3, #16
 80135ba:	68fa      	ldr	r2, [r7, #12]
 80135bc:	4313      	orrs	r3, r2
 80135be:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80135c0:	68fb      	ldr	r3, [r7, #12]
}
 80135c2:	4618      	mov	r0, r3
 80135c4:	3710      	adds	r7, #16
 80135c6:	46bd      	mov	sp, r7
 80135c8:	bd80      	pop	{r7, pc}

080135ca <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80135ca:	b580      	push	{r7, lr}
 80135cc:	b084      	sub	sp, #16
 80135ce:	af00      	add	r7, sp, #0
 80135d0:	60f8      	str	r0, [r7, #12]
 80135d2:	60b9      	str	r1, [r7, #8]
 80135d4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80135d6:	68bb      	ldr	r3, [r7, #8]
 80135d8:	331a      	adds	r3, #26
 80135da:	687a      	ldr	r2, [r7, #4]
 80135dc:	b292      	uxth	r2, r2
 80135de:	4611      	mov	r1, r2
 80135e0:	4618      	mov	r0, r3
 80135e2:	f7ff f828 	bl	8012636 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	781b      	ldrb	r3, [r3, #0]
 80135ea:	2b03      	cmp	r3, #3
 80135ec:	d109      	bne.n	8013602 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80135ee:	68bb      	ldr	r3, [r7, #8]
 80135f0:	f103 0214 	add.w	r2, r3, #20
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	0c1b      	lsrs	r3, r3, #16
 80135f8:	b29b      	uxth	r3, r3
 80135fa:	4619      	mov	r1, r3
 80135fc:	4610      	mov	r0, r2
 80135fe:	f7ff f81a 	bl	8012636 <st_word>
	}
}
 8013602:	bf00      	nop
 8013604:	3710      	adds	r7, #16
 8013606:	46bd      	mov	sp, r7
 8013608:	bd80      	pop	{r7, pc}
	...

0801360c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801360c:	b590      	push	{r4, r7, lr}
 801360e:	b087      	sub	sp, #28
 8013610:	af00      	add	r7, sp, #0
 8013612:	6078      	str	r0, [r7, #4]
 8013614:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8013616:	683b      	ldr	r3, [r7, #0]
 8013618:	331a      	adds	r3, #26
 801361a:	4618      	mov	r0, r3
 801361c:	f7fe ffd0 	bl	80125c0 <ld_word>
 8013620:	4603      	mov	r3, r0
 8013622:	2b00      	cmp	r3, #0
 8013624:	d001      	beq.n	801362a <cmp_lfn+0x1e>
 8013626:	2300      	movs	r3, #0
 8013628:	e059      	b.n	80136de <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801362a:	683b      	ldr	r3, [r7, #0]
 801362c:	781b      	ldrb	r3, [r3, #0]
 801362e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013632:	1e5a      	subs	r2, r3, #1
 8013634:	4613      	mov	r3, r2
 8013636:	005b      	lsls	r3, r3, #1
 8013638:	4413      	add	r3, r2
 801363a:	009b      	lsls	r3, r3, #2
 801363c:	4413      	add	r3, r2
 801363e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8013640:	2301      	movs	r3, #1
 8013642:	81fb      	strh	r3, [r7, #14]
 8013644:	2300      	movs	r3, #0
 8013646:	613b      	str	r3, [r7, #16]
 8013648:	e033      	b.n	80136b2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801364a:	4a27      	ldr	r2, [pc, #156]	@ (80136e8 <cmp_lfn+0xdc>)
 801364c:	693b      	ldr	r3, [r7, #16]
 801364e:	4413      	add	r3, r2
 8013650:	781b      	ldrb	r3, [r3, #0]
 8013652:	461a      	mov	r2, r3
 8013654:	683b      	ldr	r3, [r7, #0]
 8013656:	4413      	add	r3, r2
 8013658:	4618      	mov	r0, r3
 801365a:	f7fe ffb1 	bl	80125c0 <ld_word>
 801365e:	4603      	mov	r3, r0
 8013660:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8013662:	89fb      	ldrh	r3, [r7, #14]
 8013664:	2b00      	cmp	r3, #0
 8013666:	d01a      	beq.n	801369e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8013668:	697b      	ldr	r3, [r7, #20]
 801366a:	2bfe      	cmp	r3, #254	@ 0xfe
 801366c:	d812      	bhi.n	8013694 <cmp_lfn+0x88>
 801366e:	89bb      	ldrh	r3, [r7, #12]
 8013670:	4618      	mov	r0, r3
 8013672:	f002 f89b 	bl	80157ac <ff_wtoupper>
 8013676:	4603      	mov	r3, r0
 8013678:	461c      	mov	r4, r3
 801367a:	697b      	ldr	r3, [r7, #20]
 801367c:	1c5a      	adds	r2, r3, #1
 801367e:	617a      	str	r2, [r7, #20]
 8013680:	005b      	lsls	r3, r3, #1
 8013682:	687a      	ldr	r2, [r7, #4]
 8013684:	4413      	add	r3, r2
 8013686:	881b      	ldrh	r3, [r3, #0]
 8013688:	4618      	mov	r0, r3
 801368a:	f002 f88f 	bl	80157ac <ff_wtoupper>
 801368e:	4603      	mov	r3, r0
 8013690:	429c      	cmp	r4, r3
 8013692:	d001      	beq.n	8013698 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8013694:	2300      	movs	r3, #0
 8013696:	e022      	b.n	80136de <cmp_lfn+0xd2>
			}
			wc = uc;
 8013698:	89bb      	ldrh	r3, [r7, #12]
 801369a:	81fb      	strh	r3, [r7, #14]
 801369c:	e006      	b.n	80136ac <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801369e:	89bb      	ldrh	r3, [r7, #12]
 80136a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80136a4:	4293      	cmp	r3, r2
 80136a6:	d001      	beq.n	80136ac <cmp_lfn+0xa0>
 80136a8:	2300      	movs	r3, #0
 80136aa:	e018      	b.n	80136de <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80136ac:	693b      	ldr	r3, [r7, #16]
 80136ae:	3301      	adds	r3, #1
 80136b0:	613b      	str	r3, [r7, #16]
 80136b2:	693b      	ldr	r3, [r7, #16]
 80136b4:	2b0c      	cmp	r3, #12
 80136b6:	d9c8      	bls.n	801364a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80136b8:	683b      	ldr	r3, [r7, #0]
 80136ba:	781b      	ldrb	r3, [r3, #0]
 80136bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d00b      	beq.n	80136dc <cmp_lfn+0xd0>
 80136c4:	89fb      	ldrh	r3, [r7, #14]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d008      	beq.n	80136dc <cmp_lfn+0xd0>
 80136ca:	697b      	ldr	r3, [r7, #20]
 80136cc:	005b      	lsls	r3, r3, #1
 80136ce:	687a      	ldr	r2, [r7, #4]
 80136d0:	4413      	add	r3, r2
 80136d2:	881b      	ldrh	r3, [r3, #0]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d001      	beq.n	80136dc <cmp_lfn+0xd0>
 80136d8:	2300      	movs	r3, #0
 80136da:	e000      	b.n	80136de <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80136dc:	2301      	movs	r3, #1
}
 80136de:	4618      	mov	r0, r3
 80136e0:	371c      	adds	r7, #28
 80136e2:	46bd      	mov	sp, r7
 80136e4:	bd90      	pop	{r4, r7, pc}
 80136e6:	bf00      	nop
 80136e8:	0801f354 	.word	0x0801f354

080136ec <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80136ec:	b580      	push	{r7, lr}
 80136ee:	b088      	sub	sp, #32
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	60f8      	str	r0, [r7, #12]
 80136f4:	60b9      	str	r1, [r7, #8]
 80136f6:	4611      	mov	r1, r2
 80136f8:	461a      	mov	r2, r3
 80136fa:	460b      	mov	r3, r1
 80136fc:	71fb      	strb	r3, [r7, #7]
 80136fe:	4613      	mov	r3, r2
 8013700:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8013702:	68bb      	ldr	r3, [r7, #8]
 8013704:	330d      	adds	r3, #13
 8013706:	79ba      	ldrb	r2, [r7, #6]
 8013708:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801370a:	68bb      	ldr	r3, [r7, #8]
 801370c:	330b      	adds	r3, #11
 801370e:	220f      	movs	r2, #15
 8013710:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8013712:	68bb      	ldr	r3, [r7, #8]
 8013714:	330c      	adds	r3, #12
 8013716:	2200      	movs	r2, #0
 8013718:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801371a:	68bb      	ldr	r3, [r7, #8]
 801371c:	331a      	adds	r3, #26
 801371e:	2100      	movs	r1, #0
 8013720:	4618      	mov	r0, r3
 8013722:	f7fe ff88 	bl	8012636 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8013726:	79fb      	ldrb	r3, [r7, #7]
 8013728:	1e5a      	subs	r2, r3, #1
 801372a:	4613      	mov	r3, r2
 801372c:	005b      	lsls	r3, r3, #1
 801372e:	4413      	add	r3, r2
 8013730:	009b      	lsls	r3, r3, #2
 8013732:	4413      	add	r3, r2
 8013734:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8013736:	2300      	movs	r3, #0
 8013738:	82fb      	strh	r3, [r7, #22]
 801373a:	2300      	movs	r3, #0
 801373c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801373e:	8afb      	ldrh	r3, [r7, #22]
 8013740:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013744:	4293      	cmp	r3, r2
 8013746:	d007      	beq.n	8013758 <put_lfn+0x6c>
 8013748:	69fb      	ldr	r3, [r7, #28]
 801374a:	1c5a      	adds	r2, r3, #1
 801374c:	61fa      	str	r2, [r7, #28]
 801374e:	005b      	lsls	r3, r3, #1
 8013750:	68fa      	ldr	r2, [r7, #12]
 8013752:	4413      	add	r3, r2
 8013754:	881b      	ldrh	r3, [r3, #0]
 8013756:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8013758:	4a17      	ldr	r2, [pc, #92]	@ (80137b8 <put_lfn+0xcc>)
 801375a:	69bb      	ldr	r3, [r7, #24]
 801375c:	4413      	add	r3, r2
 801375e:	781b      	ldrb	r3, [r3, #0]
 8013760:	461a      	mov	r2, r3
 8013762:	68bb      	ldr	r3, [r7, #8]
 8013764:	4413      	add	r3, r2
 8013766:	8afa      	ldrh	r2, [r7, #22]
 8013768:	4611      	mov	r1, r2
 801376a:	4618      	mov	r0, r3
 801376c:	f7fe ff63 	bl	8012636 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8013770:	8afb      	ldrh	r3, [r7, #22]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d102      	bne.n	801377c <put_lfn+0x90>
 8013776:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801377a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801377c:	69bb      	ldr	r3, [r7, #24]
 801377e:	3301      	adds	r3, #1
 8013780:	61bb      	str	r3, [r7, #24]
 8013782:	69bb      	ldr	r3, [r7, #24]
 8013784:	2b0c      	cmp	r3, #12
 8013786:	d9da      	bls.n	801373e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8013788:	8afb      	ldrh	r3, [r7, #22]
 801378a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801378e:	4293      	cmp	r3, r2
 8013790:	d006      	beq.n	80137a0 <put_lfn+0xb4>
 8013792:	69fb      	ldr	r3, [r7, #28]
 8013794:	005b      	lsls	r3, r3, #1
 8013796:	68fa      	ldr	r2, [r7, #12]
 8013798:	4413      	add	r3, r2
 801379a:	881b      	ldrh	r3, [r3, #0]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d103      	bne.n	80137a8 <put_lfn+0xbc>
 80137a0:	79fb      	ldrb	r3, [r7, #7]
 80137a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80137a6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80137a8:	68bb      	ldr	r3, [r7, #8]
 80137aa:	79fa      	ldrb	r2, [r7, #7]
 80137ac:	701a      	strb	r2, [r3, #0]
}
 80137ae:	bf00      	nop
 80137b0:	3720      	adds	r7, #32
 80137b2:	46bd      	mov	sp, r7
 80137b4:	bd80      	pop	{r7, pc}
 80137b6:	bf00      	nop
 80137b8:	0801f354 	.word	0x0801f354

080137bc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80137bc:	b580      	push	{r7, lr}
 80137be:	b08c      	sub	sp, #48	@ 0x30
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	60f8      	str	r0, [r7, #12]
 80137c4:	60b9      	str	r1, [r7, #8]
 80137c6:	607a      	str	r2, [r7, #4]
 80137c8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80137ca:	220b      	movs	r2, #11
 80137cc:	68b9      	ldr	r1, [r7, #8]
 80137ce:	68f8      	ldr	r0, [r7, #12]
 80137d0:	f7fe ff78 	bl	80126c4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80137d4:	683b      	ldr	r3, [r7, #0]
 80137d6:	2b05      	cmp	r3, #5
 80137d8:	d92b      	bls.n	8013832 <gen_numname+0x76>
		sr = seq;
 80137da:	683b      	ldr	r3, [r7, #0]
 80137dc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80137de:	e022      	b.n	8013826 <gen_numname+0x6a>
			wc = *lfn++;
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	1c9a      	adds	r2, r3, #2
 80137e4:	607a      	str	r2, [r7, #4]
 80137e6:	881b      	ldrh	r3, [r3, #0]
 80137e8:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 80137ea:	2300      	movs	r3, #0
 80137ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80137ee:	e017      	b.n	8013820 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80137f0:	69fb      	ldr	r3, [r7, #28]
 80137f2:	005a      	lsls	r2, r3, #1
 80137f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80137f6:	f003 0301 	and.w	r3, r3, #1
 80137fa:	4413      	add	r3, r2
 80137fc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80137fe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013800:	085b      	lsrs	r3, r3, #1
 8013802:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8013804:	69fb      	ldr	r3, [r7, #28]
 8013806:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801380a:	2b00      	cmp	r3, #0
 801380c:	d005      	beq.n	801381a <gen_numname+0x5e>
 801380e:	69fb      	ldr	r3, [r7, #28]
 8013810:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8013814:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8013818:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801381a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801381c:	3301      	adds	r3, #1
 801381e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013822:	2b0f      	cmp	r3, #15
 8013824:	d9e4      	bls.n	80137f0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	881b      	ldrh	r3, [r3, #0]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d1d8      	bne.n	80137e0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801382e:	69fb      	ldr	r3, [r7, #28]
 8013830:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8013832:	2307      	movs	r3, #7
 8013834:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8013836:	683b      	ldr	r3, [r7, #0]
 8013838:	b2db      	uxtb	r3, r3
 801383a:	f003 030f 	and.w	r3, r3, #15
 801383e:	b2db      	uxtb	r3, r3
 8013840:	3330      	adds	r3, #48	@ 0x30
 8013842:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8013846:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801384a:	2b39      	cmp	r3, #57	@ 0x39
 801384c:	d904      	bls.n	8013858 <gen_numname+0x9c>
 801384e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013852:	3307      	adds	r3, #7
 8013854:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8013858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801385a:	1e5a      	subs	r2, r3, #1
 801385c:	62ba      	str	r2, [r7, #40]	@ 0x28
 801385e:	3330      	adds	r3, #48	@ 0x30
 8013860:	443b      	add	r3, r7
 8013862:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8013866:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801386a:	683b      	ldr	r3, [r7, #0]
 801386c:	091b      	lsrs	r3, r3, #4
 801386e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8013870:	683b      	ldr	r3, [r7, #0]
 8013872:	2b00      	cmp	r3, #0
 8013874:	d1df      	bne.n	8013836 <gen_numname+0x7a>
	ns[i] = '~';
 8013876:	f107 0214 	add.w	r2, r7, #20
 801387a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801387c:	4413      	add	r3, r2
 801387e:	227e      	movs	r2, #126	@ 0x7e
 8013880:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8013882:	2300      	movs	r3, #0
 8013884:	627b      	str	r3, [r7, #36]	@ 0x24
 8013886:	e002      	b.n	801388e <gen_numname+0xd2>
 8013888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801388a:	3301      	adds	r3, #1
 801388c:	627b      	str	r3, [r7, #36]	@ 0x24
 801388e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013892:	429a      	cmp	r2, r3
 8013894:	d205      	bcs.n	80138a2 <gen_numname+0xe6>
 8013896:	68fa      	ldr	r2, [r7, #12]
 8013898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801389a:	4413      	add	r3, r2
 801389c:	781b      	ldrb	r3, [r3, #0]
 801389e:	2b20      	cmp	r3, #32
 80138a0:	d1f2      	bne.n	8013888 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80138a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138a4:	2b07      	cmp	r3, #7
 80138a6:	d807      	bhi.n	80138b8 <gen_numname+0xfc>
 80138a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138aa:	1c5a      	adds	r2, r3, #1
 80138ac:	62ba      	str	r2, [r7, #40]	@ 0x28
 80138ae:	3330      	adds	r3, #48	@ 0x30
 80138b0:	443b      	add	r3, r7
 80138b2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80138b6:	e000      	b.n	80138ba <gen_numname+0xfe>
 80138b8:	2120      	movs	r1, #32
 80138ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138bc:	1c5a      	adds	r2, r3, #1
 80138be:	627a      	str	r2, [r7, #36]	@ 0x24
 80138c0:	68fa      	ldr	r2, [r7, #12]
 80138c2:	4413      	add	r3, r2
 80138c4:	460a      	mov	r2, r1
 80138c6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80138c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138ca:	2b07      	cmp	r3, #7
 80138cc:	d9e9      	bls.n	80138a2 <gen_numname+0xe6>
}
 80138ce:	bf00      	nop
 80138d0:	bf00      	nop
 80138d2:	3730      	adds	r7, #48	@ 0x30
 80138d4:	46bd      	mov	sp, r7
 80138d6:	bd80      	pop	{r7, pc}

080138d8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80138d8:	b480      	push	{r7}
 80138da:	b085      	sub	sp, #20
 80138dc:	af00      	add	r7, sp, #0
 80138de:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80138e0:	2300      	movs	r3, #0
 80138e2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80138e4:	230b      	movs	r3, #11
 80138e6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80138e8:	7bfb      	ldrb	r3, [r7, #15]
 80138ea:	b2da      	uxtb	r2, r3
 80138ec:	0852      	lsrs	r2, r2, #1
 80138ee:	01db      	lsls	r3, r3, #7
 80138f0:	4313      	orrs	r3, r2
 80138f2:	b2da      	uxtb	r2, r3
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	1c59      	adds	r1, r3, #1
 80138f8:	6079      	str	r1, [r7, #4]
 80138fa:	781b      	ldrb	r3, [r3, #0]
 80138fc:	4413      	add	r3, r2
 80138fe:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8013900:	68bb      	ldr	r3, [r7, #8]
 8013902:	3b01      	subs	r3, #1
 8013904:	60bb      	str	r3, [r7, #8]
 8013906:	68bb      	ldr	r3, [r7, #8]
 8013908:	2b00      	cmp	r3, #0
 801390a:	d1ed      	bne.n	80138e8 <sum_sfn+0x10>
	return sum;
 801390c:	7bfb      	ldrb	r3, [r7, #15]
}
 801390e:	4618      	mov	r0, r3
 8013910:	3714      	adds	r7, #20
 8013912:	46bd      	mov	sp, r7
 8013914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013918:	4770      	bx	lr

0801391a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801391a:	b580      	push	{r7, lr}
 801391c:	b086      	sub	sp, #24
 801391e:	af00      	add	r7, sp, #0
 8013920:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8013928:	2100      	movs	r1, #0
 801392a:	6878      	ldr	r0, [r7, #4]
 801392c:	f7ff fca7 	bl	801327e <dir_sdi>
 8013930:	4603      	mov	r3, r0
 8013932:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8013934:	7dfb      	ldrb	r3, [r7, #23]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d001      	beq.n	801393e <dir_find+0x24>
 801393a:	7dfb      	ldrb	r3, [r7, #23]
 801393c:	e0a9      	b.n	8013a92 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801393e:	23ff      	movs	r3, #255	@ 0xff
 8013940:	753b      	strb	r3, [r7, #20]
 8013942:	7d3b      	ldrb	r3, [r7, #20]
 8013944:	757b      	strb	r3, [r7, #21]
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	f04f 32ff 	mov.w	r2, #4294967295
 801394c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	69db      	ldr	r3, [r3, #28]
 8013952:	4619      	mov	r1, r3
 8013954:	6938      	ldr	r0, [r7, #16]
 8013956:	f7ff f915 	bl	8012b84 <move_window>
 801395a:	4603      	mov	r3, r0
 801395c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801395e:	7dfb      	ldrb	r3, [r7, #23]
 8013960:	2b00      	cmp	r3, #0
 8013962:	f040 8090 	bne.w	8013a86 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	6a1b      	ldr	r3, [r3, #32]
 801396a:	781b      	ldrb	r3, [r3, #0]
 801396c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801396e:	7dbb      	ldrb	r3, [r7, #22]
 8013970:	2b00      	cmp	r3, #0
 8013972:	d102      	bne.n	801397a <dir_find+0x60>
 8013974:	2304      	movs	r3, #4
 8013976:	75fb      	strb	r3, [r7, #23]
 8013978:	e08a      	b.n	8013a90 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	6a1b      	ldr	r3, [r3, #32]
 801397e:	330b      	adds	r3, #11
 8013980:	781b      	ldrb	r3, [r3, #0]
 8013982:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013986:	73fb      	strb	r3, [r7, #15]
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	7bfa      	ldrb	r2, [r7, #15]
 801398c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801398e:	7dbb      	ldrb	r3, [r7, #22]
 8013990:	2be5      	cmp	r3, #229	@ 0xe5
 8013992:	d007      	beq.n	80139a4 <dir_find+0x8a>
 8013994:	7bfb      	ldrb	r3, [r7, #15]
 8013996:	f003 0308 	and.w	r3, r3, #8
 801399a:	2b00      	cmp	r3, #0
 801399c:	d009      	beq.n	80139b2 <dir_find+0x98>
 801399e:	7bfb      	ldrb	r3, [r7, #15]
 80139a0:	2b0f      	cmp	r3, #15
 80139a2:	d006      	beq.n	80139b2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80139a4:	23ff      	movs	r3, #255	@ 0xff
 80139a6:	757b      	strb	r3, [r7, #21]
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	f04f 32ff 	mov.w	r2, #4294967295
 80139ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80139b0:	e05e      	b.n	8013a70 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80139b2:	7bfb      	ldrb	r3, [r7, #15]
 80139b4:	2b0f      	cmp	r3, #15
 80139b6:	d136      	bne.n	8013a26 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80139be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d154      	bne.n	8013a70 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80139c6:	7dbb      	ldrb	r3, [r7, #22]
 80139c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d00d      	beq.n	80139ec <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	6a1b      	ldr	r3, [r3, #32]
 80139d4:	7b5b      	ldrb	r3, [r3, #13]
 80139d6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80139d8:	7dbb      	ldrb	r3, [r7, #22]
 80139da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80139de:	75bb      	strb	r3, [r7, #22]
 80139e0:	7dbb      	ldrb	r3, [r7, #22]
 80139e2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	695a      	ldr	r2, [r3, #20]
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80139ec:	7dba      	ldrb	r2, [r7, #22]
 80139ee:	7d7b      	ldrb	r3, [r7, #21]
 80139f0:	429a      	cmp	r2, r3
 80139f2:	d115      	bne.n	8013a20 <dir_find+0x106>
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	6a1b      	ldr	r3, [r3, #32]
 80139f8:	330d      	adds	r3, #13
 80139fa:	781b      	ldrb	r3, [r3, #0]
 80139fc:	7d3a      	ldrb	r2, [r7, #20]
 80139fe:	429a      	cmp	r2, r3
 8013a00:	d10e      	bne.n	8013a20 <dir_find+0x106>
 8013a02:	693b      	ldr	r3, [r7, #16]
 8013a04:	68da      	ldr	r2, [r3, #12]
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	6a1b      	ldr	r3, [r3, #32]
 8013a0a:	4619      	mov	r1, r3
 8013a0c:	4610      	mov	r0, r2
 8013a0e:	f7ff fdfd 	bl	801360c <cmp_lfn>
 8013a12:	4603      	mov	r3, r0
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d003      	beq.n	8013a20 <dir_find+0x106>
 8013a18:	7d7b      	ldrb	r3, [r7, #21]
 8013a1a:	3b01      	subs	r3, #1
 8013a1c:	b2db      	uxtb	r3, r3
 8013a1e:	e000      	b.n	8013a22 <dir_find+0x108>
 8013a20:	23ff      	movs	r3, #255	@ 0xff
 8013a22:	757b      	strb	r3, [r7, #21]
 8013a24:	e024      	b.n	8013a70 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8013a26:	7d7b      	ldrb	r3, [r7, #21]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d109      	bne.n	8013a40 <dir_find+0x126>
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	6a1b      	ldr	r3, [r3, #32]
 8013a30:	4618      	mov	r0, r3
 8013a32:	f7ff ff51 	bl	80138d8 <sum_sfn>
 8013a36:	4603      	mov	r3, r0
 8013a38:	461a      	mov	r2, r3
 8013a3a:	7d3b      	ldrb	r3, [r7, #20]
 8013a3c:	4293      	cmp	r3, r2
 8013a3e:	d024      	beq.n	8013a8a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8013a46:	f003 0301 	and.w	r3, r3, #1
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d10a      	bne.n	8013a64 <dir_find+0x14a>
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	6a18      	ldr	r0, [r3, #32]
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	3324      	adds	r3, #36	@ 0x24
 8013a56:	220b      	movs	r2, #11
 8013a58:	4619      	mov	r1, r3
 8013a5a:	f7fe fe6f 	bl	801273c <mem_cmp>
 8013a5e:	4603      	mov	r3, r0
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d014      	beq.n	8013a8e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8013a64:	23ff      	movs	r3, #255	@ 0xff
 8013a66:	757b      	strb	r3, [r7, #21]
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8013a6e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8013a70:	2100      	movs	r1, #0
 8013a72:	6878      	ldr	r0, [r7, #4]
 8013a74:	f7ff fc7e 	bl	8013374 <dir_next>
 8013a78:	4603      	mov	r3, r0
 8013a7a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8013a7c:	7dfb      	ldrb	r3, [r7, #23]
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	f43f af65 	beq.w	801394e <dir_find+0x34>
 8013a84:	e004      	b.n	8013a90 <dir_find+0x176>
		if (res != FR_OK) break;
 8013a86:	bf00      	nop
 8013a88:	e002      	b.n	8013a90 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8013a8a:	bf00      	nop
 8013a8c:	e000      	b.n	8013a90 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8013a8e:	bf00      	nop

	return res;
 8013a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a92:	4618      	mov	r0, r3
 8013a94:	3718      	adds	r7, #24
 8013a96:	46bd      	mov	sp, r7
 8013a98:	bd80      	pop	{r7, pc}
	...

08013a9c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8013a9c:	b580      	push	{r7, lr}
 8013a9e:	b08c      	sub	sp, #48	@ 0x30
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8013ab0:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d001      	beq.n	8013abc <dir_register+0x20>
 8013ab8:	2306      	movs	r3, #6
 8013aba:	e0e0      	b.n	8013c7e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8013abc:	2300      	movs	r3, #0
 8013abe:	627b      	str	r3, [r7, #36]	@ 0x24
 8013ac0:	e002      	b.n	8013ac8 <dir_register+0x2c>
 8013ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ac4:	3301      	adds	r3, #1
 8013ac6:	627b      	str	r3, [r7, #36]	@ 0x24
 8013ac8:	69fb      	ldr	r3, [r7, #28]
 8013aca:	68da      	ldr	r2, [r3, #12]
 8013acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ace:	005b      	lsls	r3, r3, #1
 8013ad0:	4413      	add	r3, r2
 8013ad2:	881b      	ldrh	r3, [r3, #0]
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d1f4      	bne.n	8013ac2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8013ade:	f107 030c 	add.w	r3, r7, #12
 8013ae2:	220c      	movs	r2, #12
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	f7fe fded 	bl	80126c4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8013aea:	7dfb      	ldrb	r3, [r7, #23]
 8013aec:	f003 0301 	and.w	r3, r3, #1
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d032      	beq.n	8013b5a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	2240      	movs	r2, #64	@ 0x40
 8013af8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8013afc:	2301      	movs	r3, #1
 8013afe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013b00:	e016      	b.n	8013b30 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8013b08:	69fb      	ldr	r3, [r7, #28]
 8013b0a:	68da      	ldr	r2, [r3, #12]
 8013b0c:	f107 010c 	add.w	r1, r7, #12
 8013b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b12:	f7ff fe53 	bl	80137bc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8013b16:	6878      	ldr	r0, [r7, #4]
 8013b18:	f7ff feff 	bl	801391a <dir_find>
 8013b1c:	4603      	mov	r3, r0
 8013b1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8013b22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d106      	bne.n	8013b38 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8013b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b2c:	3301      	adds	r3, #1
 8013b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b32:	2b63      	cmp	r3, #99	@ 0x63
 8013b34:	d9e5      	bls.n	8013b02 <dir_register+0x66>
 8013b36:	e000      	b.n	8013b3a <dir_register+0x9e>
			if (res != FR_OK) break;
 8013b38:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8013b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b3c:	2b64      	cmp	r3, #100	@ 0x64
 8013b3e:	d101      	bne.n	8013b44 <dir_register+0xa8>
 8013b40:	2307      	movs	r3, #7
 8013b42:	e09c      	b.n	8013c7e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8013b44:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013b48:	2b04      	cmp	r3, #4
 8013b4a:	d002      	beq.n	8013b52 <dir_register+0xb6>
 8013b4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013b50:	e095      	b.n	8013c7e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8013b52:	7dfa      	ldrb	r2, [r7, #23]
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8013b5a:	7dfb      	ldrb	r3, [r7, #23]
 8013b5c:	f003 0302 	and.w	r3, r3, #2
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d007      	beq.n	8013b74 <dir_register+0xd8>
 8013b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b66:	330c      	adds	r3, #12
 8013b68:	4a47      	ldr	r2, [pc, #284]	@ (8013c88 <dir_register+0x1ec>)
 8013b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8013b6e:	089b      	lsrs	r3, r3, #2
 8013b70:	3301      	adds	r3, #1
 8013b72:	e000      	b.n	8013b76 <dir_register+0xda>
 8013b74:	2301      	movs	r3, #1
 8013b76:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8013b78:	6a39      	ldr	r1, [r7, #32]
 8013b7a:	6878      	ldr	r0, [r7, #4]
 8013b7c:	f7ff fcbf 	bl	80134fe <dir_alloc>
 8013b80:	4603      	mov	r3, r0
 8013b82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8013b86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d148      	bne.n	8013c20 <dir_register+0x184>
 8013b8e:	6a3b      	ldr	r3, [r7, #32]
 8013b90:	3b01      	subs	r3, #1
 8013b92:	623b      	str	r3, [r7, #32]
 8013b94:	6a3b      	ldr	r3, [r7, #32]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d042      	beq.n	8013c20 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	695a      	ldr	r2, [r3, #20]
 8013b9e:	6a3b      	ldr	r3, [r7, #32]
 8013ba0:	015b      	lsls	r3, r3, #5
 8013ba2:	1ad3      	subs	r3, r2, r3
 8013ba4:	4619      	mov	r1, r3
 8013ba6:	6878      	ldr	r0, [r7, #4]
 8013ba8:	f7ff fb69 	bl	801327e <dir_sdi>
 8013bac:	4603      	mov	r3, r0
 8013bae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8013bb2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d132      	bne.n	8013c20 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	3324      	adds	r3, #36	@ 0x24
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	f7ff fe8a 	bl	80138d8 <sum_sfn>
 8013bc4:	4603      	mov	r3, r0
 8013bc6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	69db      	ldr	r3, [r3, #28]
 8013bcc:	4619      	mov	r1, r3
 8013bce:	69f8      	ldr	r0, [r7, #28]
 8013bd0:	f7fe ffd8 	bl	8012b84 <move_window>
 8013bd4:	4603      	mov	r3, r0
 8013bd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8013bda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d11d      	bne.n	8013c1e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8013be2:	69fb      	ldr	r3, [r7, #28]
 8013be4:	68d8      	ldr	r0, [r3, #12]
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	6a19      	ldr	r1, [r3, #32]
 8013bea:	6a3b      	ldr	r3, [r7, #32]
 8013bec:	b2da      	uxtb	r2, r3
 8013bee:	7efb      	ldrb	r3, [r7, #27]
 8013bf0:	f7ff fd7c 	bl	80136ec <put_lfn>
				fs->wflag = 1;
 8013bf4:	69fb      	ldr	r3, [r7, #28]
 8013bf6:	2201      	movs	r2, #1
 8013bf8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8013bfa:	2100      	movs	r1, #0
 8013bfc:	6878      	ldr	r0, [r7, #4]
 8013bfe:	f7ff fbb9 	bl	8013374 <dir_next>
 8013c02:	4603      	mov	r3, r0
 8013c04:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8013c08:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d107      	bne.n	8013c20 <dir_register+0x184>
 8013c10:	6a3b      	ldr	r3, [r7, #32]
 8013c12:	3b01      	subs	r3, #1
 8013c14:	623b      	str	r3, [r7, #32]
 8013c16:	6a3b      	ldr	r3, [r7, #32]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d1d5      	bne.n	8013bc8 <dir_register+0x12c>
 8013c1c:	e000      	b.n	8013c20 <dir_register+0x184>
				if (res != FR_OK) break;
 8013c1e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8013c20:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d128      	bne.n	8013c7a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	69db      	ldr	r3, [r3, #28]
 8013c2c:	4619      	mov	r1, r3
 8013c2e:	69f8      	ldr	r0, [r7, #28]
 8013c30:	f7fe ffa8 	bl	8012b84 <move_window>
 8013c34:	4603      	mov	r3, r0
 8013c36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8013c3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d11b      	bne.n	8013c7a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	6a1b      	ldr	r3, [r3, #32]
 8013c46:	2220      	movs	r2, #32
 8013c48:	2100      	movs	r1, #0
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	f7fe fd5b 	bl	8012706 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	6a18      	ldr	r0, [r3, #32]
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	3324      	adds	r3, #36	@ 0x24
 8013c58:	220b      	movs	r2, #11
 8013c5a:	4619      	mov	r1, r3
 8013c5c:	f7fe fd32 	bl	80126c4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	6a1b      	ldr	r3, [r3, #32]
 8013c6a:	330c      	adds	r3, #12
 8013c6c:	f002 0218 	and.w	r2, r2, #24
 8013c70:	b2d2      	uxtb	r2, r2
 8013c72:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8013c74:	69fb      	ldr	r3, [r7, #28]
 8013c76:	2201      	movs	r2, #1
 8013c78:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8013c7a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8013c7e:	4618      	mov	r0, r3
 8013c80:	3730      	adds	r7, #48	@ 0x30
 8013c82:	46bd      	mov	sp, r7
 8013c84:	bd80      	pop	{r7, pc}
 8013c86:	bf00      	nop
 8013c88:	4ec4ec4f 	.word	0x4ec4ec4f

08013c8c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013c8c:	b580      	push	{r7, lr}
 8013c8e:	b08a      	sub	sp, #40	@ 0x28
 8013c90:	af00      	add	r7, sp, #0
 8013c92:	6078      	str	r0, [r7, #4]
 8013c94:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8013c96:	683b      	ldr	r3, [r7, #0]
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	613b      	str	r3, [r7, #16]
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	68db      	ldr	r3, [r3, #12]
 8013ca2:	60fb      	str	r3, [r7, #12]
 8013ca4:	2300      	movs	r3, #0
 8013ca6:	617b      	str	r3, [r7, #20]
 8013ca8:	697b      	ldr	r3, [r7, #20]
 8013caa:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8013cac:	69bb      	ldr	r3, [r7, #24]
 8013cae:	1c5a      	adds	r2, r3, #1
 8013cb0:	61ba      	str	r2, [r7, #24]
 8013cb2:	693a      	ldr	r2, [r7, #16]
 8013cb4:	4413      	add	r3, r2
 8013cb6:	781b      	ldrb	r3, [r3, #0]
 8013cb8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8013cba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013cbc:	2b1f      	cmp	r3, #31
 8013cbe:	d940      	bls.n	8013d42 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8013cc0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013cc2:	2b2f      	cmp	r3, #47	@ 0x2f
 8013cc4:	d006      	beq.n	8013cd4 <create_name+0x48>
 8013cc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013cc8:	2b5c      	cmp	r3, #92	@ 0x5c
 8013cca:	d110      	bne.n	8013cee <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8013ccc:	e002      	b.n	8013cd4 <create_name+0x48>
 8013cce:	69bb      	ldr	r3, [r7, #24]
 8013cd0:	3301      	adds	r3, #1
 8013cd2:	61bb      	str	r3, [r7, #24]
 8013cd4:	693a      	ldr	r2, [r7, #16]
 8013cd6:	69bb      	ldr	r3, [r7, #24]
 8013cd8:	4413      	add	r3, r2
 8013cda:	781b      	ldrb	r3, [r3, #0]
 8013cdc:	2b2f      	cmp	r3, #47	@ 0x2f
 8013cde:	d0f6      	beq.n	8013cce <create_name+0x42>
 8013ce0:	693a      	ldr	r2, [r7, #16]
 8013ce2:	69bb      	ldr	r3, [r7, #24]
 8013ce4:	4413      	add	r3, r2
 8013ce6:	781b      	ldrb	r3, [r3, #0]
 8013ce8:	2b5c      	cmp	r3, #92	@ 0x5c
 8013cea:	d0f0      	beq.n	8013cce <create_name+0x42>
			break;
 8013cec:	e02a      	b.n	8013d44 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8013cee:	697b      	ldr	r3, [r7, #20]
 8013cf0:	2bfe      	cmp	r3, #254	@ 0xfe
 8013cf2:	d901      	bls.n	8013cf8 <create_name+0x6c>
 8013cf4:	2306      	movs	r3, #6
 8013cf6:	e17d      	b.n	8013ff4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8013cf8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013cfa:	b2db      	uxtb	r3, r3
 8013cfc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8013cfe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013d00:	2101      	movs	r1, #1
 8013d02:	4618      	mov	r0, r3
 8013d04:	f001 fd16 	bl	8015734 <ff_convert>
 8013d08:	4603      	mov	r3, r0
 8013d0a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8013d0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d101      	bne.n	8013d16 <create_name+0x8a>
 8013d12:	2306      	movs	r3, #6
 8013d14:	e16e      	b.n	8013ff4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8013d16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013d18:	2b7f      	cmp	r3, #127	@ 0x7f
 8013d1a:	d809      	bhi.n	8013d30 <create_name+0xa4>
 8013d1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013d1e:	4619      	mov	r1, r3
 8013d20:	488d      	ldr	r0, [pc, #564]	@ (8013f58 <create_name+0x2cc>)
 8013d22:	f7fe fd32 	bl	801278a <chk_chr>
 8013d26:	4603      	mov	r3, r0
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d001      	beq.n	8013d30 <create_name+0xa4>
 8013d2c:	2306      	movs	r3, #6
 8013d2e:	e161      	b.n	8013ff4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8013d30:	697b      	ldr	r3, [r7, #20]
 8013d32:	1c5a      	adds	r2, r3, #1
 8013d34:	617a      	str	r2, [r7, #20]
 8013d36:	005b      	lsls	r3, r3, #1
 8013d38:	68fa      	ldr	r2, [r7, #12]
 8013d3a:	4413      	add	r3, r2
 8013d3c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013d3e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8013d40:	e7b4      	b.n	8013cac <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8013d42:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8013d44:	693a      	ldr	r2, [r7, #16]
 8013d46:	69bb      	ldr	r3, [r7, #24]
 8013d48:	441a      	add	r2, r3
 8013d4a:	683b      	ldr	r3, [r7, #0]
 8013d4c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8013d4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013d50:	2b1f      	cmp	r3, #31
 8013d52:	d801      	bhi.n	8013d58 <create_name+0xcc>
 8013d54:	2304      	movs	r3, #4
 8013d56:	e000      	b.n	8013d5a <create_name+0xce>
 8013d58:	2300      	movs	r3, #0
 8013d5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8013d5e:	e011      	b.n	8013d84 <create_name+0xf8>
		w = lfn[di - 1];
 8013d60:	697b      	ldr	r3, [r7, #20]
 8013d62:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8013d66:	3b01      	subs	r3, #1
 8013d68:	005b      	lsls	r3, r3, #1
 8013d6a:	68fa      	ldr	r2, [r7, #12]
 8013d6c:	4413      	add	r3, r2
 8013d6e:	881b      	ldrh	r3, [r3, #0]
 8013d70:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8013d72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013d74:	2b20      	cmp	r3, #32
 8013d76:	d002      	beq.n	8013d7e <create_name+0xf2>
 8013d78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013d7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8013d7c:	d106      	bne.n	8013d8c <create_name+0x100>
		di--;
 8013d7e:	697b      	ldr	r3, [r7, #20]
 8013d80:	3b01      	subs	r3, #1
 8013d82:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8013d84:	697b      	ldr	r3, [r7, #20]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d1ea      	bne.n	8013d60 <create_name+0xd4>
 8013d8a:	e000      	b.n	8013d8e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8013d8c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8013d8e:	697b      	ldr	r3, [r7, #20]
 8013d90:	005b      	lsls	r3, r3, #1
 8013d92:	68fa      	ldr	r2, [r7, #12]
 8013d94:	4413      	add	r3, r2
 8013d96:	2200      	movs	r2, #0
 8013d98:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8013d9a:	697b      	ldr	r3, [r7, #20]
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d101      	bne.n	8013da4 <create_name+0x118>
 8013da0:	2306      	movs	r3, #6
 8013da2:	e127      	b.n	8013ff4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	3324      	adds	r3, #36	@ 0x24
 8013da8:	220b      	movs	r2, #11
 8013daa:	2120      	movs	r1, #32
 8013dac:	4618      	mov	r0, r3
 8013dae:	f7fe fcaa 	bl	8012706 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8013db2:	2300      	movs	r3, #0
 8013db4:	61bb      	str	r3, [r7, #24]
 8013db6:	e002      	b.n	8013dbe <create_name+0x132>
 8013db8:	69bb      	ldr	r3, [r7, #24]
 8013dba:	3301      	adds	r3, #1
 8013dbc:	61bb      	str	r3, [r7, #24]
 8013dbe:	69bb      	ldr	r3, [r7, #24]
 8013dc0:	005b      	lsls	r3, r3, #1
 8013dc2:	68fa      	ldr	r2, [r7, #12]
 8013dc4:	4413      	add	r3, r2
 8013dc6:	881b      	ldrh	r3, [r3, #0]
 8013dc8:	2b20      	cmp	r3, #32
 8013dca:	d0f5      	beq.n	8013db8 <create_name+0x12c>
 8013dcc:	69bb      	ldr	r3, [r7, #24]
 8013dce:	005b      	lsls	r3, r3, #1
 8013dd0:	68fa      	ldr	r2, [r7, #12]
 8013dd2:	4413      	add	r3, r2
 8013dd4:	881b      	ldrh	r3, [r3, #0]
 8013dd6:	2b2e      	cmp	r3, #46	@ 0x2e
 8013dd8:	d0ee      	beq.n	8013db8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8013dda:	69bb      	ldr	r3, [r7, #24]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d009      	beq.n	8013df4 <create_name+0x168>
 8013de0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013de4:	f043 0303 	orr.w	r3, r3, #3
 8013de8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8013dec:	e002      	b.n	8013df4 <create_name+0x168>
 8013dee:	697b      	ldr	r3, [r7, #20]
 8013df0:	3b01      	subs	r3, #1
 8013df2:	617b      	str	r3, [r7, #20]
 8013df4:	697b      	ldr	r3, [r7, #20]
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d009      	beq.n	8013e0e <create_name+0x182>
 8013dfa:	697b      	ldr	r3, [r7, #20]
 8013dfc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8013e00:	3b01      	subs	r3, #1
 8013e02:	005b      	lsls	r3, r3, #1
 8013e04:	68fa      	ldr	r2, [r7, #12]
 8013e06:	4413      	add	r3, r2
 8013e08:	881b      	ldrh	r3, [r3, #0]
 8013e0a:	2b2e      	cmp	r3, #46	@ 0x2e
 8013e0c:	d1ef      	bne.n	8013dee <create_name+0x162>

	i = b = 0; ni = 8;
 8013e0e:	2300      	movs	r3, #0
 8013e10:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013e14:	2300      	movs	r3, #0
 8013e16:	623b      	str	r3, [r7, #32]
 8013e18:	2308      	movs	r3, #8
 8013e1a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8013e1c:	69bb      	ldr	r3, [r7, #24]
 8013e1e:	1c5a      	adds	r2, r3, #1
 8013e20:	61ba      	str	r2, [r7, #24]
 8013e22:	005b      	lsls	r3, r3, #1
 8013e24:	68fa      	ldr	r2, [r7, #12]
 8013e26:	4413      	add	r3, r2
 8013e28:	881b      	ldrh	r3, [r3, #0]
 8013e2a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8013e2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	f000 8090 	beq.w	8013f54 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8013e34:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013e36:	2b20      	cmp	r3, #32
 8013e38:	d006      	beq.n	8013e48 <create_name+0x1bc>
 8013e3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013e3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8013e3e:	d10a      	bne.n	8013e56 <create_name+0x1ca>
 8013e40:	69ba      	ldr	r2, [r7, #24]
 8013e42:	697b      	ldr	r3, [r7, #20]
 8013e44:	429a      	cmp	r2, r3
 8013e46:	d006      	beq.n	8013e56 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8013e48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013e4c:	f043 0303 	orr.w	r3, r3, #3
 8013e50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013e54:	e07d      	b.n	8013f52 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8013e56:	6a3a      	ldr	r2, [r7, #32]
 8013e58:	69fb      	ldr	r3, [r7, #28]
 8013e5a:	429a      	cmp	r2, r3
 8013e5c:	d203      	bcs.n	8013e66 <create_name+0x1da>
 8013e5e:	69ba      	ldr	r2, [r7, #24]
 8013e60:	697b      	ldr	r3, [r7, #20]
 8013e62:	429a      	cmp	r2, r3
 8013e64:	d123      	bne.n	8013eae <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8013e66:	69fb      	ldr	r3, [r7, #28]
 8013e68:	2b0b      	cmp	r3, #11
 8013e6a:	d106      	bne.n	8013e7a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8013e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013e70:	f043 0303 	orr.w	r3, r3, #3
 8013e74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013e78:	e075      	b.n	8013f66 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8013e7a:	69ba      	ldr	r2, [r7, #24]
 8013e7c:	697b      	ldr	r3, [r7, #20]
 8013e7e:	429a      	cmp	r2, r3
 8013e80:	d005      	beq.n	8013e8e <create_name+0x202>
 8013e82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013e86:	f043 0303 	orr.w	r3, r3, #3
 8013e8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8013e8e:	69ba      	ldr	r2, [r7, #24]
 8013e90:	697b      	ldr	r3, [r7, #20]
 8013e92:	429a      	cmp	r2, r3
 8013e94:	d866      	bhi.n	8013f64 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8013e96:	697b      	ldr	r3, [r7, #20]
 8013e98:	61bb      	str	r3, [r7, #24]
 8013e9a:	2308      	movs	r3, #8
 8013e9c:	623b      	str	r3, [r7, #32]
 8013e9e:	230b      	movs	r3, #11
 8013ea0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8013ea2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013ea6:	009b      	lsls	r3, r3, #2
 8013ea8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013eac:	e051      	b.n	8013f52 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8013eae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013eb0:	2b7f      	cmp	r3, #127	@ 0x7f
 8013eb2:	d914      	bls.n	8013ede <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8013eb4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013eb6:	2100      	movs	r1, #0
 8013eb8:	4618      	mov	r0, r3
 8013eba:	f001 fc3b 	bl	8015734 <ff_convert>
 8013ebe:	4603      	mov	r3, r0
 8013ec0:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8013ec2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d004      	beq.n	8013ed2 <create_name+0x246>
 8013ec8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013eca:	3b80      	subs	r3, #128	@ 0x80
 8013ecc:	4a23      	ldr	r2, [pc, #140]	@ (8013f5c <create_name+0x2d0>)
 8013ece:	5cd3      	ldrb	r3, [r2, r3]
 8013ed0:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8013ed2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013ed6:	f043 0302 	orr.w	r3, r3, #2
 8013eda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8013ede:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d007      	beq.n	8013ef4 <create_name+0x268>
 8013ee4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013ee6:	4619      	mov	r1, r3
 8013ee8:	481d      	ldr	r0, [pc, #116]	@ (8013f60 <create_name+0x2d4>)
 8013eea:	f7fe fc4e 	bl	801278a <chk_chr>
 8013eee:	4603      	mov	r3, r0
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d008      	beq.n	8013f06 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8013ef4:	235f      	movs	r3, #95	@ 0x5f
 8013ef6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8013ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013efc:	f043 0303 	orr.w	r3, r3, #3
 8013f00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013f04:	e01b      	b.n	8013f3e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8013f06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013f08:	2b40      	cmp	r3, #64	@ 0x40
 8013f0a:	d909      	bls.n	8013f20 <create_name+0x294>
 8013f0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013f0e:	2b5a      	cmp	r3, #90	@ 0x5a
 8013f10:	d806      	bhi.n	8013f20 <create_name+0x294>
					b |= 2;
 8013f12:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013f16:	f043 0302 	orr.w	r3, r3, #2
 8013f1a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013f1e:	e00e      	b.n	8013f3e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8013f20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013f22:	2b60      	cmp	r3, #96	@ 0x60
 8013f24:	d90b      	bls.n	8013f3e <create_name+0x2b2>
 8013f26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013f28:	2b7a      	cmp	r3, #122	@ 0x7a
 8013f2a:	d808      	bhi.n	8013f3e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8013f2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013f30:	f043 0301 	orr.w	r3, r3, #1
 8013f34:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013f38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013f3a:	3b20      	subs	r3, #32
 8013f3c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8013f3e:	6a3b      	ldr	r3, [r7, #32]
 8013f40:	1c5a      	adds	r2, r3, #1
 8013f42:	623a      	str	r2, [r7, #32]
 8013f44:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013f46:	b2d1      	uxtb	r1, r2
 8013f48:	687a      	ldr	r2, [r7, #4]
 8013f4a:	4413      	add	r3, r2
 8013f4c:	460a      	mov	r2, r1
 8013f4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8013f52:	e763      	b.n	8013e1c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8013f54:	bf00      	nop
 8013f56:	e006      	b.n	8013f66 <create_name+0x2da>
 8013f58:	0801ed04 	.word	0x0801ed04
 8013f5c:	0801f2d4 	.word	0x0801f2d4
 8013f60:	0801ed10 	.word	0x0801ed10
			if (si > di) break;			/* No extension */
 8013f64:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8013f6c:	2be5      	cmp	r3, #229	@ 0xe5
 8013f6e:	d103      	bne.n	8013f78 <create_name+0x2ec>
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	2205      	movs	r2, #5
 8013f74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8013f78:	69fb      	ldr	r3, [r7, #28]
 8013f7a:	2b08      	cmp	r3, #8
 8013f7c:	d104      	bne.n	8013f88 <create_name+0x2fc>
 8013f7e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013f82:	009b      	lsls	r3, r3, #2
 8013f84:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8013f88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013f8c:	f003 030c 	and.w	r3, r3, #12
 8013f90:	2b0c      	cmp	r3, #12
 8013f92:	d005      	beq.n	8013fa0 <create_name+0x314>
 8013f94:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013f98:	f003 0303 	and.w	r3, r3, #3
 8013f9c:	2b03      	cmp	r3, #3
 8013f9e:	d105      	bne.n	8013fac <create_name+0x320>
 8013fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013fa4:	f043 0302 	orr.w	r3, r3, #2
 8013fa8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8013fac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013fb0:	f003 0302 	and.w	r3, r3, #2
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d117      	bne.n	8013fe8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8013fb8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013fbc:	f003 0303 	and.w	r3, r3, #3
 8013fc0:	2b01      	cmp	r3, #1
 8013fc2:	d105      	bne.n	8013fd0 <create_name+0x344>
 8013fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013fc8:	f043 0310 	orr.w	r3, r3, #16
 8013fcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8013fd0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013fd4:	f003 030c 	and.w	r3, r3, #12
 8013fd8:	2b04      	cmp	r3, #4
 8013fda:	d105      	bne.n	8013fe8 <create_name+0x35c>
 8013fdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013fe0:	f043 0308 	orr.w	r3, r3, #8
 8013fe4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8013fee:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8013ff2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	3728      	adds	r7, #40	@ 0x28
 8013ff8:	46bd      	mov	sp, r7
 8013ffa:	bd80      	pop	{r7, pc}

08013ffc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8013ffc:	b580      	push	{r7, lr}
 8013ffe:	b086      	sub	sp, #24
 8014000:	af00      	add	r7, sp, #0
 8014002:	6078      	str	r0, [r7, #4]
 8014004:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801400a:	693b      	ldr	r3, [r7, #16]
 801400c:	681b      	ldr	r3, [r3, #0]
 801400e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8014010:	e002      	b.n	8014018 <follow_path+0x1c>
 8014012:	683b      	ldr	r3, [r7, #0]
 8014014:	3301      	adds	r3, #1
 8014016:	603b      	str	r3, [r7, #0]
 8014018:	683b      	ldr	r3, [r7, #0]
 801401a:	781b      	ldrb	r3, [r3, #0]
 801401c:	2b2f      	cmp	r3, #47	@ 0x2f
 801401e:	d0f8      	beq.n	8014012 <follow_path+0x16>
 8014020:	683b      	ldr	r3, [r7, #0]
 8014022:	781b      	ldrb	r3, [r3, #0]
 8014024:	2b5c      	cmp	r3, #92	@ 0x5c
 8014026:	d0f4      	beq.n	8014012 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8014028:	693b      	ldr	r3, [r7, #16]
 801402a:	2200      	movs	r2, #0
 801402c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801402e:	683b      	ldr	r3, [r7, #0]
 8014030:	781b      	ldrb	r3, [r3, #0]
 8014032:	2b1f      	cmp	r3, #31
 8014034:	d80a      	bhi.n	801404c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	2280      	movs	r2, #128	@ 0x80
 801403a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801403e:	2100      	movs	r1, #0
 8014040:	6878      	ldr	r0, [r7, #4]
 8014042:	f7ff f91c 	bl	801327e <dir_sdi>
 8014046:	4603      	mov	r3, r0
 8014048:	75fb      	strb	r3, [r7, #23]
 801404a:	e043      	b.n	80140d4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801404c:	463b      	mov	r3, r7
 801404e:	4619      	mov	r1, r3
 8014050:	6878      	ldr	r0, [r7, #4]
 8014052:	f7ff fe1b 	bl	8013c8c <create_name>
 8014056:	4603      	mov	r3, r0
 8014058:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801405a:	7dfb      	ldrb	r3, [r7, #23]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d134      	bne.n	80140ca <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8014060:	6878      	ldr	r0, [r7, #4]
 8014062:	f7ff fc5a 	bl	801391a <dir_find>
 8014066:	4603      	mov	r3, r0
 8014068:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8014070:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8014072:	7dfb      	ldrb	r3, [r7, #23]
 8014074:	2b00      	cmp	r3, #0
 8014076:	d00a      	beq.n	801408e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8014078:	7dfb      	ldrb	r3, [r7, #23]
 801407a:	2b04      	cmp	r3, #4
 801407c:	d127      	bne.n	80140ce <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801407e:	7afb      	ldrb	r3, [r7, #11]
 8014080:	f003 0304 	and.w	r3, r3, #4
 8014084:	2b00      	cmp	r3, #0
 8014086:	d122      	bne.n	80140ce <follow_path+0xd2>
 8014088:	2305      	movs	r3, #5
 801408a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801408c:	e01f      	b.n	80140ce <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801408e:	7afb      	ldrb	r3, [r7, #11]
 8014090:	f003 0304 	and.w	r3, r3, #4
 8014094:	2b00      	cmp	r3, #0
 8014096:	d11c      	bne.n	80140d2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8014098:	693b      	ldr	r3, [r7, #16]
 801409a:	799b      	ldrb	r3, [r3, #6]
 801409c:	f003 0310 	and.w	r3, r3, #16
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d102      	bne.n	80140aa <follow_path+0xae>
				res = FR_NO_PATH; break;
 80140a4:	2305      	movs	r3, #5
 80140a6:	75fb      	strb	r3, [r7, #23]
 80140a8:	e014      	b.n	80140d4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	695b      	ldr	r3, [r3, #20]
 80140b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80140b8:	4413      	add	r3, r2
 80140ba:	4619      	mov	r1, r3
 80140bc:	68f8      	ldr	r0, [r7, #12]
 80140be:	f7ff fa65 	bl	801358c <ld_clust>
 80140c2:	4602      	mov	r2, r0
 80140c4:	693b      	ldr	r3, [r7, #16]
 80140c6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80140c8:	e7c0      	b.n	801404c <follow_path+0x50>
			if (res != FR_OK) break;
 80140ca:	bf00      	nop
 80140cc:	e002      	b.n	80140d4 <follow_path+0xd8>
				break;
 80140ce:	bf00      	nop
 80140d0:	e000      	b.n	80140d4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80140d2:	bf00      	nop
			}
		}
	}

	return res;
 80140d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80140d6:	4618      	mov	r0, r3
 80140d8:	3718      	adds	r7, #24
 80140da:	46bd      	mov	sp, r7
 80140dc:	bd80      	pop	{r7, pc}

080140de <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80140de:	b480      	push	{r7}
 80140e0:	b087      	sub	sp, #28
 80140e2:	af00      	add	r7, sp, #0
 80140e4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80140e6:	f04f 33ff 	mov.w	r3, #4294967295
 80140ea:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d031      	beq.n	8014158 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	617b      	str	r3, [r7, #20]
 80140fa:	e002      	b.n	8014102 <get_ldnumber+0x24>
 80140fc:	697b      	ldr	r3, [r7, #20]
 80140fe:	3301      	adds	r3, #1
 8014100:	617b      	str	r3, [r7, #20]
 8014102:	697b      	ldr	r3, [r7, #20]
 8014104:	781b      	ldrb	r3, [r3, #0]
 8014106:	2b1f      	cmp	r3, #31
 8014108:	d903      	bls.n	8014112 <get_ldnumber+0x34>
 801410a:	697b      	ldr	r3, [r7, #20]
 801410c:	781b      	ldrb	r3, [r3, #0]
 801410e:	2b3a      	cmp	r3, #58	@ 0x3a
 8014110:	d1f4      	bne.n	80140fc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8014112:	697b      	ldr	r3, [r7, #20]
 8014114:	781b      	ldrb	r3, [r3, #0]
 8014116:	2b3a      	cmp	r3, #58	@ 0x3a
 8014118:	d11c      	bne.n	8014154 <get_ldnumber+0x76>
			tp = *path;
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	1c5a      	adds	r2, r3, #1
 8014124:	60fa      	str	r2, [r7, #12]
 8014126:	781b      	ldrb	r3, [r3, #0]
 8014128:	3b30      	subs	r3, #48	@ 0x30
 801412a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801412c:	68bb      	ldr	r3, [r7, #8]
 801412e:	2b09      	cmp	r3, #9
 8014130:	d80e      	bhi.n	8014150 <get_ldnumber+0x72>
 8014132:	68fa      	ldr	r2, [r7, #12]
 8014134:	697b      	ldr	r3, [r7, #20]
 8014136:	429a      	cmp	r2, r3
 8014138:	d10a      	bne.n	8014150 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801413a:	68bb      	ldr	r3, [r7, #8]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d107      	bne.n	8014150 <get_ldnumber+0x72>
					vol = (int)i;
 8014140:	68bb      	ldr	r3, [r7, #8]
 8014142:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8014144:	697b      	ldr	r3, [r7, #20]
 8014146:	3301      	adds	r3, #1
 8014148:	617b      	str	r3, [r7, #20]
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	697a      	ldr	r2, [r7, #20]
 801414e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8014150:	693b      	ldr	r3, [r7, #16]
 8014152:	e002      	b.n	801415a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8014154:	2300      	movs	r3, #0
 8014156:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8014158:	693b      	ldr	r3, [r7, #16]
}
 801415a:	4618      	mov	r0, r3
 801415c:	371c      	adds	r7, #28
 801415e:	46bd      	mov	sp, r7
 8014160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014164:	4770      	bx	lr
	...

08014168 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8014168:	b580      	push	{r7, lr}
 801416a:	b082      	sub	sp, #8
 801416c:	af00      	add	r7, sp, #0
 801416e:	6078      	str	r0, [r7, #4]
 8014170:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	2200      	movs	r2, #0
 8014176:	70da      	strb	r2, [r3, #3]
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	f04f 32ff 	mov.w	r2, #4294967295
 801417e:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8014180:	6839      	ldr	r1, [r7, #0]
 8014182:	6878      	ldr	r0, [r7, #4]
 8014184:	f7fe fcfe 	bl	8012b84 <move_window>
 8014188:	4603      	mov	r3, r0
 801418a:	2b00      	cmp	r3, #0
 801418c:	d001      	beq.n	8014192 <check_fs+0x2a>
 801418e:	2304      	movs	r3, #4
 8014190:	e038      	b.n	8014204 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	3338      	adds	r3, #56	@ 0x38
 8014196:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801419a:	4618      	mov	r0, r3
 801419c:	f7fe fa10 	bl	80125c0 <ld_word>
 80141a0:	4603      	mov	r3, r0
 80141a2:	461a      	mov	r2, r3
 80141a4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80141a8:	429a      	cmp	r2, r3
 80141aa:	d001      	beq.n	80141b0 <check_fs+0x48>
 80141ac:	2303      	movs	r3, #3
 80141ae:	e029      	b.n	8014204 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80141b6:	2be9      	cmp	r3, #233	@ 0xe9
 80141b8:	d009      	beq.n	80141ce <check_fs+0x66>
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80141c0:	2beb      	cmp	r3, #235	@ 0xeb
 80141c2:	d11e      	bne.n	8014202 <check_fs+0x9a>
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80141ca:	2b90      	cmp	r3, #144	@ 0x90
 80141cc:	d119      	bne.n	8014202 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	3338      	adds	r3, #56	@ 0x38
 80141d2:	3336      	adds	r3, #54	@ 0x36
 80141d4:	4618      	mov	r0, r3
 80141d6:	f7fe fa0b 	bl	80125f0 <ld_dword>
 80141da:	4603      	mov	r3, r0
 80141dc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80141e0:	4a0a      	ldr	r2, [pc, #40]	@ (801420c <check_fs+0xa4>)
 80141e2:	4293      	cmp	r3, r2
 80141e4:	d101      	bne.n	80141ea <check_fs+0x82>
 80141e6:	2300      	movs	r3, #0
 80141e8:	e00c      	b.n	8014204 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	3338      	adds	r3, #56	@ 0x38
 80141ee:	3352      	adds	r3, #82	@ 0x52
 80141f0:	4618      	mov	r0, r3
 80141f2:	f7fe f9fd 	bl	80125f0 <ld_dword>
 80141f6:	4603      	mov	r3, r0
 80141f8:	4a05      	ldr	r2, [pc, #20]	@ (8014210 <check_fs+0xa8>)
 80141fa:	4293      	cmp	r3, r2
 80141fc:	d101      	bne.n	8014202 <check_fs+0x9a>
 80141fe:	2300      	movs	r3, #0
 8014200:	e000      	b.n	8014204 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8014202:	2302      	movs	r3, #2
}
 8014204:	4618      	mov	r0, r3
 8014206:	3708      	adds	r7, #8
 8014208:	46bd      	mov	sp, r7
 801420a:	bd80      	pop	{r7, pc}
 801420c:	00544146 	.word	0x00544146
 8014210:	33544146 	.word	0x33544146

08014214 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8014214:	b580      	push	{r7, lr}
 8014216:	b096      	sub	sp, #88	@ 0x58
 8014218:	af00      	add	r7, sp, #0
 801421a:	60f8      	str	r0, [r7, #12]
 801421c:	60b9      	str	r1, [r7, #8]
 801421e:	4613      	mov	r3, r2
 8014220:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8014222:	68bb      	ldr	r3, [r7, #8]
 8014224:	2200      	movs	r2, #0
 8014226:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8014228:	68f8      	ldr	r0, [r7, #12]
 801422a:	f7ff ff58 	bl	80140de <get_ldnumber>
 801422e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8014230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014232:	2b00      	cmp	r3, #0
 8014234:	da01      	bge.n	801423a <find_volume+0x26>
 8014236:	230b      	movs	r3, #11
 8014238:	e235      	b.n	80146a6 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801423a:	4aa5      	ldr	r2, [pc, #660]	@ (80144d0 <find_volume+0x2bc>)
 801423c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801423e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014242:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8014244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014246:	2b00      	cmp	r3, #0
 8014248:	d101      	bne.n	801424e <find_volume+0x3a>
 801424a:	230c      	movs	r3, #12
 801424c:	e22b      	b.n	80146a6 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 801424e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8014250:	f7fe fab6 	bl	80127c0 <lock_fs>
 8014254:	4603      	mov	r3, r0
 8014256:	2b00      	cmp	r3, #0
 8014258:	d101      	bne.n	801425e <find_volume+0x4a>
 801425a:	230f      	movs	r3, #15
 801425c:	e223      	b.n	80146a6 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 801425e:	68bb      	ldr	r3, [r7, #8]
 8014260:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014262:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8014264:	79fb      	ldrb	r3, [r7, #7]
 8014266:	f023 0301 	bic.w	r3, r3, #1
 801426a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801426c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801426e:	781b      	ldrb	r3, [r3, #0]
 8014270:	2b00      	cmp	r3, #0
 8014272:	d01a      	beq.n	80142aa <find_volume+0x96>
		stat = disk_status(fs->drv);
 8014274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014276:	785b      	ldrb	r3, [r3, #1]
 8014278:	4618      	mov	r0, r3
 801427a:	f7fe f903 	bl	8012484 <disk_status>
 801427e:	4603      	mov	r3, r0
 8014280:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8014284:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8014288:	f003 0301 	and.w	r3, r3, #1
 801428c:	2b00      	cmp	r3, #0
 801428e:	d10c      	bne.n	80142aa <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8014290:	79fb      	ldrb	r3, [r7, #7]
 8014292:	2b00      	cmp	r3, #0
 8014294:	d007      	beq.n	80142a6 <find_volume+0x92>
 8014296:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801429a:	f003 0304 	and.w	r3, r3, #4
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d001      	beq.n	80142a6 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 80142a2:	230a      	movs	r3, #10
 80142a4:	e1ff      	b.n	80146a6 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 80142a6:	2300      	movs	r3, #0
 80142a8:	e1fd      	b.n	80146a6 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80142aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80142ac:	2200      	movs	r2, #0
 80142ae:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80142b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80142b2:	b2da      	uxtb	r2, r3
 80142b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80142b6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80142b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80142ba:	785b      	ldrb	r3, [r3, #1]
 80142bc:	4618      	mov	r0, r3
 80142be:	f7fe f8fb 	bl	80124b8 <disk_initialize>
 80142c2:	4603      	mov	r3, r0
 80142c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80142c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80142cc:	f003 0301 	and.w	r3, r3, #1
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d001      	beq.n	80142d8 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80142d4:	2303      	movs	r3, #3
 80142d6:	e1e6      	b.n	80146a6 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80142d8:	79fb      	ldrb	r3, [r7, #7]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d007      	beq.n	80142ee <find_volume+0xda>
 80142de:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80142e2:	f003 0304 	and.w	r3, r3, #4
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d001      	beq.n	80142ee <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80142ea:	230a      	movs	r3, #10
 80142ec:	e1db      	b.n	80146a6 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80142ee:	2300      	movs	r3, #0
 80142f0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80142f2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80142f4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80142f6:	f7ff ff37 	bl	8014168 <check_fs>
 80142fa:	4603      	mov	r3, r0
 80142fc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8014300:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014304:	2b02      	cmp	r3, #2
 8014306:	d149      	bne.n	801439c <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014308:	2300      	movs	r3, #0
 801430a:	643b      	str	r3, [r7, #64]	@ 0x40
 801430c:	e01e      	b.n	801434c <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801430e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014310:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8014314:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014316:	011b      	lsls	r3, r3, #4
 8014318:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801431c:	4413      	add	r3, r2
 801431e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8014320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014322:	3304      	adds	r3, #4
 8014324:	781b      	ldrb	r3, [r3, #0]
 8014326:	2b00      	cmp	r3, #0
 8014328:	d006      	beq.n	8014338 <find_volume+0x124>
 801432a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801432c:	3308      	adds	r3, #8
 801432e:	4618      	mov	r0, r3
 8014330:	f7fe f95e 	bl	80125f0 <ld_dword>
 8014334:	4602      	mov	r2, r0
 8014336:	e000      	b.n	801433a <find_volume+0x126>
 8014338:	2200      	movs	r2, #0
 801433a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801433c:	009b      	lsls	r3, r3, #2
 801433e:	3358      	adds	r3, #88	@ 0x58
 8014340:	443b      	add	r3, r7
 8014342:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014346:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014348:	3301      	adds	r3, #1
 801434a:	643b      	str	r3, [r7, #64]	@ 0x40
 801434c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801434e:	2b03      	cmp	r3, #3
 8014350:	d9dd      	bls.n	801430e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8014352:	2300      	movs	r3, #0
 8014354:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8014356:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014358:	2b00      	cmp	r3, #0
 801435a:	d002      	beq.n	8014362 <find_volume+0x14e>
 801435c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801435e:	3b01      	subs	r3, #1
 8014360:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8014362:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014364:	009b      	lsls	r3, r3, #2
 8014366:	3358      	adds	r3, #88	@ 0x58
 8014368:	443b      	add	r3, r7
 801436a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801436e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8014370:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014372:	2b00      	cmp	r3, #0
 8014374:	d005      	beq.n	8014382 <find_volume+0x16e>
 8014376:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8014378:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801437a:	f7ff fef5 	bl	8014168 <check_fs>
 801437e:	4603      	mov	r3, r0
 8014380:	e000      	b.n	8014384 <find_volume+0x170>
 8014382:	2303      	movs	r3, #3
 8014384:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8014388:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801438c:	2b01      	cmp	r3, #1
 801438e:	d905      	bls.n	801439c <find_volume+0x188>
 8014390:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014392:	3301      	adds	r3, #1
 8014394:	643b      	str	r3, [r7, #64]	@ 0x40
 8014396:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014398:	2b03      	cmp	r3, #3
 801439a:	d9e2      	bls.n	8014362 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801439c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80143a0:	2b04      	cmp	r3, #4
 80143a2:	d101      	bne.n	80143a8 <find_volume+0x194>
 80143a4:	2301      	movs	r3, #1
 80143a6:	e17e      	b.n	80146a6 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80143a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80143ac:	2b01      	cmp	r3, #1
 80143ae:	d901      	bls.n	80143b4 <find_volume+0x1a0>
 80143b0:	230d      	movs	r3, #13
 80143b2:	e178      	b.n	80146a6 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80143b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143b6:	3338      	adds	r3, #56	@ 0x38
 80143b8:	330b      	adds	r3, #11
 80143ba:	4618      	mov	r0, r3
 80143bc:	f7fe f900 	bl	80125c0 <ld_word>
 80143c0:	4603      	mov	r3, r0
 80143c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80143c6:	d001      	beq.n	80143cc <find_volume+0x1b8>
 80143c8:	230d      	movs	r3, #13
 80143ca:	e16c      	b.n	80146a6 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80143cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143ce:	3338      	adds	r3, #56	@ 0x38
 80143d0:	3316      	adds	r3, #22
 80143d2:	4618      	mov	r0, r3
 80143d4:	f7fe f8f4 	bl	80125c0 <ld_word>
 80143d8:	4603      	mov	r3, r0
 80143da:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80143dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d106      	bne.n	80143f0 <find_volume+0x1dc>
 80143e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143e4:	3338      	adds	r3, #56	@ 0x38
 80143e6:	3324      	adds	r3, #36	@ 0x24
 80143e8:	4618      	mov	r0, r3
 80143ea:	f7fe f901 	bl	80125f0 <ld_dword>
 80143ee:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80143f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80143f4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80143f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143f8:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80143fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143fe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8014400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014402:	789b      	ldrb	r3, [r3, #2]
 8014404:	2b01      	cmp	r3, #1
 8014406:	d005      	beq.n	8014414 <find_volume+0x200>
 8014408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801440a:	789b      	ldrb	r3, [r3, #2]
 801440c:	2b02      	cmp	r3, #2
 801440e:	d001      	beq.n	8014414 <find_volume+0x200>
 8014410:	230d      	movs	r3, #13
 8014412:	e148      	b.n	80146a6 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8014414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014416:	789b      	ldrb	r3, [r3, #2]
 8014418:	461a      	mov	r2, r3
 801441a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801441c:	fb02 f303 	mul.w	r3, r2, r3
 8014420:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8014422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014424:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014428:	461a      	mov	r2, r3
 801442a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801442c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801442e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014430:	895b      	ldrh	r3, [r3, #10]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d008      	beq.n	8014448 <find_volume+0x234>
 8014436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014438:	895b      	ldrh	r3, [r3, #10]
 801443a:	461a      	mov	r2, r3
 801443c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801443e:	895b      	ldrh	r3, [r3, #10]
 8014440:	3b01      	subs	r3, #1
 8014442:	4013      	ands	r3, r2
 8014444:	2b00      	cmp	r3, #0
 8014446:	d001      	beq.n	801444c <find_volume+0x238>
 8014448:	230d      	movs	r3, #13
 801444a:	e12c      	b.n	80146a6 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801444c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801444e:	3338      	adds	r3, #56	@ 0x38
 8014450:	3311      	adds	r3, #17
 8014452:	4618      	mov	r0, r3
 8014454:	f7fe f8b4 	bl	80125c0 <ld_word>
 8014458:	4603      	mov	r3, r0
 801445a:	461a      	mov	r2, r3
 801445c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801445e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8014460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014462:	891b      	ldrh	r3, [r3, #8]
 8014464:	f003 030f 	and.w	r3, r3, #15
 8014468:	b29b      	uxth	r3, r3
 801446a:	2b00      	cmp	r3, #0
 801446c:	d001      	beq.n	8014472 <find_volume+0x25e>
 801446e:	230d      	movs	r3, #13
 8014470:	e119      	b.n	80146a6 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8014472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014474:	3338      	adds	r3, #56	@ 0x38
 8014476:	3313      	adds	r3, #19
 8014478:	4618      	mov	r0, r3
 801447a:	f7fe f8a1 	bl	80125c0 <ld_word>
 801447e:	4603      	mov	r3, r0
 8014480:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8014482:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014484:	2b00      	cmp	r3, #0
 8014486:	d106      	bne.n	8014496 <find_volume+0x282>
 8014488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801448a:	3338      	adds	r3, #56	@ 0x38
 801448c:	3320      	adds	r3, #32
 801448e:	4618      	mov	r0, r3
 8014490:	f7fe f8ae 	bl	80125f0 <ld_dword>
 8014494:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8014496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014498:	3338      	adds	r3, #56	@ 0x38
 801449a:	330e      	adds	r3, #14
 801449c:	4618      	mov	r0, r3
 801449e:	f7fe f88f 	bl	80125c0 <ld_word>
 80144a2:	4603      	mov	r3, r0
 80144a4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80144a6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d101      	bne.n	80144b0 <find_volume+0x29c>
 80144ac:	230d      	movs	r3, #13
 80144ae:	e0fa      	b.n	80146a6 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80144b0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80144b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80144b4:	4413      	add	r3, r2
 80144b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80144b8:	8912      	ldrh	r2, [r2, #8]
 80144ba:	0912      	lsrs	r2, r2, #4
 80144bc:	b292      	uxth	r2, r2
 80144be:	4413      	add	r3, r2
 80144c0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80144c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80144c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144c6:	429a      	cmp	r2, r3
 80144c8:	d204      	bcs.n	80144d4 <find_volume+0x2c0>
 80144ca:	230d      	movs	r3, #13
 80144cc:	e0eb      	b.n	80146a6 <find_volume+0x492>
 80144ce:	bf00      	nop
 80144d0:	20003684 	.word	0x20003684
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80144d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80144d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144d8:	1ad3      	subs	r3, r2, r3
 80144da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80144dc:	8952      	ldrh	r2, [r2, #10]
 80144de:	fbb3 f3f2 	udiv	r3, r3, r2
 80144e2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80144e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d101      	bne.n	80144ee <find_volume+0x2da>
 80144ea:	230d      	movs	r3, #13
 80144ec:	e0db      	b.n	80146a6 <find_volume+0x492>
		fmt = FS_FAT32;
 80144ee:	2303      	movs	r3, #3
 80144f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80144f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144f6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80144fa:	4293      	cmp	r3, r2
 80144fc:	d802      	bhi.n	8014504 <find_volume+0x2f0>
 80144fe:	2302      	movs	r3, #2
 8014500:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8014504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014506:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801450a:	4293      	cmp	r3, r2
 801450c:	d802      	bhi.n	8014514 <find_volume+0x300>
 801450e:	2301      	movs	r3, #1
 8014510:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8014514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014516:	1c9a      	adds	r2, r3, #2
 8014518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801451a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801451c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801451e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014520:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8014522:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8014524:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014526:	441a      	add	r2, r3
 8014528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801452a:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801452c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801452e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014530:	441a      	add	r2, r3
 8014532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014534:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8014536:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801453a:	2b03      	cmp	r3, #3
 801453c:	d11e      	bne.n	801457c <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801453e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014540:	3338      	adds	r3, #56	@ 0x38
 8014542:	332a      	adds	r3, #42	@ 0x2a
 8014544:	4618      	mov	r0, r3
 8014546:	f7fe f83b 	bl	80125c0 <ld_word>
 801454a:	4603      	mov	r3, r0
 801454c:	2b00      	cmp	r3, #0
 801454e:	d001      	beq.n	8014554 <find_volume+0x340>
 8014550:	230d      	movs	r3, #13
 8014552:	e0a8      	b.n	80146a6 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8014554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014556:	891b      	ldrh	r3, [r3, #8]
 8014558:	2b00      	cmp	r3, #0
 801455a:	d001      	beq.n	8014560 <find_volume+0x34c>
 801455c:	230d      	movs	r3, #13
 801455e:	e0a2      	b.n	80146a6 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8014560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014562:	3338      	adds	r3, #56	@ 0x38
 8014564:	332c      	adds	r3, #44	@ 0x2c
 8014566:	4618      	mov	r0, r3
 8014568:	f7fe f842 	bl	80125f0 <ld_dword>
 801456c:	4602      	mov	r2, r0
 801456e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014570:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8014572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014574:	69db      	ldr	r3, [r3, #28]
 8014576:	009b      	lsls	r3, r3, #2
 8014578:	647b      	str	r3, [r7, #68]	@ 0x44
 801457a:	e01f      	b.n	80145bc <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801457c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801457e:	891b      	ldrh	r3, [r3, #8]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d101      	bne.n	8014588 <find_volume+0x374>
 8014584:	230d      	movs	r3, #13
 8014586:	e08e      	b.n	80146a6 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8014588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801458a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801458c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801458e:	441a      	add	r2, r3
 8014590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014592:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8014594:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014598:	2b02      	cmp	r3, #2
 801459a:	d103      	bne.n	80145a4 <find_volume+0x390>
 801459c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801459e:	69db      	ldr	r3, [r3, #28]
 80145a0:	005b      	lsls	r3, r3, #1
 80145a2:	e00a      	b.n	80145ba <find_volume+0x3a6>
 80145a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145a6:	69da      	ldr	r2, [r3, #28]
 80145a8:	4613      	mov	r3, r2
 80145aa:	005b      	lsls	r3, r3, #1
 80145ac:	4413      	add	r3, r2
 80145ae:	085a      	lsrs	r2, r3, #1
 80145b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145b2:	69db      	ldr	r3, [r3, #28]
 80145b4:	f003 0301 	and.w	r3, r3, #1
 80145b8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80145ba:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80145bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145be:	6a1a      	ldr	r2, [r3, #32]
 80145c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80145c2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80145c6:	0a5b      	lsrs	r3, r3, #9
 80145c8:	429a      	cmp	r2, r3
 80145ca:	d201      	bcs.n	80145d0 <find_volume+0x3bc>
 80145cc:	230d      	movs	r3, #13
 80145ce:	e06a      	b.n	80146a6 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80145d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145d2:	f04f 32ff 	mov.w	r2, #4294967295
 80145d6:	619a      	str	r2, [r3, #24]
 80145d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145da:	699a      	ldr	r2, [r3, #24]
 80145dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145de:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80145e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145e2:	2280      	movs	r2, #128	@ 0x80
 80145e4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80145e6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80145ea:	2b03      	cmp	r3, #3
 80145ec:	d149      	bne.n	8014682 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80145ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145f0:	3338      	adds	r3, #56	@ 0x38
 80145f2:	3330      	adds	r3, #48	@ 0x30
 80145f4:	4618      	mov	r0, r3
 80145f6:	f7fd ffe3 	bl	80125c0 <ld_word>
 80145fa:	4603      	mov	r3, r0
 80145fc:	2b01      	cmp	r3, #1
 80145fe:	d140      	bne.n	8014682 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8014600:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014602:	3301      	adds	r3, #1
 8014604:	4619      	mov	r1, r3
 8014606:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8014608:	f7fe fabc 	bl	8012b84 <move_window>
 801460c:	4603      	mov	r3, r0
 801460e:	2b00      	cmp	r3, #0
 8014610:	d137      	bne.n	8014682 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8014612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014614:	2200      	movs	r2, #0
 8014616:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8014618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801461a:	3338      	adds	r3, #56	@ 0x38
 801461c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8014620:	4618      	mov	r0, r3
 8014622:	f7fd ffcd 	bl	80125c0 <ld_word>
 8014626:	4603      	mov	r3, r0
 8014628:	461a      	mov	r2, r3
 801462a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801462e:	429a      	cmp	r2, r3
 8014630:	d127      	bne.n	8014682 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8014632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014634:	3338      	adds	r3, #56	@ 0x38
 8014636:	4618      	mov	r0, r3
 8014638:	f7fd ffda 	bl	80125f0 <ld_dword>
 801463c:	4603      	mov	r3, r0
 801463e:	4a1c      	ldr	r2, [pc, #112]	@ (80146b0 <find_volume+0x49c>)
 8014640:	4293      	cmp	r3, r2
 8014642:	d11e      	bne.n	8014682 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8014644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014646:	3338      	adds	r3, #56	@ 0x38
 8014648:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801464c:	4618      	mov	r0, r3
 801464e:	f7fd ffcf 	bl	80125f0 <ld_dword>
 8014652:	4603      	mov	r3, r0
 8014654:	4a17      	ldr	r2, [pc, #92]	@ (80146b4 <find_volume+0x4a0>)
 8014656:	4293      	cmp	r3, r2
 8014658:	d113      	bne.n	8014682 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801465a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801465c:	3338      	adds	r3, #56	@ 0x38
 801465e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8014662:	4618      	mov	r0, r3
 8014664:	f7fd ffc4 	bl	80125f0 <ld_dword>
 8014668:	4602      	mov	r2, r0
 801466a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801466c:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801466e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014670:	3338      	adds	r3, #56	@ 0x38
 8014672:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8014676:	4618      	mov	r0, r3
 8014678:	f7fd ffba 	bl	80125f0 <ld_dword>
 801467c:	4602      	mov	r2, r0
 801467e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014680:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8014682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014684:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8014688:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801468a:	4b0b      	ldr	r3, [pc, #44]	@ (80146b8 <find_volume+0x4a4>)
 801468c:	881b      	ldrh	r3, [r3, #0]
 801468e:	3301      	adds	r3, #1
 8014690:	b29a      	uxth	r2, r3
 8014692:	4b09      	ldr	r3, [pc, #36]	@ (80146b8 <find_volume+0x4a4>)
 8014694:	801a      	strh	r2, [r3, #0]
 8014696:	4b08      	ldr	r3, [pc, #32]	@ (80146b8 <find_volume+0x4a4>)
 8014698:	881a      	ldrh	r2, [r3, #0]
 801469a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801469c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801469e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80146a0:	f7fe fa08 	bl	8012ab4 <clear_lock>
#endif
	return FR_OK;
 80146a4:	2300      	movs	r3, #0
}
 80146a6:	4618      	mov	r0, r3
 80146a8:	3758      	adds	r7, #88	@ 0x58
 80146aa:	46bd      	mov	sp, r7
 80146ac:	bd80      	pop	{r7, pc}
 80146ae:	bf00      	nop
 80146b0:	41615252 	.word	0x41615252
 80146b4:	61417272 	.word	0x61417272
 80146b8:	20003688 	.word	0x20003688

080146bc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80146bc:	b580      	push	{r7, lr}
 80146be:	b084      	sub	sp, #16
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	6078      	str	r0, [r7, #4]
 80146c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80146c6:	2309      	movs	r3, #9
 80146c8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d02e      	beq.n	801472e <validate+0x72>
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d02a      	beq.n	801472e <validate+0x72>
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	781b      	ldrb	r3, [r3, #0]
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d025      	beq.n	801472e <validate+0x72>
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	889a      	ldrh	r2, [r3, #4]
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	88db      	ldrh	r3, [r3, #6]
 80146ec:	429a      	cmp	r2, r3
 80146ee:	d11e      	bne.n	801472e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	4618      	mov	r0, r3
 80146f6:	f7fe f863 	bl	80127c0 <lock_fs>
 80146fa:	4603      	mov	r3, r0
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d014      	beq.n	801472a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	785b      	ldrb	r3, [r3, #1]
 8014706:	4618      	mov	r0, r3
 8014708:	f7fd febc 	bl	8012484 <disk_status>
 801470c:	4603      	mov	r3, r0
 801470e:	f003 0301 	and.w	r3, r3, #1
 8014712:	2b00      	cmp	r3, #0
 8014714:	d102      	bne.n	801471c <validate+0x60>
				res = FR_OK;
 8014716:	2300      	movs	r3, #0
 8014718:	73fb      	strb	r3, [r7, #15]
 801471a:	e008      	b.n	801472e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	681b      	ldr	r3, [r3, #0]
 8014720:	2100      	movs	r1, #0
 8014722:	4618      	mov	r0, r3
 8014724:	f7fe f862 	bl	80127ec <unlock_fs>
 8014728:	e001      	b.n	801472e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 801472a:	230f      	movs	r3, #15
 801472c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801472e:	7bfb      	ldrb	r3, [r7, #15]
 8014730:	2b00      	cmp	r3, #0
 8014732:	d102      	bne.n	801473a <validate+0x7e>
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	e000      	b.n	801473c <validate+0x80>
 801473a:	2300      	movs	r3, #0
 801473c:	683a      	ldr	r2, [r7, #0]
 801473e:	6013      	str	r3, [r2, #0]
	return res;
 8014740:	7bfb      	ldrb	r3, [r7, #15]
}
 8014742:	4618      	mov	r0, r3
 8014744:	3710      	adds	r7, #16
 8014746:	46bd      	mov	sp, r7
 8014748:	bd80      	pop	{r7, pc}
	...

0801474c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801474c:	b580      	push	{r7, lr}
 801474e:	b088      	sub	sp, #32
 8014750:	af00      	add	r7, sp, #0
 8014752:	60f8      	str	r0, [r7, #12]
 8014754:	60b9      	str	r1, [r7, #8]
 8014756:	4613      	mov	r3, r2
 8014758:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801475a:	68bb      	ldr	r3, [r7, #8]
 801475c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801475e:	f107 0310 	add.w	r3, r7, #16
 8014762:	4618      	mov	r0, r3
 8014764:	f7ff fcbb 	bl	80140de <get_ldnumber>
 8014768:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801476a:	69fb      	ldr	r3, [r7, #28]
 801476c:	2b00      	cmp	r3, #0
 801476e:	da01      	bge.n	8014774 <f_mount+0x28>
 8014770:	230b      	movs	r3, #11
 8014772:	e048      	b.n	8014806 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8014774:	4a26      	ldr	r2, [pc, #152]	@ (8014810 <f_mount+0xc4>)
 8014776:	69fb      	ldr	r3, [r7, #28]
 8014778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801477c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801477e:	69bb      	ldr	r3, [r7, #24]
 8014780:	2b00      	cmp	r3, #0
 8014782:	d00f      	beq.n	80147a4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8014784:	69b8      	ldr	r0, [r7, #24]
 8014786:	f7fe f995 	bl	8012ab4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 801478a:	69bb      	ldr	r3, [r7, #24]
 801478c:	691b      	ldr	r3, [r3, #16]
 801478e:	4618      	mov	r0, r3
 8014790:	f001 f8b1 	bl	80158f6 <ff_del_syncobj>
 8014794:	4603      	mov	r3, r0
 8014796:	2b00      	cmp	r3, #0
 8014798:	d101      	bne.n	801479e <f_mount+0x52>
 801479a:	2302      	movs	r3, #2
 801479c:	e033      	b.n	8014806 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801479e:	69bb      	ldr	r3, [r7, #24]
 80147a0:	2200      	movs	r2, #0
 80147a2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d00f      	beq.n	80147ca <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	2200      	movs	r2, #0
 80147ae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80147b0:	69fb      	ldr	r3, [r7, #28]
 80147b2:	b2da      	uxtb	r2, r3
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	3310      	adds	r3, #16
 80147b8:	4619      	mov	r1, r3
 80147ba:	4610      	mov	r0, r2
 80147bc:	f001 f880 	bl	80158c0 <ff_cre_syncobj>
 80147c0:	4603      	mov	r3, r0
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d101      	bne.n	80147ca <f_mount+0x7e>
 80147c6:	2302      	movs	r3, #2
 80147c8:	e01d      	b.n	8014806 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80147ca:	68fa      	ldr	r2, [r7, #12]
 80147cc:	4910      	ldr	r1, [pc, #64]	@ (8014810 <f_mount+0xc4>)
 80147ce:	69fb      	ldr	r3, [r7, #28]
 80147d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d002      	beq.n	80147e0 <f_mount+0x94>
 80147da:	79fb      	ldrb	r3, [r7, #7]
 80147dc:	2b01      	cmp	r3, #1
 80147de:	d001      	beq.n	80147e4 <f_mount+0x98>
 80147e0:	2300      	movs	r3, #0
 80147e2:	e010      	b.n	8014806 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80147e4:	f107 010c 	add.w	r1, r7, #12
 80147e8:	f107 0308 	add.w	r3, r7, #8
 80147ec:	2200      	movs	r2, #0
 80147ee:	4618      	mov	r0, r3
 80147f0:	f7ff fd10 	bl	8014214 <find_volume>
 80147f4:	4603      	mov	r3, r0
 80147f6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	7dfa      	ldrb	r2, [r7, #23]
 80147fc:	4611      	mov	r1, r2
 80147fe:	4618      	mov	r0, r3
 8014800:	f7fd fff4 	bl	80127ec <unlock_fs>
 8014804:	7dfb      	ldrb	r3, [r7, #23]
}
 8014806:	4618      	mov	r0, r3
 8014808:	3720      	adds	r7, #32
 801480a:	46bd      	mov	sp, r7
 801480c:	bd80      	pop	{r7, pc}
 801480e:	bf00      	nop
 8014810:	20003684 	.word	0x20003684

08014814 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014814:	b580      	push	{r7, lr}
 8014816:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 801481a:	af00      	add	r7, sp, #0
 801481c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8014820:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8014824:	6018      	str	r0, [r3, #0]
 8014826:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801482a:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 801482e:	6019      	str	r1, [r3, #0]
 8014830:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8014834:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8014838:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801483a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801483e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	2b00      	cmp	r3, #0
 8014846:	d101      	bne.n	801484c <f_open+0x38>
 8014848:	2309      	movs	r3, #9
 801484a:	e299      	b.n	8014d80 <f_open+0x56c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801484c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8014850:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8014854:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8014858:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 801485c:	7812      	ldrb	r2, [r2, #0]
 801485e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8014862:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8014864:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8014868:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 801486c:	781a      	ldrb	r2, [r3, #0]
 801486e:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 8014872:	f107 0308 	add.w	r3, r7, #8
 8014876:	4618      	mov	r0, r3
 8014878:	f7ff fccc 	bl	8014214 <find_volume>
 801487c:	4603      	mov	r3, r0
 801487e:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
	if (res == FR_OK) {
 8014882:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8014886:	2b00      	cmp	r3, #0
 8014888:	f040 8265 	bne.w	8014d56 <f_open+0x542>
		dj.obj.fs = fs;
 801488c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8014890:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
		INIT_NAMBUF(fs);
 8014894:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8014898:	f107 0214 	add.w	r2, r7, #20
 801489c:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 801489e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80148a2:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80148a6:	681a      	ldr	r2, [r3, #0]
 80148a8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80148ac:	4611      	mov	r1, r2
 80148ae:	4618      	mov	r0, r3
 80148b0:	f7ff fba4 	bl	8013ffc <follow_path>
 80148b4:	4603      	mov	r3, r0
 80148b6:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80148ba:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d11c      	bne.n	80148fc <f_open+0xe8>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80148c2:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 80148c6:	b25b      	sxtb	r3, r3
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	da03      	bge.n	80148d4 <f_open+0xc0>
				res = FR_INVALID_NAME;
 80148cc:	2306      	movs	r3, #6
 80148ce:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 80148d2:	e013      	b.n	80148fc <f_open+0xe8>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80148d4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80148d8:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80148dc:	781b      	ldrb	r3, [r3, #0]
 80148de:	2b01      	cmp	r3, #1
 80148e0:	bf8c      	ite	hi
 80148e2:	2301      	movhi	r3, #1
 80148e4:	2300      	movls	r3, #0
 80148e6:	b2db      	uxtb	r3, r3
 80148e8:	461a      	mov	r2, r3
 80148ea:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80148ee:	4611      	mov	r1, r2
 80148f0:	4618      	mov	r0, r3
 80148f2:	f7fd ff97 	bl	8012824 <chk_lock>
 80148f6:	4603      	mov	r3, r0
 80148f8:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80148fc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8014900:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8014904:	781b      	ldrb	r3, [r3, #0]
 8014906:	f003 031c 	and.w	r3, r3, #28
 801490a:	2b00      	cmp	r3, #0
 801490c:	f000 80a7 	beq.w	8014a5e <f_open+0x24a>
			if (res != FR_OK) {					/* No file, create new */
 8014910:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8014914:	2b00      	cmp	r3, #0
 8014916:	d01f      	beq.n	8014958 <f_open+0x144>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8014918:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 801491c:	2b04      	cmp	r3, #4
 801491e:	d10e      	bne.n	801493e <f_open+0x12a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8014920:	f7fd ffdc 	bl	80128dc <enq_lock>
 8014924:	4603      	mov	r3, r0
 8014926:	2b00      	cmp	r3, #0
 8014928:	d006      	beq.n	8014938 <f_open+0x124>
 801492a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 801492e:	4618      	mov	r0, r3
 8014930:	f7ff f8b4 	bl	8013a9c <dir_register>
 8014934:	4603      	mov	r3, r0
 8014936:	e000      	b.n	801493a <f_open+0x126>
 8014938:	2312      	movs	r3, #18
 801493a:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801493e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8014942:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8014946:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 801494a:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 801494e:	7812      	ldrb	r2, [r2, #0]
 8014950:	f042 0208 	orr.w	r2, r2, #8
 8014954:	701a      	strb	r2, [r3, #0]
 8014956:	e015      	b.n	8014984 <f_open+0x170>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8014958:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 801495c:	f003 0311 	and.w	r3, r3, #17
 8014960:	2b00      	cmp	r3, #0
 8014962:	d003      	beq.n	801496c <f_open+0x158>
					res = FR_DENIED;
 8014964:	2307      	movs	r3, #7
 8014966:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 801496a:	e00b      	b.n	8014984 <f_open+0x170>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801496c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8014970:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8014974:	781b      	ldrb	r3, [r3, #0]
 8014976:	f003 0304 	and.w	r3, r3, #4
 801497a:	2b00      	cmp	r3, #0
 801497c:	d002      	beq.n	8014984 <f_open+0x170>
 801497e:	2308      	movs	r3, #8
 8014980:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8014984:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8014988:	2b00      	cmp	r3, #0
 801498a:	f040 8088 	bne.w	8014a9e <f_open+0x28a>
 801498e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8014992:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8014996:	781b      	ldrb	r3, [r3, #0]
 8014998:	f003 0308 	and.w	r3, r3, #8
 801499c:	2b00      	cmp	r3, #0
 801499e:	d07e      	beq.n	8014a9e <f_open+0x28a>
				dw = GET_FATTIME();
 80149a0:	f7fb fb7a 	bl	8010098 <get_fattime>
 80149a4:	f8c7 0258 	str.w	r0, [r7, #600]	@ 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80149a8:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80149ac:	330e      	adds	r3, #14
 80149ae:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 80149b2:	4618      	mov	r0, r3
 80149b4:	f7fd fe5a 	bl	801266c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80149b8:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80149bc:	3316      	adds	r3, #22
 80149be:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 80149c2:	4618      	mov	r0, r3
 80149c4:	f7fd fe52 	bl	801266c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80149c8:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80149cc:	330b      	adds	r3, #11
 80149ce:	2220      	movs	r2, #32
 80149d0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80149d2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80149d6:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 80149da:	4611      	mov	r1, r2
 80149dc:	4618      	mov	r0, r3
 80149de:	f7fe fdd5 	bl	801358c <ld_clust>
 80149e2:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80149e6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80149ea:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 80149ee:	2200      	movs	r2, #0
 80149f0:	4618      	mov	r0, r3
 80149f2:	f7fe fdea 	bl	80135ca <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80149f6:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80149fa:	331c      	adds	r3, #28
 80149fc:	2100      	movs	r1, #0
 80149fe:	4618      	mov	r0, r3
 8014a00:	f7fd fe34 	bl	801266c <st_dword>
					fs->wflag = 1;
 8014a04:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8014a08:	2201      	movs	r2, #1
 8014a0a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8014a0c:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d044      	beq.n	8014a9e <f_open+0x28a>
						dw = fs->winsect;
 8014a14:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8014a18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014a1a:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
						res = remove_chain(&dj.obj, cl, 0);
 8014a1e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8014a22:	2200      	movs	r2, #0
 8014a24:	f8d7 1254 	ldr.w	r1, [r7, #596]	@ 0x254
 8014a28:	4618      	mov	r0, r3
 8014a2a:	f7fe faf7 	bl	801301c <remove_chain>
 8014a2e:	4603      	mov	r3, r0
 8014a30:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
						if (res == FR_OK) {
 8014a34:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d130      	bne.n	8014a9e <f_open+0x28a>
							res = move_window(fs, dw);
 8014a3c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8014a40:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 8014a44:	4618      	mov	r0, r3
 8014a46:	f7fe f89d 	bl	8012b84 <move_window>
 8014a4a:	4603      	mov	r3, r0
 8014a4c:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8014a50:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8014a54:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 8014a58:	3a01      	subs	r2, #1
 8014a5a:	615a      	str	r2, [r3, #20]
 8014a5c:	e01f      	b.n	8014a9e <f_open+0x28a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8014a5e:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d11b      	bne.n	8014a9e <f_open+0x28a>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8014a66:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 8014a6a:	f003 0310 	and.w	r3, r3, #16
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d003      	beq.n	8014a7a <f_open+0x266>
					res = FR_NO_FILE;
 8014a72:	2304      	movs	r3, #4
 8014a74:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 8014a78:	e011      	b.n	8014a9e <f_open+0x28a>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8014a7a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8014a7e:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8014a82:	781b      	ldrb	r3, [r3, #0]
 8014a84:	f003 0302 	and.w	r3, r3, #2
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d008      	beq.n	8014a9e <f_open+0x28a>
 8014a8c:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 8014a90:	f003 0301 	and.w	r3, r3, #1
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d002      	beq.n	8014a9e <f_open+0x28a>
						res = FR_DENIED;
 8014a98:	2307      	movs	r3, #7
 8014a9a:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8014a9e:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d148      	bne.n	8014b38 <f_open+0x324>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014aa6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8014aaa:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8014aae:	781b      	ldrb	r3, [r3, #0]
 8014ab0:	f003 0308 	and.w	r3, r3, #8
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d00b      	beq.n	8014ad0 <f_open+0x2bc>
				mode |= FA_MODIFIED;
 8014ab8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8014abc:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8014ac0:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8014ac4:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 8014ac8:	7812      	ldrb	r2, [r2, #0]
 8014aca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014ace:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014ad0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8014ad4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014ad6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8014ada:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8014ae2:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8014ae6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8014aea:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014af2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8014af6:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8014afa:	781b      	ldrb	r3, [r3, #0]
 8014afc:	2b01      	cmp	r3, #1
 8014afe:	bf8c      	ite	hi
 8014b00:	2301      	movhi	r3, #1
 8014b02:	2300      	movls	r3, #0
 8014b04:	b2db      	uxtb	r3, r3
 8014b06:	461a      	mov	r2, r3
 8014b08:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8014b0c:	4611      	mov	r1, r2
 8014b0e:	4618      	mov	r0, r3
 8014b10:	f7fd ff06 	bl	8012920 <inc_lock>
 8014b14:	4602      	mov	r2, r0
 8014b16:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8014b1a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8014b22:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8014b26:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	691b      	ldr	r3, [r3, #16]
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d102      	bne.n	8014b38 <f_open+0x324>
 8014b32:	2302      	movs	r3, #2
 8014b34:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8014b38:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	f040 810a 	bne.w	8014d56 <f_open+0x542>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8014b42:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8014b46:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8014b4a:	4611      	mov	r1, r2
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	f7fe fd1d 	bl	801358c <ld_clust>
 8014b52:	4602      	mov	r2, r0
 8014b54:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8014b58:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8014b60:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8014b64:	331c      	adds	r3, #28
 8014b66:	4618      	mov	r0, r3
 8014b68:	f7fd fd42 	bl	80125f0 <ld_dword>
 8014b6c:	4602      	mov	r2, r0
 8014b6e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8014b72:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8014b7a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8014b7e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	2200      	movs	r2, #0
 8014b86:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8014b88:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8014b8c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8014b90:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8014b98:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8014b9c:	88da      	ldrh	r2, [r3, #6]
 8014b9e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8014ba2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8014baa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8014bae:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8014bb8:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 8014bbc:	7812      	ldrb	r2, [r2, #0]
 8014bbe:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8014bc0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8014bc4:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	2200      	movs	r2, #0
 8014bcc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8014bce:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8014bd2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	2200      	movs	r2, #0
 8014bda:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8014bdc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8014be0:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	2200      	movs	r2, #0
 8014be8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8014bea:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8014bee:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	3330      	adds	r3, #48	@ 0x30
 8014bf6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014bfa:	2100      	movs	r1, #0
 8014bfc:	4618      	mov	r0, r3
 8014bfe:	f7fd fd82 	bl	8012706 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8014c02:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8014c06:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8014c0a:	781b      	ldrb	r3, [r3, #0]
 8014c0c:	f003 0320 	and.w	r3, r3, #32
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	f000 80a0 	beq.w	8014d56 <f_open+0x542>
 8014c16:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8014c1a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	68db      	ldr	r3, [r3, #12]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	f000 8097 	beq.w	8014d56 <f_open+0x542>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8014c28:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8014c2c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	68da      	ldr	r2, [r3, #12]
 8014c34:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8014c38:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014c40:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8014c44:	895b      	ldrh	r3, [r3, #10]
 8014c46:	025b      	lsls	r3, r3, #9
 8014c48:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8014c4c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8014c50:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8014c54:	681b      	ldr	r3, [r3, #0]
 8014c56:	689b      	ldr	r3, [r3, #8]
 8014c58:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014c5c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8014c60:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	68db      	ldr	r3, [r3, #12]
 8014c68:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 8014c6c:	e021      	b.n	8014cb2 <f_open+0x49e>
					clst = get_fat(&fp->obj, clst);
 8014c6e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8014c72:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 8014c7c:	4618      	mov	r0, r3
 8014c7e:	f7fe f83c 	bl	8012cfa <get_fat>
 8014c82:	f8c7 0260 	str.w	r0, [r7, #608]	@ 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8014c86:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8014c8a:	2b01      	cmp	r3, #1
 8014c8c:	d802      	bhi.n	8014c94 <f_open+0x480>
 8014c8e:	2302      	movs	r3, #2
 8014c90:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014c94:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8014c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c9c:	d102      	bne.n	8014ca4 <f_open+0x490>
 8014c9e:	2301      	movs	r3, #1
 8014ca0:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014ca4:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8014ca8:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8014cac:	1ad3      	subs	r3, r2, r3
 8014cae:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 8014cb2:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d105      	bne.n	8014cc6 <f_open+0x4b2>
 8014cba:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8014cbe:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8014cc2:	429a      	cmp	r2, r3
 8014cc4:	d8d3      	bhi.n	8014c6e <f_open+0x45a>
				}
				fp->clust = clst;
 8014cc6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8014cca:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8014cd4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014cd6:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d13b      	bne.n	8014d56 <f_open+0x542>
 8014cde:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8014ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d035      	beq.n	8014d56 <f_open+0x542>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8014cea:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8014cee:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	f7fd ffe2 	bl	8012cbc <clust2sect>
 8014cf8:	f8c7 024c 	str.w	r0, [r7, #588]	@ 0x24c
 8014cfc:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d103      	bne.n	8014d0c <f_open+0x4f8>
						res = FR_INT_ERR;
 8014d04:	2302      	movs	r3, #2
 8014d06:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 8014d0a:	e024      	b.n	8014d56 <f_open+0x542>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8014d0c:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8014d10:	0a5a      	lsrs	r2, r3, #9
 8014d12:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8014d16:	441a      	add	r2, r3
 8014d18:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8014d1c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014d24:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8014d28:	7858      	ldrb	r0, [r3, #1]
 8014d2a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8014d2e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014d38:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8014d3c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	6a1a      	ldr	r2, [r3, #32]
 8014d44:	2301      	movs	r3, #1
 8014d46:	f7fd fbdd 	bl	8012504 <disk_read>
 8014d4a:	4603      	mov	r3, r0
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d002      	beq.n	8014d56 <f_open+0x542>
 8014d50:	2301      	movs	r3, #1
 8014d52:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014d56:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d006      	beq.n	8014d6c <f_open+0x558>
 8014d5e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8014d62:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	2200      	movs	r2, #0
 8014d6a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014d6c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8014d70:	f897 2267 	ldrb.w	r2, [r7, #615]	@ 0x267
 8014d74:	4611      	mov	r1, r2
 8014d76:	4618      	mov	r0, r3
 8014d78:	f7fd fd38 	bl	80127ec <unlock_fs>
 8014d7c:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
}
 8014d80:	4618      	mov	r0, r3
 8014d82:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 8014d86:	46bd      	mov	sp, r7
 8014d88:	bd80      	pop	{r7, pc}

08014d8a <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8014d8a:	b580      	push	{r7, lr}
 8014d8c:	b08e      	sub	sp, #56	@ 0x38
 8014d8e:	af00      	add	r7, sp, #0
 8014d90:	60f8      	str	r0, [r7, #12]
 8014d92:	60b9      	str	r1, [r7, #8]
 8014d94:	607a      	str	r2, [r7, #4]
 8014d96:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8014d98:	68bb      	ldr	r3, [r7, #8]
 8014d9a:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8014d9c:	683b      	ldr	r3, [r7, #0]
 8014d9e:	2200      	movs	r2, #0
 8014da0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	f107 0214 	add.w	r2, r7, #20
 8014da8:	4611      	mov	r1, r2
 8014daa:	4618      	mov	r0, r3
 8014dac:	f7ff fc86 	bl	80146bc <validate>
 8014db0:	4603      	mov	r3, r0
 8014db2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014db6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d107      	bne.n	8014dce <f_read+0x44>
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	7d5b      	ldrb	r3, [r3, #21]
 8014dc2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8014dc6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d009      	beq.n	8014de2 <f_read+0x58>
 8014dce:	697b      	ldr	r3, [r7, #20]
 8014dd0:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8014dd4:	4611      	mov	r1, r2
 8014dd6:	4618      	mov	r0, r3
 8014dd8:	f7fd fd08 	bl	80127ec <unlock_fs>
 8014ddc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8014de0:	e13d      	b.n	801505e <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	7d1b      	ldrb	r3, [r3, #20]
 8014de6:	f003 0301 	and.w	r3, r3, #1
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d106      	bne.n	8014dfc <f_read+0x72>
 8014dee:	697b      	ldr	r3, [r7, #20]
 8014df0:	2107      	movs	r1, #7
 8014df2:	4618      	mov	r0, r3
 8014df4:	f7fd fcfa 	bl	80127ec <unlock_fs>
 8014df8:	2307      	movs	r3, #7
 8014dfa:	e130      	b.n	801505e <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	68da      	ldr	r2, [r3, #12]
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	699b      	ldr	r3, [r3, #24]
 8014e04:	1ad3      	subs	r3, r2, r3
 8014e06:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8014e08:	687a      	ldr	r2, [r7, #4]
 8014e0a:	6a3b      	ldr	r3, [r7, #32]
 8014e0c:	429a      	cmp	r2, r3
 8014e0e:	f240 811c 	bls.w	801504a <f_read+0x2c0>
 8014e12:	6a3b      	ldr	r3, [r7, #32]
 8014e14:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8014e16:	e118      	b.n	801504a <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	699b      	ldr	r3, [r3, #24]
 8014e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	f040 80e4 	bne.w	8014fee <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8014e26:	68fb      	ldr	r3, [r7, #12]
 8014e28:	699b      	ldr	r3, [r3, #24]
 8014e2a:	0a5b      	lsrs	r3, r3, #9
 8014e2c:	697a      	ldr	r2, [r7, #20]
 8014e2e:	8952      	ldrh	r2, [r2, #10]
 8014e30:	3a01      	subs	r2, #1
 8014e32:	4013      	ands	r3, r2
 8014e34:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8014e36:	69fb      	ldr	r3, [r7, #28]
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d139      	bne.n	8014eb0 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	699b      	ldr	r3, [r3, #24]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d103      	bne.n	8014e4c <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	689b      	ldr	r3, [r3, #8]
 8014e48:	633b      	str	r3, [r7, #48]	@ 0x30
 8014e4a:	e013      	b.n	8014e74 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	d007      	beq.n	8014e64 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014e54:	68fb      	ldr	r3, [r7, #12]
 8014e56:	699b      	ldr	r3, [r3, #24]
 8014e58:	4619      	mov	r1, r3
 8014e5a:	68f8      	ldr	r0, [r7, #12]
 8014e5c:	f7fe f9db 	bl	8013216 <clmt_clust>
 8014e60:	6338      	str	r0, [r7, #48]	@ 0x30
 8014e62:	e007      	b.n	8014e74 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8014e64:	68fa      	ldr	r2, [r7, #12]
 8014e66:	68fb      	ldr	r3, [r7, #12]
 8014e68:	69db      	ldr	r3, [r3, #28]
 8014e6a:	4619      	mov	r1, r3
 8014e6c:	4610      	mov	r0, r2
 8014e6e:	f7fd ff44 	bl	8012cfa <get_fat>
 8014e72:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8014e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e76:	2b01      	cmp	r3, #1
 8014e78:	d809      	bhi.n	8014e8e <f_read+0x104>
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	2202      	movs	r2, #2
 8014e7e:	755a      	strb	r2, [r3, #21]
 8014e80:	697b      	ldr	r3, [r7, #20]
 8014e82:	2102      	movs	r1, #2
 8014e84:	4618      	mov	r0, r3
 8014e86:	f7fd fcb1 	bl	80127ec <unlock_fs>
 8014e8a:	2302      	movs	r3, #2
 8014e8c:	e0e7      	b.n	801505e <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e94:	d109      	bne.n	8014eaa <f_read+0x120>
 8014e96:	68fb      	ldr	r3, [r7, #12]
 8014e98:	2201      	movs	r2, #1
 8014e9a:	755a      	strb	r2, [r3, #21]
 8014e9c:	697b      	ldr	r3, [r7, #20]
 8014e9e:	2101      	movs	r1, #1
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	f7fd fca3 	bl	80127ec <unlock_fs>
 8014ea6:	2301      	movs	r3, #1
 8014ea8:	e0d9      	b.n	801505e <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 8014eaa:	68fb      	ldr	r3, [r7, #12]
 8014eac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014eae:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014eb0:	697a      	ldr	r2, [r7, #20]
 8014eb2:	68fb      	ldr	r3, [r7, #12]
 8014eb4:	69db      	ldr	r3, [r3, #28]
 8014eb6:	4619      	mov	r1, r3
 8014eb8:	4610      	mov	r0, r2
 8014eba:	f7fd feff 	bl	8012cbc <clust2sect>
 8014ebe:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014ec0:	69bb      	ldr	r3, [r7, #24]
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d109      	bne.n	8014eda <f_read+0x150>
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	2202      	movs	r2, #2
 8014eca:	755a      	strb	r2, [r3, #21]
 8014ecc:	697b      	ldr	r3, [r7, #20]
 8014ece:	2102      	movs	r1, #2
 8014ed0:	4618      	mov	r0, r3
 8014ed2:	f7fd fc8b 	bl	80127ec <unlock_fs>
 8014ed6:	2302      	movs	r3, #2
 8014ed8:	e0c1      	b.n	801505e <f_read+0x2d4>
			sect += csect;
 8014eda:	69ba      	ldr	r2, [r7, #24]
 8014edc:	69fb      	ldr	r3, [r7, #28]
 8014ede:	4413      	add	r3, r2
 8014ee0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	0a5b      	lsrs	r3, r3, #9
 8014ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8014ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d03e      	beq.n	8014f6c <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014eee:	69fa      	ldr	r2, [r7, #28]
 8014ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ef2:	4413      	add	r3, r2
 8014ef4:	697a      	ldr	r2, [r7, #20]
 8014ef6:	8952      	ldrh	r2, [r2, #10]
 8014ef8:	4293      	cmp	r3, r2
 8014efa:	d905      	bls.n	8014f08 <f_read+0x17e>
					cc = fs->csize - csect;
 8014efc:	697b      	ldr	r3, [r7, #20]
 8014efe:	895b      	ldrh	r3, [r3, #10]
 8014f00:	461a      	mov	r2, r3
 8014f02:	69fb      	ldr	r3, [r7, #28]
 8014f04:	1ad3      	subs	r3, r2, r3
 8014f06:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014f08:	697b      	ldr	r3, [r7, #20]
 8014f0a:	7858      	ldrb	r0, [r3, #1]
 8014f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f0e:	69ba      	ldr	r2, [r7, #24]
 8014f10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014f12:	f7fd faf7 	bl	8012504 <disk_read>
 8014f16:	4603      	mov	r3, r0
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d009      	beq.n	8014f30 <f_read+0x1a6>
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	2201      	movs	r2, #1
 8014f20:	755a      	strb	r2, [r3, #21]
 8014f22:	697b      	ldr	r3, [r7, #20]
 8014f24:	2101      	movs	r1, #1
 8014f26:	4618      	mov	r0, r3
 8014f28:	f7fd fc60 	bl	80127ec <unlock_fs>
 8014f2c:	2301      	movs	r3, #1
 8014f2e:	e096      	b.n	801505e <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	7d1b      	ldrb	r3, [r3, #20]
 8014f34:	b25b      	sxtb	r3, r3
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	da14      	bge.n	8014f64 <f_read+0x1da>
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	6a1a      	ldr	r2, [r3, #32]
 8014f3e:	69bb      	ldr	r3, [r7, #24]
 8014f40:	1ad3      	subs	r3, r2, r3
 8014f42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014f44:	429a      	cmp	r2, r3
 8014f46:	d90d      	bls.n	8014f64 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	6a1a      	ldr	r2, [r3, #32]
 8014f4c:	69bb      	ldr	r3, [r7, #24]
 8014f4e:	1ad3      	subs	r3, r2, r3
 8014f50:	025b      	lsls	r3, r3, #9
 8014f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014f54:	18d0      	adds	r0, r2, r3
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	3330      	adds	r3, #48	@ 0x30
 8014f5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014f5e:	4619      	mov	r1, r3
 8014f60:	f7fd fbb0 	bl	80126c4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8014f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f66:	025b      	lsls	r3, r3, #9
 8014f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8014f6a:	e05a      	b.n	8015022 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	6a1b      	ldr	r3, [r3, #32]
 8014f70:	69ba      	ldr	r2, [r7, #24]
 8014f72:	429a      	cmp	r2, r3
 8014f74:	d038      	beq.n	8014fe8 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	7d1b      	ldrb	r3, [r3, #20]
 8014f7a:	b25b      	sxtb	r3, r3
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	da1d      	bge.n	8014fbc <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014f80:	697b      	ldr	r3, [r7, #20]
 8014f82:	7858      	ldrb	r0, [r3, #1]
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	6a1a      	ldr	r2, [r3, #32]
 8014f8e:	2301      	movs	r3, #1
 8014f90:	f7fd fad8 	bl	8012544 <disk_write>
 8014f94:	4603      	mov	r3, r0
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d009      	beq.n	8014fae <f_read+0x224>
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	2201      	movs	r2, #1
 8014f9e:	755a      	strb	r2, [r3, #21]
 8014fa0:	697b      	ldr	r3, [r7, #20]
 8014fa2:	2101      	movs	r1, #1
 8014fa4:	4618      	mov	r0, r3
 8014fa6:	f7fd fc21 	bl	80127ec <unlock_fs>
 8014faa:	2301      	movs	r3, #1
 8014fac:	e057      	b.n	801505e <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	7d1b      	ldrb	r3, [r3, #20]
 8014fb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014fb6:	b2da      	uxtb	r2, r3
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014fbc:	697b      	ldr	r3, [r7, #20]
 8014fbe:	7858      	ldrb	r0, [r3, #1]
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014fc6:	2301      	movs	r3, #1
 8014fc8:	69ba      	ldr	r2, [r7, #24]
 8014fca:	f7fd fa9b 	bl	8012504 <disk_read>
 8014fce:	4603      	mov	r3, r0
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d009      	beq.n	8014fe8 <f_read+0x25e>
 8014fd4:	68fb      	ldr	r3, [r7, #12]
 8014fd6:	2201      	movs	r2, #1
 8014fd8:	755a      	strb	r2, [r3, #21]
 8014fda:	697b      	ldr	r3, [r7, #20]
 8014fdc:	2101      	movs	r1, #1
 8014fde:	4618      	mov	r0, r3
 8014fe0:	f7fd fc04 	bl	80127ec <unlock_fs>
 8014fe4:	2301      	movs	r3, #1
 8014fe6:	e03a      	b.n	801505e <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	69ba      	ldr	r2, [r7, #24]
 8014fec:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	699b      	ldr	r3, [r3, #24]
 8014ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014ff6:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8014ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8014ffc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	429a      	cmp	r2, r3
 8015002:	d901      	bls.n	8015008 <f_read+0x27e>
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	699b      	ldr	r3, [r3, #24]
 8015012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015016:	4413      	add	r3, r2
 8015018:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801501a:	4619      	mov	r1, r3
 801501c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801501e:	f7fd fb51 	bl	80126c4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8015022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015026:	4413      	add	r3, r2
 8015028:	627b      	str	r3, [r7, #36]	@ 0x24
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	699a      	ldr	r2, [r3, #24]
 801502e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015030:	441a      	add	r2, r3
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	619a      	str	r2, [r3, #24]
 8015036:	683b      	ldr	r3, [r7, #0]
 8015038:	681a      	ldr	r2, [r3, #0]
 801503a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801503c:	441a      	add	r2, r3
 801503e:	683b      	ldr	r3, [r7, #0]
 8015040:	601a      	str	r2, [r3, #0]
 8015042:	687a      	ldr	r2, [r7, #4]
 8015044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015046:	1ad3      	subs	r3, r2, r3
 8015048:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	2b00      	cmp	r3, #0
 801504e:	f47f aee3 	bne.w	8014e18 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8015052:	697b      	ldr	r3, [r7, #20]
 8015054:	2100      	movs	r1, #0
 8015056:	4618      	mov	r0, r3
 8015058:	f7fd fbc8 	bl	80127ec <unlock_fs>
 801505c:	2300      	movs	r3, #0
}
 801505e:	4618      	mov	r0, r3
 8015060:	3738      	adds	r7, #56	@ 0x38
 8015062:	46bd      	mov	sp, r7
 8015064:	bd80      	pop	{r7, pc}

08015066 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8015066:	b580      	push	{r7, lr}
 8015068:	b086      	sub	sp, #24
 801506a:	af00      	add	r7, sp, #0
 801506c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	f107 0208 	add.w	r2, r7, #8
 8015074:	4611      	mov	r1, r2
 8015076:	4618      	mov	r0, r3
 8015078:	f7ff fb20 	bl	80146bc <validate>
 801507c:	4603      	mov	r3, r0
 801507e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015080:	7dfb      	ldrb	r3, [r7, #23]
 8015082:	2b00      	cmp	r3, #0
 8015084:	d16d      	bne.n	8015162 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	7d1b      	ldrb	r3, [r3, #20]
 801508a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801508e:	2b00      	cmp	r3, #0
 8015090:	d067      	beq.n	8015162 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	7d1b      	ldrb	r3, [r3, #20]
 8015096:	b25b      	sxtb	r3, r3
 8015098:	2b00      	cmp	r3, #0
 801509a:	da1a      	bge.n	80150d2 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801509c:	68bb      	ldr	r3, [r7, #8]
 801509e:	7858      	ldrb	r0, [r3, #1]
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	6a1a      	ldr	r2, [r3, #32]
 80150aa:	2301      	movs	r3, #1
 80150ac:	f7fd fa4a 	bl	8012544 <disk_write>
 80150b0:	4603      	mov	r3, r0
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d006      	beq.n	80150c4 <f_sync+0x5e>
 80150b6:	68bb      	ldr	r3, [r7, #8]
 80150b8:	2101      	movs	r1, #1
 80150ba:	4618      	mov	r0, r3
 80150bc:	f7fd fb96 	bl	80127ec <unlock_fs>
 80150c0:	2301      	movs	r3, #1
 80150c2:	e055      	b.n	8015170 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	7d1b      	ldrb	r3, [r3, #20]
 80150c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80150cc:	b2da      	uxtb	r2, r3
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80150d2:	f7fa ffe1 	bl	8010098 <get_fattime>
 80150d6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80150d8:	68ba      	ldr	r2, [r7, #8]
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80150de:	4619      	mov	r1, r3
 80150e0:	4610      	mov	r0, r2
 80150e2:	f7fd fd4f 	bl	8012b84 <move_window>
 80150e6:	4603      	mov	r3, r0
 80150e8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80150ea:	7dfb      	ldrb	r3, [r7, #23]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d138      	bne.n	8015162 <f_sync+0xfc>
					dir = fp->dir_ptr;
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80150f4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	330b      	adds	r3, #11
 80150fa:	781a      	ldrb	r2, [r3, #0]
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	330b      	adds	r3, #11
 8015100:	f042 0220 	orr.w	r2, r2, #32
 8015104:	b2d2      	uxtb	r2, r2
 8015106:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	6818      	ldr	r0, [r3, #0]
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	689b      	ldr	r3, [r3, #8]
 8015110:	461a      	mov	r2, r3
 8015112:	68f9      	ldr	r1, [r7, #12]
 8015114:	f7fe fa59 	bl	80135ca <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	f103 021c 	add.w	r2, r3, #28
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	68db      	ldr	r3, [r3, #12]
 8015122:	4619      	mov	r1, r3
 8015124:	4610      	mov	r0, r2
 8015126:	f7fd faa1 	bl	801266c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	3316      	adds	r3, #22
 801512e:	6939      	ldr	r1, [r7, #16]
 8015130:	4618      	mov	r0, r3
 8015132:	f7fd fa9b 	bl	801266c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8015136:	68fb      	ldr	r3, [r7, #12]
 8015138:	3312      	adds	r3, #18
 801513a:	2100      	movs	r1, #0
 801513c:	4618      	mov	r0, r3
 801513e:	f7fd fa7a 	bl	8012636 <st_word>
					fs->wflag = 1;
 8015142:	68bb      	ldr	r3, [r7, #8]
 8015144:	2201      	movs	r2, #1
 8015146:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8015148:	68bb      	ldr	r3, [r7, #8]
 801514a:	4618      	mov	r0, r3
 801514c:	f7fd fd48 	bl	8012be0 <sync_fs>
 8015150:	4603      	mov	r3, r0
 8015152:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	7d1b      	ldrb	r3, [r3, #20]
 8015158:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801515c:	b2da      	uxtb	r2, r3
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8015162:	68bb      	ldr	r3, [r7, #8]
 8015164:	7dfa      	ldrb	r2, [r7, #23]
 8015166:	4611      	mov	r1, r2
 8015168:	4618      	mov	r0, r3
 801516a:	f7fd fb3f 	bl	80127ec <unlock_fs>
 801516e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015170:	4618      	mov	r0, r3
 8015172:	3718      	adds	r7, #24
 8015174:	46bd      	mov	sp, r7
 8015176:	bd80      	pop	{r7, pc}

08015178 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8015178:	b580      	push	{r7, lr}
 801517a:	b084      	sub	sp, #16
 801517c:	af00      	add	r7, sp, #0
 801517e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8015180:	6878      	ldr	r0, [r7, #4]
 8015182:	f7ff ff70 	bl	8015066 <f_sync>
 8015186:	4603      	mov	r3, r0
 8015188:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801518a:	7bfb      	ldrb	r3, [r7, #15]
 801518c:	2b00      	cmp	r3, #0
 801518e:	d11d      	bne.n	80151cc <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	f107 0208 	add.w	r2, r7, #8
 8015196:	4611      	mov	r1, r2
 8015198:	4618      	mov	r0, r3
 801519a:	f7ff fa8f 	bl	80146bc <validate>
 801519e:	4603      	mov	r3, r0
 80151a0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80151a2:	7bfb      	ldrb	r3, [r7, #15]
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d111      	bne.n	80151cc <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	691b      	ldr	r3, [r3, #16]
 80151ac:	4618      	mov	r0, r3
 80151ae:	f7fd fc45 	bl	8012a3c <dec_lock>
 80151b2:	4603      	mov	r3, r0
 80151b4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80151b6:	7bfb      	ldrb	r3, [r7, #15]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d102      	bne.n	80151c2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	2200      	movs	r2, #0
 80151c0:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80151c2:	68bb      	ldr	r3, [r7, #8]
 80151c4:	2100      	movs	r1, #0
 80151c6:	4618      	mov	r0, r3
 80151c8:	f7fd fb10 	bl	80127ec <unlock_fs>
#endif
		}
	}
	return res;
 80151cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80151ce:	4618      	mov	r0, r3
 80151d0:	3710      	adds	r7, #16
 80151d2:	46bd      	mov	sp, r7
 80151d4:	bd80      	pop	{r7, pc}

080151d6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80151d6:	b580      	push	{r7, lr}
 80151d8:	b090      	sub	sp, #64	@ 0x40
 80151da:	af00      	add	r7, sp, #0
 80151dc:	6078      	str	r0, [r7, #4]
 80151de:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	f107 0208 	add.w	r2, r7, #8
 80151e6:	4611      	mov	r1, r2
 80151e8:	4618      	mov	r0, r3
 80151ea:	f7ff fa67 	bl	80146bc <validate>
 80151ee:	4603      	mov	r3, r0
 80151f0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80151f4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d103      	bne.n	8015204 <f_lseek+0x2e>
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	7d5b      	ldrb	r3, [r3, #21]
 8015200:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8015204:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015208:	2b00      	cmp	r3, #0
 801520a:	d009      	beq.n	8015220 <f_lseek+0x4a>
 801520c:	68bb      	ldr	r3, [r7, #8]
 801520e:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8015212:	4611      	mov	r1, r2
 8015214:	4618      	mov	r0, r3
 8015216:	f7fd fae9 	bl	80127ec <unlock_fs>
 801521a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801521e:	e229      	b.n	8015674 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015224:	2b00      	cmp	r3, #0
 8015226:	f000 80ea 	beq.w	80153fe <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801522a:	683b      	ldr	r3, [r7, #0]
 801522c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015230:	d164      	bne.n	80152fc <f_lseek+0x126>
			tbl = fp->cltbl;
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015236:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8015238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801523a:	1d1a      	adds	r2, r3, #4
 801523c:	627a      	str	r2, [r7, #36]	@ 0x24
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	617b      	str	r3, [r7, #20]
 8015242:	2302      	movs	r3, #2
 8015244:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	689b      	ldr	r3, [r3, #8]
 801524a:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 801524c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801524e:	2b00      	cmp	r3, #0
 8015250:	d044      	beq.n	80152dc <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8015252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015254:	613b      	str	r3, [r7, #16]
 8015256:	2300      	movs	r3, #0
 8015258:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801525a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801525c:	3302      	adds	r3, #2
 801525e:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8015260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015262:	60fb      	str	r3, [r7, #12]
 8015264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015266:	3301      	adds	r3, #1
 8015268:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801526e:	4618      	mov	r0, r3
 8015270:	f7fd fd43 	bl	8012cfa <get_fat>
 8015274:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8015276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015278:	2b01      	cmp	r3, #1
 801527a:	d809      	bhi.n	8015290 <f_lseek+0xba>
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	2202      	movs	r2, #2
 8015280:	755a      	strb	r2, [r3, #21]
 8015282:	68bb      	ldr	r3, [r7, #8]
 8015284:	2102      	movs	r1, #2
 8015286:	4618      	mov	r0, r3
 8015288:	f7fd fab0 	bl	80127ec <unlock_fs>
 801528c:	2302      	movs	r3, #2
 801528e:	e1f1      	b.n	8015674 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015296:	d109      	bne.n	80152ac <f_lseek+0xd6>
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	2201      	movs	r2, #1
 801529c:	755a      	strb	r2, [r3, #21]
 801529e:	68bb      	ldr	r3, [r7, #8]
 80152a0:	2101      	movs	r1, #1
 80152a2:	4618      	mov	r0, r3
 80152a4:	f7fd faa2 	bl	80127ec <unlock_fs>
 80152a8:	2301      	movs	r3, #1
 80152aa:	e1e3      	b.n	8015674 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	3301      	adds	r3, #1
 80152b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80152b2:	429a      	cmp	r2, r3
 80152b4:	d0d4      	beq.n	8015260 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80152b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80152b8:	697b      	ldr	r3, [r7, #20]
 80152ba:	429a      	cmp	r2, r3
 80152bc:	d809      	bhi.n	80152d2 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 80152be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152c0:	1d1a      	adds	r2, r3, #4
 80152c2:	627a      	str	r2, [r7, #36]	@ 0x24
 80152c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80152c6:	601a      	str	r2, [r3, #0]
 80152c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152ca:	1d1a      	adds	r2, r3, #4
 80152cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80152ce:	693a      	ldr	r2, [r7, #16]
 80152d0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80152d2:	68bb      	ldr	r3, [r7, #8]
 80152d4:	69db      	ldr	r3, [r3, #28]
 80152d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80152d8:	429a      	cmp	r2, r3
 80152da:	d3ba      	bcc.n	8015252 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80152e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80152e2:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80152e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80152e6:	697b      	ldr	r3, [r7, #20]
 80152e8:	429a      	cmp	r2, r3
 80152ea:	d803      	bhi.n	80152f4 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 80152ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152ee:	2200      	movs	r2, #0
 80152f0:	601a      	str	r2, [r3, #0]
 80152f2:	e1b6      	b.n	8015662 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80152f4:	2311      	movs	r3, #17
 80152f6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80152fa:	e1b2      	b.n	8015662 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	68db      	ldr	r3, [r3, #12]
 8015300:	683a      	ldr	r2, [r7, #0]
 8015302:	429a      	cmp	r2, r3
 8015304:	d902      	bls.n	801530c <f_lseek+0x136>
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	68db      	ldr	r3, [r3, #12]
 801530a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	683a      	ldr	r2, [r7, #0]
 8015310:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8015312:	683b      	ldr	r3, [r7, #0]
 8015314:	2b00      	cmp	r3, #0
 8015316:	f000 81a4 	beq.w	8015662 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 801531a:	683b      	ldr	r3, [r7, #0]
 801531c:	3b01      	subs	r3, #1
 801531e:	4619      	mov	r1, r3
 8015320:	6878      	ldr	r0, [r7, #4]
 8015322:	f7fd ff78 	bl	8013216 <clmt_clust>
 8015326:	4602      	mov	r2, r0
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 801532c:	68ba      	ldr	r2, [r7, #8]
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	69db      	ldr	r3, [r3, #28]
 8015332:	4619      	mov	r1, r3
 8015334:	4610      	mov	r0, r2
 8015336:	f7fd fcc1 	bl	8012cbc <clust2sect>
 801533a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 801533c:	69bb      	ldr	r3, [r7, #24]
 801533e:	2b00      	cmp	r3, #0
 8015340:	d109      	bne.n	8015356 <f_lseek+0x180>
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	2202      	movs	r2, #2
 8015346:	755a      	strb	r2, [r3, #21]
 8015348:	68bb      	ldr	r3, [r7, #8]
 801534a:	2102      	movs	r1, #2
 801534c:	4618      	mov	r0, r3
 801534e:	f7fd fa4d 	bl	80127ec <unlock_fs>
 8015352:	2302      	movs	r3, #2
 8015354:	e18e      	b.n	8015674 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8015356:	683b      	ldr	r3, [r7, #0]
 8015358:	3b01      	subs	r3, #1
 801535a:	0a5b      	lsrs	r3, r3, #9
 801535c:	68ba      	ldr	r2, [r7, #8]
 801535e:	8952      	ldrh	r2, [r2, #10]
 8015360:	3a01      	subs	r2, #1
 8015362:	4013      	ands	r3, r2
 8015364:	69ba      	ldr	r2, [r7, #24]
 8015366:	4413      	add	r3, r2
 8015368:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	699b      	ldr	r3, [r3, #24]
 801536e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015372:	2b00      	cmp	r3, #0
 8015374:	f000 8175 	beq.w	8015662 <f_lseek+0x48c>
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	6a1b      	ldr	r3, [r3, #32]
 801537c:	69ba      	ldr	r2, [r7, #24]
 801537e:	429a      	cmp	r2, r3
 8015380:	f000 816f 	beq.w	8015662 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	7d1b      	ldrb	r3, [r3, #20]
 8015388:	b25b      	sxtb	r3, r3
 801538a:	2b00      	cmp	r3, #0
 801538c:	da1d      	bge.n	80153ca <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801538e:	68bb      	ldr	r3, [r7, #8]
 8015390:	7858      	ldrb	r0, [r3, #1]
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	6a1a      	ldr	r2, [r3, #32]
 801539c:	2301      	movs	r3, #1
 801539e:	f7fd f8d1 	bl	8012544 <disk_write>
 80153a2:	4603      	mov	r3, r0
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d009      	beq.n	80153bc <f_lseek+0x1e6>
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	2201      	movs	r2, #1
 80153ac:	755a      	strb	r2, [r3, #21]
 80153ae:	68bb      	ldr	r3, [r7, #8]
 80153b0:	2101      	movs	r1, #1
 80153b2:	4618      	mov	r0, r3
 80153b4:	f7fd fa1a 	bl	80127ec <unlock_fs>
 80153b8:	2301      	movs	r3, #1
 80153ba:	e15b      	b.n	8015674 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	7d1b      	ldrb	r3, [r3, #20]
 80153c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80153c4:	b2da      	uxtb	r2, r3
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80153ca:	68bb      	ldr	r3, [r7, #8]
 80153cc:	7858      	ldrb	r0, [r3, #1]
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80153d4:	2301      	movs	r3, #1
 80153d6:	69ba      	ldr	r2, [r7, #24]
 80153d8:	f7fd f894 	bl	8012504 <disk_read>
 80153dc:	4603      	mov	r3, r0
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d009      	beq.n	80153f6 <f_lseek+0x220>
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	2201      	movs	r2, #1
 80153e6:	755a      	strb	r2, [r3, #21]
 80153e8:	68bb      	ldr	r3, [r7, #8]
 80153ea:	2101      	movs	r1, #1
 80153ec:	4618      	mov	r0, r3
 80153ee:	f7fd f9fd 	bl	80127ec <unlock_fs>
 80153f2:	2301      	movs	r3, #1
 80153f4:	e13e      	b.n	8015674 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	69ba      	ldr	r2, [r7, #24]
 80153fa:	621a      	str	r2, [r3, #32]
 80153fc:	e131      	b.n	8015662 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	68db      	ldr	r3, [r3, #12]
 8015402:	683a      	ldr	r2, [r7, #0]
 8015404:	429a      	cmp	r2, r3
 8015406:	d908      	bls.n	801541a <f_lseek+0x244>
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	7d1b      	ldrb	r3, [r3, #20]
 801540c:	f003 0302 	and.w	r3, r3, #2
 8015410:	2b00      	cmp	r3, #0
 8015412:	d102      	bne.n	801541a <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	68db      	ldr	r3, [r3, #12]
 8015418:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	699b      	ldr	r3, [r3, #24]
 801541e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8015420:	2300      	movs	r3, #0
 8015422:	637b      	str	r3, [r7, #52]	@ 0x34
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015428:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801542a:	683b      	ldr	r3, [r7, #0]
 801542c:	2b00      	cmp	r3, #0
 801542e:	f000 80c0 	beq.w	80155b2 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8015432:	68bb      	ldr	r3, [r7, #8]
 8015434:	895b      	ldrh	r3, [r3, #10]
 8015436:	025b      	lsls	r3, r3, #9
 8015438:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801543a:	6a3b      	ldr	r3, [r7, #32]
 801543c:	2b00      	cmp	r3, #0
 801543e:	d01b      	beq.n	8015478 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8015440:	683b      	ldr	r3, [r7, #0]
 8015442:	1e5a      	subs	r2, r3, #1
 8015444:	69fb      	ldr	r3, [r7, #28]
 8015446:	fbb2 f2f3 	udiv	r2, r2, r3
 801544a:	6a3b      	ldr	r3, [r7, #32]
 801544c:	1e59      	subs	r1, r3, #1
 801544e:	69fb      	ldr	r3, [r7, #28]
 8015450:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8015454:	429a      	cmp	r2, r3
 8015456:	d30f      	bcc.n	8015478 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8015458:	6a3b      	ldr	r3, [r7, #32]
 801545a:	1e5a      	subs	r2, r3, #1
 801545c:	69fb      	ldr	r3, [r7, #28]
 801545e:	425b      	negs	r3, r3
 8015460:	401a      	ands	r2, r3
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	699b      	ldr	r3, [r3, #24]
 801546a:	683a      	ldr	r2, [r7, #0]
 801546c:	1ad3      	subs	r3, r2, r3
 801546e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	69db      	ldr	r3, [r3, #28]
 8015474:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015476:	e02c      	b.n	80154d2 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	689b      	ldr	r3, [r3, #8]
 801547c:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801547e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015480:	2b00      	cmp	r3, #0
 8015482:	d123      	bne.n	80154cc <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	2100      	movs	r1, #0
 8015488:	4618      	mov	r0, r3
 801548a:	f7fd fe2c 	bl	80130e6 <create_chain>
 801548e:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8015490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015492:	2b01      	cmp	r3, #1
 8015494:	d109      	bne.n	80154aa <f_lseek+0x2d4>
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	2202      	movs	r2, #2
 801549a:	755a      	strb	r2, [r3, #21]
 801549c:	68bb      	ldr	r3, [r7, #8]
 801549e:	2102      	movs	r1, #2
 80154a0:	4618      	mov	r0, r3
 80154a2:	f7fd f9a3 	bl	80127ec <unlock_fs>
 80154a6:	2302      	movs	r3, #2
 80154a8:	e0e4      	b.n	8015674 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80154aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80154ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80154b0:	d109      	bne.n	80154c6 <f_lseek+0x2f0>
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	2201      	movs	r2, #1
 80154b6:	755a      	strb	r2, [r3, #21]
 80154b8:	68bb      	ldr	r3, [r7, #8]
 80154ba:	2101      	movs	r1, #1
 80154bc:	4618      	mov	r0, r3
 80154be:	f7fd f995 	bl	80127ec <unlock_fs>
 80154c2:	2301      	movs	r3, #1
 80154c4:	e0d6      	b.n	8015674 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80154ca:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80154d0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80154d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d06c      	beq.n	80155b2 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 80154d8:	e044      	b.n	8015564 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 80154da:	683a      	ldr	r2, [r7, #0]
 80154dc:	69fb      	ldr	r3, [r7, #28]
 80154de:	1ad3      	subs	r3, r2, r3
 80154e0:	603b      	str	r3, [r7, #0]
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	699a      	ldr	r2, [r3, #24]
 80154e6:	69fb      	ldr	r3, [r7, #28]
 80154e8:	441a      	add	r2, r3
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	7d1b      	ldrb	r3, [r3, #20]
 80154f2:	f003 0302 	and.w	r3, r3, #2
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d00b      	beq.n	8015512 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80154fe:	4618      	mov	r0, r3
 8015500:	f7fd fdf1 	bl	80130e6 <create_chain>
 8015504:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8015506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015508:	2b00      	cmp	r3, #0
 801550a:	d108      	bne.n	801551e <f_lseek+0x348>
							ofs = 0; break;
 801550c:	2300      	movs	r3, #0
 801550e:	603b      	str	r3, [r7, #0]
 8015510:	e02c      	b.n	801556c <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015516:	4618      	mov	r0, r3
 8015518:	f7fd fbef 	bl	8012cfa <get_fat>
 801551c:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801551e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015524:	d109      	bne.n	801553a <f_lseek+0x364>
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	2201      	movs	r2, #1
 801552a:	755a      	strb	r2, [r3, #21]
 801552c:	68bb      	ldr	r3, [r7, #8]
 801552e:	2101      	movs	r1, #1
 8015530:	4618      	mov	r0, r3
 8015532:	f7fd f95b 	bl	80127ec <unlock_fs>
 8015536:	2301      	movs	r3, #1
 8015538:	e09c      	b.n	8015674 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801553a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801553c:	2b01      	cmp	r3, #1
 801553e:	d904      	bls.n	801554a <f_lseek+0x374>
 8015540:	68bb      	ldr	r3, [r7, #8]
 8015542:	69db      	ldr	r3, [r3, #28]
 8015544:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015546:	429a      	cmp	r2, r3
 8015548:	d309      	bcc.n	801555e <f_lseek+0x388>
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	2202      	movs	r2, #2
 801554e:	755a      	strb	r2, [r3, #21]
 8015550:	68bb      	ldr	r3, [r7, #8]
 8015552:	2102      	movs	r1, #2
 8015554:	4618      	mov	r0, r3
 8015556:	f7fd f949 	bl	80127ec <unlock_fs>
 801555a:	2302      	movs	r3, #2
 801555c:	e08a      	b.n	8015674 <f_lseek+0x49e>
					fp->clust = clst;
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015562:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8015564:	683a      	ldr	r2, [r7, #0]
 8015566:	69fb      	ldr	r3, [r7, #28]
 8015568:	429a      	cmp	r2, r3
 801556a:	d8b6      	bhi.n	80154da <f_lseek+0x304>
				}
				fp->fptr += ofs;
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	699a      	ldr	r2, [r3, #24]
 8015570:	683b      	ldr	r3, [r7, #0]
 8015572:	441a      	add	r2, r3
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8015578:	683b      	ldr	r3, [r7, #0]
 801557a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801557e:	2b00      	cmp	r3, #0
 8015580:	d017      	beq.n	80155b2 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8015582:	68bb      	ldr	r3, [r7, #8]
 8015584:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015586:	4618      	mov	r0, r3
 8015588:	f7fd fb98 	bl	8012cbc <clust2sect>
 801558c:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801558e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015590:	2b00      	cmp	r3, #0
 8015592:	d109      	bne.n	80155a8 <f_lseek+0x3d2>
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	2202      	movs	r2, #2
 8015598:	755a      	strb	r2, [r3, #21]
 801559a:	68bb      	ldr	r3, [r7, #8]
 801559c:	2102      	movs	r1, #2
 801559e:	4618      	mov	r0, r3
 80155a0:	f7fd f924 	bl	80127ec <unlock_fs>
 80155a4:	2302      	movs	r3, #2
 80155a6:	e065      	b.n	8015674 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 80155a8:	683b      	ldr	r3, [r7, #0]
 80155aa:	0a5b      	lsrs	r3, r3, #9
 80155ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80155ae:	4413      	add	r3, r2
 80155b0:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	699a      	ldr	r2, [r3, #24]
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	68db      	ldr	r3, [r3, #12]
 80155ba:	429a      	cmp	r2, r3
 80155bc:	d90a      	bls.n	80155d4 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	699a      	ldr	r2, [r3, #24]
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	7d1b      	ldrb	r3, [r3, #20]
 80155ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80155ce:	b2da      	uxtb	r2, r3
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	699b      	ldr	r3, [r3, #24]
 80155d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d040      	beq.n	8015662 <f_lseek+0x48c>
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	6a1b      	ldr	r3, [r3, #32]
 80155e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80155e6:	429a      	cmp	r2, r3
 80155e8:	d03b      	beq.n	8015662 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	7d1b      	ldrb	r3, [r3, #20]
 80155ee:	b25b      	sxtb	r3, r3
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	da1d      	bge.n	8015630 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80155f4:	68bb      	ldr	r3, [r7, #8]
 80155f6:	7858      	ldrb	r0, [r3, #1]
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	6a1a      	ldr	r2, [r3, #32]
 8015602:	2301      	movs	r3, #1
 8015604:	f7fc ff9e 	bl	8012544 <disk_write>
 8015608:	4603      	mov	r3, r0
 801560a:	2b00      	cmp	r3, #0
 801560c:	d009      	beq.n	8015622 <f_lseek+0x44c>
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	2201      	movs	r2, #1
 8015612:	755a      	strb	r2, [r3, #21]
 8015614:	68bb      	ldr	r3, [r7, #8]
 8015616:	2101      	movs	r1, #1
 8015618:	4618      	mov	r0, r3
 801561a:	f7fd f8e7 	bl	80127ec <unlock_fs>
 801561e:	2301      	movs	r3, #1
 8015620:	e028      	b.n	8015674 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	7d1b      	ldrb	r3, [r3, #20]
 8015626:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801562a:	b2da      	uxtb	r2, r3
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8015630:	68bb      	ldr	r3, [r7, #8]
 8015632:	7858      	ldrb	r0, [r3, #1]
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801563a:	2301      	movs	r3, #1
 801563c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801563e:	f7fc ff61 	bl	8012504 <disk_read>
 8015642:	4603      	mov	r3, r0
 8015644:	2b00      	cmp	r3, #0
 8015646:	d009      	beq.n	801565c <f_lseek+0x486>
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	2201      	movs	r2, #1
 801564c:	755a      	strb	r2, [r3, #21]
 801564e:	68bb      	ldr	r3, [r7, #8]
 8015650:	2101      	movs	r1, #1
 8015652:	4618      	mov	r0, r3
 8015654:	f7fd f8ca 	bl	80127ec <unlock_fs>
 8015658:	2301      	movs	r3, #1
 801565a:	e00b      	b.n	8015674 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015660:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8015662:	68bb      	ldr	r3, [r7, #8]
 8015664:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8015668:	4611      	mov	r1, r2
 801566a:	4618      	mov	r0, r3
 801566c:	f7fd f8be 	bl	80127ec <unlock_fs>
 8015670:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8015674:	4618      	mov	r0, r3
 8015676:	3740      	adds	r7, #64	@ 0x40
 8015678:	46bd      	mov	sp, r7
 801567a:	bd80      	pop	{r7, pc}

0801567c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801567c:	b480      	push	{r7}
 801567e:	b087      	sub	sp, #28
 8015680:	af00      	add	r7, sp, #0
 8015682:	60f8      	str	r0, [r7, #12]
 8015684:	60b9      	str	r1, [r7, #8]
 8015686:	4613      	mov	r3, r2
 8015688:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801568a:	2301      	movs	r3, #1
 801568c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801568e:	2300      	movs	r3, #0
 8015690:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015692:	4b1f      	ldr	r3, [pc, #124]	@ (8015710 <FATFS_LinkDriverEx+0x94>)
 8015694:	7a5b      	ldrb	r3, [r3, #9]
 8015696:	b2db      	uxtb	r3, r3
 8015698:	2b00      	cmp	r3, #0
 801569a:	d131      	bne.n	8015700 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801569c:	4b1c      	ldr	r3, [pc, #112]	@ (8015710 <FATFS_LinkDriverEx+0x94>)
 801569e:	7a5b      	ldrb	r3, [r3, #9]
 80156a0:	b2db      	uxtb	r3, r3
 80156a2:	461a      	mov	r2, r3
 80156a4:	4b1a      	ldr	r3, [pc, #104]	@ (8015710 <FATFS_LinkDriverEx+0x94>)
 80156a6:	2100      	movs	r1, #0
 80156a8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80156aa:	4b19      	ldr	r3, [pc, #100]	@ (8015710 <FATFS_LinkDriverEx+0x94>)
 80156ac:	7a5b      	ldrb	r3, [r3, #9]
 80156ae:	b2db      	uxtb	r3, r3
 80156b0:	4a17      	ldr	r2, [pc, #92]	@ (8015710 <FATFS_LinkDriverEx+0x94>)
 80156b2:	009b      	lsls	r3, r3, #2
 80156b4:	4413      	add	r3, r2
 80156b6:	68fa      	ldr	r2, [r7, #12]
 80156b8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80156ba:	4b15      	ldr	r3, [pc, #84]	@ (8015710 <FATFS_LinkDriverEx+0x94>)
 80156bc:	7a5b      	ldrb	r3, [r3, #9]
 80156be:	b2db      	uxtb	r3, r3
 80156c0:	461a      	mov	r2, r3
 80156c2:	4b13      	ldr	r3, [pc, #76]	@ (8015710 <FATFS_LinkDriverEx+0x94>)
 80156c4:	4413      	add	r3, r2
 80156c6:	79fa      	ldrb	r2, [r7, #7]
 80156c8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80156ca:	4b11      	ldr	r3, [pc, #68]	@ (8015710 <FATFS_LinkDriverEx+0x94>)
 80156cc:	7a5b      	ldrb	r3, [r3, #9]
 80156ce:	b2db      	uxtb	r3, r3
 80156d0:	1c5a      	adds	r2, r3, #1
 80156d2:	b2d1      	uxtb	r1, r2
 80156d4:	4a0e      	ldr	r2, [pc, #56]	@ (8015710 <FATFS_LinkDriverEx+0x94>)
 80156d6:	7251      	strb	r1, [r2, #9]
 80156d8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80156da:	7dbb      	ldrb	r3, [r7, #22]
 80156dc:	3330      	adds	r3, #48	@ 0x30
 80156de:	b2da      	uxtb	r2, r3
 80156e0:	68bb      	ldr	r3, [r7, #8]
 80156e2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80156e4:	68bb      	ldr	r3, [r7, #8]
 80156e6:	3301      	adds	r3, #1
 80156e8:	223a      	movs	r2, #58	@ 0x3a
 80156ea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80156ec:	68bb      	ldr	r3, [r7, #8]
 80156ee:	3302      	adds	r3, #2
 80156f0:	222f      	movs	r2, #47	@ 0x2f
 80156f2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80156f4:	68bb      	ldr	r3, [r7, #8]
 80156f6:	3303      	adds	r3, #3
 80156f8:	2200      	movs	r2, #0
 80156fa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80156fc:	2300      	movs	r3, #0
 80156fe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015700:	7dfb      	ldrb	r3, [r7, #23]
}
 8015702:	4618      	mov	r0, r3
 8015704:	371c      	adds	r7, #28
 8015706:	46bd      	mov	sp, r7
 8015708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801570c:	4770      	bx	lr
 801570e:	bf00      	nop
 8015710:	200036ac 	.word	0x200036ac

08015714 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015714:	b580      	push	{r7, lr}
 8015716:	b082      	sub	sp, #8
 8015718:	af00      	add	r7, sp, #0
 801571a:	6078      	str	r0, [r7, #4]
 801571c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801571e:	2200      	movs	r2, #0
 8015720:	6839      	ldr	r1, [r7, #0]
 8015722:	6878      	ldr	r0, [r7, #4]
 8015724:	f7ff ffaa 	bl	801567c <FATFS_LinkDriverEx>
 8015728:	4603      	mov	r3, r0
}
 801572a:	4618      	mov	r0, r3
 801572c:	3708      	adds	r7, #8
 801572e:	46bd      	mov	sp, r7
 8015730:	bd80      	pop	{r7, pc}
	...

08015734 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8015734:	b480      	push	{r7}
 8015736:	b085      	sub	sp, #20
 8015738:	af00      	add	r7, sp, #0
 801573a:	4603      	mov	r3, r0
 801573c:	6039      	str	r1, [r7, #0]
 801573e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8015740:	88fb      	ldrh	r3, [r7, #6]
 8015742:	2b7f      	cmp	r3, #127	@ 0x7f
 8015744:	d802      	bhi.n	801574c <ff_convert+0x18>
		c = chr;
 8015746:	88fb      	ldrh	r3, [r7, #6]
 8015748:	81fb      	strh	r3, [r7, #14]
 801574a:	e025      	b.n	8015798 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801574c:	683b      	ldr	r3, [r7, #0]
 801574e:	2b00      	cmp	r3, #0
 8015750:	d00b      	beq.n	801576a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8015752:	88fb      	ldrh	r3, [r7, #6]
 8015754:	2bff      	cmp	r3, #255	@ 0xff
 8015756:	d805      	bhi.n	8015764 <ff_convert+0x30>
 8015758:	88fb      	ldrh	r3, [r7, #6]
 801575a:	3b80      	subs	r3, #128	@ 0x80
 801575c:	4a12      	ldr	r2, [pc, #72]	@ (80157a8 <ff_convert+0x74>)
 801575e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015762:	e000      	b.n	8015766 <ff_convert+0x32>
 8015764:	2300      	movs	r3, #0
 8015766:	81fb      	strh	r3, [r7, #14]
 8015768:	e016      	b.n	8015798 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801576a:	2300      	movs	r3, #0
 801576c:	81fb      	strh	r3, [r7, #14]
 801576e:	e009      	b.n	8015784 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8015770:	89fb      	ldrh	r3, [r7, #14]
 8015772:	4a0d      	ldr	r2, [pc, #52]	@ (80157a8 <ff_convert+0x74>)
 8015774:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015778:	88fa      	ldrh	r2, [r7, #6]
 801577a:	429a      	cmp	r2, r3
 801577c:	d006      	beq.n	801578c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801577e:	89fb      	ldrh	r3, [r7, #14]
 8015780:	3301      	adds	r3, #1
 8015782:	81fb      	strh	r3, [r7, #14]
 8015784:	89fb      	ldrh	r3, [r7, #14]
 8015786:	2b7f      	cmp	r3, #127	@ 0x7f
 8015788:	d9f2      	bls.n	8015770 <ff_convert+0x3c>
 801578a:	e000      	b.n	801578e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801578c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801578e:	89fb      	ldrh	r3, [r7, #14]
 8015790:	3380      	adds	r3, #128	@ 0x80
 8015792:	b29b      	uxth	r3, r3
 8015794:	b2db      	uxtb	r3, r3
 8015796:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8015798:	89fb      	ldrh	r3, [r7, #14]
}
 801579a:	4618      	mov	r0, r3
 801579c:	3714      	adds	r7, #20
 801579e:	46bd      	mov	sp, r7
 80157a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a4:	4770      	bx	lr
 80157a6:	bf00      	nop
 80157a8:	0801f364 	.word	0x0801f364

080157ac <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80157ac:	b480      	push	{r7}
 80157ae:	b087      	sub	sp, #28
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	4603      	mov	r3, r0
 80157b4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80157b6:	88fb      	ldrh	r3, [r7, #6]
 80157b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80157bc:	d201      	bcs.n	80157c2 <ff_wtoupper+0x16>
 80157be:	4b3e      	ldr	r3, [pc, #248]	@ (80158b8 <ff_wtoupper+0x10c>)
 80157c0:	e000      	b.n	80157c4 <ff_wtoupper+0x18>
 80157c2:	4b3e      	ldr	r3, [pc, #248]	@ (80158bc <ff_wtoupper+0x110>)
 80157c4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80157c6:	697b      	ldr	r3, [r7, #20]
 80157c8:	1c9a      	adds	r2, r3, #2
 80157ca:	617a      	str	r2, [r7, #20]
 80157cc:	881b      	ldrh	r3, [r3, #0]
 80157ce:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80157d0:	8a7b      	ldrh	r3, [r7, #18]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d068      	beq.n	80158a8 <ff_wtoupper+0xfc>
 80157d6:	88fa      	ldrh	r2, [r7, #6]
 80157d8:	8a7b      	ldrh	r3, [r7, #18]
 80157da:	429a      	cmp	r2, r3
 80157dc:	d364      	bcc.n	80158a8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80157de:	697b      	ldr	r3, [r7, #20]
 80157e0:	1c9a      	adds	r2, r3, #2
 80157e2:	617a      	str	r2, [r7, #20]
 80157e4:	881b      	ldrh	r3, [r3, #0]
 80157e6:	823b      	strh	r3, [r7, #16]
 80157e8:	8a3b      	ldrh	r3, [r7, #16]
 80157ea:	0a1b      	lsrs	r3, r3, #8
 80157ec:	81fb      	strh	r3, [r7, #14]
 80157ee:	8a3b      	ldrh	r3, [r7, #16]
 80157f0:	b2db      	uxtb	r3, r3
 80157f2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80157f4:	88fa      	ldrh	r2, [r7, #6]
 80157f6:	8a79      	ldrh	r1, [r7, #18]
 80157f8:	8a3b      	ldrh	r3, [r7, #16]
 80157fa:	440b      	add	r3, r1
 80157fc:	429a      	cmp	r2, r3
 80157fe:	da49      	bge.n	8015894 <ff_wtoupper+0xe8>
			switch (cmd) {
 8015800:	89fb      	ldrh	r3, [r7, #14]
 8015802:	2b08      	cmp	r3, #8
 8015804:	d84f      	bhi.n	80158a6 <ff_wtoupper+0xfa>
 8015806:	a201      	add	r2, pc, #4	@ (adr r2, 801580c <ff_wtoupper+0x60>)
 8015808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801580c:	08015831 	.word	0x08015831
 8015810:	08015843 	.word	0x08015843
 8015814:	08015859 	.word	0x08015859
 8015818:	08015861 	.word	0x08015861
 801581c:	08015869 	.word	0x08015869
 8015820:	08015871 	.word	0x08015871
 8015824:	08015879 	.word	0x08015879
 8015828:	08015881 	.word	0x08015881
 801582c:	08015889 	.word	0x08015889
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8015830:	88fa      	ldrh	r2, [r7, #6]
 8015832:	8a7b      	ldrh	r3, [r7, #18]
 8015834:	1ad3      	subs	r3, r2, r3
 8015836:	005b      	lsls	r3, r3, #1
 8015838:	697a      	ldr	r2, [r7, #20]
 801583a:	4413      	add	r3, r2
 801583c:	881b      	ldrh	r3, [r3, #0]
 801583e:	80fb      	strh	r3, [r7, #6]
 8015840:	e027      	b.n	8015892 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8015842:	88fa      	ldrh	r2, [r7, #6]
 8015844:	8a7b      	ldrh	r3, [r7, #18]
 8015846:	1ad3      	subs	r3, r2, r3
 8015848:	b29b      	uxth	r3, r3
 801584a:	f003 0301 	and.w	r3, r3, #1
 801584e:	b29b      	uxth	r3, r3
 8015850:	88fa      	ldrh	r2, [r7, #6]
 8015852:	1ad3      	subs	r3, r2, r3
 8015854:	80fb      	strh	r3, [r7, #6]
 8015856:	e01c      	b.n	8015892 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8015858:	88fb      	ldrh	r3, [r7, #6]
 801585a:	3b10      	subs	r3, #16
 801585c:	80fb      	strh	r3, [r7, #6]
 801585e:	e018      	b.n	8015892 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8015860:	88fb      	ldrh	r3, [r7, #6]
 8015862:	3b20      	subs	r3, #32
 8015864:	80fb      	strh	r3, [r7, #6]
 8015866:	e014      	b.n	8015892 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8015868:	88fb      	ldrh	r3, [r7, #6]
 801586a:	3b30      	subs	r3, #48	@ 0x30
 801586c:	80fb      	strh	r3, [r7, #6]
 801586e:	e010      	b.n	8015892 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8015870:	88fb      	ldrh	r3, [r7, #6]
 8015872:	3b1a      	subs	r3, #26
 8015874:	80fb      	strh	r3, [r7, #6]
 8015876:	e00c      	b.n	8015892 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8015878:	88fb      	ldrh	r3, [r7, #6]
 801587a:	3308      	adds	r3, #8
 801587c:	80fb      	strh	r3, [r7, #6]
 801587e:	e008      	b.n	8015892 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8015880:	88fb      	ldrh	r3, [r7, #6]
 8015882:	3b50      	subs	r3, #80	@ 0x50
 8015884:	80fb      	strh	r3, [r7, #6]
 8015886:	e004      	b.n	8015892 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8015888:	88fb      	ldrh	r3, [r7, #6]
 801588a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801588e:	80fb      	strh	r3, [r7, #6]
 8015890:	bf00      	nop
			}
			break;
 8015892:	e008      	b.n	80158a6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8015894:	89fb      	ldrh	r3, [r7, #14]
 8015896:	2b00      	cmp	r3, #0
 8015898:	d195      	bne.n	80157c6 <ff_wtoupper+0x1a>
 801589a:	8a3b      	ldrh	r3, [r7, #16]
 801589c:	005b      	lsls	r3, r3, #1
 801589e:	697a      	ldr	r2, [r7, #20]
 80158a0:	4413      	add	r3, r2
 80158a2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80158a4:	e78f      	b.n	80157c6 <ff_wtoupper+0x1a>
			break;
 80158a6:	bf00      	nop
	}

	return chr;
 80158a8:	88fb      	ldrh	r3, [r7, #6]
}
 80158aa:	4618      	mov	r0, r3
 80158ac:	371c      	adds	r7, #28
 80158ae:	46bd      	mov	sp, r7
 80158b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158b4:	4770      	bx	lr
 80158b6:	bf00      	nop
 80158b8:	0801f464 	.word	0x0801f464
 80158bc:	0801f658 	.word	0x0801f658

080158c0 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80158c0:	b580      	push	{r7, lr}
 80158c2:	b084      	sub	sp, #16
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	4603      	mov	r3, r0
 80158c8:	6039      	str	r1, [r7, #0]
 80158ca:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 80158cc:	2200      	movs	r2, #0
 80158ce:	2101      	movs	r1, #1
 80158d0:	2001      	movs	r0, #1
 80158d2:	f000 fabd 	bl	8015e50 <osSemaphoreNew>
 80158d6:	4602      	mov	r2, r0
 80158d8:	683b      	ldr	r3, [r7, #0]
 80158da:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 80158dc:	683b      	ldr	r3, [r7, #0]
 80158de:	681b      	ldr	r3, [r3, #0]
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	bf14      	ite	ne
 80158e4:	2301      	movne	r3, #1
 80158e6:	2300      	moveq	r3, #0
 80158e8:	b2db      	uxtb	r3, r3
 80158ea:	60fb      	str	r3, [r7, #12]

    return ret;
 80158ec:	68fb      	ldr	r3, [r7, #12]
}
 80158ee:	4618      	mov	r0, r3
 80158f0:	3710      	adds	r7, #16
 80158f2:	46bd      	mov	sp, r7
 80158f4:	bd80      	pop	{r7, pc}

080158f6 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80158f6:	b580      	push	{r7, lr}
 80158f8:	b082      	sub	sp, #8
 80158fa:	af00      	add	r7, sp, #0
 80158fc:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80158fe:	6878      	ldr	r0, [r7, #4]
 8015900:	f000 fbc6 	bl	8016090 <osSemaphoreDelete>
#endif
    return 1;
 8015904:	2301      	movs	r3, #1
}
 8015906:	4618      	mov	r0, r3
 8015908:	3708      	adds	r7, #8
 801590a:	46bd      	mov	sp, r7
 801590c:	bd80      	pop	{r7, pc}

0801590e <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801590e:	b580      	push	{r7, lr}
 8015910:	b084      	sub	sp, #16
 8015912:	af00      	add	r7, sp, #0
 8015914:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8015916:	2300      	movs	r3, #0
 8015918:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 801591a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801591e:	6878      	ldr	r0, [r7, #4]
 8015920:	f000 fb20 	bl	8015f64 <osSemaphoreAcquire>
 8015924:	4603      	mov	r3, r0
 8015926:	2b00      	cmp	r3, #0
 8015928:	d101      	bne.n	801592e <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 801592a:	2301      	movs	r3, #1
 801592c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801592e:	68fb      	ldr	r3, [r7, #12]
}
 8015930:	4618      	mov	r0, r3
 8015932:	3710      	adds	r7, #16
 8015934:	46bd      	mov	sp, r7
 8015936:	bd80      	pop	{r7, pc}

08015938 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8015938:	b580      	push	{r7, lr}
 801593a:	b082      	sub	sp, #8
 801593c:	af00      	add	r7, sp, #0
 801593e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8015940:	6878      	ldr	r0, [r7, #4]
 8015942:	f000 fb61 	bl	8016008 <osSemaphoreRelease>
#endif
}
 8015946:	bf00      	nop
 8015948:	3708      	adds	r7, #8
 801594a:	46bd      	mov	sp, r7
 801594c:	bd80      	pop	{r7, pc}
	...

08015950 <__NVIC_SetPriority>:
{
 8015950:	b480      	push	{r7}
 8015952:	b083      	sub	sp, #12
 8015954:	af00      	add	r7, sp, #0
 8015956:	4603      	mov	r3, r0
 8015958:	6039      	str	r1, [r7, #0]
 801595a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801595c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015960:	2b00      	cmp	r3, #0
 8015962:	db0a      	blt.n	801597a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015964:	683b      	ldr	r3, [r7, #0]
 8015966:	b2da      	uxtb	r2, r3
 8015968:	490c      	ldr	r1, [pc, #48]	@ (801599c <__NVIC_SetPriority+0x4c>)
 801596a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801596e:	0112      	lsls	r2, r2, #4
 8015970:	b2d2      	uxtb	r2, r2
 8015972:	440b      	add	r3, r1
 8015974:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8015978:	e00a      	b.n	8015990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801597a:	683b      	ldr	r3, [r7, #0]
 801597c:	b2da      	uxtb	r2, r3
 801597e:	4908      	ldr	r1, [pc, #32]	@ (80159a0 <__NVIC_SetPriority+0x50>)
 8015980:	79fb      	ldrb	r3, [r7, #7]
 8015982:	f003 030f 	and.w	r3, r3, #15
 8015986:	3b04      	subs	r3, #4
 8015988:	0112      	lsls	r2, r2, #4
 801598a:	b2d2      	uxtb	r2, r2
 801598c:	440b      	add	r3, r1
 801598e:	761a      	strb	r2, [r3, #24]
}
 8015990:	bf00      	nop
 8015992:	370c      	adds	r7, #12
 8015994:	46bd      	mov	sp, r7
 8015996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801599a:	4770      	bx	lr
 801599c:	e000e100 	.word	0xe000e100
 80159a0:	e000ed00 	.word	0xe000ed00

080159a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80159a4:	b580      	push	{r7, lr}
 80159a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80159a8:	4b05      	ldr	r3, [pc, #20]	@ (80159c0 <SysTick_Handler+0x1c>)
 80159aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80159ac:	f002 fd0c 	bl	80183c8 <xTaskGetSchedulerState>
 80159b0:	4603      	mov	r3, r0
 80159b2:	2b01      	cmp	r3, #1
 80159b4:	d001      	beq.n	80159ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80159b6:	f003 fc07 	bl	80191c8 <xPortSysTickHandler>
  }
}
 80159ba:	bf00      	nop
 80159bc:	bd80      	pop	{r7, pc}
 80159be:	bf00      	nop
 80159c0:	e000e010 	.word	0xe000e010

080159c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80159c4:	b580      	push	{r7, lr}
 80159c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80159c8:	2100      	movs	r1, #0
 80159ca:	f06f 0004 	mvn.w	r0, #4
 80159ce:	f7ff ffbf 	bl	8015950 <__NVIC_SetPriority>
#endif
}
 80159d2:	bf00      	nop
 80159d4:	bd80      	pop	{r7, pc}
	...

080159d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80159d8:	b480      	push	{r7}
 80159da:	b083      	sub	sp, #12
 80159dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80159de:	f3ef 8305 	mrs	r3, IPSR
 80159e2:	603b      	str	r3, [r7, #0]
  return(result);
 80159e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d003      	beq.n	80159f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80159ea:	f06f 0305 	mvn.w	r3, #5
 80159ee:	607b      	str	r3, [r7, #4]
 80159f0:	e00c      	b.n	8015a0c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80159f2:	4b0a      	ldr	r3, [pc, #40]	@ (8015a1c <osKernelInitialize+0x44>)
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d105      	bne.n	8015a06 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80159fa:	4b08      	ldr	r3, [pc, #32]	@ (8015a1c <osKernelInitialize+0x44>)
 80159fc:	2201      	movs	r2, #1
 80159fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8015a00:	2300      	movs	r3, #0
 8015a02:	607b      	str	r3, [r7, #4]
 8015a04:	e002      	b.n	8015a0c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8015a06:	f04f 33ff 	mov.w	r3, #4294967295
 8015a0a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015a0c:	687b      	ldr	r3, [r7, #4]
}
 8015a0e:	4618      	mov	r0, r3
 8015a10:	370c      	adds	r7, #12
 8015a12:	46bd      	mov	sp, r7
 8015a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a18:	4770      	bx	lr
 8015a1a:	bf00      	nop
 8015a1c:	200036b8 	.word	0x200036b8

08015a20 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8015a20:	b580      	push	{r7, lr}
 8015a22:	b082      	sub	sp, #8
 8015a24:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8015a26:	f002 fccf 	bl	80183c8 <xTaskGetSchedulerState>
 8015a2a:	4603      	mov	r3, r0
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d004      	beq.n	8015a3a <osKernelGetState+0x1a>
 8015a30:	2b02      	cmp	r3, #2
 8015a32:	d105      	bne.n	8015a40 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8015a34:	2302      	movs	r3, #2
 8015a36:	607b      	str	r3, [r7, #4]
      break;
 8015a38:	e00c      	b.n	8015a54 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8015a3a:	2303      	movs	r3, #3
 8015a3c:	607b      	str	r3, [r7, #4]
      break;
 8015a3e:	e009      	b.n	8015a54 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8015a40:	4b07      	ldr	r3, [pc, #28]	@ (8015a60 <osKernelGetState+0x40>)
 8015a42:	681b      	ldr	r3, [r3, #0]
 8015a44:	2b01      	cmp	r3, #1
 8015a46:	d102      	bne.n	8015a4e <osKernelGetState+0x2e>
        state = osKernelReady;
 8015a48:	2301      	movs	r3, #1
 8015a4a:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8015a4c:	e001      	b.n	8015a52 <osKernelGetState+0x32>
        state = osKernelInactive;
 8015a4e:	2300      	movs	r3, #0
 8015a50:	607b      	str	r3, [r7, #4]
      break;
 8015a52:	bf00      	nop
  }

  return (state);
 8015a54:	687b      	ldr	r3, [r7, #4]
}
 8015a56:	4618      	mov	r0, r3
 8015a58:	3708      	adds	r7, #8
 8015a5a:	46bd      	mov	sp, r7
 8015a5c:	bd80      	pop	{r7, pc}
 8015a5e:	bf00      	nop
 8015a60:	200036b8 	.word	0x200036b8

08015a64 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8015a64:	b580      	push	{r7, lr}
 8015a66:	b082      	sub	sp, #8
 8015a68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015a6a:	f3ef 8305 	mrs	r3, IPSR
 8015a6e:	603b      	str	r3, [r7, #0]
  return(result);
 8015a70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d003      	beq.n	8015a7e <osKernelStart+0x1a>
    stat = osErrorISR;
 8015a76:	f06f 0305 	mvn.w	r3, #5
 8015a7a:	607b      	str	r3, [r7, #4]
 8015a7c:	e010      	b.n	8015aa0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8015a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8015aac <osKernelStart+0x48>)
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	2b01      	cmp	r3, #1
 8015a84:	d109      	bne.n	8015a9a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8015a86:	f7ff ff9d 	bl	80159c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8015a8a:	4b08      	ldr	r3, [pc, #32]	@ (8015aac <osKernelStart+0x48>)
 8015a8c:	2202      	movs	r2, #2
 8015a8e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8015a90:	f002 f814 	bl	8017abc <vTaskStartScheduler>
      stat = osOK;
 8015a94:	2300      	movs	r3, #0
 8015a96:	607b      	str	r3, [r7, #4]
 8015a98:	e002      	b.n	8015aa0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8015a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8015a9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015aa0:	687b      	ldr	r3, [r7, #4]
}
 8015aa2:	4618      	mov	r0, r3
 8015aa4:	3708      	adds	r7, #8
 8015aa6:	46bd      	mov	sp, r7
 8015aa8:	bd80      	pop	{r7, pc}
 8015aaa:	bf00      	nop
 8015aac:	200036b8 	.word	0x200036b8

08015ab0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8015ab0:	b580      	push	{r7, lr}
 8015ab2:	b082      	sub	sp, #8
 8015ab4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015ab6:	f3ef 8305 	mrs	r3, IPSR
 8015aba:	603b      	str	r3, [r7, #0]
  return(result);
 8015abc:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d003      	beq.n	8015aca <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8015ac2:	f002 f927 	bl	8017d14 <xTaskGetTickCountFromISR>
 8015ac6:	6078      	str	r0, [r7, #4]
 8015ac8:	e002      	b.n	8015ad0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8015aca:	f002 f913 	bl	8017cf4 <xTaskGetTickCount>
 8015ace:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8015ad0:	687b      	ldr	r3, [r7, #4]
}
 8015ad2:	4618      	mov	r0, r3
 8015ad4:	3708      	adds	r7, #8
 8015ad6:	46bd      	mov	sp, r7
 8015ad8:	bd80      	pop	{r7, pc}

08015ada <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8015ada:	b580      	push	{r7, lr}
 8015adc:	b08e      	sub	sp, #56	@ 0x38
 8015ade:	af04      	add	r7, sp, #16
 8015ae0:	60f8      	str	r0, [r7, #12]
 8015ae2:	60b9      	str	r1, [r7, #8]
 8015ae4:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8015ae6:	2300      	movs	r3, #0
 8015ae8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015aea:	f3ef 8305 	mrs	r3, IPSR
 8015aee:	617b      	str	r3, [r7, #20]
  return(result);
 8015af0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d17e      	bne.n	8015bf4 <osThreadNew+0x11a>
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d07b      	beq.n	8015bf4 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8015afc:	2380      	movs	r3, #128	@ 0x80
 8015afe:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8015b00:	2318      	movs	r3, #24
 8015b02:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8015b04:	2300      	movs	r3, #0
 8015b06:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8015b08:	f04f 33ff 	mov.w	r3, #4294967295
 8015b0c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d045      	beq.n	8015ba0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	681b      	ldr	r3, [r3, #0]
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d002      	beq.n	8015b22 <osThreadNew+0x48>
        name = attr->name;
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	681b      	ldr	r3, [r3, #0]
 8015b20:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	699b      	ldr	r3, [r3, #24]
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d002      	beq.n	8015b30 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	699b      	ldr	r3, [r3, #24]
 8015b2e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8015b30:	69fb      	ldr	r3, [r7, #28]
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d008      	beq.n	8015b48 <osThreadNew+0x6e>
 8015b36:	69fb      	ldr	r3, [r7, #28]
 8015b38:	2b38      	cmp	r3, #56	@ 0x38
 8015b3a:	d805      	bhi.n	8015b48 <osThreadNew+0x6e>
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	685b      	ldr	r3, [r3, #4]
 8015b40:	f003 0301 	and.w	r3, r3, #1
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d001      	beq.n	8015b4c <osThreadNew+0x72>
        return (NULL);
 8015b48:	2300      	movs	r3, #0
 8015b4a:	e054      	b.n	8015bf6 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	695b      	ldr	r3, [r3, #20]
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d003      	beq.n	8015b5c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	695b      	ldr	r3, [r3, #20]
 8015b58:	089b      	lsrs	r3, r3, #2
 8015b5a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	689b      	ldr	r3, [r3, #8]
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d00e      	beq.n	8015b82 <osThreadNew+0xa8>
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	68db      	ldr	r3, [r3, #12]
 8015b68:	2ba7      	cmp	r3, #167	@ 0xa7
 8015b6a:	d90a      	bls.n	8015b82 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d006      	beq.n	8015b82 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	695b      	ldr	r3, [r3, #20]
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d002      	beq.n	8015b82 <osThreadNew+0xa8>
        mem = 1;
 8015b7c:	2301      	movs	r3, #1
 8015b7e:	61bb      	str	r3, [r7, #24]
 8015b80:	e010      	b.n	8015ba4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	689b      	ldr	r3, [r3, #8]
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d10c      	bne.n	8015ba4 <osThreadNew+0xca>
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	68db      	ldr	r3, [r3, #12]
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d108      	bne.n	8015ba4 <osThreadNew+0xca>
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	691b      	ldr	r3, [r3, #16]
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d104      	bne.n	8015ba4 <osThreadNew+0xca>
          mem = 0;
 8015b9a:	2300      	movs	r3, #0
 8015b9c:	61bb      	str	r3, [r7, #24]
 8015b9e:	e001      	b.n	8015ba4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8015ba0:	2300      	movs	r3, #0
 8015ba2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8015ba4:	69bb      	ldr	r3, [r7, #24]
 8015ba6:	2b01      	cmp	r3, #1
 8015ba8:	d110      	bne.n	8015bcc <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8015bae:	687a      	ldr	r2, [r7, #4]
 8015bb0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015bb2:	9202      	str	r2, [sp, #8]
 8015bb4:	9301      	str	r3, [sp, #4]
 8015bb6:	69fb      	ldr	r3, [r7, #28]
 8015bb8:	9300      	str	r3, [sp, #0]
 8015bba:	68bb      	ldr	r3, [r7, #8]
 8015bbc:	6a3a      	ldr	r2, [r7, #32]
 8015bbe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015bc0:	68f8      	ldr	r0, [r7, #12]
 8015bc2:	f001 fd87 	bl	80176d4 <xTaskCreateStatic>
 8015bc6:	4603      	mov	r3, r0
 8015bc8:	613b      	str	r3, [r7, #16]
 8015bca:	e013      	b.n	8015bf4 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8015bcc:	69bb      	ldr	r3, [r7, #24]
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d110      	bne.n	8015bf4 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8015bd2:	6a3b      	ldr	r3, [r7, #32]
 8015bd4:	b29a      	uxth	r2, r3
 8015bd6:	f107 0310 	add.w	r3, r7, #16
 8015bda:	9301      	str	r3, [sp, #4]
 8015bdc:	69fb      	ldr	r3, [r7, #28]
 8015bde:	9300      	str	r3, [sp, #0]
 8015be0:	68bb      	ldr	r3, [r7, #8]
 8015be2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015be4:	68f8      	ldr	r0, [r7, #12]
 8015be6:	f001 fdd5 	bl	8017794 <xTaskCreate>
 8015bea:	4603      	mov	r3, r0
 8015bec:	2b01      	cmp	r3, #1
 8015bee:	d001      	beq.n	8015bf4 <osThreadNew+0x11a>
            hTask = NULL;
 8015bf0:	2300      	movs	r3, #0
 8015bf2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8015bf4:	693b      	ldr	r3, [r7, #16]
}
 8015bf6:	4618      	mov	r0, r3
 8015bf8:	3728      	adds	r7, #40	@ 0x28
 8015bfa:	46bd      	mov	sp, r7
 8015bfc:	bd80      	pop	{r7, pc}

08015bfe <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8015bfe:	b580      	push	{r7, lr}
 8015c00:	b084      	sub	sp, #16
 8015c02:	af00      	add	r7, sp, #0
 8015c04:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015c06:	f3ef 8305 	mrs	r3, IPSR
 8015c0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8015c0c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d003      	beq.n	8015c1a <osDelay+0x1c>
    stat = osErrorISR;
 8015c12:	f06f 0305 	mvn.w	r3, #5
 8015c16:	60fb      	str	r3, [r7, #12]
 8015c18:	e007      	b.n	8015c2a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8015c1a:	2300      	movs	r3, #0
 8015c1c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d002      	beq.n	8015c2a <osDelay+0x2c>
      vTaskDelay(ticks);
 8015c24:	6878      	ldr	r0, [r7, #4]
 8015c26:	f001 ff13 	bl	8017a50 <vTaskDelay>
    }
  }

  return (stat);
 8015c2a:	68fb      	ldr	r3, [r7, #12]
}
 8015c2c:	4618      	mov	r0, r3
 8015c2e:	3710      	adds	r7, #16
 8015c30:	46bd      	mov	sp, r7
 8015c32:	bd80      	pop	{r7, pc}

08015c34 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8015c34:	b580      	push	{r7, lr}
 8015c36:	b088      	sub	sp, #32
 8015c38:	af00      	add	r7, sp, #0
 8015c3a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8015c3c:	2300      	movs	r3, #0
 8015c3e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015c40:	f3ef 8305 	mrs	r3, IPSR
 8015c44:	60bb      	str	r3, [r7, #8]
  return(result);
 8015c46:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d174      	bne.n	8015d36 <osMutexNew+0x102>
    if (attr != NULL) {
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d003      	beq.n	8015c5a <osMutexNew+0x26>
      type = attr->attr_bits;
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	685b      	ldr	r3, [r3, #4]
 8015c56:	61bb      	str	r3, [r7, #24]
 8015c58:	e001      	b.n	8015c5e <osMutexNew+0x2a>
    } else {
      type = 0U;
 8015c5a:	2300      	movs	r3, #0
 8015c5c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8015c5e:	69bb      	ldr	r3, [r7, #24]
 8015c60:	f003 0301 	and.w	r3, r3, #1
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d002      	beq.n	8015c6e <osMutexNew+0x3a>
      rmtx = 1U;
 8015c68:	2301      	movs	r3, #1
 8015c6a:	617b      	str	r3, [r7, #20]
 8015c6c:	e001      	b.n	8015c72 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8015c6e:	2300      	movs	r3, #0
 8015c70:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8015c72:	69bb      	ldr	r3, [r7, #24]
 8015c74:	f003 0308 	and.w	r3, r3, #8
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d15c      	bne.n	8015d36 <osMutexNew+0x102>
      mem = -1;
 8015c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8015c80:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d015      	beq.n	8015cb4 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	689b      	ldr	r3, [r3, #8]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d006      	beq.n	8015c9e <osMutexNew+0x6a>
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	68db      	ldr	r3, [r3, #12]
 8015c94:	2b4f      	cmp	r3, #79	@ 0x4f
 8015c96:	d902      	bls.n	8015c9e <osMutexNew+0x6a>
          mem = 1;
 8015c98:	2301      	movs	r3, #1
 8015c9a:	613b      	str	r3, [r7, #16]
 8015c9c:	e00c      	b.n	8015cb8 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	689b      	ldr	r3, [r3, #8]
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d108      	bne.n	8015cb8 <osMutexNew+0x84>
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	68db      	ldr	r3, [r3, #12]
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d104      	bne.n	8015cb8 <osMutexNew+0x84>
            mem = 0;
 8015cae:	2300      	movs	r3, #0
 8015cb0:	613b      	str	r3, [r7, #16]
 8015cb2:	e001      	b.n	8015cb8 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8015cb4:	2300      	movs	r3, #0
 8015cb6:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8015cb8:	693b      	ldr	r3, [r7, #16]
 8015cba:	2b01      	cmp	r3, #1
 8015cbc:	d112      	bne.n	8015ce4 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8015cbe:	697b      	ldr	r3, [r7, #20]
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d007      	beq.n	8015cd4 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	689b      	ldr	r3, [r3, #8]
 8015cc8:	4619      	mov	r1, r3
 8015cca:	2004      	movs	r0, #4
 8015ccc:	f000 fd95 	bl	80167fa <xQueueCreateMutexStatic>
 8015cd0:	61f8      	str	r0, [r7, #28]
 8015cd2:	e016      	b.n	8015d02 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	689b      	ldr	r3, [r3, #8]
 8015cd8:	4619      	mov	r1, r3
 8015cda:	2001      	movs	r0, #1
 8015cdc:	f000 fd8d 	bl	80167fa <xQueueCreateMutexStatic>
 8015ce0:	61f8      	str	r0, [r7, #28]
 8015ce2:	e00e      	b.n	8015d02 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8015ce4:	693b      	ldr	r3, [r7, #16]
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d10b      	bne.n	8015d02 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8015cea:	697b      	ldr	r3, [r7, #20]
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d004      	beq.n	8015cfa <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8015cf0:	2004      	movs	r0, #4
 8015cf2:	f000 fd6a 	bl	80167ca <xQueueCreateMutex>
 8015cf6:	61f8      	str	r0, [r7, #28]
 8015cf8:	e003      	b.n	8015d02 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8015cfa:	2001      	movs	r0, #1
 8015cfc:	f000 fd65 	bl	80167ca <xQueueCreateMutex>
 8015d00:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8015d02:	69fb      	ldr	r3, [r7, #28]
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d00c      	beq.n	8015d22 <osMutexNew+0xee>
        if (attr != NULL) {
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d003      	beq.n	8015d16 <osMutexNew+0xe2>
          name = attr->name;
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	60fb      	str	r3, [r7, #12]
 8015d14:	e001      	b.n	8015d1a <osMutexNew+0xe6>
        } else {
          name = NULL;
 8015d16:	2300      	movs	r3, #0
 8015d18:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8015d1a:	68f9      	ldr	r1, [r7, #12]
 8015d1c:	69f8      	ldr	r0, [r7, #28]
 8015d1e:	f001 fc51 	bl	80175c4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8015d22:	69fb      	ldr	r3, [r7, #28]
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d006      	beq.n	8015d36 <osMutexNew+0x102>
 8015d28:	697b      	ldr	r3, [r7, #20]
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d003      	beq.n	8015d36 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8015d2e:	69fb      	ldr	r3, [r7, #28]
 8015d30:	f043 0301 	orr.w	r3, r3, #1
 8015d34:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8015d36:	69fb      	ldr	r3, [r7, #28]
}
 8015d38:	4618      	mov	r0, r3
 8015d3a:	3720      	adds	r7, #32
 8015d3c:	46bd      	mov	sp, r7
 8015d3e:	bd80      	pop	{r7, pc}

08015d40 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8015d40:	b580      	push	{r7, lr}
 8015d42:	b086      	sub	sp, #24
 8015d44:	af00      	add	r7, sp, #0
 8015d46:	6078      	str	r0, [r7, #4]
 8015d48:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	f023 0301 	bic.w	r3, r3, #1
 8015d50:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	f003 0301 	and.w	r3, r3, #1
 8015d58:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8015d5a:	2300      	movs	r3, #0
 8015d5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015d5e:	f3ef 8305 	mrs	r3, IPSR
 8015d62:	60bb      	str	r3, [r7, #8]
  return(result);
 8015d64:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d003      	beq.n	8015d72 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8015d6a:	f06f 0305 	mvn.w	r3, #5
 8015d6e:	617b      	str	r3, [r7, #20]
 8015d70:	e02c      	b.n	8015dcc <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8015d72:	693b      	ldr	r3, [r7, #16]
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d103      	bne.n	8015d80 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8015d78:	f06f 0303 	mvn.w	r3, #3
 8015d7c:	617b      	str	r3, [r7, #20]
 8015d7e:	e025      	b.n	8015dcc <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8015d80:	68fb      	ldr	r3, [r7, #12]
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d011      	beq.n	8015daa <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8015d86:	6839      	ldr	r1, [r7, #0]
 8015d88:	6938      	ldr	r0, [r7, #16]
 8015d8a:	f000 fd86 	bl	801689a <xQueueTakeMutexRecursive>
 8015d8e:	4603      	mov	r3, r0
 8015d90:	2b01      	cmp	r3, #1
 8015d92:	d01b      	beq.n	8015dcc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8015d94:	683b      	ldr	r3, [r7, #0]
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d003      	beq.n	8015da2 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8015d9a:	f06f 0301 	mvn.w	r3, #1
 8015d9e:	617b      	str	r3, [r7, #20]
 8015da0:	e014      	b.n	8015dcc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8015da2:	f06f 0302 	mvn.w	r3, #2
 8015da6:	617b      	str	r3, [r7, #20]
 8015da8:	e010      	b.n	8015dcc <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8015daa:	6839      	ldr	r1, [r7, #0]
 8015dac:	6938      	ldr	r0, [r7, #16]
 8015dae:	f001 f92b 	bl	8017008 <xQueueSemaphoreTake>
 8015db2:	4603      	mov	r3, r0
 8015db4:	2b01      	cmp	r3, #1
 8015db6:	d009      	beq.n	8015dcc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8015db8:	683b      	ldr	r3, [r7, #0]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d003      	beq.n	8015dc6 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8015dbe:	f06f 0301 	mvn.w	r3, #1
 8015dc2:	617b      	str	r3, [r7, #20]
 8015dc4:	e002      	b.n	8015dcc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8015dc6:	f06f 0302 	mvn.w	r3, #2
 8015dca:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8015dcc:	697b      	ldr	r3, [r7, #20]
}
 8015dce:	4618      	mov	r0, r3
 8015dd0:	3718      	adds	r7, #24
 8015dd2:	46bd      	mov	sp, r7
 8015dd4:	bd80      	pop	{r7, pc}

08015dd6 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8015dd6:	b580      	push	{r7, lr}
 8015dd8:	b086      	sub	sp, #24
 8015dda:	af00      	add	r7, sp, #0
 8015ddc:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	f023 0301 	bic.w	r3, r3, #1
 8015de4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	f003 0301 	and.w	r3, r3, #1
 8015dec:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8015dee:	2300      	movs	r3, #0
 8015df0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015df2:	f3ef 8305 	mrs	r3, IPSR
 8015df6:	60bb      	str	r3, [r7, #8]
  return(result);
 8015df8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	d003      	beq.n	8015e06 <osMutexRelease+0x30>
    stat = osErrorISR;
 8015dfe:	f06f 0305 	mvn.w	r3, #5
 8015e02:	617b      	str	r3, [r7, #20]
 8015e04:	e01f      	b.n	8015e46 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8015e06:	693b      	ldr	r3, [r7, #16]
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d103      	bne.n	8015e14 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8015e0c:	f06f 0303 	mvn.w	r3, #3
 8015e10:	617b      	str	r3, [r7, #20]
 8015e12:	e018      	b.n	8015e46 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d009      	beq.n	8015e2e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8015e1a:	6938      	ldr	r0, [r7, #16]
 8015e1c:	f000 fd08 	bl	8016830 <xQueueGiveMutexRecursive>
 8015e20:	4603      	mov	r3, r0
 8015e22:	2b01      	cmp	r3, #1
 8015e24:	d00f      	beq.n	8015e46 <osMutexRelease+0x70>
        stat = osErrorResource;
 8015e26:	f06f 0302 	mvn.w	r3, #2
 8015e2a:	617b      	str	r3, [r7, #20]
 8015e2c:	e00b      	b.n	8015e46 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8015e2e:	2300      	movs	r3, #0
 8015e30:	2200      	movs	r2, #0
 8015e32:	2100      	movs	r1, #0
 8015e34:	6938      	ldr	r0, [r7, #16]
 8015e36:	f000 fdd5 	bl	80169e4 <xQueueGenericSend>
 8015e3a:	4603      	mov	r3, r0
 8015e3c:	2b01      	cmp	r3, #1
 8015e3e:	d002      	beq.n	8015e46 <osMutexRelease+0x70>
        stat = osErrorResource;
 8015e40:	f06f 0302 	mvn.w	r3, #2
 8015e44:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8015e46:	697b      	ldr	r3, [r7, #20]
}
 8015e48:	4618      	mov	r0, r3
 8015e4a:	3718      	adds	r7, #24
 8015e4c:	46bd      	mov	sp, r7
 8015e4e:	bd80      	pop	{r7, pc}

08015e50 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8015e50:	b580      	push	{r7, lr}
 8015e52:	b08a      	sub	sp, #40	@ 0x28
 8015e54:	af02      	add	r7, sp, #8
 8015e56:	60f8      	str	r0, [r7, #12]
 8015e58:	60b9      	str	r1, [r7, #8]
 8015e5a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8015e5c:	2300      	movs	r3, #0
 8015e5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015e60:	f3ef 8305 	mrs	r3, IPSR
 8015e64:	613b      	str	r3, [r7, #16]
  return(result);
 8015e66:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d175      	bne.n	8015f58 <osSemaphoreNew+0x108>
 8015e6c:	68fb      	ldr	r3, [r7, #12]
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d072      	beq.n	8015f58 <osSemaphoreNew+0x108>
 8015e72:	68ba      	ldr	r2, [r7, #8]
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	429a      	cmp	r2, r3
 8015e78:	d86e      	bhi.n	8015f58 <osSemaphoreNew+0x108>
    mem = -1;
 8015e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8015e7e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d015      	beq.n	8015eb2 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	689b      	ldr	r3, [r3, #8]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d006      	beq.n	8015e9c <osSemaphoreNew+0x4c>
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	68db      	ldr	r3, [r3, #12]
 8015e92:	2b4f      	cmp	r3, #79	@ 0x4f
 8015e94:	d902      	bls.n	8015e9c <osSemaphoreNew+0x4c>
        mem = 1;
 8015e96:	2301      	movs	r3, #1
 8015e98:	61bb      	str	r3, [r7, #24]
 8015e9a:	e00c      	b.n	8015eb6 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	689b      	ldr	r3, [r3, #8]
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d108      	bne.n	8015eb6 <osSemaphoreNew+0x66>
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	68db      	ldr	r3, [r3, #12]
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d104      	bne.n	8015eb6 <osSemaphoreNew+0x66>
          mem = 0;
 8015eac:	2300      	movs	r3, #0
 8015eae:	61bb      	str	r3, [r7, #24]
 8015eb0:	e001      	b.n	8015eb6 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8015eb2:	2300      	movs	r3, #0
 8015eb4:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8015eb6:	69bb      	ldr	r3, [r7, #24]
 8015eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ebc:	d04c      	beq.n	8015f58 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	2b01      	cmp	r3, #1
 8015ec2:	d128      	bne.n	8015f16 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8015ec4:	69bb      	ldr	r3, [r7, #24]
 8015ec6:	2b01      	cmp	r3, #1
 8015ec8:	d10a      	bne.n	8015ee0 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	689b      	ldr	r3, [r3, #8]
 8015ece:	2203      	movs	r2, #3
 8015ed0:	9200      	str	r2, [sp, #0]
 8015ed2:	2200      	movs	r2, #0
 8015ed4:	2100      	movs	r1, #0
 8015ed6:	2001      	movs	r0, #1
 8015ed8:	f000 fb82 	bl	80165e0 <xQueueGenericCreateStatic>
 8015edc:	61f8      	str	r0, [r7, #28]
 8015ede:	e005      	b.n	8015eec <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8015ee0:	2203      	movs	r2, #3
 8015ee2:	2100      	movs	r1, #0
 8015ee4:	2001      	movs	r0, #1
 8015ee6:	f000 fbf8 	bl	80166da <xQueueGenericCreate>
 8015eea:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8015eec:	69fb      	ldr	r3, [r7, #28]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d022      	beq.n	8015f38 <osSemaphoreNew+0xe8>
 8015ef2:	68bb      	ldr	r3, [r7, #8]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d01f      	beq.n	8015f38 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8015ef8:	2300      	movs	r3, #0
 8015efa:	2200      	movs	r2, #0
 8015efc:	2100      	movs	r1, #0
 8015efe:	69f8      	ldr	r0, [r7, #28]
 8015f00:	f000 fd70 	bl	80169e4 <xQueueGenericSend>
 8015f04:	4603      	mov	r3, r0
 8015f06:	2b01      	cmp	r3, #1
 8015f08:	d016      	beq.n	8015f38 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8015f0a:	69f8      	ldr	r0, [r7, #28]
 8015f0c:	f001 fa0e 	bl	801732c <vQueueDelete>
            hSemaphore = NULL;
 8015f10:	2300      	movs	r3, #0
 8015f12:	61fb      	str	r3, [r7, #28]
 8015f14:	e010      	b.n	8015f38 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8015f16:	69bb      	ldr	r3, [r7, #24]
 8015f18:	2b01      	cmp	r3, #1
 8015f1a:	d108      	bne.n	8015f2e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	689b      	ldr	r3, [r3, #8]
 8015f20:	461a      	mov	r2, r3
 8015f22:	68b9      	ldr	r1, [r7, #8]
 8015f24:	68f8      	ldr	r0, [r7, #12]
 8015f26:	f000 fcef 	bl	8016908 <xQueueCreateCountingSemaphoreStatic>
 8015f2a:	61f8      	str	r0, [r7, #28]
 8015f2c:	e004      	b.n	8015f38 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8015f2e:	68b9      	ldr	r1, [r7, #8]
 8015f30:	68f8      	ldr	r0, [r7, #12]
 8015f32:	f000 fd22 	bl	801697a <xQueueCreateCountingSemaphore>
 8015f36:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8015f38:	69fb      	ldr	r3, [r7, #28]
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d00c      	beq.n	8015f58 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d003      	beq.n	8015f4c <osSemaphoreNew+0xfc>
          name = attr->name;
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	681b      	ldr	r3, [r3, #0]
 8015f48:	617b      	str	r3, [r7, #20]
 8015f4a:	e001      	b.n	8015f50 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8015f4c:	2300      	movs	r3, #0
 8015f4e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8015f50:	6979      	ldr	r1, [r7, #20]
 8015f52:	69f8      	ldr	r0, [r7, #28]
 8015f54:	f001 fb36 	bl	80175c4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8015f58:	69fb      	ldr	r3, [r7, #28]
}
 8015f5a:	4618      	mov	r0, r3
 8015f5c:	3720      	adds	r7, #32
 8015f5e:	46bd      	mov	sp, r7
 8015f60:	bd80      	pop	{r7, pc}
	...

08015f64 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8015f64:	b580      	push	{r7, lr}
 8015f66:	b086      	sub	sp, #24
 8015f68:	af00      	add	r7, sp, #0
 8015f6a:	6078      	str	r0, [r7, #4]
 8015f6c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8015f72:	2300      	movs	r3, #0
 8015f74:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8015f76:	693b      	ldr	r3, [r7, #16]
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d103      	bne.n	8015f84 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8015f7c:	f06f 0303 	mvn.w	r3, #3
 8015f80:	617b      	str	r3, [r7, #20]
 8015f82:	e039      	b.n	8015ff8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015f84:	f3ef 8305 	mrs	r3, IPSR
 8015f88:	60fb      	str	r3, [r7, #12]
  return(result);
 8015f8a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d022      	beq.n	8015fd6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8015f90:	683b      	ldr	r3, [r7, #0]
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d003      	beq.n	8015f9e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8015f96:	f06f 0303 	mvn.w	r3, #3
 8015f9a:	617b      	str	r3, [r7, #20]
 8015f9c:	e02c      	b.n	8015ff8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8015f9e:	2300      	movs	r3, #0
 8015fa0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8015fa2:	f107 0308 	add.w	r3, r7, #8
 8015fa6:	461a      	mov	r2, r3
 8015fa8:	2100      	movs	r1, #0
 8015faa:	6938      	ldr	r0, [r7, #16]
 8015fac:	f001 f93c 	bl	8017228 <xQueueReceiveFromISR>
 8015fb0:	4603      	mov	r3, r0
 8015fb2:	2b01      	cmp	r3, #1
 8015fb4:	d003      	beq.n	8015fbe <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8015fb6:	f06f 0302 	mvn.w	r3, #2
 8015fba:	617b      	str	r3, [r7, #20]
 8015fbc:	e01c      	b.n	8015ff8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8015fbe:	68bb      	ldr	r3, [r7, #8]
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d019      	beq.n	8015ff8 <osSemaphoreAcquire+0x94>
 8015fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8016004 <osSemaphoreAcquire+0xa0>)
 8015fc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015fca:	601a      	str	r2, [r3, #0]
 8015fcc:	f3bf 8f4f 	dsb	sy
 8015fd0:	f3bf 8f6f 	isb	sy
 8015fd4:	e010      	b.n	8015ff8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8015fd6:	6839      	ldr	r1, [r7, #0]
 8015fd8:	6938      	ldr	r0, [r7, #16]
 8015fda:	f001 f815 	bl	8017008 <xQueueSemaphoreTake>
 8015fde:	4603      	mov	r3, r0
 8015fe0:	2b01      	cmp	r3, #1
 8015fe2:	d009      	beq.n	8015ff8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8015fe4:	683b      	ldr	r3, [r7, #0]
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	d003      	beq.n	8015ff2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8015fea:	f06f 0301 	mvn.w	r3, #1
 8015fee:	617b      	str	r3, [r7, #20]
 8015ff0:	e002      	b.n	8015ff8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8015ff2:	f06f 0302 	mvn.w	r3, #2
 8015ff6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8015ff8:	697b      	ldr	r3, [r7, #20]
}
 8015ffa:	4618      	mov	r0, r3
 8015ffc:	3718      	adds	r7, #24
 8015ffe:	46bd      	mov	sp, r7
 8016000:	bd80      	pop	{r7, pc}
 8016002:	bf00      	nop
 8016004:	e000ed04 	.word	0xe000ed04

08016008 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8016008:	b580      	push	{r7, lr}
 801600a:	b086      	sub	sp, #24
 801600c:	af00      	add	r7, sp, #0
 801600e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8016014:	2300      	movs	r3, #0
 8016016:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8016018:	693b      	ldr	r3, [r7, #16]
 801601a:	2b00      	cmp	r3, #0
 801601c:	d103      	bne.n	8016026 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 801601e:	f06f 0303 	mvn.w	r3, #3
 8016022:	617b      	str	r3, [r7, #20]
 8016024:	e02c      	b.n	8016080 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016026:	f3ef 8305 	mrs	r3, IPSR
 801602a:	60fb      	str	r3, [r7, #12]
  return(result);
 801602c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801602e:	2b00      	cmp	r3, #0
 8016030:	d01a      	beq.n	8016068 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8016032:	2300      	movs	r3, #0
 8016034:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8016036:	f107 0308 	add.w	r3, r7, #8
 801603a:	4619      	mov	r1, r3
 801603c:	6938      	ldr	r0, [r7, #16]
 801603e:	f000 fe71 	bl	8016d24 <xQueueGiveFromISR>
 8016042:	4603      	mov	r3, r0
 8016044:	2b01      	cmp	r3, #1
 8016046:	d003      	beq.n	8016050 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8016048:	f06f 0302 	mvn.w	r3, #2
 801604c:	617b      	str	r3, [r7, #20]
 801604e:	e017      	b.n	8016080 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8016050:	68bb      	ldr	r3, [r7, #8]
 8016052:	2b00      	cmp	r3, #0
 8016054:	d014      	beq.n	8016080 <osSemaphoreRelease+0x78>
 8016056:	4b0d      	ldr	r3, [pc, #52]	@ (801608c <osSemaphoreRelease+0x84>)
 8016058:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801605c:	601a      	str	r2, [r3, #0]
 801605e:	f3bf 8f4f 	dsb	sy
 8016062:	f3bf 8f6f 	isb	sy
 8016066:	e00b      	b.n	8016080 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8016068:	2300      	movs	r3, #0
 801606a:	2200      	movs	r2, #0
 801606c:	2100      	movs	r1, #0
 801606e:	6938      	ldr	r0, [r7, #16]
 8016070:	f000 fcb8 	bl	80169e4 <xQueueGenericSend>
 8016074:	4603      	mov	r3, r0
 8016076:	2b01      	cmp	r3, #1
 8016078:	d002      	beq.n	8016080 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 801607a:	f06f 0302 	mvn.w	r3, #2
 801607e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8016080:	697b      	ldr	r3, [r7, #20]
}
 8016082:	4618      	mov	r0, r3
 8016084:	3718      	adds	r7, #24
 8016086:	46bd      	mov	sp, r7
 8016088:	bd80      	pop	{r7, pc}
 801608a:	bf00      	nop
 801608c:	e000ed04 	.word	0xe000ed04

08016090 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8016090:	b580      	push	{r7, lr}
 8016092:	b086      	sub	sp, #24
 8016094:	af00      	add	r7, sp, #0
 8016096:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801609c:	f3ef 8305 	mrs	r3, IPSR
 80160a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80160a2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d003      	beq.n	80160b0 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 80160a8:	f06f 0305 	mvn.w	r3, #5
 80160ac:	617b      	str	r3, [r7, #20]
 80160ae:	e00e      	b.n	80160ce <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 80160b0:	693b      	ldr	r3, [r7, #16]
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d103      	bne.n	80160be <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 80160b6:	f06f 0303 	mvn.w	r3, #3
 80160ba:	617b      	str	r3, [r7, #20]
 80160bc:	e007      	b.n	80160ce <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80160be:	6938      	ldr	r0, [r7, #16]
 80160c0:	f001 faaa 	bl	8017618 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80160c4:	2300      	movs	r3, #0
 80160c6:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 80160c8:	6938      	ldr	r0, [r7, #16]
 80160ca:	f001 f92f 	bl	801732c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80160ce:	697b      	ldr	r3, [r7, #20]
}
 80160d0:	4618      	mov	r0, r3
 80160d2:	3718      	adds	r7, #24
 80160d4:	46bd      	mov	sp, r7
 80160d6:	bd80      	pop	{r7, pc}

080160d8 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80160d8:	b580      	push	{r7, lr}
 80160da:	b08a      	sub	sp, #40	@ 0x28
 80160dc:	af02      	add	r7, sp, #8
 80160de:	60f8      	str	r0, [r7, #12]
 80160e0:	60b9      	str	r1, [r7, #8]
 80160e2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80160e4:	2300      	movs	r3, #0
 80160e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80160e8:	f3ef 8305 	mrs	r3, IPSR
 80160ec:	613b      	str	r3, [r7, #16]
  return(result);
 80160ee:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d15f      	bne.n	80161b4 <osMessageQueueNew+0xdc>
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d05c      	beq.n	80161b4 <osMessageQueueNew+0xdc>
 80160fa:	68bb      	ldr	r3, [r7, #8]
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d059      	beq.n	80161b4 <osMessageQueueNew+0xdc>
    mem = -1;
 8016100:	f04f 33ff 	mov.w	r3, #4294967295
 8016104:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	2b00      	cmp	r3, #0
 801610a:	d029      	beq.n	8016160 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	689b      	ldr	r3, [r3, #8]
 8016110:	2b00      	cmp	r3, #0
 8016112:	d012      	beq.n	801613a <osMessageQueueNew+0x62>
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	68db      	ldr	r3, [r3, #12]
 8016118:	2b4f      	cmp	r3, #79	@ 0x4f
 801611a:	d90e      	bls.n	801613a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8016120:	2b00      	cmp	r3, #0
 8016122:	d00a      	beq.n	801613a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	695a      	ldr	r2, [r3, #20]
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	68b9      	ldr	r1, [r7, #8]
 801612c:	fb01 f303 	mul.w	r3, r1, r3
 8016130:	429a      	cmp	r2, r3
 8016132:	d302      	bcc.n	801613a <osMessageQueueNew+0x62>
        mem = 1;
 8016134:	2301      	movs	r3, #1
 8016136:	61bb      	str	r3, [r7, #24]
 8016138:	e014      	b.n	8016164 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	689b      	ldr	r3, [r3, #8]
 801613e:	2b00      	cmp	r3, #0
 8016140:	d110      	bne.n	8016164 <osMessageQueueNew+0x8c>
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	68db      	ldr	r3, [r3, #12]
 8016146:	2b00      	cmp	r3, #0
 8016148:	d10c      	bne.n	8016164 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801614e:	2b00      	cmp	r3, #0
 8016150:	d108      	bne.n	8016164 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	695b      	ldr	r3, [r3, #20]
 8016156:	2b00      	cmp	r3, #0
 8016158:	d104      	bne.n	8016164 <osMessageQueueNew+0x8c>
          mem = 0;
 801615a:	2300      	movs	r3, #0
 801615c:	61bb      	str	r3, [r7, #24]
 801615e:	e001      	b.n	8016164 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8016160:	2300      	movs	r3, #0
 8016162:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8016164:	69bb      	ldr	r3, [r7, #24]
 8016166:	2b01      	cmp	r3, #1
 8016168:	d10b      	bne.n	8016182 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	691a      	ldr	r2, [r3, #16]
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	689b      	ldr	r3, [r3, #8]
 8016172:	2100      	movs	r1, #0
 8016174:	9100      	str	r1, [sp, #0]
 8016176:	68b9      	ldr	r1, [r7, #8]
 8016178:	68f8      	ldr	r0, [r7, #12]
 801617a:	f000 fa31 	bl	80165e0 <xQueueGenericCreateStatic>
 801617e:	61f8      	str	r0, [r7, #28]
 8016180:	e008      	b.n	8016194 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8016182:	69bb      	ldr	r3, [r7, #24]
 8016184:	2b00      	cmp	r3, #0
 8016186:	d105      	bne.n	8016194 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8016188:	2200      	movs	r2, #0
 801618a:	68b9      	ldr	r1, [r7, #8]
 801618c:	68f8      	ldr	r0, [r7, #12]
 801618e:	f000 faa4 	bl	80166da <xQueueGenericCreate>
 8016192:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8016194:	69fb      	ldr	r3, [r7, #28]
 8016196:	2b00      	cmp	r3, #0
 8016198:	d00c      	beq.n	80161b4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	2b00      	cmp	r3, #0
 801619e:	d003      	beq.n	80161a8 <osMessageQueueNew+0xd0>
        name = attr->name;
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	681b      	ldr	r3, [r3, #0]
 80161a4:	617b      	str	r3, [r7, #20]
 80161a6:	e001      	b.n	80161ac <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80161a8:	2300      	movs	r3, #0
 80161aa:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80161ac:	6979      	ldr	r1, [r7, #20]
 80161ae:	69f8      	ldr	r0, [r7, #28]
 80161b0:	f001 fa08 	bl	80175c4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80161b4:	69fb      	ldr	r3, [r7, #28]
}
 80161b6:	4618      	mov	r0, r3
 80161b8:	3720      	adds	r7, #32
 80161ba:	46bd      	mov	sp, r7
 80161bc:	bd80      	pop	{r7, pc}
	...

080161c0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80161c0:	b580      	push	{r7, lr}
 80161c2:	b088      	sub	sp, #32
 80161c4:	af00      	add	r7, sp, #0
 80161c6:	60f8      	str	r0, [r7, #12]
 80161c8:	60b9      	str	r1, [r7, #8]
 80161ca:	603b      	str	r3, [r7, #0]
 80161cc:	4613      	mov	r3, r2
 80161ce:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80161d0:	68fb      	ldr	r3, [r7, #12]
 80161d2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80161d4:	2300      	movs	r3, #0
 80161d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80161d8:	f3ef 8305 	mrs	r3, IPSR
 80161dc:	617b      	str	r3, [r7, #20]
  return(result);
 80161de:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d028      	beq.n	8016236 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80161e4:	69bb      	ldr	r3, [r7, #24]
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d005      	beq.n	80161f6 <osMessageQueuePut+0x36>
 80161ea:	68bb      	ldr	r3, [r7, #8]
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	d002      	beq.n	80161f6 <osMessageQueuePut+0x36>
 80161f0:	683b      	ldr	r3, [r7, #0]
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d003      	beq.n	80161fe <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80161f6:	f06f 0303 	mvn.w	r3, #3
 80161fa:	61fb      	str	r3, [r7, #28]
 80161fc:	e038      	b.n	8016270 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80161fe:	2300      	movs	r3, #0
 8016200:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8016202:	f107 0210 	add.w	r2, r7, #16
 8016206:	2300      	movs	r3, #0
 8016208:	68b9      	ldr	r1, [r7, #8]
 801620a:	69b8      	ldr	r0, [r7, #24]
 801620c:	f000 fcec 	bl	8016be8 <xQueueGenericSendFromISR>
 8016210:	4603      	mov	r3, r0
 8016212:	2b01      	cmp	r3, #1
 8016214:	d003      	beq.n	801621e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8016216:	f06f 0302 	mvn.w	r3, #2
 801621a:	61fb      	str	r3, [r7, #28]
 801621c:	e028      	b.n	8016270 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 801621e:	693b      	ldr	r3, [r7, #16]
 8016220:	2b00      	cmp	r3, #0
 8016222:	d025      	beq.n	8016270 <osMessageQueuePut+0xb0>
 8016224:	4b15      	ldr	r3, [pc, #84]	@ (801627c <osMessageQueuePut+0xbc>)
 8016226:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801622a:	601a      	str	r2, [r3, #0]
 801622c:	f3bf 8f4f 	dsb	sy
 8016230:	f3bf 8f6f 	isb	sy
 8016234:	e01c      	b.n	8016270 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8016236:	69bb      	ldr	r3, [r7, #24]
 8016238:	2b00      	cmp	r3, #0
 801623a:	d002      	beq.n	8016242 <osMessageQueuePut+0x82>
 801623c:	68bb      	ldr	r3, [r7, #8]
 801623e:	2b00      	cmp	r3, #0
 8016240:	d103      	bne.n	801624a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8016242:	f06f 0303 	mvn.w	r3, #3
 8016246:	61fb      	str	r3, [r7, #28]
 8016248:	e012      	b.n	8016270 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801624a:	2300      	movs	r3, #0
 801624c:	683a      	ldr	r2, [r7, #0]
 801624e:	68b9      	ldr	r1, [r7, #8]
 8016250:	69b8      	ldr	r0, [r7, #24]
 8016252:	f000 fbc7 	bl	80169e4 <xQueueGenericSend>
 8016256:	4603      	mov	r3, r0
 8016258:	2b01      	cmp	r3, #1
 801625a:	d009      	beq.n	8016270 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 801625c:	683b      	ldr	r3, [r7, #0]
 801625e:	2b00      	cmp	r3, #0
 8016260:	d003      	beq.n	801626a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8016262:	f06f 0301 	mvn.w	r3, #1
 8016266:	61fb      	str	r3, [r7, #28]
 8016268:	e002      	b.n	8016270 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 801626a:	f06f 0302 	mvn.w	r3, #2
 801626e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8016270:	69fb      	ldr	r3, [r7, #28]
}
 8016272:	4618      	mov	r0, r3
 8016274:	3720      	adds	r7, #32
 8016276:	46bd      	mov	sp, r7
 8016278:	bd80      	pop	{r7, pc}
 801627a:	bf00      	nop
 801627c:	e000ed04 	.word	0xe000ed04

08016280 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8016280:	b580      	push	{r7, lr}
 8016282:	b088      	sub	sp, #32
 8016284:	af00      	add	r7, sp, #0
 8016286:	60f8      	str	r0, [r7, #12]
 8016288:	60b9      	str	r1, [r7, #8]
 801628a:	607a      	str	r2, [r7, #4]
 801628c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801628e:	68fb      	ldr	r3, [r7, #12]
 8016290:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8016292:	2300      	movs	r3, #0
 8016294:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016296:	f3ef 8305 	mrs	r3, IPSR
 801629a:	617b      	str	r3, [r7, #20]
  return(result);
 801629c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d028      	beq.n	80162f4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80162a2:	69bb      	ldr	r3, [r7, #24]
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d005      	beq.n	80162b4 <osMessageQueueGet+0x34>
 80162a8:	68bb      	ldr	r3, [r7, #8]
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d002      	beq.n	80162b4 <osMessageQueueGet+0x34>
 80162ae:	683b      	ldr	r3, [r7, #0]
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d003      	beq.n	80162bc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80162b4:	f06f 0303 	mvn.w	r3, #3
 80162b8:	61fb      	str	r3, [r7, #28]
 80162ba:	e037      	b.n	801632c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80162bc:	2300      	movs	r3, #0
 80162be:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80162c0:	f107 0310 	add.w	r3, r7, #16
 80162c4:	461a      	mov	r2, r3
 80162c6:	68b9      	ldr	r1, [r7, #8]
 80162c8:	69b8      	ldr	r0, [r7, #24]
 80162ca:	f000 ffad 	bl	8017228 <xQueueReceiveFromISR>
 80162ce:	4603      	mov	r3, r0
 80162d0:	2b01      	cmp	r3, #1
 80162d2:	d003      	beq.n	80162dc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80162d4:	f06f 0302 	mvn.w	r3, #2
 80162d8:	61fb      	str	r3, [r7, #28]
 80162da:	e027      	b.n	801632c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80162dc:	693b      	ldr	r3, [r7, #16]
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d024      	beq.n	801632c <osMessageQueueGet+0xac>
 80162e2:	4b15      	ldr	r3, [pc, #84]	@ (8016338 <osMessageQueueGet+0xb8>)
 80162e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80162e8:	601a      	str	r2, [r3, #0]
 80162ea:	f3bf 8f4f 	dsb	sy
 80162ee:	f3bf 8f6f 	isb	sy
 80162f2:	e01b      	b.n	801632c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80162f4:	69bb      	ldr	r3, [r7, #24]
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d002      	beq.n	8016300 <osMessageQueueGet+0x80>
 80162fa:	68bb      	ldr	r3, [r7, #8]
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d103      	bne.n	8016308 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8016300:	f06f 0303 	mvn.w	r3, #3
 8016304:	61fb      	str	r3, [r7, #28]
 8016306:	e011      	b.n	801632c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8016308:	683a      	ldr	r2, [r7, #0]
 801630a:	68b9      	ldr	r1, [r7, #8]
 801630c:	69b8      	ldr	r0, [r7, #24]
 801630e:	f000 fd99 	bl	8016e44 <xQueueReceive>
 8016312:	4603      	mov	r3, r0
 8016314:	2b01      	cmp	r3, #1
 8016316:	d009      	beq.n	801632c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8016318:	683b      	ldr	r3, [r7, #0]
 801631a:	2b00      	cmp	r3, #0
 801631c:	d003      	beq.n	8016326 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 801631e:	f06f 0301 	mvn.w	r3, #1
 8016322:	61fb      	str	r3, [r7, #28]
 8016324:	e002      	b.n	801632c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8016326:	f06f 0302 	mvn.w	r3, #2
 801632a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801632c:	69fb      	ldr	r3, [r7, #28]
}
 801632e:	4618      	mov	r0, r3
 8016330:	3720      	adds	r7, #32
 8016332:	46bd      	mov	sp, r7
 8016334:	bd80      	pop	{r7, pc}
 8016336:	bf00      	nop
 8016338:	e000ed04 	.word	0xe000ed04

0801633c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801633c:	b480      	push	{r7}
 801633e:	b085      	sub	sp, #20
 8016340:	af00      	add	r7, sp, #0
 8016342:	60f8      	str	r0, [r7, #12]
 8016344:	60b9      	str	r1, [r7, #8]
 8016346:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8016348:	68fb      	ldr	r3, [r7, #12]
 801634a:	4a07      	ldr	r2, [pc, #28]	@ (8016368 <vApplicationGetIdleTaskMemory+0x2c>)
 801634c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801634e:	68bb      	ldr	r3, [r7, #8]
 8016350:	4a06      	ldr	r2, [pc, #24]	@ (801636c <vApplicationGetIdleTaskMemory+0x30>)
 8016352:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	2280      	movs	r2, #128	@ 0x80
 8016358:	601a      	str	r2, [r3, #0]
}
 801635a:	bf00      	nop
 801635c:	3714      	adds	r7, #20
 801635e:	46bd      	mov	sp, r7
 8016360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016364:	4770      	bx	lr
 8016366:	bf00      	nop
 8016368:	200036bc 	.word	0x200036bc
 801636c:	20003764 	.word	0x20003764

08016370 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8016370:	b480      	push	{r7}
 8016372:	b085      	sub	sp, #20
 8016374:	af00      	add	r7, sp, #0
 8016376:	60f8      	str	r0, [r7, #12]
 8016378:	60b9      	str	r1, [r7, #8]
 801637a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801637c:	68fb      	ldr	r3, [r7, #12]
 801637e:	4a07      	ldr	r2, [pc, #28]	@ (801639c <vApplicationGetTimerTaskMemory+0x2c>)
 8016380:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8016382:	68bb      	ldr	r3, [r7, #8]
 8016384:	4a06      	ldr	r2, [pc, #24]	@ (80163a0 <vApplicationGetTimerTaskMemory+0x30>)
 8016386:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801638e:	601a      	str	r2, [r3, #0]
}
 8016390:	bf00      	nop
 8016392:	3714      	adds	r7, #20
 8016394:	46bd      	mov	sp, r7
 8016396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801639a:	4770      	bx	lr
 801639c:	20003964 	.word	0x20003964
 80163a0:	20003a0c 	.word	0x20003a0c

080163a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80163a4:	b480      	push	{r7}
 80163a6:	b083      	sub	sp, #12
 80163a8:	af00      	add	r7, sp, #0
 80163aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	f103 0208 	add.w	r2, r3, #8
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	f04f 32ff 	mov.w	r2, #4294967295
 80163bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	f103 0208 	add.w	r2, r3, #8
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	f103 0208 	add.w	r2, r3, #8
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	2200      	movs	r2, #0
 80163d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80163d8:	bf00      	nop
 80163da:	370c      	adds	r7, #12
 80163dc:	46bd      	mov	sp, r7
 80163de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163e2:	4770      	bx	lr

080163e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80163e4:	b480      	push	{r7}
 80163e6:	b083      	sub	sp, #12
 80163e8:	af00      	add	r7, sp, #0
 80163ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	2200      	movs	r2, #0
 80163f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80163f2:	bf00      	nop
 80163f4:	370c      	adds	r7, #12
 80163f6:	46bd      	mov	sp, r7
 80163f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163fc:	4770      	bx	lr

080163fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80163fe:	b480      	push	{r7}
 8016400:	b085      	sub	sp, #20
 8016402:	af00      	add	r7, sp, #0
 8016404:	6078      	str	r0, [r7, #4]
 8016406:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	685b      	ldr	r3, [r3, #4]
 801640c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801640e:	683b      	ldr	r3, [r7, #0]
 8016410:	68fa      	ldr	r2, [r7, #12]
 8016412:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016414:	68fb      	ldr	r3, [r7, #12]
 8016416:	689a      	ldr	r2, [r3, #8]
 8016418:	683b      	ldr	r3, [r7, #0]
 801641a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801641c:	68fb      	ldr	r3, [r7, #12]
 801641e:	689b      	ldr	r3, [r3, #8]
 8016420:	683a      	ldr	r2, [r7, #0]
 8016422:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	683a      	ldr	r2, [r7, #0]
 8016428:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801642a:	683b      	ldr	r3, [r7, #0]
 801642c:	687a      	ldr	r2, [r7, #4]
 801642e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	681b      	ldr	r3, [r3, #0]
 8016434:	1c5a      	adds	r2, r3, #1
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	601a      	str	r2, [r3, #0]
}
 801643a:	bf00      	nop
 801643c:	3714      	adds	r7, #20
 801643e:	46bd      	mov	sp, r7
 8016440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016444:	4770      	bx	lr

08016446 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016446:	b480      	push	{r7}
 8016448:	b085      	sub	sp, #20
 801644a:	af00      	add	r7, sp, #0
 801644c:	6078      	str	r0, [r7, #4]
 801644e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016450:	683b      	ldr	r3, [r7, #0]
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8016456:	68bb      	ldr	r3, [r7, #8]
 8016458:	f1b3 3fff 	cmp.w	r3, #4294967295
 801645c:	d103      	bne.n	8016466 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	691b      	ldr	r3, [r3, #16]
 8016462:	60fb      	str	r3, [r7, #12]
 8016464:	e00c      	b.n	8016480 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	3308      	adds	r3, #8
 801646a:	60fb      	str	r3, [r7, #12]
 801646c:	e002      	b.n	8016474 <vListInsert+0x2e>
 801646e:	68fb      	ldr	r3, [r7, #12]
 8016470:	685b      	ldr	r3, [r3, #4]
 8016472:	60fb      	str	r3, [r7, #12]
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	685b      	ldr	r3, [r3, #4]
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	68ba      	ldr	r2, [r7, #8]
 801647c:	429a      	cmp	r2, r3
 801647e:	d2f6      	bcs.n	801646e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8016480:	68fb      	ldr	r3, [r7, #12]
 8016482:	685a      	ldr	r2, [r3, #4]
 8016484:	683b      	ldr	r3, [r7, #0]
 8016486:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8016488:	683b      	ldr	r3, [r7, #0]
 801648a:	685b      	ldr	r3, [r3, #4]
 801648c:	683a      	ldr	r2, [r7, #0]
 801648e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8016490:	683b      	ldr	r3, [r7, #0]
 8016492:	68fa      	ldr	r2, [r7, #12]
 8016494:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	683a      	ldr	r2, [r7, #0]
 801649a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801649c:	683b      	ldr	r3, [r7, #0]
 801649e:	687a      	ldr	r2, [r7, #4]
 80164a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	1c5a      	adds	r2, r3, #1
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	601a      	str	r2, [r3, #0]
}
 80164ac:	bf00      	nop
 80164ae:	3714      	adds	r7, #20
 80164b0:	46bd      	mov	sp, r7
 80164b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164b6:	4770      	bx	lr

080164b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80164b8:	b480      	push	{r7}
 80164ba:	b085      	sub	sp, #20
 80164bc:	af00      	add	r7, sp, #0
 80164be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	691b      	ldr	r3, [r3, #16]
 80164c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	685b      	ldr	r3, [r3, #4]
 80164ca:	687a      	ldr	r2, [r7, #4]
 80164cc:	6892      	ldr	r2, [r2, #8]
 80164ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	689b      	ldr	r3, [r3, #8]
 80164d4:	687a      	ldr	r2, [r7, #4]
 80164d6:	6852      	ldr	r2, [r2, #4]
 80164d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	685b      	ldr	r3, [r3, #4]
 80164de:	687a      	ldr	r2, [r7, #4]
 80164e0:	429a      	cmp	r2, r3
 80164e2:	d103      	bne.n	80164ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	689a      	ldr	r2, [r3, #8]
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	2200      	movs	r2, #0
 80164f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	681b      	ldr	r3, [r3, #0]
 80164f6:	1e5a      	subs	r2, r3, #1
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80164fc:	68fb      	ldr	r3, [r7, #12]
 80164fe:	681b      	ldr	r3, [r3, #0]
}
 8016500:	4618      	mov	r0, r3
 8016502:	3714      	adds	r7, #20
 8016504:	46bd      	mov	sp, r7
 8016506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801650a:	4770      	bx	lr

0801650c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801650c:	b580      	push	{r7, lr}
 801650e:	b084      	sub	sp, #16
 8016510:	af00      	add	r7, sp, #0
 8016512:	6078      	str	r0, [r7, #4]
 8016514:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801651a:	68fb      	ldr	r3, [r7, #12]
 801651c:	2b00      	cmp	r3, #0
 801651e:	d10b      	bne.n	8016538 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016524:	f383 8811 	msr	BASEPRI, r3
 8016528:	f3bf 8f6f 	isb	sy
 801652c:	f3bf 8f4f 	dsb	sy
 8016530:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8016532:	bf00      	nop
 8016534:	bf00      	nop
 8016536:	e7fd      	b.n	8016534 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8016538:	f002 fdb6 	bl	80190a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801653c:	68fb      	ldr	r3, [r7, #12]
 801653e:	681a      	ldr	r2, [r3, #0]
 8016540:	68fb      	ldr	r3, [r7, #12]
 8016542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016544:	68f9      	ldr	r1, [r7, #12]
 8016546:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8016548:	fb01 f303 	mul.w	r3, r1, r3
 801654c:	441a      	add	r2, r3
 801654e:	68fb      	ldr	r3, [r7, #12]
 8016550:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8016552:	68fb      	ldr	r3, [r7, #12]
 8016554:	2200      	movs	r2, #0
 8016556:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8016558:	68fb      	ldr	r3, [r7, #12]
 801655a:	681a      	ldr	r2, [r3, #0]
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016560:	68fb      	ldr	r3, [r7, #12]
 8016562:	681a      	ldr	r2, [r3, #0]
 8016564:	68fb      	ldr	r3, [r7, #12]
 8016566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016568:	3b01      	subs	r3, #1
 801656a:	68f9      	ldr	r1, [r7, #12]
 801656c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801656e:	fb01 f303 	mul.w	r3, r1, r3
 8016572:	441a      	add	r2, r3
 8016574:	68fb      	ldr	r3, [r7, #12]
 8016576:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8016578:	68fb      	ldr	r3, [r7, #12]
 801657a:	22ff      	movs	r2, #255	@ 0xff
 801657c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8016580:	68fb      	ldr	r3, [r7, #12]
 8016582:	22ff      	movs	r2, #255	@ 0xff
 8016584:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8016588:	683b      	ldr	r3, [r7, #0]
 801658a:	2b00      	cmp	r3, #0
 801658c:	d114      	bne.n	80165b8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	691b      	ldr	r3, [r3, #16]
 8016592:	2b00      	cmp	r3, #0
 8016594:	d01a      	beq.n	80165cc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016596:	68fb      	ldr	r3, [r7, #12]
 8016598:	3310      	adds	r3, #16
 801659a:	4618      	mov	r0, r3
 801659c:	f001 fd3e 	bl	801801c <xTaskRemoveFromEventList>
 80165a0:	4603      	mov	r3, r0
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d012      	beq.n	80165cc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80165a6:	4b0d      	ldr	r3, [pc, #52]	@ (80165dc <xQueueGenericReset+0xd0>)
 80165a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80165ac:	601a      	str	r2, [r3, #0]
 80165ae:	f3bf 8f4f 	dsb	sy
 80165b2:	f3bf 8f6f 	isb	sy
 80165b6:	e009      	b.n	80165cc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	3310      	adds	r3, #16
 80165bc:	4618      	mov	r0, r3
 80165be:	f7ff fef1 	bl	80163a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80165c2:	68fb      	ldr	r3, [r7, #12]
 80165c4:	3324      	adds	r3, #36	@ 0x24
 80165c6:	4618      	mov	r0, r3
 80165c8:	f7ff feec 	bl	80163a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80165cc:	f002 fd9e 	bl	801910c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80165d0:	2301      	movs	r3, #1
}
 80165d2:	4618      	mov	r0, r3
 80165d4:	3710      	adds	r7, #16
 80165d6:	46bd      	mov	sp, r7
 80165d8:	bd80      	pop	{r7, pc}
 80165da:	bf00      	nop
 80165dc:	e000ed04 	.word	0xe000ed04

080165e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80165e0:	b580      	push	{r7, lr}
 80165e2:	b08e      	sub	sp, #56	@ 0x38
 80165e4:	af02      	add	r7, sp, #8
 80165e6:	60f8      	str	r0, [r7, #12]
 80165e8:	60b9      	str	r1, [r7, #8]
 80165ea:	607a      	str	r2, [r7, #4]
 80165ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80165ee:	68fb      	ldr	r3, [r7, #12]
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d10b      	bne.n	801660c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80165f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80165f8:	f383 8811 	msr	BASEPRI, r3
 80165fc:	f3bf 8f6f 	isb	sy
 8016600:	f3bf 8f4f 	dsb	sy
 8016604:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8016606:	bf00      	nop
 8016608:	bf00      	nop
 801660a:	e7fd      	b.n	8016608 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801660c:	683b      	ldr	r3, [r7, #0]
 801660e:	2b00      	cmp	r3, #0
 8016610:	d10b      	bne.n	801662a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8016612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016616:	f383 8811 	msr	BASEPRI, r3
 801661a:	f3bf 8f6f 	isb	sy
 801661e:	f3bf 8f4f 	dsb	sy
 8016622:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8016624:	bf00      	nop
 8016626:	bf00      	nop
 8016628:	e7fd      	b.n	8016626 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	2b00      	cmp	r3, #0
 801662e:	d002      	beq.n	8016636 <xQueueGenericCreateStatic+0x56>
 8016630:	68bb      	ldr	r3, [r7, #8]
 8016632:	2b00      	cmp	r3, #0
 8016634:	d001      	beq.n	801663a <xQueueGenericCreateStatic+0x5a>
 8016636:	2301      	movs	r3, #1
 8016638:	e000      	b.n	801663c <xQueueGenericCreateStatic+0x5c>
 801663a:	2300      	movs	r3, #0
 801663c:	2b00      	cmp	r3, #0
 801663e:	d10b      	bne.n	8016658 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8016640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016644:	f383 8811 	msr	BASEPRI, r3
 8016648:	f3bf 8f6f 	isb	sy
 801664c:	f3bf 8f4f 	dsb	sy
 8016650:	623b      	str	r3, [r7, #32]
}
 8016652:	bf00      	nop
 8016654:	bf00      	nop
 8016656:	e7fd      	b.n	8016654 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	2b00      	cmp	r3, #0
 801665c:	d102      	bne.n	8016664 <xQueueGenericCreateStatic+0x84>
 801665e:	68bb      	ldr	r3, [r7, #8]
 8016660:	2b00      	cmp	r3, #0
 8016662:	d101      	bne.n	8016668 <xQueueGenericCreateStatic+0x88>
 8016664:	2301      	movs	r3, #1
 8016666:	e000      	b.n	801666a <xQueueGenericCreateStatic+0x8a>
 8016668:	2300      	movs	r3, #0
 801666a:	2b00      	cmp	r3, #0
 801666c:	d10b      	bne.n	8016686 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 801666e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016672:	f383 8811 	msr	BASEPRI, r3
 8016676:	f3bf 8f6f 	isb	sy
 801667a:	f3bf 8f4f 	dsb	sy
 801667e:	61fb      	str	r3, [r7, #28]
}
 8016680:	bf00      	nop
 8016682:	bf00      	nop
 8016684:	e7fd      	b.n	8016682 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8016686:	2350      	movs	r3, #80	@ 0x50
 8016688:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801668a:	697b      	ldr	r3, [r7, #20]
 801668c:	2b50      	cmp	r3, #80	@ 0x50
 801668e:	d00b      	beq.n	80166a8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8016690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016694:	f383 8811 	msr	BASEPRI, r3
 8016698:	f3bf 8f6f 	isb	sy
 801669c:	f3bf 8f4f 	dsb	sy
 80166a0:	61bb      	str	r3, [r7, #24]
}
 80166a2:	bf00      	nop
 80166a4:	bf00      	nop
 80166a6:	e7fd      	b.n	80166a4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80166a8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80166aa:	683b      	ldr	r3, [r7, #0]
 80166ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80166ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d00d      	beq.n	80166d0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80166b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166b6:	2201      	movs	r2, #1
 80166b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80166bc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80166c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166c2:	9300      	str	r3, [sp, #0]
 80166c4:	4613      	mov	r3, r2
 80166c6:	687a      	ldr	r2, [r7, #4]
 80166c8:	68b9      	ldr	r1, [r7, #8]
 80166ca:	68f8      	ldr	r0, [r7, #12]
 80166cc:	f000 f840 	bl	8016750 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80166d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80166d2:	4618      	mov	r0, r3
 80166d4:	3730      	adds	r7, #48	@ 0x30
 80166d6:	46bd      	mov	sp, r7
 80166d8:	bd80      	pop	{r7, pc}

080166da <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80166da:	b580      	push	{r7, lr}
 80166dc:	b08a      	sub	sp, #40	@ 0x28
 80166de:	af02      	add	r7, sp, #8
 80166e0:	60f8      	str	r0, [r7, #12]
 80166e2:	60b9      	str	r1, [r7, #8]
 80166e4:	4613      	mov	r3, r2
 80166e6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80166e8:	68fb      	ldr	r3, [r7, #12]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d10b      	bne.n	8016706 <xQueueGenericCreate+0x2c>
	__asm volatile
 80166ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80166f2:	f383 8811 	msr	BASEPRI, r3
 80166f6:	f3bf 8f6f 	isb	sy
 80166fa:	f3bf 8f4f 	dsb	sy
 80166fe:	613b      	str	r3, [r7, #16]
}
 8016700:	bf00      	nop
 8016702:	bf00      	nop
 8016704:	e7fd      	b.n	8016702 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016706:	68fb      	ldr	r3, [r7, #12]
 8016708:	68ba      	ldr	r2, [r7, #8]
 801670a:	fb02 f303 	mul.w	r3, r2, r3
 801670e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016710:	69fb      	ldr	r3, [r7, #28]
 8016712:	3350      	adds	r3, #80	@ 0x50
 8016714:	4618      	mov	r0, r3
 8016716:	f002 fde9 	bl	80192ec <pvPortMalloc>
 801671a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801671c:	69bb      	ldr	r3, [r7, #24]
 801671e:	2b00      	cmp	r3, #0
 8016720:	d011      	beq.n	8016746 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8016722:	69bb      	ldr	r3, [r7, #24]
 8016724:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016726:	697b      	ldr	r3, [r7, #20]
 8016728:	3350      	adds	r3, #80	@ 0x50
 801672a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801672c:	69bb      	ldr	r3, [r7, #24]
 801672e:	2200      	movs	r2, #0
 8016730:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016734:	79fa      	ldrb	r2, [r7, #7]
 8016736:	69bb      	ldr	r3, [r7, #24]
 8016738:	9300      	str	r3, [sp, #0]
 801673a:	4613      	mov	r3, r2
 801673c:	697a      	ldr	r2, [r7, #20]
 801673e:	68b9      	ldr	r1, [r7, #8]
 8016740:	68f8      	ldr	r0, [r7, #12]
 8016742:	f000 f805 	bl	8016750 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016746:	69bb      	ldr	r3, [r7, #24]
	}
 8016748:	4618      	mov	r0, r3
 801674a:	3720      	adds	r7, #32
 801674c:	46bd      	mov	sp, r7
 801674e:	bd80      	pop	{r7, pc}

08016750 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016750:	b580      	push	{r7, lr}
 8016752:	b084      	sub	sp, #16
 8016754:	af00      	add	r7, sp, #0
 8016756:	60f8      	str	r0, [r7, #12]
 8016758:	60b9      	str	r1, [r7, #8]
 801675a:	607a      	str	r2, [r7, #4]
 801675c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801675e:	68bb      	ldr	r3, [r7, #8]
 8016760:	2b00      	cmp	r3, #0
 8016762:	d103      	bne.n	801676c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016764:	69bb      	ldr	r3, [r7, #24]
 8016766:	69ba      	ldr	r2, [r7, #24]
 8016768:	601a      	str	r2, [r3, #0]
 801676a:	e002      	b.n	8016772 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801676c:	69bb      	ldr	r3, [r7, #24]
 801676e:	687a      	ldr	r2, [r7, #4]
 8016770:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8016772:	69bb      	ldr	r3, [r7, #24]
 8016774:	68fa      	ldr	r2, [r7, #12]
 8016776:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016778:	69bb      	ldr	r3, [r7, #24]
 801677a:	68ba      	ldr	r2, [r7, #8]
 801677c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801677e:	2101      	movs	r1, #1
 8016780:	69b8      	ldr	r0, [r7, #24]
 8016782:	f7ff fec3 	bl	801650c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8016786:	69bb      	ldr	r3, [r7, #24]
 8016788:	78fa      	ldrb	r2, [r7, #3]
 801678a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801678e:	bf00      	nop
 8016790:	3710      	adds	r7, #16
 8016792:	46bd      	mov	sp, r7
 8016794:	bd80      	pop	{r7, pc}

08016796 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8016796:	b580      	push	{r7, lr}
 8016798:	b082      	sub	sp, #8
 801679a:	af00      	add	r7, sp, #0
 801679c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d00e      	beq.n	80167c2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	2200      	movs	r2, #0
 80167a8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	2200      	movs	r2, #0
 80167ae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	2200      	movs	r2, #0
 80167b4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80167b6:	2300      	movs	r3, #0
 80167b8:	2200      	movs	r2, #0
 80167ba:	2100      	movs	r1, #0
 80167bc:	6878      	ldr	r0, [r7, #4]
 80167be:	f000 f911 	bl	80169e4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80167c2:	bf00      	nop
 80167c4:	3708      	adds	r7, #8
 80167c6:	46bd      	mov	sp, r7
 80167c8:	bd80      	pop	{r7, pc}

080167ca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80167ca:	b580      	push	{r7, lr}
 80167cc:	b086      	sub	sp, #24
 80167ce:	af00      	add	r7, sp, #0
 80167d0:	4603      	mov	r3, r0
 80167d2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80167d4:	2301      	movs	r3, #1
 80167d6:	617b      	str	r3, [r7, #20]
 80167d8:	2300      	movs	r3, #0
 80167da:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80167dc:	79fb      	ldrb	r3, [r7, #7]
 80167de:	461a      	mov	r2, r3
 80167e0:	6939      	ldr	r1, [r7, #16]
 80167e2:	6978      	ldr	r0, [r7, #20]
 80167e4:	f7ff ff79 	bl	80166da <xQueueGenericCreate>
 80167e8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80167ea:	68f8      	ldr	r0, [r7, #12]
 80167ec:	f7ff ffd3 	bl	8016796 <prvInitialiseMutex>

		return xNewQueue;
 80167f0:	68fb      	ldr	r3, [r7, #12]
	}
 80167f2:	4618      	mov	r0, r3
 80167f4:	3718      	adds	r7, #24
 80167f6:	46bd      	mov	sp, r7
 80167f8:	bd80      	pop	{r7, pc}

080167fa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80167fa:	b580      	push	{r7, lr}
 80167fc:	b088      	sub	sp, #32
 80167fe:	af02      	add	r7, sp, #8
 8016800:	4603      	mov	r3, r0
 8016802:	6039      	str	r1, [r7, #0]
 8016804:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8016806:	2301      	movs	r3, #1
 8016808:	617b      	str	r3, [r7, #20]
 801680a:	2300      	movs	r3, #0
 801680c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801680e:	79fb      	ldrb	r3, [r7, #7]
 8016810:	9300      	str	r3, [sp, #0]
 8016812:	683b      	ldr	r3, [r7, #0]
 8016814:	2200      	movs	r2, #0
 8016816:	6939      	ldr	r1, [r7, #16]
 8016818:	6978      	ldr	r0, [r7, #20]
 801681a:	f7ff fee1 	bl	80165e0 <xQueueGenericCreateStatic>
 801681e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8016820:	68f8      	ldr	r0, [r7, #12]
 8016822:	f7ff ffb8 	bl	8016796 <prvInitialiseMutex>

		return xNewQueue;
 8016826:	68fb      	ldr	r3, [r7, #12]
	}
 8016828:	4618      	mov	r0, r3
 801682a:	3718      	adds	r7, #24
 801682c:	46bd      	mov	sp, r7
 801682e:	bd80      	pop	{r7, pc}

08016830 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8016830:	b590      	push	{r4, r7, lr}
 8016832:	b087      	sub	sp, #28
 8016834:	af00      	add	r7, sp, #0
 8016836:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 801683c:	693b      	ldr	r3, [r7, #16]
 801683e:	2b00      	cmp	r3, #0
 8016840:	d10b      	bne.n	801685a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8016842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016846:	f383 8811 	msr	BASEPRI, r3
 801684a:	f3bf 8f6f 	isb	sy
 801684e:	f3bf 8f4f 	dsb	sy
 8016852:	60fb      	str	r3, [r7, #12]
}
 8016854:	bf00      	nop
 8016856:	bf00      	nop
 8016858:	e7fd      	b.n	8016856 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801685a:	693b      	ldr	r3, [r7, #16]
 801685c:	689c      	ldr	r4, [r3, #8]
 801685e:	f001 fda3 	bl	80183a8 <xTaskGetCurrentTaskHandle>
 8016862:	4603      	mov	r3, r0
 8016864:	429c      	cmp	r4, r3
 8016866:	d111      	bne.n	801688c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8016868:	693b      	ldr	r3, [r7, #16]
 801686a:	68db      	ldr	r3, [r3, #12]
 801686c:	1e5a      	subs	r2, r3, #1
 801686e:	693b      	ldr	r3, [r7, #16]
 8016870:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8016872:	693b      	ldr	r3, [r7, #16]
 8016874:	68db      	ldr	r3, [r3, #12]
 8016876:	2b00      	cmp	r3, #0
 8016878:	d105      	bne.n	8016886 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 801687a:	2300      	movs	r3, #0
 801687c:	2200      	movs	r2, #0
 801687e:	2100      	movs	r1, #0
 8016880:	6938      	ldr	r0, [r7, #16]
 8016882:	f000 f8af 	bl	80169e4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8016886:	2301      	movs	r3, #1
 8016888:	617b      	str	r3, [r7, #20]
 801688a:	e001      	b.n	8016890 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 801688c:	2300      	movs	r3, #0
 801688e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8016890:	697b      	ldr	r3, [r7, #20]
	}
 8016892:	4618      	mov	r0, r3
 8016894:	371c      	adds	r7, #28
 8016896:	46bd      	mov	sp, r7
 8016898:	bd90      	pop	{r4, r7, pc}

0801689a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 801689a:	b590      	push	{r4, r7, lr}
 801689c:	b087      	sub	sp, #28
 801689e:	af00      	add	r7, sp, #0
 80168a0:	6078      	str	r0, [r7, #4]
 80168a2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80168a8:	693b      	ldr	r3, [r7, #16]
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d10b      	bne.n	80168c6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80168ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80168b2:	f383 8811 	msr	BASEPRI, r3
 80168b6:	f3bf 8f6f 	isb	sy
 80168ba:	f3bf 8f4f 	dsb	sy
 80168be:	60fb      	str	r3, [r7, #12]
}
 80168c0:	bf00      	nop
 80168c2:	bf00      	nop
 80168c4:	e7fd      	b.n	80168c2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80168c6:	693b      	ldr	r3, [r7, #16]
 80168c8:	689c      	ldr	r4, [r3, #8]
 80168ca:	f001 fd6d 	bl	80183a8 <xTaskGetCurrentTaskHandle>
 80168ce:	4603      	mov	r3, r0
 80168d0:	429c      	cmp	r4, r3
 80168d2:	d107      	bne.n	80168e4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80168d4:	693b      	ldr	r3, [r7, #16]
 80168d6:	68db      	ldr	r3, [r3, #12]
 80168d8:	1c5a      	adds	r2, r3, #1
 80168da:	693b      	ldr	r3, [r7, #16]
 80168dc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80168de:	2301      	movs	r3, #1
 80168e0:	617b      	str	r3, [r7, #20]
 80168e2:	e00c      	b.n	80168fe <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80168e4:	6839      	ldr	r1, [r7, #0]
 80168e6:	6938      	ldr	r0, [r7, #16]
 80168e8:	f000 fb8e 	bl	8017008 <xQueueSemaphoreTake>
 80168ec:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80168ee:	697b      	ldr	r3, [r7, #20]
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d004      	beq.n	80168fe <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80168f4:	693b      	ldr	r3, [r7, #16]
 80168f6:	68db      	ldr	r3, [r3, #12]
 80168f8:	1c5a      	adds	r2, r3, #1
 80168fa:	693b      	ldr	r3, [r7, #16]
 80168fc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80168fe:	697b      	ldr	r3, [r7, #20]
	}
 8016900:	4618      	mov	r0, r3
 8016902:	371c      	adds	r7, #28
 8016904:	46bd      	mov	sp, r7
 8016906:	bd90      	pop	{r4, r7, pc}

08016908 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8016908:	b580      	push	{r7, lr}
 801690a:	b08a      	sub	sp, #40	@ 0x28
 801690c:	af02      	add	r7, sp, #8
 801690e:	60f8      	str	r0, [r7, #12]
 8016910:	60b9      	str	r1, [r7, #8]
 8016912:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8016914:	68fb      	ldr	r3, [r7, #12]
 8016916:	2b00      	cmp	r3, #0
 8016918:	d10b      	bne.n	8016932 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 801691a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801691e:	f383 8811 	msr	BASEPRI, r3
 8016922:	f3bf 8f6f 	isb	sy
 8016926:	f3bf 8f4f 	dsb	sy
 801692a:	61bb      	str	r3, [r7, #24]
}
 801692c:	bf00      	nop
 801692e:	bf00      	nop
 8016930:	e7fd      	b.n	801692e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8016932:	68ba      	ldr	r2, [r7, #8]
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	429a      	cmp	r2, r3
 8016938:	d90b      	bls.n	8016952 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 801693a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801693e:	f383 8811 	msr	BASEPRI, r3
 8016942:	f3bf 8f6f 	isb	sy
 8016946:	f3bf 8f4f 	dsb	sy
 801694a:	617b      	str	r3, [r7, #20]
}
 801694c:	bf00      	nop
 801694e:	bf00      	nop
 8016950:	e7fd      	b.n	801694e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8016952:	2302      	movs	r3, #2
 8016954:	9300      	str	r3, [sp, #0]
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	2200      	movs	r2, #0
 801695a:	2100      	movs	r1, #0
 801695c:	68f8      	ldr	r0, [r7, #12]
 801695e:	f7ff fe3f 	bl	80165e0 <xQueueGenericCreateStatic>
 8016962:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8016964:	69fb      	ldr	r3, [r7, #28]
 8016966:	2b00      	cmp	r3, #0
 8016968:	d002      	beq.n	8016970 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801696a:	69fb      	ldr	r3, [r7, #28]
 801696c:	68ba      	ldr	r2, [r7, #8]
 801696e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8016970:	69fb      	ldr	r3, [r7, #28]
	}
 8016972:	4618      	mov	r0, r3
 8016974:	3720      	adds	r7, #32
 8016976:	46bd      	mov	sp, r7
 8016978:	bd80      	pop	{r7, pc}

0801697a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 801697a:	b580      	push	{r7, lr}
 801697c:	b086      	sub	sp, #24
 801697e:	af00      	add	r7, sp, #0
 8016980:	6078      	str	r0, [r7, #4]
 8016982:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	2b00      	cmp	r3, #0
 8016988:	d10b      	bne.n	80169a2 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 801698a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801698e:	f383 8811 	msr	BASEPRI, r3
 8016992:	f3bf 8f6f 	isb	sy
 8016996:	f3bf 8f4f 	dsb	sy
 801699a:	613b      	str	r3, [r7, #16]
}
 801699c:	bf00      	nop
 801699e:	bf00      	nop
 80169a0:	e7fd      	b.n	801699e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80169a2:	683a      	ldr	r2, [r7, #0]
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	429a      	cmp	r2, r3
 80169a8:	d90b      	bls.n	80169c2 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80169aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80169ae:	f383 8811 	msr	BASEPRI, r3
 80169b2:	f3bf 8f6f 	isb	sy
 80169b6:	f3bf 8f4f 	dsb	sy
 80169ba:	60fb      	str	r3, [r7, #12]
}
 80169bc:	bf00      	nop
 80169be:	bf00      	nop
 80169c0:	e7fd      	b.n	80169be <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80169c2:	2202      	movs	r2, #2
 80169c4:	2100      	movs	r1, #0
 80169c6:	6878      	ldr	r0, [r7, #4]
 80169c8:	f7ff fe87 	bl	80166da <xQueueGenericCreate>
 80169cc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80169ce:	697b      	ldr	r3, [r7, #20]
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d002      	beq.n	80169da <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80169d4:	697b      	ldr	r3, [r7, #20]
 80169d6:	683a      	ldr	r2, [r7, #0]
 80169d8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80169da:	697b      	ldr	r3, [r7, #20]
	}
 80169dc:	4618      	mov	r0, r3
 80169de:	3718      	adds	r7, #24
 80169e0:	46bd      	mov	sp, r7
 80169e2:	bd80      	pop	{r7, pc}

080169e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80169e4:	b580      	push	{r7, lr}
 80169e6:	b08e      	sub	sp, #56	@ 0x38
 80169e8:	af00      	add	r7, sp, #0
 80169ea:	60f8      	str	r0, [r7, #12]
 80169ec:	60b9      	str	r1, [r7, #8]
 80169ee:	607a      	str	r2, [r7, #4]
 80169f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80169f2:	2300      	movs	r3, #0
 80169f4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80169f6:	68fb      	ldr	r3, [r7, #12]
 80169f8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80169fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	d10b      	bne.n	8016a18 <xQueueGenericSend+0x34>
	__asm volatile
 8016a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a04:	f383 8811 	msr	BASEPRI, r3
 8016a08:	f3bf 8f6f 	isb	sy
 8016a0c:	f3bf 8f4f 	dsb	sy
 8016a10:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8016a12:	bf00      	nop
 8016a14:	bf00      	nop
 8016a16:	e7fd      	b.n	8016a14 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016a18:	68bb      	ldr	r3, [r7, #8]
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d103      	bne.n	8016a26 <xQueueGenericSend+0x42>
 8016a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d101      	bne.n	8016a2a <xQueueGenericSend+0x46>
 8016a26:	2301      	movs	r3, #1
 8016a28:	e000      	b.n	8016a2c <xQueueGenericSend+0x48>
 8016a2a:	2300      	movs	r3, #0
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d10b      	bne.n	8016a48 <xQueueGenericSend+0x64>
	__asm volatile
 8016a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a34:	f383 8811 	msr	BASEPRI, r3
 8016a38:	f3bf 8f6f 	isb	sy
 8016a3c:	f3bf 8f4f 	dsb	sy
 8016a40:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8016a42:	bf00      	nop
 8016a44:	bf00      	nop
 8016a46:	e7fd      	b.n	8016a44 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016a48:	683b      	ldr	r3, [r7, #0]
 8016a4a:	2b02      	cmp	r3, #2
 8016a4c:	d103      	bne.n	8016a56 <xQueueGenericSend+0x72>
 8016a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016a52:	2b01      	cmp	r3, #1
 8016a54:	d101      	bne.n	8016a5a <xQueueGenericSend+0x76>
 8016a56:	2301      	movs	r3, #1
 8016a58:	e000      	b.n	8016a5c <xQueueGenericSend+0x78>
 8016a5a:	2300      	movs	r3, #0
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d10b      	bne.n	8016a78 <xQueueGenericSend+0x94>
	__asm volatile
 8016a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a64:	f383 8811 	msr	BASEPRI, r3
 8016a68:	f3bf 8f6f 	isb	sy
 8016a6c:	f3bf 8f4f 	dsb	sy
 8016a70:	623b      	str	r3, [r7, #32]
}
 8016a72:	bf00      	nop
 8016a74:	bf00      	nop
 8016a76:	e7fd      	b.n	8016a74 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016a78:	f001 fca6 	bl	80183c8 <xTaskGetSchedulerState>
 8016a7c:	4603      	mov	r3, r0
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d102      	bne.n	8016a88 <xQueueGenericSend+0xa4>
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d101      	bne.n	8016a8c <xQueueGenericSend+0xa8>
 8016a88:	2301      	movs	r3, #1
 8016a8a:	e000      	b.n	8016a8e <xQueueGenericSend+0xaa>
 8016a8c:	2300      	movs	r3, #0
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d10b      	bne.n	8016aaa <xQueueGenericSend+0xc6>
	__asm volatile
 8016a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a96:	f383 8811 	msr	BASEPRI, r3
 8016a9a:	f3bf 8f6f 	isb	sy
 8016a9e:	f3bf 8f4f 	dsb	sy
 8016aa2:	61fb      	str	r3, [r7, #28]
}
 8016aa4:	bf00      	nop
 8016aa6:	bf00      	nop
 8016aa8:	e7fd      	b.n	8016aa6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016aaa:	f002 fafd 	bl	80190a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ab0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016ab6:	429a      	cmp	r2, r3
 8016ab8:	d302      	bcc.n	8016ac0 <xQueueGenericSend+0xdc>
 8016aba:	683b      	ldr	r3, [r7, #0]
 8016abc:	2b02      	cmp	r3, #2
 8016abe:	d129      	bne.n	8016b14 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016ac0:	683a      	ldr	r2, [r7, #0]
 8016ac2:	68b9      	ldr	r1, [r7, #8]
 8016ac4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016ac6:	f000 fc6d 	bl	80173a4 <prvCopyDataToQueue>
 8016aca:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d010      	beq.n	8016af6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ad6:	3324      	adds	r3, #36	@ 0x24
 8016ad8:	4618      	mov	r0, r3
 8016ada:	f001 fa9f 	bl	801801c <xTaskRemoveFromEventList>
 8016ade:	4603      	mov	r3, r0
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d013      	beq.n	8016b0c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8016ae4:	4b3f      	ldr	r3, [pc, #252]	@ (8016be4 <xQueueGenericSend+0x200>)
 8016ae6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016aea:	601a      	str	r2, [r3, #0]
 8016aec:	f3bf 8f4f 	dsb	sy
 8016af0:	f3bf 8f6f 	isb	sy
 8016af4:	e00a      	b.n	8016b0c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8016af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	d007      	beq.n	8016b0c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8016afc:	4b39      	ldr	r3, [pc, #228]	@ (8016be4 <xQueueGenericSend+0x200>)
 8016afe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016b02:	601a      	str	r2, [r3, #0]
 8016b04:	f3bf 8f4f 	dsb	sy
 8016b08:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8016b0c:	f002 fafe 	bl	801910c <vPortExitCritical>
				return pdPASS;
 8016b10:	2301      	movs	r3, #1
 8016b12:	e063      	b.n	8016bdc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d103      	bne.n	8016b22 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016b1a:	f002 faf7 	bl	801910c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8016b1e:	2300      	movs	r3, #0
 8016b20:	e05c      	b.n	8016bdc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	d106      	bne.n	8016b36 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016b28:	f107 0314 	add.w	r3, r7, #20
 8016b2c:	4618      	mov	r0, r3
 8016b2e:	f001 fad9 	bl	80180e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016b32:	2301      	movs	r3, #1
 8016b34:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016b36:	f002 fae9 	bl	801910c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016b3a:	f001 f82f 	bl	8017b9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016b3e:	f002 fab3 	bl	80190a8 <vPortEnterCritical>
 8016b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8016b48:	b25b      	sxtb	r3, r3
 8016b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b4e:	d103      	bne.n	8016b58 <xQueueGenericSend+0x174>
 8016b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b52:	2200      	movs	r2, #0
 8016b54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8016b5e:	b25b      	sxtb	r3, r3
 8016b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b64:	d103      	bne.n	8016b6e <xQueueGenericSend+0x18a>
 8016b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b68:	2200      	movs	r2, #0
 8016b6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016b6e:	f002 facd 	bl	801910c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016b72:	1d3a      	adds	r2, r7, #4
 8016b74:	f107 0314 	add.w	r3, r7, #20
 8016b78:	4611      	mov	r1, r2
 8016b7a:	4618      	mov	r0, r3
 8016b7c:	f001 fac8 	bl	8018110 <xTaskCheckForTimeOut>
 8016b80:	4603      	mov	r3, r0
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d124      	bne.n	8016bd0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8016b86:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016b88:	f000 fd04 	bl	8017594 <prvIsQueueFull>
 8016b8c:	4603      	mov	r3, r0
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	d018      	beq.n	8016bc4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8016b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b94:	3310      	adds	r3, #16
 8016b96:	687a      	ldr	r2, [r7, #4]
 8016b98:	4611      	mov	r1, r2
 8016b9a:	4618      	mov	r0, r3
 8016b9c:	f001 f9ec 	bl	8017f78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8016ba0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016ba2:	f000 fc8f 	bl	80174c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8016ba6:	f001 f807 	bl	8017bb8 <xTaskResumeAll>
 8016baa:	4603      	mov	r3, r0
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	f47f af7c 	bne.w	8016aaa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8016bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8016be4 <xQueueGenericSend+0x200>)
 8016bb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016bb8:	601a      	str	r2, [r3, #0]
 8016bba:	f3bf 8f4f 	dsb	sy
 8016bbe:	f3bf 8f6f 	isb	sy
 8016bc2:	e772      	b.n	8016aaa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8016bc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016bc6:	f000 fc7d 	bl	80174c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016bca:	f000 fff5 	bl	8017bb8 <xTaskResumeAll>
 8016bce:	e76c      	b.n	8016aaa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8016bd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016bd2:	f000 fc77 	bl	80174c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016bd6:	f000 ffef 	bl	8017bb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8016bda:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8016bdc:	4618      	mov	r0, r3
 8016bde:	3738      	adds	r7, #56	@ 0x38
 8016be0:	46bd      	mov	sp, r7
 8016be2:	bd80      	pop	{r7, pc}
 8016be4:	e000ed04 	.word	0xe000ed04

08016be8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8016be8:	b580      	push	{r7, lr}
 8016bea:	b090      	sub	sp, #64	@ 0x40
 8016bec:	af00      	add	r7, sp, #0
 8016bee:	60f8      	str	r0, [r7, #12]
 8016bf0:	60b9      	str	r1, [r7, #8]
 8016bf2:	607a      	str	r2, [r7, #4]
 8016bf4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016bf6:	68fb      	ldr	r3, [r7, #12]
 8016bf8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8016bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d10b      	bne.n	8016c18 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8016c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c04:	f383 8811 	msr	BASEPRI, r3
 8016c08:	f3bf 8f6f 	isb	sy
 8016c0c:	f3bf 8f4f 	dsb	sy
 8016c10:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8016c12:	bf00      	nop
 8016c14:	bf00      	nop
 8016c16:	e7fd      	b.n	8016c14 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016c18:	68bb      	ldr	r3, [r7, #8]
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d103      	bne.n	8016c26 <xQueueGenericSendFromISR+0x3e>
 8016c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d101      	bne.n	8016c2a <xQueueGenericSendFromISR+0x42>
 8016c26:	2301      	movs	r3, #1
 8016c28:	e000      	b.n	8016c2c <xQueueGenericSendFromISR+0x44>
 8016c2a:	2300      	movs	r3, #0
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d10b      	bne.n	8016c48 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8016c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c34:	f383 8811 	msr	BASEPRI, r3
 8016c38:	f3bf 8f6f 	isb	sy
 8016c3c:	f3bf 8f4f 	dsb	sy
 8016c40:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8016c42:	bf00      	nop
 8016c44:	bf00      	nop
 8016c46:	e7fd      	b.n	8016c44 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016c48:	683b      	ldr	r3, [r7, #0]
 8016c4a:	2b02      	cmp	r3, #2
 8016c4c:	d103      	bne.n	8016c56 <xQueueGenericSendFromISR+0x6e>
 8016c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016c52:	2b01      	cmp	r3, #1
 8016c54:	d101      	bne.n	8016c5a <xQueueGenericSendFromISR+0x72>
 8016c56:	2301      	movs	r3, #1
 8016c58:	e000      	b.n	8016c5c <xQueueGenericSendFromISR+0x74>
 8016c5a:	2300      	movs	r3, #0
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	d10b      	bne.n	8016c78 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8016c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c64:	f383 8811 	msr	BASEPRI, r3
 8016c68:	f3bf 8f6f 	isb	sy
 8016c6c:	f3bf 8f4f 	dsb	sy
 8016c70:	623b      	str	r3, [r7, #32]
}
 8016c72:	bf00      	nop
 8016c74:	bf00      	nop
 8016c76:	e7fd      	b.n	8016c74 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016c78:	f002 faf6 	bl	8019268 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8016c7c:	f3ef 8211 	mrs	r2, BASEPRI
 8016c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c84:	f383 8811 	msr	BASEPRI, r3
 8016c88:	f3bf 8f6f 	isb	sy
 8016c8c:	f3bf 8f4f 	dsb	sy
 8016c90:	61fa      	str	r2, [r7, #28]
 8016c92:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8016c94:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016c96:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016c9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016ca0:	429a      	cmp	r2, r3
 8016ca2:	d302      	bcc.n	8016caa <xQueueGenericSendFromISR+0xc2>
 8016ca4:	683b      	ldr	r3, [r7, #0]
 8016ca6:	2b02      	cmp	r3, #2
 8016ca8:	d12f      	bne.n	8016d0a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016cac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8016cb0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016cba:	683a      	ldr	r2, [r7, #0]
 8016cbc:	68b9      	ldr	r1, [r7, #8]
 8016cbe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016cc0:	f000 fb70 	bl	80173a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016cc4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8016cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ccc:	d112      	bne.n	8016cf4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d016      	beq.n	8016d04 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016cd8:	3324      	adds	r3, #36	@ 0x24
 8016cda:	4618      	mov	r0, r3
 8016cdc:	f001 f99e 	bl	801801c <xTaskRemoveFromEventList>
 8016ce0:	4603      	mov	r3, r0
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d00e      	beq.n	8016d04 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d00b      	beq.n	8016d04 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	2201      	movs	r2, #1
 8016cf0:	601a      	str	r2, [r3, #0]
 8016cf2:	e007      	b.n	8016d04 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016cf4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8016cf8:	3301      	adds	r3, #1
 8016cfa:	b2db      	uxtb	r3, r3
 8016cfc:	b25a      	sxtb	r2, r3
 8016cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016d00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8016d04:	2301      	movs	r3, #1
 8016d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8016d08:	e001      	b.n	8016d0e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016d0a:	2300      	movs	r3, #0
 8016d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016d10:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8016d12:	697b      	ldr	r3, [r7, #20]
 8016d14:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8016d18:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016d1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8016d1c:	4618      	mov	r0, r3
 8016d1e:	3740      	adds	r7, #64	@ 0x40
 8016d20:	46bd      	mov	sp, r7
 8016d22:	bd80      	pop	{r7, pc}

08016d24 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016d24:	b580      	push	{r7, lr}
 8016d26:	b08e      	sub	sp, #56	@ 0x38
 8016d28:	af00      	add	r7, sp, #0
 8016d2a:	6078      	str	r0, [r7, #4]
 8016d2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8016d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d10b      	bne.n	8016d50 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8016d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d3c:	f383 8811 	msr	BASEPRI, r3
 8016d40:	f3bf 8f6f 	isb	sy
 8016d44:	f3bf 8f4f 	dsb	sy
 8016d48:	623b      	str	r3, [r7, #32]
}
 8016d4a:	bf00      	nop
 8016d4c:	bf00      	nop
 8016d4e:	e7fd      	b.n	8016d4c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d00b      	beq.n	8016d70 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8016d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d5c:	f383 8811 	msr	BASEPRI, r3
 8016d60:	f3bf 8f6f 	isb	sy
 8016d64:	f3bf 8f4f 	dsb	sy
 8016d68:	61fb      	str	r3, [r7, #28]
}
 8016d6a:	bf00      	nop
 8016d6c:	bf00      	nop
 8016d6e:	e7fd      	b.n	8016d6c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8016d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d72:	681b      	ldr	r3, [r3, #0]
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d103      	bne.n	8016d80 <xQueueGiveFromISR+0x5c>
 8016d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d7a:	689b      	ldr	r3, [r3, #8]
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d101      	bne.n	8016d84 <xQueueGiveFromISR+0x60>
 8016d80:	2301      	movs	r3, #1
 8016d82:	e000      	b.n	8016d86 <xQueueGiveFromISR+0x62>
 8016d84:	2300      	movs	r3, #0
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d10b      	bne.n	8016da2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8016d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d8e:	f383 8811 	msr	BASEPRI, r3
 8016d92:	f3bf 8f6f 	isb	sy
 8016d96:	f3bf 8f4f 	dsb	sy
 8016d9a:	61bb      	str	r3, [r7, #24]
}
 8016d9c:	bf00      	nop
 8016d9e:	bf00      	nop
 8016da0:	e7fd      	b.n	8016d9e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016da2:	f002 fa61 	bl	8019268 <vPortValidateInterruptPriority>
	__asm volatile
 8016da6:	f3ef 8211 	mrs	r2, BASEPRI
 8016daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016dae:	f383 8811 	msr	BASEPRI, r3
 8016db2:	f3bf 8f6f 	isb	sy
 8016db6:	f3bf 8f4f 	dsb	sy
 8016dba:	617a      	str	r2, [r7, #20]
 8016dbc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8016dbe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016dc6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8016dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016dcc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016dce:	429a      	cmp	r2, r3
 8016dd0:	d22b      	bcs.n	8016e2a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016dd4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8016dd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016dde:	1c5a      	adds	r2, r3, #1
 8016de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016de2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016de4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8016de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016dec:	d112      	bne.n	8016e14 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d016      	beq.n	8016e24 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016df8:	3324      	adds	r3, #36	@ 0x24
 8016dfa:	4618      	mov	r0, r3
 8016dfc:	f001 f90e 	bl	801801c <xTaskRemoveFromEventList>
 8016e00:	4603      	mov	r3, r0
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d00e      	beq.n	8016e24 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016e06:	683b      	ldr	r3, [r7, #0]
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d00b      	beq.n	8016e24 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016e0c:	683b      	ldr	r3, [r7, #0]
 8016e0e:	2201      	movs	r2, #1
 8016e10:	601a      	str	r2, [r3, #0]
 8016e12:	e007      	b.n	8016e24 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016e14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016e18:	3301      	adds	r3, #1
 8016e1a:	b2db      	uxtb	r3, r3
 8016e1c:	b25a      	sxtb	r2, r3
 8016e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8016e24:	2301      	movs	r3, #1
 8016e26:	637b      	str	r3, [r7, #52]	@ 0x34
 8016e28:	e001      	b.n	8016e2e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016e2a:	2300      	movs	r3, #0
 8016e2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8016e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e30:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8016e32:	68fb      	ldr	r3, [r7, #12]
 8016e34:	f383 8811 	msr	BASEPRI, r3
}
 8016e38:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016e3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8016e3c:	4618      	mov	r0, r3
 8016e3e:	3738      	adds	r7, #56	@ 0x38
 8016e40:	46bd      	mov	sp, r7
 8016e42:	bd80      	pop	{r7, pc}

08016e44 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8016e44:	b580      	push	{r7, lr}
 8016e46:	b08c      	sub	sp, #48	@ 0x30
 8016e48:	af00      	add	r7, sp, #0
 8016e4a:	60f8      	str	r0, [r7, #12]
 8016e4c:	60b9      	str	r1, [r7, #8]
 8016e4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8016e50:	2300      	movs	r3, #0
 8016e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016e54:	68fb      	ldr	r3, [r7, #12]
 8016e56:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	d10b      	bne.n	8016e76 <xQueueReceive+0x32>
	__asm volatile
 8016e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e62:	f383 8811 	msr	BASEPRI, r3
 8016e66:	f3bf 8f6f 	isb	sy
 8016e6a:	f3bf 8f4f 	dsb	sy
 8016e6e:	623b      	str	r3, [r7, #32]
}
 8016e70:	bf00      	nop
 8016e72:	bf00      	nop
 8016e74:	e7fd      	b.n	8016e72 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016e76:	68bb      	ldr	r3, [r7, #8]
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d103      	bne.n	8016e84 <xQueueReceive+0x40>
 8016e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	d101      	bne.n	8016e88 <xQueueReceive+0x44>
 8016e84:	2301      	movs	r3, #1
 8016e86:	e000      	b.n	8016e8a <xQueueReceive+0x46>
 8016e88:	2300      	movs	r3, #0
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	d10b      	bne.n	8016ea6 <xQueueReceive+0x62>
	__asm volatile
 8016e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e92:	f383 8811 	msr	BASEPRI, r3
 8016e96:	f3bf 8f6f 	isb	sy
 8016e9a:	f3bf 8f4f 	dsb	sy
 8016e9e:	61fb      	str	r3, [r7, #28]
}
 8016ea0:	bf00      	nop
 8016ea2:	bf00      	nop
 8016ea4:	e7fd      	b.n	8016ea2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016ea6:	f001 fa8f 	bl	80183c8 <xTaskGetSchedulerState>
 8016eaa:	4603      	mov	r3, r0
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	d102      	bne.n	8016eb6 <xQueueReceive+0x72>
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d101      	bne.n	8016eba <xQueueReceive+0x76>
 8016eb6:	2301      	movs	r3, #1
 8016eb8:	e000      	b.n	8016ebc <xQueueReceive+0x78>
 8016eba:	2300      	movs	r3, #0
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d10b      	bne.n	8016ed8 <xQueueReceive+0x94>
	__asm volatile
 8016ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ec4:	f383 8811 	msr	BASEPRI, r3
 8016ec8:	f3bf 8f6f 	isb	sy
 8016ecc:	f3bf 8f4f 	dsb	sy
 8016ed0:	61bb      	str	r3, [r7, #24]
}
 8016ed2:	bf00      	nop
 8016ed4:	bf00      	nop
 8016ed6:	e7fd      	b.n	8016ed4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016ed8:	f002 f8e6 	bl	80190a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016ee0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	d01f      	beq.n	8016f28 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016ee8:	68b9      	ldr	r1, [r7, #8]
 8016eea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016eec:	f000 fac4 	bl	8017478 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ef2:	1e5a      	subs	r2, r3, #1
 8016ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ef6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016efa:	691b      	ldr	r3, [r3, #16]
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d00f      	beq.n	8016f20 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f02:	3310      	adds	r3, #16
 8016f04:	4618      	mov	r0, r3
 8016f06:	f001 f889 	bl	801801c <xTaskRemoveFromEventList>
 8016f0a:	4603      	mov	r3, r0
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d007      	beq.n	8016f20 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016f10:	4b3c      	ldr	r3, [pc, #240]	@ (8017004 <xQueueReceive+0x1c0>)
 8016f12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016f16:	601a      	str	r2, [r3, #0]
 8016f18:	f3bf 8f4f 	dsb	sy
 8016f1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016f20:	f002 f8f4 	bl	801910c <vPortExitCritical>
				return pdPASS;
 8016f24:	2301      	movs	r3, #1
 8016f26:	e069      	b.n	8016ffc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	d103      	bne.n	8016f36 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016f2e:	f002 f8ed 	bl	801910c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016f32:	2300      	movs	r3, #0
 8016f34:	e062      	b.n	8016ffc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016f38:	2b00      	cmp	r3, #0
 8016f3a:	d106      	bne.n	8016f4a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016f3c:	f107 0310 	add.w	r3, r7, #16
 8016f40:	4618      	mov	r0, r3
 8016f42:	f001 f8cf 	bl	80180e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016f46:	2301      	movs	r3, #1
 8016f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016f4a:	f002 f8df 	bl	801910c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016f4e:	f000 fe25 	bl	8017b9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016f52:	f002 f8a9 	bl	80190a8 <vPortEnterCritical>
 8016f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8016f5c:	b25b      	sxtb	r3, r3
 8016f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f62:	d103      	bne.n	8016f6c <xQueueReceive+0x128>
 8016f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f66:	2200      	movs	r2, #0
 8016f68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8016f72:	b25b      	sxtb	r3, r3
 8016f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f78:	d103      	bne.n	8016f82 <xQueueReceive+0x13e>
 8016f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f7c:	2200      	movs	r2, #0
 8016f7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016f82:	f002 f8c3 	bl	801910c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016f86:	1d3a      	adds	r2, r7, #4
 8016f88:	f107 0310 	add.w	r3, r7, #16
 8016f8c:	4611      	mov	r1, r2
 8016f8e:	4618      	mov	r0, r3
 8016f90:	f001 f8be 	bl	8018110 <xTaskCheckForTimeOut>
 8016f94:	4603      	mov	r3, r0
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d123      	bne.n	8016fe2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016f9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016f9c:	f000 fae4 	bl	8017568 <prvIsQueueEmpty>
 8016fa0:	4603      	mov	r3, r0
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d017      	beq.n	8016fd6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016fa8:	3324      	adds	r3, #36	@ 0x24
 8016faa:	687a      	ldr	r2, [r7, #4]
 8016fac:	4611      	mov	r1, r2
 8016fae:	4618      	mov	r0, r3
 8016fb0:	f000 ffe2 	bl	8017f78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016fb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016fb6:	f000 fa85 	bl	80174c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016fba:	f000 fdfd 	bl	8017bb8 <xTaskResumeAll>
 8016fbe:	4603      	mov	r3, r0
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d189      	bne.n	8016ed8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8016fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8017004 <xQueueReceive+0x1c0>)
 8016fc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016fca:	601a      	str	r2, [r3, #0]
 8016fcc:	f3bf 8f4f 	dsb	sy
 8016fd0:	f3bf 8f6f 	isb	sy
 8016fd4:	e780      	b.n	8016ed8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8016fd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016fd8:	f000 fa74 	bl	80174c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016fdc:	f000 fdec 	bl	8017bb8 <xTaskResumeAll>
 8016fe0:	e77a      	b.n	8016ed8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8016fe2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016fe4:	f000 fa6e 	bl	80174c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016fe8:	f000 fde6 	bl	8017bb8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016fec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016fee:	f000 fabb 	bl	8017568 <prvIsQueueEmpty>
 8016ff2:	4603      	mov	r3, r0
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	f43f af6f 	beq.w	8016ed8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016ffa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016ffc:	4618      	mov	r0, r3
 8016ffe:	3730      	adds	r7, #48	@ 0x30
 8017000:	46bd      	mov	sp, r7
 8017002:	bd80      	pop	{r7, pc}
 8017004:	e000ed04 	.word	0xe000ed04

08017008 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8017008:	b580      	push	{r7, lr}
 801700a:	b08e      	sub	sp, #56	@ 0x38
 801700c:	af00      	add	r7, sp, #0
 801700e:	6078      	str	r0, [r7, #4]
 8017010:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8017012:	2300      	movs	r3, #0
 8017014:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801701a:	2300      	movs	r3, #0
 801701c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801701e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017020:	2b00      	cmp	r3, #0
 8017022:	d10b      	bne.n	801703c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8017024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017028:	f383 8811 	msr	BASEPRI, r3
 801702c:	f3bf 8f6f 	isb	sy
 8017030:	f3bf 8f4f 	dsb	sy
 8017034:	623b      	str	r3, [r7, #32]
}
 8017036:	bf00      	nop
 8017038:	bf00      	nop
 801703a:	e7fd      	b.n	8017038 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801703c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801703e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017040:	2b00      	cmp	r3, #0
 8017042:	d00b      	beq.n	801705c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8017044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017048:	f383 8811 	msr	BASEPRI, r3
 801704c:	f3bf 8f6f 	isb	sy
 8017050:	f3bf 8f4f 	dsb	sy
 8017054:	61fb      	str	r3, [r7, #28]
}
 8017056:	bf00      	nop
 8017058:	bf00      	nop
 801705a:	e7fd      	b.n	8017058 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801705c:	f001 f9b4 	bl	80183c8 <xTaskGetSchedulerState>
 8017060:	4603      	mov	r3, r0
 8017062:	2b00      	cmp	r3, #0
 8017064:	d102      	bne.n	801706c <xQueueSemaphoreTake+0x64>
 8017066:	683b      	ldr	r3, [r7, #0]
 8017068:	2b00      	cmp	r3, #0
 801706a:	d101      	bne.n	8017070 <xQueueSemaphoreTake+0x68>
 801706c:	2301      	movs	r3, #1
 801706e:	e000      	b.n	8017072 <xQueueSemaphoreTake+0x6a>
 8017070:	2300      	movs	r3, #0
 8017072:	2b00      	cmp	r3, #0
 8017074:	d10b      	bne.n	801708e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8017076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801707a:	f383 8811 	msr	BASEPRI, r3
 801707e:	f3bf 8f6f 	isb	sy
 8017082:	f3bf 8f4f 	dsb	sy
 8017086:	61bb      	str	r3, [r7, #24]
}
 8017088:	bf00      	nop
 801708a:	bf00      	nop
 801708c:	e7fd      	b.n	801708a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801708e:	f002 f80b 	bl	80190a8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8017092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017096:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8017098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801709a:	2b00      	cmp	r3, #0
 801709c:	d024      	beq.n	80170e8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801709e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170a0:	1e5a      	subs	r2, r3, #1
 80170a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80170a4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80170a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80170a8:	681b      	ldr	r3, [r3, #0]
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d104      	bne.n	80170b8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80170ae:	f001 fb05 	bl	80186bc <pvTaskIncrementMutexHeldCount>
 80170b2:	4602      	mov	r2, r0
 80170b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80170b6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80170b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80170ba:	691b      	ldr	r3, [r3, #16]
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d00f      	beq.n	80170e0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80170c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80170c2:	3310      	adds	r3, #16
 80170c4:	4618      	mov	r0, r3
 80170c6:	f000 ffa9 	bl	801801c <xTaskRemoveFromEventList>
 80170ca:	4603      	mov	r3, r0
 80170cc:	2b00      	cmp	r3, #0
 80170ce:	d007      	beq.n	80170e0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80170d0:	4b54      	ldr	r3, [pc, #336]	@ (8017224 <xQueueSemaphoreTake+0x21c>)
 80170d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80170d6:	601a      	str	r2, [r3, #0]
 80170d8:	f3bf 8f4f 	dsb	sy
 80170dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80170e0:	f002 f814 	bl	801910c <vPortExitCritical>
				return pdPASS;
 80170e4:	2301      	movs	r3, #1
 80170e6:	e098      	b.n	801721a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80170e8:	683b      	ldr	r3, [r7, #0]
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d112      	bne.n	8017114 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80170ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d00b      	beq.n	801710c <xQueueSemaphoreTake+0x104>
	__asm volatile
 80170f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80170f8:	f383 8811 	msr	BASEPRI, r3
 80170fc:	f3bf 8f6f 	isb	sy
 8017100:	f3bf 8f4f 	dsb	sy
 8017104:	617b      	str	r3, [r7, #20]
}
 8017106:	bf00      	nop
 8017108:	bf00      	nop
 801710a:	e7fd      	b.n	8017108 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801710c:	f001 fffe 	bl	801910c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017110:	2300      	movs	r3, #0
 8017112:	e082      	b.n	801721a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017116:	2b00      	cmp	r3, #0
 8017118:	d106      	bne.n	8017128 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801711a:	f107 030c 	add.w	r3, r7, #12
 801711e:	4618      	mov	r0, r3
 8017120:	f000 ffe0 	bl	80180e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017124:	2301      	movs	r3, #1
 8017126:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017128:	f001 fff0 	bl	801910c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801712c:	f000 fd36 	bl	8017b9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017130:	f001 ffba 	bl	80190a8 <vPortEnterCritical>
 8017134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017136:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801713a:	b25b      	sxtb	r3, r3
 801713c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017140:	d103      	bne.n	801714a <xQueueSemaphoreTake+0x142>
 8017142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017144:	2200      	movs	r2, #0
 8017146:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801714a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801714c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8017150:	b25b      	sxtb	r3, r3
 8017152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017156:	d103      	bne.n	8017160 <xQueueSemaphoreTake+0x158>
 8017158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801715a:	2200      	movs	r2, #0
 801715c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8017160:	f001 ffd4 	bl	801910c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017164:	463a      	mov	r2, r7
 8017166:	f107 030c 	add.w	r3, r7, #12
 801716a:	4611      	mov	r1, r2
 801716c:	4618      	mov	r0, r3
 801716e:	f000 ffcf 	bl	8018110 <xTaskCheckForTimeOut>
 8017172:	4603      	mov	r3, r0
 8017174:	2b00      	cmp	r3, #0
 8017176:	d132      	bne.n	80171de <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017178:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801717a:	f000 f9f5 	bl	8017568 <prvIsQueueEmpty>
 801717e:	4603      	mov	r3, r0
 8017180:	2b00      	cmp	r3, #0
 8017182:	d026      	beq.n	80171d2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017186:	681b      	ldr	r3, [r3, #0]
 8017188:	2b00      	cmp	r3, #0
 801718a:	d109      	bne.n	80171a0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 801718c:	f001 ff8c 	bl	80190a8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017192:	689b      	ldr	r3, [r3, #8]
 8017194:	4618      	mov	r0, r3
 8017196:	f001 f935 	bl	8018404 <xTaskPriorityInherit>
 801719a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 801719c:	f001 ffb6 	bl	801910c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80171a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80171a2:	3324      	adds	r3, #36	@ 0x24
 80171a4:	683a      	ldr	r2, [r7, #0]
 80171a6:	4611      	mov	r1, r2
 80171a8:	4618      	mov	r0, r3
 80171aa:	f000 fee5 	bl	8017f78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80171ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80171b0:	f000 f988 	bl	80174c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80171b4:	f000 fd00 	bl	8017bb8 <xTaskResumeAll>
 80171b8:	4603      	mov	r3, r0
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	f47f af67 	bne.w	801708e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80171c0:	4b18      	ldr	r3, [pc, #96]	@ (8017224 <xQueueSemaphoreTake+0x21c>)
 80171c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80171c6:	601a      	str	r2, [r3, #0]
 80171c8:	f3bf 8f4f 	dsb	sy
 80171cc:	f3bf 8f6f 	isb	sy
 80171d0:	e75d      	b.n	801708e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80171d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80171d4:	f000 f976 	bl	80174c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80171d8:	f000 fcee 	bl	8017bb8 <xTaskResumeAll>
 80171dc:	e757      	b.n	801708e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80171de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80171e0:	f000 f970 	bl	80174c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80171e4:	f000 fce8 	bl	8017bb8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80171e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80171ea:	f000 f9bd 	bl	8017568 <prvIsQueueEmpty>
 80171ee:	4603      	mov	r3, r0
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	f43f af4c 	beq.w	801708e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80171f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d00d      	beq.n	8017218 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80171fc:	f001 ff54 	bl	80190a8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8017200:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017202:	f000 f8b7 	bl	8017374 <prvGetDisinheritPriorityAfterTimeout>
 8017206:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8017208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801720a:	689b      	ldr	r3, [r3, #8]
 801720c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801720e:	4618      	mov	r0, r3
 8017210:	f001 f9d0 	bl	80185b4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8017214:	f001 ff7a 	bl	801910c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017218:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801721a:	4618      	mov	r0, r3
 801721c:	3738      	adds	r7, #56	@ 0x38
 801721e:	46bd      	mov	sp, r7
 8017220:	bd80      	pop	{r7, pc}
 8017222:	bf00      	nop
 8017224:	e000ed04 	.word	0xe000ed04

08017228 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8017228:	b580      	push	{r7, lr}
 801722a:	b08e      	sub	sp, #56	@ 0x38
 801722c:	af00      	add	r7, sp, #0
 801722e:	60f8      	str	r0, [r7, #12]
 8017230:	60b9      	str	r1, [r7, #8]
 8017232:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017234:	68fb      	ldr	r3, [r7, #12]
 8017236:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8017238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801723a:	2b00      	cmp	r3, #0
 801723c:	d10b      	bne.n	8017256 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 801723e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017242:	f383 8811 	msr	BASEPRI, r3
 8017246:	f3bf 8f6f 	isb	sy
 801724a:	f3bf 8f4f 	dsb	sy
 801724e:	623b      	str	r3, [r7, #32]
}
 8017250:	bf00      	nop
 8017252:	bf00      	nop
 8017254:	e7fd      	b.n	8017252 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017256:	68bb      	ldr	r3, [r7, #8]
 8017258:	2b00      	cmp	r3, #0
 801725a:	d103      	bne.n	8017264 <xQueueReceiveFromISR+0x3c>
 801725c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801725e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017260:	2b00      	cmp	r3, #0
 8017262:	d101      	bne.n	8017268 <xQueueReceiveFromISR+0x40>
 8017264:	2301      	movs	r3, #1
 8017266:	e000      	b.n	801726a <xQueueReceiveFromISR+0x42>
 8017268:	2300      	movs	r3, #0
 801726a:	2b00      	cmp	r3, #0
 801726c:	d10b      	bne.n	8017286 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 801726e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017272:	f383 8811 	msr	BASEPRI, r3
 8017276:	f3bf 8f6f 	isb	sy
 801727a:	f3bf 8f4f 	dsb	sy
 801727e:	61fb      	str	r3, [r7, #28]
}
 8017280:	bf00      	nop
 8017282:	bf00      	nop
 8017284:	e7fd      	b.n	8017282 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017286:	f001 ffef 	bl	8019268 <vPortValidateInterruptPriority>
	__asm volatile
 801728a:	f3ef 8211 	mrs	r2, BASEPRI
 801728e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017292:	f383 8811 	msr	BASEPRI, r3
 8017296:	f3bf 8f6f 	isb	sy
 801729a:	f3bf 8f4f 	dsb	sy
 801729e:	61ba      	str	r2, [r7, #24]
 80172a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80172a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80172a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80172a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80172aa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80172ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	d02f      	beq.n	8017312 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80172b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80172b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80172bc:	68b9      	ldr	r1, [r7, #8]
 80172be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80172c0:	f000 f8da 	bl	8017478 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80172c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80172c6:	1e5a      	subs	r2, r3, #1
 80172c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172ca:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80172cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80172d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80172d4:	d112      	bne.n	80172fc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80172d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172d8:	691b      	ldr	r3, [r3, #16]
 80172da:	2b00      	cmp	r3, #0
 80172dc:	d016      	beq.n	801730c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80172de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172e0:	3310      	adds	r3, #16
 80172e2:	4618      	mov	r0, r3
 80172e4:	f000 fe9a 	bl	801801c <xTaskRemoveFromEventList>
 80172e8:	4603      	mov	r3, r0
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d00e      	beq.n	801730c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	d00b      	beq.n	801730c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	2201      	movs	r2, #1
 80172f8:	601a      	str	r2, [r3, #0]
 80172fa:	e007      	b.n	801730c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80172fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017300:	3301      	adds	r3, #1
 8017302:	b2db      	uxtb	r3, r3
 8017304:	b25a      	sxtb	r2, r3
 8017306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017308:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 801730c:	2301      	movs	r3, #1
 801730e:	637b      	str	r3, [r7, #52]	@ 0x34
 8017310:	e001      	b.n	8017316 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8017312:	2300      	movs	r3, #0
 8017314:	637b      	str	r3, [r7, #52]	@ 0x34
 8017316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017318:	613b      	str	r3, [r7, #16]
	__asm volatile
 801731a:	693b      	ldr	r3, [r7, #16]
 801731c:	f383 8811 	msr	BASEPRI, r3
}
 8017320:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8017324:	4618      	mov	r0, r3
 8017326:	3738      	adds	r7, #56	@ 0x38
 8017328:	46bd      	mov	sp, r7
 801732a:	bd80      	pop	{r7, pc}

0801732c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801732c:	b580      	push	{r7, lr}
 801732e:	b084      	sub	sp, #16
 8017330:	af00      	add	r7, sp, #0
 8017332:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017338:	68fb      	ldr	r3, [r7, #12]
 801733a:	2b00      	cmp	r3, #0
 801733c:	d10b      	bne.n	8017356 <vQueueDelete+0x2a>
	__asm volatile
 801733e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017342:	f383 8811 	msr	BASEPRI, r3
 8017346:	f3bf 8f6f 	isb	sy
 801734a:	f3bf 8f4f 	dsb	sy
 801734e:	60bb      	str	r3, [r7, #8]
}
 8017350:	bf00      	nop
 8017352:	bf00      	nop
 8017354:	e7fd      	b.n	8017352 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8017356:	68f8      	ldr	r0, [r7, #12]
 8017358:	f000 f95e 	bl	8017618 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801735c:	68fb      	ldr	r3, [r7, #12]
 801735e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8017362:	2b00      	cmp	r3, #0
 8017364:	d102      	bne.n	801736c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8017366:	68f8      	ldr	r0, [r7, #12]
 8017368:	f002 f88e 	bl	8019488 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801736c:	bf00      	nop
 801736e:	3710      	adds	r7, #16
 8017370:	46bd      	mov	sp, r7
 8017372:	bd80      	pop	{r7, pc}

08017374 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8017374:	b480      	push	{r7}
 8017376:	b085      	sub	sp, #20
 8017378:	af00      	add	r7, sp, #0
 801737a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017380:	2b00      	cmp	r3, #0
 8017382:	d006      	beq.n	8017392 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017388:	681b      	ldr	r3, [r3, #0]
 801738a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 801738e:	60fb      	str	r3, [r7, #12]
 8017390:	e001      	b.n	8017396 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8017392:	2300      	movs	r3, #0
 8017394:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8017396:	68fb      	ldr	r3, [r7, #12]
	}
 8017398:	4618      	mov	r0, r3
 801739a:	3714      	adds	r7, #20
 801739c:	46bd      	mov	sp, r7
 801739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173a2:	4770      	bx	lr

080173a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80173a4:	b580      	push	{r7, lr}
 80173a6:	b086      	sub	sp, #24
 80173a8:	af00      	add	r7, sp, #0
 80173aa:	60f8      	str	r0, [r7, #12]
 80173ac:	60b9      	str	r1, [r7, #8]
 80173ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80173b0:	2300      	movs	r3, #0
 80173b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80173b4:	68fb      	ldr	r3, [r7, #12]
 80173b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80173b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80173ba:	68fb      	ldr	r3, [r7, #12]
 80173bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80173be:	2b00      	cmp	r3, #0
 80173c0:	d10d      	bne.n	80173de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80173c2:	68fb      	ldr	r3, [r7, #12]
 80173c4:	681b      	ldr	r3, [r3, #0]
 80173c6:	2b00      	cmp	r3, #0
 80173c8:	d14d      	bne.n	8017466 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	689b      	ldr	r3, [r3, #8]
 80173ce:	4618      	mov	r0, r3
 80173d0:	f001 f880 	bl	80184d4 <xTaskPriorityDisinherit>
 80173d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80173d6:	68fb      	ldr	r3, [r7, #12]
 80173d8:	2200      	movs	r2, #0
 80173da:	609a      	str	r2, [r3, #8]
 80173dc:	e043      	b.n	8017466 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d119      	bne.n	8017418 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80173e4:	68fb      	ldr	r3, [r7, #12]
 80173e6:	6858      	ldr	r0, [r3, #4]
 80173e8:	68fb      	ldr	r3, [r7, #12]
 80173ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80173ec:	461a      	mov	r2, r3
 80173ee:	68b9      	ldr	r1, [r7, #8]
 80173f0:	f004 f87f 	bl	801b4f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80173f4:	68fb      	ldr	r3, [r7, #12]
 80173f6:	685a      	ldr	r2, [r3, #4]
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80173fc:	441a      	add	r2, r3
 80173fe:	68fb      	ldr	r3, [r7, #12]
 8017400:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017402:	68fb      	ldr	r3, [r7, #12]
 8017404:	685a      	ldr	r2, [r3, #4]
 8017406:	68fb      	ldr	r3, [r7, #12]
 8017408:	689b      	ldr	r3, [r3, #8]
 801740a:	429a      	cmp	r2, r3
 801740c:	d32b      	bcc.n	8017466 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801740e:	68fb      	ldr	r3, [r7, #12]
 8017410:	681a      	ldr	r2, [r3, #0]
 8017412:	68fb      	ldr	r3, [r7, #12]
 8017414:	605a      	str	r2, [r3, #4]
 8017416:	e026      	b.n	8017466 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017418:	68fb      	ldr	r3, [r7, #12]
 801741a:	68d8      	ldr	r0, [r3, #12]
 801741c:	68fb      	ldr	r3, [r7, #12]
 801741e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017420:	461a      	mov	r2, r3
 8017422:	68b9      	ldr	r1, [r7, #8]
 8017424:	f004 f865 	bl	801b4f2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017428:	68fb      	ldr	r3, [r7, #12]
 801742a:	68da      	ldr	r2, [r3, #12]
 801742c:	68fb      	ldr	r3, [r7, #12]
 801742e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017430:	425b      	negs	r3, r3
 8017432:	441a      	add	r2, r3
 8017434:	68fb      	ldr	r3, [r7, #12]
 8017436:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017438:	68fb      	ldr	r3, [r7, #12]
 801743a:	68da      	ldr	r2, [r3, #12]
 801743c:	68fb      	ldr	r3, [r7, #12]
 801743e:	681b      	ldr	r3, [r3, #0]
 8017440:	429a      	cmp	r2, r3
 8017442:	d207      	bcs.n	8017454 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017444:	68fb      	ldr	r3, [r7, #12]
 8017446:	689a      	ldr	r2, [r3, #8]
 8017448:	68fb      	ldr	r3, [r7, #12]
 801744a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801744c:	425b      	negs	r3, r3
 801744e:	441a      	add	r2, r3
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	2b02      	cmp	r3, #2
 8017458:	d105      	bne.n	8017466 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801745a:	693b      	ldr	r3, [r7, #16]
 801745c:	2b00      	cmp	r3, #0
 801745e:	d002      	beq.n	8017466 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017460:	693b      	ldr	r3, [r7, #16]
 8017462:	3b01      	subs	r3, #1
 8017464:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017466:	693b      	ldr	r3, [r7, #16]
 8017468:	1c5a      	adds	r2, r3, #1
 801746a:	68fb      	ldr	r3, [r7, #12]
 801746c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801746e:	697b      	ldr	r3, [r7, #20]
}
 8017470:	4618      	mov	r0, r3
 8017472:	3718      	adds	r7, #24
 8017474:	46bd      	mov	sp, r7
 8017476:	bd80      	pop	{r7, pc}

08017478 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017478:	b580      	push	{r7, lr}
 801747a:	b082      	sub	sp, #8
 801747c:	af00      	add	r7, sp, #0
 801747e:	6078      	str	r0, [r7, #4]
 8017480:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017486:	2b00      	cmp	r3, #0
 8017488:	d018      	beq.n	80174bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	68da      	ldr	r2, [r3, #12]
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017492:	441a      	add	r2, r3
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	68da      	ldr	r2, [r3, #12]
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	689b      	ldr	r3, [r3, #8]
 80174a0:	429a      	cmp	r2, r3
 80174a2:	d303      	bcc.n	80174ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	681a      	ldr	r2, [r3, #0]
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	68d9      	ldr	r1, [r3, #12]
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80174b4:	461a      	mov	r2, r3
 80174b6:	6838      	ldr	r0, [r7, #0]
 80174b8:	f004 f81b 	bl	801b4f2 <memcpy>
	}
}
 80174bc:	bf00      	nop
 80174be:	3708      	adds	r7, #8
 80174c0:	46bd      	mov	sp, r7
 80174c2:	bd80      	pop	{r7, pc}

080174c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80174c4:	b580      	push	{r7, lr}
 80174c6:	b084      	sub	sp, #16
 80174c8:	af00      	add	r7, sp, #0
 80174ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80174cc:	f001 fdec 	bl	80190a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80174d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80174d8:	e011      	b.n	80174fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d012      	beq.n	8017508 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	3324      	adds	r3, #36	@ 0x24
 80174e6:	4618      	mov	r0, r3
 80174e8:	f000 fd98 	bl	801801c <xTaskRemoveFromEventList>
 80174ec:	4603      	mov	r3, r0
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d001      	beq.n	80174f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80174f2:	f000 fe71 	bl	80181d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80174f6:	7bfb      	ldrb	r3, [r7, #15]
 80174f8:	3b01      	subs	r3, #1
 80174fa:	b2db      	uxtb	r3, r3
 80174fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80174fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017502:	2b00      	cmp	r3, #0
 8017504:	dce9      	bgt.n	80174da <prvUnlockQueue+0x16>
 8017506:	e000      	b.n	801750a <prvUnlockQueue+0x46>
					break;
 8017508:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	22ff      	movs	r2, #255	@ 0xff
 801750e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8017512:	f001 fdfb 	bl	801910c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017516:	f001 fdc7 	bl	80190a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8017520:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017522:	e011      	b.n	8017548 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	691b      	ldr	r3, [r3, #16]
 8017528:	2b00      	cmp	r3, #0
 801752a:	d012      	beq.n	8017552 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	3310      	adds	r3, #16
 8017530:	4618      	mov	r0, r3
 8017532:	f000 fd73 	bl	801801c <xTaskRemoveFromEventList>
 8017536:	4603      	mov	r3, r0
 8017538:	2b00      	cmp	r3, #0
 801753a:	d001      	beq.n	8017540 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801753c:	f000 fe4c 	bl	80181d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017540:	7bbb      	ldrb	r3, [r7, #14]
 8017542:	3b01      	subs	r3, #1
 8017544:	b2db      	uxtb	r3, r3
 8017546:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017548:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801754c:	2b00      	cmp	r3, #0
 801754e:	dce9      	bgt.n	8017524 <prvUnlockQueue+0x60>
 8017550:	e000      	b.n	8017554 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017552:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	22ff      	movs	r2, #255	@ 0xff
 8017558:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 801755c:	f001 fdd6 	bl	801910c <vPortExitCritical>
}
 8017560:	bf00      	nop
 8017562:	3710      	adds	r7, #16
 8017564:	46bd      	mov	sp, r7
 8017566:	bd80      	pop	{r7, pc}

08017568 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017568:	b580      	push	{r7, lr}
 801756a:	b084      	sub	sp, #16
 801756c:	af00      	add	r7, sp, #0
 801756e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017570:	f001 fd9a 	bl	80190a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017578:	2b00      	cmp	r3, #0
 801757a:	d102      	bne.n	8017582 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801757c:	2301      	movs	r3, #1
 801757e:	60fb      	str	r3, [r7, #12]
 8017580:	e001      	b.n	8017586 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8017582:	2300      	movs	r3, #0
 8017584:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017586:	f001 fdc1 	bl	801910c <vPortExitCritical>

	return xReturn;
 801758a:	68fb      	ldr	r3, [r7, #12]
}
 801758c:	4618      	mov	r0, r3
 801758e:	3710      	adds	r7, #16
 8017590:	46bd      	mov	sp, r7
 8017592:	bd80      	pop	{r7, pc}

08017594 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8017594:	b580      	push	{r7, lr}
 8017596:	b084      	sub	sp, #16
 8017598:	af00      	add	r7, sp, #0
 801759a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801759c:	f001 fd84 	bl	80190a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80175a8:	429a      	cmp	r2, r3
 80175aa:	d102      	bne.n	80175b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80175ac:	2301      	movs	r3, #1
 80175ae:	60fb      	str	r3, [r7, #12]
 80175b0:	e001      	b.n	80175b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80175b2:	2300      	movs	r3, #0
 80175b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80175b6:	f001 fda9 	bl	801910c <vPortExitCritical>

	return xReturn;
 80175ba:	68fb      	ldr	r3, [r7, #12]
}
 80175bc:	4618      	mov	r0, r3
 80175be:	3710      	adds	r7, #16
 80175c0:	46bd      	mov	sp, r7
 80175c2:	bd80      	pop	{r7, pc}

080175c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80175c4:	b480      	push	{r7}
 80175c6:	b085      	sub	sp, #20
 80175c8:	af00      	add	r7, sp, #0
 80175ca:	6078      	str	r0, [r7, #4]
 80175cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80175ce:	2300      	movs	r3, #0
 80175d0:	60fb      	str	r3, [r7, #12]
 80175d2:	e014      	b.n	80175fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80175d4:	4a0f      	ldr	r2, [pc, #60]	@ (8017614 <vQueueAddToRegistry+0x50>)
 80175d6:	68fb      	ldr	r3, [r7, #12]
 80175d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80175dc:	2b00      	cmp	r3, #0
 80175de:	d10b      	bne.n	80175f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80175e0:	490c      	ldr	r1, [pc, #48]	@ (8017614 <vQueueAddToRegistry+0x50>)
 80175e2:	68fb      	ldr	r3, [r7, #12]
 80175e4:	683a      	ldr	r2, [r7, #0]
 80175e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80175ea:	4a0a      	ldr	r2, [pc, #40]	@ (8017614 <vQueueAddToRegistry+0x50>)
 80175ec:	68fb      	ldr	r3, [r7, #12]
 80175ee:	00db      	lsls	r3, r3, #3
 80175f0:	4413      	add	r3, r2
 80175f2:	687a      	ldr	r2, [r7, #4]
 80175f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80175f6:	e006      	b.n	8017606 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80175f8:	68fb      	ldr	r3, [r7, #12]
 80175fa:	3301      	adds	r3, #1
 80175fc:	60fb      	str	r3, [r7, #12]
 80175fe:	68fb      	ldr	r3, [r7, #12]
 8017600:	2b07      	cmp	r3, #7
 8017602:	d9e7      	bls.n	80175d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017604:	bf00      	nop
 8017606:	bf00      	nop
 8017608:	3714      	adds	r7, #20
 801760a:	46bd      	mov	sp, r7
 801760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017610:	4770      	bx	lr
 8017612:	bf00      	nop
 8017614:	20003e0c 	.word	0x20003e0c

08017618 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8017618:	b480      	push	{r7}
 801761a:	b085      	sub	sp, #20
 801761c:	af00      	add	r7, sp, #0
 801761e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017620:	2300      	movs	r3, #0
 8017622:	60fb      	str	r3, [r7, #12]
 8017624:	e016      	b.n	8017654 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8017626:	4a10      	ldr	r2, [pc, #64]	@ (8017668 <vQueueUnregisterQueue+0x50>)
 8017628:	68fb      	ldr	r3, [r7, #12]
 801762a:	00db      	lsls	r3, r3, #3
 801762c:	4413      	add	r3, r2
 801762e:	685b      	ldr	r3, [r3, #4]
 8017630:	687a      	ldr	r2, [r7, #4]
 8017632:	429a      	cmp	r2, r3
 8017634:	d10b      	bne.n	801764e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8017636:	4a0c      	ldr	r2, [pc, #48]	@ (8017668 <vQueueUnregisterQueue+0x50>)
 8017638:	68fb      	ldr	r3, [r7, #12]
 801763a:	2100      	movs	r1, #0
 801763c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8017640:	4a09      	ldr	r2, [pc, #36]	@ (8017668 <vQueueUnregisterQueue+0x50>)
 8017642:	68fb      	ldr	r3, [r7, #12]
 8017644:	00db      	lsls	r3, r3, #3
 8017646:	4413      	add	r3, r2
 8017648:	2200      	movs	r2, #0
 801764a:	605a      	str	r2, [r3, #4]
				break;
 801764c:	e006      	b.n	801765c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801764e:	68fb      	ldr	r3, [r7, #12]
 8017650:	3301      	adds	r3, #1
 8017652:	60fb      	str	r3, [r7, #12]
 8017654:	68fb      	ldr	r3, [r7, #12]
 8017656:	2b07      	cmp	r3, #7
 8017658:	d9e5      	bls.n	8017626 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801765a:	bf00      	nop
 801765c:	bf00      	nop
 801765e:	3714      	adds	r7, #20
 8017660:	46bd      	mov	sp, r7
 8017662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017666:	4770      	bx	lr
 8017668:	20003e0c 	.word	0x20003e0c

0801766c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801766c:	b580      	push	{r7, lr}
 801766e:	b086      	sub	sp, #24
 8017670:	af00      	add	r7, sp, #0
 8017672:	60f8      	str	r0, [r7, #12]
 8017674:	60b9      	str	r1, [r7, #8]
 8017676:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8017678:	68fb      	ldr	r3, [r7, #12]
 801767a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801767c:	f001 fd14 	bl	80190a8 <vPortEnterCritical>
 8017680:	697b      	ldr	r3, [r7, #20]
 8017682:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8017686:	b25b      	sxtb	r3, r3
 8017688:	f1b3 3fff 	cmp.w	r3, #4294967295
 801768c:	d103      	bne.n	8017696 <vQueueWaitForMessageRestricted+0x2a>
 801768e:	697b      	ldr	r3, [r7, #20]
 8017690:	2200      	movs	r2, #0
 8017692:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8017696:	697b      	ldr	r3, [r7, #20]
 8017698:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801769c:	b25b      	sxtb	r3, r3
 801769e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80176a2:	d103      	bne.n	80176ac <vQueueWaitForMessageRestricted+0x40>
 80176a4:	697b      	ldr	r3, [r7, #20]
 80176a6:	2200      	movs	r2, #0
 80176a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80176ac:	f001 fd2e 	bl	801910c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80176b0:	697b      	ldr	r3, [r7, #20]
 80176b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	d106      	bne.n	80176c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80176b8:	697b      	ldr	r3, [r7, #20]
 80176ba:	3324      	adds	r3, #36	@ 0x24
 80176bc:	687a      	ldr	r2, [r7, #4]
 80176be:	68b9      	ldr	r1, [r7, #8]
 80176c0:	4618      	mov	r0, r3
 80176c2:	f000 fc7f 	bl	8017fc4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80176c6:	6978      	ldr	r0, [r7, #20]
 80176c8:	f7ff fefc 	bl	80174c4 <prvUnlockQueue>
	}
 80176cc:	bf00      	nop
 80176ce:	3718      	adds	r7, #24
 80176d0:	46bd      	mov	sp, r7
 80176d2:	bd80      	pop	{r7, pc}

080176d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80176d4:	b580      	push	{r7, lr}
 80176d6:	b08e      	sub	sp, #56	@ 0x38
 80176d8:	af04      	add	r7, sp, #16
 80176da:	60f8      	str	r0, [r7, #12]
 80176dc:	60b9      	str	r1, [r7, #8]
 80176de:	607a      	str	r2, [r7, #4]
 80176e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80176e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	d10b      	bne.n	8017700 <xTaskCreateStatic+0x2c>
	__asm volatile
 80176e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80176ec:	f383 8811 	msr	BASEPRI, r3
 80176f0:	f3bf 8f6f 	isb	sy
 80176f4:	f3bf 8f4f 	dsb	sy
 80176f8:	623b      	str	r3, [r7, #32]
}
 80176fa:	bf00      	nop
 80176fc:	bf00      	nop
 80176fe:	e7fd      	b.n	80176fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8017700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017702:	2b00      	cmp	r3, #0
 8017704:	d10b      	bne.n	801771e <xTaskCreateStatic+0x4a>
	__asm volatile
 8017706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801770a:	f383 8811 	msr	BASEPRI, r3
 801770e:	f3bf 8f6f 	isb	sy
 8017712:	f3bf 8f4f 	dsb	sy
 8017716:	61fb      	str	r3, [r7, #28]
}
 8017718:	bf00      	nop
 801771a:	bf00      	nop
 801771c:	e7fd      	b.n	801771a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801771e:	23a8      	movs	r3, #168	@ 0xa8
 8017720:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017722:	693b      	ldr	r3, [r7, #16]
 8017724:	2ba8      	cmp	r3, #168	@ 0xa8
 8017726:	d00b      	beq.n	8017740 <xTaskCreateStatic+0x6c>
	__asm volatile
 8017728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801772c:	f383 8811 	msr	BASEPRI, r3
 8017730:	f3bf 8f6f 	isb	sy
 8017734:	f3bf 8f4f 	dsb	sy
 8017738:	61bb      	str	r3, [r7, #24]
}
 801773a:	bf00      	nop
 801773c:	bf00      	nop
 801773e:	e7fd      	b.n	801773c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017740:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017744:	2b00      	cmp	r3, #0
 8017746:	d01e      	beq.n	8017786 <xTaskCreateStatic+0xb2>
 8017748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801774a:	2b00      	cmp	r3, #0
 801774c:	d01b      	beq.n	8017786 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801774e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017750:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017754:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017756:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8017758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801775a:	2202      	movs	r2, #2
 801775c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017760:	2300      	movs	r3, #0
 8017762:	9303      	str	r3, [sp, #12]
 8017764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017766:	9302      	str	r3, [sp, #8]
 8017768:	f107 0314 	add.w	r3, r7, #20
 801776c:	9301      	str	r3, [sp, #4]
 801776e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017770:	9300      	str	r3, [sp, #0]
 8017772:	683b      	ldr	r3, [r7, #0]
 8017774:	687a      	ldr	r2, [r7, #4]
 8017776:	68b9      	ldr	r1, [r7, #8]
 8017778:	68f8      	ldr	r0, [r7, #12]
 801777a:	f000 f851 	bl	8017820 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801777e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017780:	f000 f8f6 	bl	8017970 <prvAddNewTaskToReadyList>
 8017784:	e001      	b.n	801778a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8017786:	2300      	movs	r3, #0
 8017788:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801778a:	697b      	ldr	r3, [r7, #20]
	}
 801778c:	4618      	mov	r0, r3
 801778e:	3728      	adds	r7, #40	@ 0x28
 8017790:	46bd      	mov	sp, r7
 8017792:	bd80      	pop	{r7, pc}

08017794 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017794:	b580      	push	{r7, lr}
 8017796:	b08c      	sub	sp, #48	@ 0x30
 8017798:	af04      	add	r7, sp, #16
 801779a:	60f8      	str	r0, [r7, #12]
 801779c:	60b9      	str	r1, [r7, #8]
 801779e:	603b      	str	r3, [r7, #0]
 80177a0:	4613      	mov	r3, r2
 80177a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80177a4:	88fb      	ldrh	r3, [r7, #6]
 80177a6:	009b      	lsls	r3, r3, #2
 80177a8:	4618      	mov	r0, r3
 80177aa:	f001 fd9f 	bl	80192ec <pvPortMalloc>
 80177ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80177b0:	697b      	ldr	r3, [r7, #20]
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d00e      	beq.n	80177d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80177b6:	20a8      	movs	r0, #168	@ 0xa8
 80177b8:	f001 fd98 	bl	80192ec <pvPortMalloc>
 80177bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80177be:	69fb      	ldr	r3, [r7, #28]
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d003      	beq.n	80177cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80177c4:	69fb      	ldr	r3, [r7, #28]
 80177c6:	697a      	ldr	r2, [r7, #20]
 80177c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80177ca:	e005      	b.n	80177d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80177cc:	6978      	ldr	r0, [r7, #20]
 80177ce:	f001 fe5b 	bl	8019488 <vPortFree>
 80177d2:	e001      	b.n	80177d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80177d4:	2300      	movs	r3, #0
 80177d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80177d8:	69fb      	ldr	r3, [r7, #28]
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d017      	beq.n	801780e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80177de:	69fb      	ldr	r3, [r7, #28]
 80177e0:	2200      	movs	r2, #0
 80177e2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80177e6:	88fa      	ldrh	r2, [r7, #6]
 80177e8:	2300      	movs	r3, #0
 80177ea:	9303      	str	r3, [sp, #12]
 80177ec:	69fb      	ldr	r3, [r7, #28]
 80177ee:	9302      	str	r3, [sp, #8]
 80177f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80177f2:	9301      	str	r3, [sp, #4]
 80177f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80177f6:	9300      	str	r3, [sp, #0]
 80177f8:	683b      	ldr	r3, [r7, #0]
 80177fa:	68b9      	ldr	r1, [r7, #8]
 80177fc:	68f8      	ldr	r0, [r7, #12]
 80177fe:	f000 f80f 	bl	8017820 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017802:	69f8      	ldr	r0, [r7, #28]
 8017804:	f000 f8b4 	bl	8017970 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017808:	2301      	movs	r3, #1
 801780a:	61bb      	str	r3, [r7, #24]
 801780c:	e002      	b.n	8017814 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801780e:	f04f 33ff 	mov.w	r3, #4294967295
 8017812:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017814:	69bb      	ldr	r3, [r7, #24]
	}
 8017816:	4618      	mov	r0, r3
 8017818:	3720      	adds	r7, #32
 801781a:	46bd      	mov	sp, r7
 801781c:	bd80      	pop	{r7, pc}
	...

08017820 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017820:	b580      	push	{r7, lr}
 8017822:	b088      	sub	sp, #32
 8017824:	af00      	add	r7, sp, #0
 8017826:	60f8      	str	r0, [r7, #12]
 8017828:	60b9      	str	r1, [r7, #8]
 801782a:	607a      	str	r2, [r7, #4]
 801782c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801782e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017830:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	009b      	lsls	r3, r3, #2
 8017836:	461a      	mov	r2, r3
 8017838:	21a5      	movs	r1, #165	@ 0xa5
 801783a:	f003 fd5b 	bl	801b2f4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801783e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017840:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8017848:	3b01      	subs	r3, #1
 801784a:	009b      	lsls	r3, r3, #2
 801784c:	4413      	add	r3, r2
 801784e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017850:	69bb      	ldr	r3, [r7, #24]
 8017852:	f023 0307 	bic.w	r3, r3, #7
 8017856:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017858:	69bb      	ldr	r3, [r7, #24]
 801785a:	f003 0307 	and.w	r3, r3, #7
 801785e:	2b00      	cmp	r3, #0
 8017860:	d00b      	beq.n	801787a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8017862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017866:	f383 8811 	msr	BASEPRI, r3
 801786a:	f3bf 8f6f 	isb	sy
 801786e:	f3bf 8f4f 	dsb	sy
 8017872:	617b      	str	r3, [r7, #20]
}
 8017874:	bf00      	nop
 8017876:	bf00      	nop
 8017878:	e7fd      	b.n	8017876 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801787a:	68bb      	ldr	r3, [r7, #8]
 801787c:	2b00      	cmp	r3, #0
 801787e:	d01f      	beq.n	80178c0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017880:	2300      	movs	r3, #0
 8017882:	61fb      	str	r3, [r7, #28]
 8017884:	e012      	b.n	80178ac <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017886:	68ba      	ldr	r2, [r7, #8]
 8017888:	69fb      	ldr	r3, [r7, #28]
 801788a:	4413      	add	r3, r2
 801788c:	7819      	ldrb	r1, [r3, #0]
 801788e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017890:	69fb      	ldr	r3, [r7, #28]
 8017892:	4413      	add	r3, r2
 8017894:	3334      	adds	r3, #52	@ 0x34
 8017896:	460a      	mov	r2, r1
 8017898:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801789a:	68ba      	ldr	r2, [r7, #8]
 801789c:	69fb      	ldr	r3, [r7, #28]
 801789e:	4413      	add	r3, r2
 80178a0:	781b      	ldrb	r3, [r3, #0]
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d006      	beq.n	80178b4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80178a6:	69fb      	ldr	r3, [r7, #28]
 80178a8:	3301      	adds	r3, #1
 80178aa:	61fb      	str	r3, [r7, #28]
 80178ac:	69fb      	ldr	r3, [r7, #28]
 80178ae:	2b0f      	cmp	r3, #15
 80178b0:	d9e9      	bls.n	8017886 <prvInitialiseNewTask+0x66>
 80178b2:	e000      	b.n	80178b6 <prvInitialiseNewTask+0x96>
			{
				break;
 80178b4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80178b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178b8:	2200      	movs	r2, #0
 80178ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80178be:	e003      	b.n	80178c8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80178c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178c2:	2200      	movs	r2, #0
 80178c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80178c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178ca:	2b37      	cmp	r3, #55	@ 0x37
 80178cc:	d901      	bls.n	80178d2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80178ce:	2337      	movs	r3, #55	@ 0x37
 80178d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80178d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80178d6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80178d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80178dc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80178de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178e0:	2200      	movs	r2, #0
 80178e2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80178e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178e6:	3304      	adds	r3, #4
 80178e8:	4618      	mov	r0, r3
 80178ea:	f7fe fd7b 	bl	80163e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80178ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178f0:	3318      	adds	r3, #24
 80178f2:	4618      	mov	r0, r3
 80178f4:	f7fe fd76 	bl	80163e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80178f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80178fc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80178fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017900:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8017904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017906:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8017908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801790a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801790c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801790e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017910:	2200      	movs	r2, #0
 8017912:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017918:	2200      	movs	r2, #0
 801791a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801791e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017920:	3354      	adds	r3, #84	@ 0x54
 8017922:	224c      	movs	r2, #76	@ 0x4c
 8017924:	2100      	movs	r1, #0
 8017926:	4618      	mov	r0, r3
 8017928:	f003 fce4 	bl	801b2f4 <memset>
 801792c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801792e:	4a0d      	ldr	r2, [pc, #52]	@ (8017964 <prvInitialiseNewTask+0x144>)
 8017930:	659a      	str	r2, [r3, #88]	@ 0x58
 8017932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017934:	4a0c      	ldr	r2, [pc, #48]	@ (8017968 <prvInitialiseNewTask+0x148>)
 8017936:	65da      	str	r2, [r3, #92]	@ 0x5c
 8017938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801793a:	4a0c      	ldr	r2, [pc, #48]	@ (801796c <prvInitialiseNewTask+0x14c>)
 801793c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801793e:	683a      	ldr	r2, [r7, #0]
 8017940:	68f9      	ldr	r1, [r7, #12]
 8017942:	69b8      	ldr	r0, [r7, #24]
 8017944:	f001 fa7c 	bl	8018e40 <pxPortInitialiseStack>
 8017948:	4602      	mov	r2, r0
 801794a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801794c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801794e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017950:	2b00      	cmp	r3, #0
 8017952:	d002      	beq.n	801795a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8017954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017956:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017958:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801795a:	bf00      	nop
 801795c:	3720      	adds	r7, #32
 801795e:	46bd      	mov	sp, r7
 8017960:	bd80      	pop	{r7, pc}
 8017962:	bf00      	nop
 8017964:	20008f60 	.word	0x20008f60
 8017968:	20008fc8 	.word	0x20008fc8
 801796c:	20009030 	.word	0x20009030

08017970 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017970:	b580      	push	{r7, lr}
 8017972:	b082      	sub	sp, #8
 8017974:	af00      	add	r7, sp, #0
 8017976:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017978:	f001 fb96 	bl	80190a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801797c:	4b2d      	ldr	r3, [pc, #180]	@ (8017a34 <prvAddNewTaskToReadyList+0xc4>)
 801797e:	681b      	ldr	r3, [r3, #0]
 8017980:	3301      	adds	r3, #1
 8017982:	4a2c      	ldr	r2, [pc, #176]	@ (8017a34 <prvAddNewTaskToReadyList+0xc4>)
 8017984:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8017986:	4b2c      	ldr	r3, [pc, #176]	@ (8017a38 <prvAddNewTaskToReadyList+0xc8>)
 8017988:	681b      	ldr	r3, [r3, #0]
 801798a:	2b00      	cmp	r3, #0
 801798c:	d109      	bne.n	80179a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801798e:	4a2a      	ldr	r2, [pc, #168]	@ (8017a38 <prvAddNewTaskToReadyList+0xc8>)
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017994:	4b27      	ldr	r3, [pc, #156]	@ (8017a34 <prvAddNewTaskToReadyList+0xc4>)
 8017996:	681b      	ldr	r3, [r3, #0]
 8017998:	2b01      	cmp	r3, #1
 801799a:	d110      	bne.n	80179be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801799c:	f000 fc40 	bl	8018220 <prvInitialiseTaskLists>
 80179a0:	e00d      	b.n	80179be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80179a2:	4b26      	ldr	r3, [pc, #152]	@ (8017a3c <prvAddNewTaskToReadyList+0xcc>)
 80179a4:	681b      	ldr	r3, [r3, #0]
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d109      	bne.n	80179be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80179aa:	4b23      	ldr	r3, [pc, #140]	@ (8017a38 <prvAddNewTaskToReadyList+0xc8>)
 80179ac:	681b      	ldr	r3, [r3, #0]
 80179ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80179b4:	429a      	cmp	r2, r3
 80179b6:	d802      	bhi.n	80179be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80179b8:	4a1f      	ldr	r2, [pc, #124]	@ (8017a38 <prvAddNewTaskToReadyList+0xc8>)
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80179be:	4b20      	ldr	r3, [pc, #128]	@ (8017a40 <prvAddNewTaskToReadyList+0xd0>)
 80179c0:	681b      	ldr	r3, [r3, #0]
 80179c2:	3301      	adds	r3, #1
 80179c4:	4a1e      	ldr	r2, [pc, #120]	@ (8017a40 <prvAddNewTaskToReadyList+0xd0>)
 80179c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80179c8:	4b1d      	ldr	r3, [pc, #116]	@ (8017a40 <prvAddNewTaskToReadyList+0xd0>)
 80179ca:	681a      	ldr	r2, [r3, #0]
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80179d4:	4b1b      	ldr	r3, [pc, #108]	@ (8017a44 <prvAddNewTaskToReadyList+0xd4>)
 80179d6:	681b      	ldr	r3, [r3, #0]
 80179d8:	429a      	cmp	r2, r3
 80179da:	d903      	bls.n	80179e4 <prvAddNewTaskToReadyList+0x74>
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80179e0:	4a18      	ldr	r2, [pc, #96]	@ (8017a44 <prvAddNewTaskToReadyList+0xd4>)
 80179e2:	6013      	str	r3, [r2, #0]
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80179e8:	4613      	mov	r3, r2
 80179ea:	009b      	lsls	r3, r3, #2
 80179ec:	4413      	add	r3, r2
 80179ee:	009b      	lsls	r3, r3, #2
 80179f0:	4a15      	ldr	r2, [pc, #84]	@ (8017a48 <prvAddNewTaskToReadyList+0xd8>)
 80179f2:	441a      	add	r2, r3
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	3304      	adds	r3, #4
 80179f8:	4619      	mov	r1, r3
 80179fa:	4610      	mov	r0, r2
 80179fc:	f7fe fcff 	bl	80163fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8017a00:	f001 fb84 	bl	801910c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8017a04:	4b0d      	ldr	r3, [pc, #52]	@ (8017a3c <prvAddNewTaskToReadyList+0xcc>)
 8017a06:	681b      	ldr	r3, [r3, #0]
 8017a08:	2b00      	cmp	r3, #0
 8017a0a:	d00e      	beq.n	8017a2a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8017a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8017a38 <prvAddNewTaskToReadyList+0xc8>)
 8017a0e:	681b      	ldr	r3, [r3, #0]
 8017a10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017a16:	429a      	cmp	r2, r3
 8017a18:	d207      	bcs.n	8017a2a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8017a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8017a4c <prvAddNewTaskToReadyList+0xdc>)
 8017a1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017a20:	601a      	str	r2, [r3, #0]
 8017a22:	f3bf 8f4f 	dsb	sy
 8017a26:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017a2a:	bf00      	nop
 8017a2c:	3708      	adds	r7, #8
 8017a2e:	46bd      	mov	sp, r7
 8017a30:	bd80      	pop	{r7, pc}
 8017a32:	bf00      	nop
 8017a34:	20004320 	.word	0x20004320
 8017a38:	20003e4c 	.word	0x20003e4c
 8017a3c:	2000432c 	.word	0x2000432c
 8017a40:	2000433c 	.word	0x2000433c
 8017a44:	20004328 	.word	0x20004328
 8017a48:	20003e50 	.word	0x20003e50
 8017a4c:	e000ed04 	.word	0xe000ed04

08017a50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8017a50:	b580      	push	{r7, lr}
 8017a52:	b084      	sub	sp, #16
 8017a54:	af00      	add	r7, sp, #0
 8017a56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8017a58:	2300      	movs	r3, #0
 8017a5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	d018      	beq.n	8017a94 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8017a62:	4b14      	ldr	r3, [pc, #80]	@ (8017ab4 <vTaskDelay+0x64>)
 8017a64:	681b      	ldr	r3, [r3, #0]
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	d00b      	beq.n	8017a82 <vTaskDelay+0x32>
	__asm volatile
 8017a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017a6e:	f383 8811 	msr	BASEPRI, r3
 8017a72:	f3bf 8f6f 	isb	sy
 8017a76:	f3bf 8f4f 	dsb	sy
 8017a7a:	60bb      	str	r3, [r7, #8]
}
 8017a7c:	bf00      	nop
 8017a7e:	bf00      	nop
 8017a80:	e7fd      	b.n	8017a7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8017a82:	f000 f88b 	bl	8017b9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8017a86:	2100      	movs	r1, #0
 8017a88:	6878      	ldr	r0, [r7, #4]
 8017a8a:	f000 fe2b 	bl	80186e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8017a8e:	f000 f893 	bl	8017bb8 <xTaskResumeAll>
 8017a92:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8017a94:	68fb      	ldr	r3, [r7, #12]
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	d107      	bne.n	8017aaa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8017a9a:	4b07      	ldr	r3, [pc, #28]	@ (8017ab8 <vTaskDelay+0x68>)
 8017a9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017aa0:	601a      	str	r2, [r3, #0]
 8017aa2:	f3bf 8f4f 	dsb	sy
 8017aa6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017aaa:	bf00      	nop
 8017aac:	3710      	adds	r7, #16
 8017aae:	46bd      	mov	sp, r7
 8017ab0:	bd80      	pop	{r7, pc}
 8017ab2:	bf00      	nop
 8017ab4:	20004348 	.word	0x20004348
 8017ab8:	e000ed04 	.word	0xe000ed04

08017abc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8017abc:	b580      	push	{r7, lr}
 8017abe:	b08a      	sub	sp, #40	@ 0x28
 8017ac0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8017ac2:	2300      	movs	r3, #0
 8017ac4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8017ac6:	2300      	movs	r3, #0
 8017ac8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8017aca:	463a      	mov	r2, r7
 8017acc:	1d39      	adds	r1, r7, #4
 8017ace:	f107 0308 	add.w	r3, r7, #8
 8017ad2:	4618      	mov	r0, r3
 8017ad4:	f7fe fc32 	bl	801633c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8017ad8:	6839      	ldr	r1, [r7, #0]
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	68ba      	ldr	r2, [r7, #8]
 8017ade:	9202      	str	r2, [sp, #8]
 8017ae0:	9301      	str	r3, [sp, #4]
 8017ae2:	2300      	movs	r3, #0
 8017ae4:	9300      	str	r3, [sp, #0]
 8017ae6:	2300      	movs	r3, #0
 8017ae8:	460a      	mov	r2, r1
 8017aea:	4924      	ldr	r1, [pc, #144]	@ (8017b7c <vTaskStartScheduler+0xc0>)
 8017aec:	4824      	ldr	r0, [pc, #144]	@ (8017b80 <vTaskStartScheduler+0xc4>)
 8017aee:	f7ff fdf1 	bl	80176d4 <xTaskCreateStatic>
 8017af2:	4603      	mov	r3, r0
 8017af4:	4a23      	ldr	r2, [pc, #140]	@ (8017b84 <vTaskStartScheduler+0xc8>)
 8017af6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8017af8:	4b22      	ldr	r3, [pc, #136]	@ (8017b84 <vTaskStartScheduler+0xc8>)
 8017afa:	681b      	ldr	r3, [r3, #0]
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	d002      	beq.n	8017b06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8017b00:	2301      	movs	r3, #1
 8017b02:	617b      	str	r3, [r7, #20]
 8017b04:	e001      	b.n	8017b0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8017b06:	2300      	movs	r3, #0
 8017b08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8017b0a:	697b      	ldr	r3, [r7, #20]
 8017b0c:	2b01      	cmp	r3, #1
 8017b0e:	d102      	bne.n	8017b16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8017b10:	f000 fe3c 	bl	801878c <xTimerCreateTimerTask>
 8017b14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8017b16:	697b      	ldr	r3, [r7, #20]
 8017b18:	2b01      	cmp	r3, #1
 8017b1a:	d11b      	bne.n	8017b54 <vTaskStartScheduler+0x98>
	__asm volatile
 8017b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017b20:	f383 8811 	msr	BASEPRI, r3
 8017b24:	f3bf 8f6f 	isb	sy
 8017b28:	f3bf 8f4f 	dsb	sy
 8017b2c:	613b      	str	r3, [r7, #16]
}
 8017b2e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017b30:	4b15      	ldr	r3, [pc, #84]	@ (8017b88 <vTaskStartScheduler+0xcc>)
 8017b32:	681b      	ldr	r3, [r3, #0]
 8017b34:	3354      	adds	r3, #84	@ 0x54
 8017b36:	4a15      	ldr	r2, [pc, #84]	@ (8017b8c <vTaskStartScheduler+0xd0>)
 8017b38:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8017b3a:	4b15      	ldr	r3, [pc, #84]	@ (8017b90 <vTaskStartScheduler+0xd4>)
 8017b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8017b40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8017b42:	4b14      	ldr	r3, [pc, #80]	@ (8017b94 <vTaskStartScheduler+0xd8>)
 8017b44:	2201      	movs	r2, #1
 8017b46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8017b48:	4b13      	ldr	r3, [pc, #76]	@ (8017b98 <vTaskStartScheduler+0xdc>)
 8017b4a:	2200      	movs	r2, #0
 8017b4c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8017b4e:	f001 fa07 	bl	8018f60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8017b52:	e00f      	b.n	8017b74 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8017b54:	697b      	ldr	r3, [r7, #20]
 8017b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b5a:	d10b      	bne.n	8017b74 <vTaskStartScheduler+0xb8>
	__asm volatile
 8017b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017b60:	f383 8811 	msr	BASEPRI, r3
 8017b64:	f3bf 8f6f 	isb	sy
 8017b68:	f3bf 8f4f 	dsb	sy
 8017b6c:	60fb      	str	r3, [r7, #12]
}
 8017b6e:	bf00      	nop
 8017b70:	bf00      	nop
 8017b72:	e7fd      	b.n	8017b70 <vTaskStartScheduler+0xb4>
}
 8017b74:	bf00      	nop
 8017b76:	3718      	adds	r7, #24
 8017b78:	46bd      	mov	sp, r7
 8017b7a:	bd80      	pop	{r7, pc}
 8017b7c:	0801ed4c 	.word	0x0801ed4c
 8017b80:	080181f1 	.word	0x080181f1
 8017b84:	20004344 	.word	0x20004344
 8017b88:	20003e4c 	.word	0x20003e4c
 8017b8c:	20000288 	.word	0x20000288
 8017b90:	20004340 	.word	0x20004340
 8017b94:	2000432c 	.word	0x2000432c
 8017b98:	20004324 	.word	0x20004324

08017b9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8017b9c:	b480      	push	{r7}
 8017b9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8017ba0:	4b04      	ldr	r3, [pc, #16]	@ (8017bb4 <vTaskSuspendAll+0x18>)
 8017ba2:	681b      	ldr	r3, [r3, #0]
 8017ba4:	3301      	adds	r3, #1
 8017ba6:	4a03      	ldr	r2, [pc, #12]	@ (8017bb4 <vTaskSuspendAll+0x18>)
 8017ba8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8017baa:	bf00      	nop
 8017bac:	46bd      	mov	sp, r7
 8017bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bb2:	4770      	bx	lr
 8017bb4:	20004348 	.word	0x20004348

08017bb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8017bb8:	b580      	push	{r7, lr}
 8017bba:	b084      	sub	sp, #16
 8017bbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8017bbe:	2300      	movs	r3, #0
 8017bc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8017bc2:	2300      	movs	r3, #0
 8017bc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8017bc6:	4b42      	ldr	r3, [pc, #264]	@ (8017cd0 <xTaskResumeAll+0x118>)
 8017bc8:	681b      	ldr	r3, [r3, #0]
 8017bca:	2b00      	cmp	r3, #0
 8017bcc:	d10b      	bne.n	8017be6 <xTaskResumeAll+0x2e>
	__asm volatile
 8017bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017bd2:	f383 8811 	msr	BASEPRI, r3
 8017bd6:	f3bf 8f6f 	isb	sy
 8017bda:	f3bf 8f4f 	dsb	sy
 8017bde:	603b      	str	r3, [r7, #0]
}
 8017be0:	bf00      	nop
 8017be2:	bf00      	nop
 8017be4:	e7fd      	b.n	8017be2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8017be6:	f001 fa5f 	bl	80190a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8017bea:	4b39      	ldr	r3, [pc, #228]	@ (8017cd0 <xTaskResumeAll+0x118>)
 8017bec:	681b      	ldr	r3, [r3, #0]
 8017bee:	3b01      	subs	r3, #1
 8017bf0:	4a37      	ldr	r2, [pc, #220]	@ (8017cd0 <xTaskResumeAll+0x118>)
 8017bf2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017bf4:	4b36      	ldr	r3, [pc, #216]	@ (8017cd0 <xTaskResumeAll+0x118>)
 8017bf6:	681b      	ldr	r3, [r3, #0]
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	d162      	bne.n	8017cc2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8017bfc:	4b35      	ldr	r3, [pc, #212]	@ (8017cd4 <xTaskResumeAll+0x11c>)
 8017bfe:	681b      	ldr	r3, [r3, #0]
 8017c00:	2b00      	cmp	r3, #0
 8017c02:	d05e      	beq.n	8017cc2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017c04:	e02f      	b.n	8017c66 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017c06:	4b34      	ldr	r3, [pc, #208]	@ (8017cd8 <xTaskResumeAll+0x120>)
 8017c08:	68db      	ldr	r3, [r3, #12]
 8017c0a:	68db      	ldr	r3, [r3, #12]
 8017c0c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017c0e:	68fb      	ldr	r3, [r7, #12]
 8017c10:	3318      	adds	r3, #24
 8017c12:	4618      	mov	r0, r3
 8017c14:	f7fe fc50 	bl	80164b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017c18:	68fb      	ldr	r3, [r7, #12]
 8017c1a:	3304      	adds	r3, #4
 8017c1c:	4618      	mov	r0, r3
 8017c1e:	f7fe fc4b 	bl	80164b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017c22:	68fb      	ldr	r3, [r7, #12]
 8017c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017c26:	4b2d      	ldr	r3, [pc, #180]	@ (8017cdc <xTaskResumeAll+0x124>)
 8017c28:	681b      	ldr	r3, [r3, #0]
 8017c2a:	429a      	cmp	r2, r3
 8017c2c:	d903      	bls.n	8017c36 <xTaskResumeAll+0x7e>
 8017c2e:	68fb      	ldr	r3, [r7, #12]
 8017c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017c32:	4a2a      	ldr	r2, [pc, #168]	@ (8017cdc <xTaskResumeAll+0x124>)
 8017c34:	6013      	str	r3, [r2, #0]
 8017c36:	68fb      	ldr	r3, [r7, #12]
 8017c38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017c3a:	4613      	mov	r3, r2
 8017c3c:	009b      	lsls	r3, r3, #2
 8017c3e:	4413      	add	r3, r2
 8017c40:	009b      	lsls	r3, r3, #2
 8017c42:	4a27      	ldr	r2, [pc, #156]	@ (8017ce0 <xTaskResumeAll+0x128>)
 8017c44:	441a      	add	r2, r3
 8017c46:	68fb      	ldr	r3, [r7, #12]
 8017c48:	3304      	adds	r3, #4
 8017c4a:	4619      	mov	r1, r3
 8017c4c:	4610      	mov	r0, r2
 8017c4e:	f7fe fbd6 	bl	80163fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017c52:	68fb      	ldr	r3, [r7, #12]
 8017c54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017c56:	4b23      	ldr	r3, [pc, #140]	@ (8017ce4 <xTaskResumeAll+0x12c>)
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017c5c:	429a      	cmp	r2, r3
 8017c5e:	d302      	bcc.n	8017c66 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8017c60:	4b21      	ldr	r3, [pc, #132]	@ (8017ce8 <xTaskResumeAll+0x130>)
 8017c62:	2201      	movs	r2, #1
 8017c64:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017c66:	4b1c      	ldr	r3, [pc, #112]	@ (8017cd8 <xTaskResumeAll+0x120>)
 8017c68:	681b      	ldr	r3, [r3, #0]
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d1cb      	bne.n	8017c06 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8017c6e:	68fb      	ldr	r3, [r7, #12]
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	d001      	beq.n	8017c78 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8017c74:	f000 fb78 	bl	8018368 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8017c78:	4b1c      	ldr	r3, [pc, #112]	@ (8017cec <xTaskResumeAll+0x134>)
 8017c7a:	681b      	ldr	r3, [r3, #0]
 8017c7c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	d010      	beq.n	8017ca6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8017c84:	f000 f858 	bl	8017d38 <xTaskIncrementTick>
 8017c88:	4603      	mov	r3, r0
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d002      	beq.n	8017c94 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8017c8e:	4b16      	ldr	r3, [pc, #88]	@ (8017ce8 <xTaskResumeAll+0x130>)
 8017c90:	2201      	movs	r2, #1
 8017c92:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	3b01      	subs	r3, #1
 8017c98:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	d1f1      	bne.n	8017c84 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8017ca0:	4b12      	ldr	r3, [pc, #72]	@ (8017cec <xTaskResumeAll+0x134>)
 8017ca2:	2200      	movs	r2, #0
 8017ca4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8017ca6:	4b10      	ldr	r3, [pc, #64]	@ (8017ce8 <xTaskResumeAll+0x130>)
 8017ca8:	681b      	ldr	r3, [r3, #0]
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d009      	beq.n	8017cc2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8017cae:	2301      	movs	r3, #1
 8017cb0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8017cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8017cf0 <xTaskResumeAll+0x138>)
 8017cb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017cb8:	601a      	str	r2, [r3, #0]
 8017cba:	f3bf 8f4f 	dsb	sy
 8017cbe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017cc2:	f001 fa23 	bl	801910c <vPortExitCritical>

	return xAlreadyYielded;
 8017cc6:	68bb      	ldr	r3, [r7, #8]
}
 8017cc8:	4618      	mov	r0, r3
 8017cca:	3710      	adds	r7, #16
 8017ccc:	46bd      	mov	sp, r7
 8017cce:	bd80      	pop	{r7, pc}
 8017cd0:	20004348 	.word	0x20004348
 8017cd4:	20004320 	.word	0x20004320
 8017cd8:	200042e0 	.word	0x200042e0
 8017cdc:	20004328 	.word	0x20004328
 8017ce0:	20003e50 	.word	0x20003e50
 8017ce4:	20003e4c 	.word	0x20003e4c
 8017ce8:	20004334 	.word	0x20004334
 8017cec:	20004330 	.word	0x20004330
 8017cf0:	e000ed04 	.word	0xe000ed04

08017cf4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8017cf4:	b480      	push	{r7}
 8017cf6:	b083      	sub	sp, #12
 8017cf8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8017cfa:	4b05      	ldr	r3, [pc, #20]	@ (8017d10 <xTaskGetTickCount+0x1c>)
 8017cfc:	681b      	ldr	r3, [r3, #0]
 8017cfe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8017d00:	687b      	ldr	r3, [r7, #4]
}
 8017d02:	4618      	mov	r0, r3
 8017d04:	370c      	adds	r7, #12
 8017d06:	46bd      	mov	sp, r7
 8017d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d0c:	4770      	bx	lr
 8017d0e:	bf00      	nop
 8017d10:	20004324 	.word	0x20004324

08017d14 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8017d14:	b580      	push	{r7, lr}
 8017d16:	b082      	sub	sp, #8
 8017d18:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017d1a:	f001 faa5 	bl	8019268 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8017d1e:	2300      	movs	r3, #0
 8017d20:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8017d22:	4b04      	ldr	r3, [pc, #16]	@ (8017d34 <xTaskGetTickCountFromISR+0x20>)
 8017d24:	681b      	ldr	r3, [r3, #0]
 8017d26:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017d28:	683b      	ldr	r3, [r7, #0]
}
 8017d2a:	4618      	mov	r0, r3
 8017d2c:	3708      	adds	r7, #8
 8017d2e:	46bd      	mov	sp, r7
 8017d30:	bd80      	pop	{r7, pc}
 8017d32:	bf00      	nop
 8017d34:	20004324 	.word	0x20004324

08017d38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8017d38:	b580      	push	{r7, lr}
 8017d3a:	b086      	sub	sp, #24
 8017d3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8017d3e:	2300      	movs	r3, #0
 8017d40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017d42:	4b4f      	ldr	r3, [pc, #316]	@ (8017e80 <xTaskIncrementTick+0x148>)
 8017d44:	681b      	ldr	r3, [r3, #0]
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	f040 8090 	bne.w	8017e6c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8017d4c:	4b4d      	ldr	r3, [pc, #308]	@ (8017e84 <xTaskIncrementTick+0x14c>)
 8017d4e:	681b      	ldr	r3, [r3, #0]
 8017d50:	3301      	adds	r3, #1
 8017d52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8017d54:	4a4b      	ldr	r2, [pc, #300]	@ (8017e84 <xTaskIncrementTick+0x14c>)
 8017d56:	693b      	ldr	r3, [r7, #16]
 8017d58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8017d5a:	693b      	ldr	r3, [r7, #16]
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d121      	bne.n	8017da4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8017d60:	4b49      	ldr	r3, [pc, #292]	@ (8017e88 <xTaskIncrementTick+0x150>)
 8017d62:	681b      	ldr	r3, [r3, #0]
 8017d64:	681b      	ldr	r3, [r3, #0]
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	d00b      	beq.n	8017d82 <xTaskIncrementTick+0x4a>
	__asm volatile
 8017d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017d6e:	f383 8811 	msr	BASEPRI, r3
 8017d72:	f3bf 8f6f 	isb	sy
 8017d76:	f3bf 8f4f 	dsb	sy
 8017d7a:	603b      	str	r3, [r7, #0]
}
 8017d7c:	bf00      	nop
 8017d7e:	bf00      	nop
 8017d80:	e7fd      	b.n	8017d7e <xTaskIncrementTick+0x46>
 8017d82:	4b41      	ldr	r3, [pc, #260]	@ (8017e88 <xTaskIncrementTick+0x150>)
 8017d84:	681b      	ldr	r3, [r3, #0]
 8017d86:	60fb      	str	r3, [r7, #12]
 8017d88:	4b40      	ldr	r3, [pc, #256]	@ (8017e8c <xTaskIncrementTick+0x154>)
 8017d8a:	681b      	ldr	r3, [r3, #0]
 8017d8c:	4a3e      	ldr	r2, [pc, #248]	@ (8017e88 <xTaskIncrementTick+0x150>)
 8017d8e:	6013      	str	r3, [r2, #0]
 8017d90:	4a3e      	ldr	r2, [pc, #248]	@ (8017e8c <xTaskIncrementTick+0x154>)
 8017d92:	68fb      	ldr	r3, [r7, #12]
 8017d94:	6013      	str	r3, [r2, #0]
 8017d96:	4b3e      	ldr	r3, [pc, #248]	@ (8017e90 <xTaskIncrementTick+0x158>)
 8017d98:	681b      	ldr	r3, [r3, #0]
 8017d9a:	3301      	adds	r3, #1
 8017d9c:	4a3c      	ldr	r2, [pc, #240]	@ (8017e90 <xTaskIncrementTick+0x158>)
 8017d9e:	6013      	str	r3, [r2, #0]
 8017da0:	f000 fae2 	bl	8018368 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8017da4:	4b3b      	ldr	r3, [pc, #236]	@ (8017e94 <xTaskIncrementTick+0x15c>)
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	693a      	ldr	r2, [r7, #16]
 8017daa:	429a      	cmp	r2, r3
 8017dac:	d349      	bcc.n	8017e42 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017dae:	4b36      	ldr	r3, [pc, #216]	@ (8017e88 <xTaskIncrementTick+0x150>)
 8017db0:	681b      	ldr	r3, [r3, #0]
 8017db2:	681b      	ldr	r3, [r3, #0]
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	d104      	bne.n	8017dc2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017db8:	4b36      	ldr	r3, [pc, #216]	@ (8017e94 <xTaskIncrementTick+0x15c>)
 8017dba:	f04f 32ff 	mov.w	r2, #4294967295
 8017dbe:	601a      	str	r2, [r3, #0]
					break;
 8017dc0:	e03f      	b.n	8017e42 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017dc2:	4b31      	ldr	r3, [pc, #196]	@ (8017e88 <xTaskIncrementTick+0x150>)
 8017dc4:	681b      	ldr	r3, [r3, #0]
 8017dc6:	68db      	ldr	r3, [r3, #12]
 8017dc8:	68db      	ldr	r3, [r3, #12]
 8017dca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017dcc:	68bb      	ldr	r3, [r7, #8]
 8017dce:	685b      	ldr	r3, [r3, #4]
 8017dd0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8017dd2:	693a      	ldr	r2, [r7, #16]
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	429a      	cmp	r2, r3
 8017dd8:	d203      	bcs.n	8017de2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8017dda:	4a2e      	ldr	r2, [pc, #184]	@ (8017e94 <xTaskIncrementTick+0x15c>)
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8017de0:	e02f      	b.n	8017e42 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017de2:	68bb      	ldr	r3, [r7, #8]
 8017de4:	3304      	adds	r3, #4
 8017de6:	4618      	mov	r0, r3
 8017de8:	f7fe fb66 	bl	80164b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017dec:	68bb      	ldr	r3, [r7, #8]
 8017dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	d004      	beq.n	8017dfe <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017df4:	68bb      	ldr	r3, [r7, #8]
 8017df6:	3318      	adds	r3, #24
 8017df8:	4618      	mov	r0, r3
 8017dfa:	f7fe fb5d 	bl	80164b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8017dfe:	68bb      	ldr	r3, [r7, #8]
 8017e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017e02:	4b25      	ldr	r3, [pc, #148]	@ (8017e98 <xTaskIncrementTick+0x160>)
 8017e04:	681b      	ldr	r3, [r3, #0]
 8017e06:	429a      	cmp	r2, r3
 8017e08:	d903      	bls.n	8017e12 <xTaskIncrementTick+0xda>
 8017e0a:	68bb      	ldr	r3, [r7, #8]
 8017e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017e0e:	4a22      	ldr	r2, [pc, #136]	@ (8017e98 <xTaskIncrementTick+0x160>)
 8017e10:	6013      	str	r3, [r2, #0]
 8017e12:	68bb      	ldr	r3, [r7, #8]
 8017e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017e16:	4613      	mov	r3, r2
 8017e18:	009b      	lsls	r3, r3, #2
 8017e1a:	4413      	add	r3, r2
 8017e1c:	009b      	lsls	r3, r3, #2
 8017e1e:	4a1f      	ldr	r2, [pc, #124]	@ (8017e9c <xTaskIncrementTick+0x164>)
 8017e20:	441a      	add	r2, r3
 8017e22:	68bb      	ldr	r3, [r7, #8]
 8017e24:	3304      	adds	r3, #4
 8017e26:	4619      	mov	r1, r3
 8017e28:	4610      	mov	r0, r2
 8017e2a:	f7fe fae8 	bl	80163fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017e2e:	68bb      	ldr	r3, [r7, #8]
 8017e30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017e32:	4b1b      	ldr	r3, [pc, #108]	@ (8017ea0 <xTaskIncrementTick+0x168>)
 8017e34:	681b      	ldr	r3, [r3, #0]
 8017e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017e38:	429a      	cmp	r2, r3
 8017e3a:	d3b8      	bcc.n	8017dae <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8017e3c:	2301      	movs	r3, #1
 8017e3e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017e40:	e7b5      	b.n	8017dae <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8017e42:	4b17      	ldr	r3, [pc, #92]	@ (8017ea0 <xTaskIncrementTick+0x168>)
 8017e44:	681b      	ldr	r3, [r3, #0]
 8017e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017e48:	4914      	ldr	r1, [pc, #80]	@ (8017e9c <xTaskIncrementTick+0x164>)
 8017e4a:	4613      	mov	r3, r2
 8017e4c:	009b      	lsls	r3, r3, #2
 8017e4e:	4413      	add	r3, r2
 8017e50:	009b      	lsls	r3, r3, #2
 8017e52:	440b      	add	r3, r1
 8017e54:	681b      	ldr	r3, [r3, #0]
 8017e56:	2b01      	cmp	r3, #1
 8017e58:	d901      	bls.n	8017e5e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8017e5a:	2301      	movs	r3, #1
 8017e5c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8017e5e:	4b11      	ldr	r3, [pc, #68]	@ (8017ea4 <xTaskIncrementTick+0x16c>)
 8017e60:	681b      	ldr	r3, [r3, #0]
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	d007      	beq.n	8017e76 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8017e66:	2301      	movs	r3, #1
 8017e68:	617b      	str	r3, [r7, #20]
 8017e6a:	e004      	b.n	8017e76 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8017e6c:	4b0e      	ldr	r3, [pc, #56]	@ (8017ea8 <xTaskIncrementTick+0x170>)
 8017e6e:	681b      	ldr	r3, [r3, #0]
 8017e70:	3301      	adds	r3, #1
 8017e72:	4a0d      	ldr	r2, [pc, #52]	@ (8017ea8 <xTaskIncrementTick+0x170>)
 8017e74:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8017e76:	697b      	ldr	r3, [r7, #20]
}
 8017e78:	4618      	mov	r0, r3
 8017e7a:	3718      	adds	r7, #24
 8017e7c:	46bd      	mov	sp, r7
 8017e7e:	bd80      	pop	{r7, pc}
 8017e80:	20004348 	.word	0x20004348
 8017e84:	20004324 	.word	0x20004324
 8017e88:	200042d8 	.word	0x200042d8
 8017e8c:	200042dc 	.word	0x200042dc
 8017e90:	20004338 	.word	0x20004338
 8017e94:	20004340 	.word	0x20004340
 8017e98:	20004328 	.word	0x20004328
 8017e9c:	20003e50 	.word	0x20003e50
 8017ea0:	20003e4c 	.word	0x20003e4c
 8017ea4:	20004334 	.word	0x20004334
 8017ea8:	20004330 	.word	0x20004330

08017eac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017eac:	b480      	push	{r7}
 8017eae:	b085      	sub	sp, #20
 8017eb0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8017eb2:	4b2b      	ldr	r3, [pc, #172]	@ (8017f60 <vTaskSwitchContext+0xb4>)
 8017eb4:	681b      	ldr	r3, [r3, #0]
 8017eb6:	2b00      	cmp	r3, #0
 8017eb8:	d003      	beq.n	8017ec2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8017eba:	4b2a      	ldr	r3, [pc, #168]	@ (8017f64 <vTaskSwitchContext+0xb8>)
 8017ebc:	2201      	movs	r2, #1
 8017ebe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8017ec0:	e047      	b.n	8017f52 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8017ec2:	4b28      	ldr	r3, [pc, #160]	@ (8017f64 <vTaskSwitchContext+0xb8>)
 8017ec4:	2200      	movs	r2, #0
 8017ec6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017ec8:	4b27      	ldr	r3, [pc, #156]	@ (8017f68 <vTaskSwitchContext+0xbc>)
 8017eca:	681b      	ldr	r3, [r3, #0]
 8017ecc:	60fb      	str	r3, [r7, #12]
 8017ece:	e011      	b.n	8017ef4 <vTaskSwitchContext+0x48>
 8017ed0:	68fb      	ldr	r3, [r7, #12]
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	d10b      	bne.n	8017eee <vTaskSwitchContext+0x42>
	__asm volatile
 8017ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017eda:	f383 8811 	msr	BASEPRI, r3
 8017ede:	f3bf 8f6f 	isb	sy
 8017ee2:	f3bf 8f4f 	dsb	sy
 8017ee6:	607b      	str	r3, [r7, #4]
}
 8017ee8:	bf00      	nop
 8017eea:	bf00      	nop
 8017eec:	e7fd      	b.n	8017eea <vTaskSwitchContext+0x3e>
 8017eee:	68fb      	ldr	r3, [r7, #12]
 8017ef0:	3b01      	subs	r3, #1
 8017ef2:	60fb      	str	r3, [r7, #12]
 8017ef4:	491d      	ldr	r1, [pc, #116]	@ (8017f6c <vTaskSwitchContext+0xc0>)
 8017ef6:	68fa      	ldr	r2, [r7, #12]
 8017ef8:	4613      	mov	r3, r2
 8017efa:	009b      	lsls	r3, r3, #2
 8017efc:	4413      	add	r3, r2
 8017efe:	009b      	lsls	r3, r3, #2
 8017f00:	440b      	add	r3, r1
 8017f02:	681b      	ldr	r3, [r3, #0]
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d0e3      	beq.n	8017ed0 <vTaskSwitchContext+0x24>
 8017f08:	68fa      	ldr	r2, [r7, #12]
 8017f0a:	4613      	mov	r3, r2
 8017f0c:	009b      	lsls	r3, r3, #2
 8017f0e:	4413      	add	r3, r2
 8017f10:	009b      	lsls	r3, r3, #2
 8017f12:	4a16      	ldr	r2, [pc, #88]	@ (8017f6c <vTaskSwitchContext+0xc0>)
 8017f14:	4413      	add	r3, r2
 8017f16:	60bb      	str	r3, [r7, #8]
 8017f18:	68bb      	ldr	r3, [r7, #8]
 8017f1a:	685b      	ldr	r3, [r3, #4]
 8017f1c:	685a      	ldr	r2, [r3, #4]
 8017f1e:	68bb      	ldr	r3, [r7, #8]
 8017f20:	605a      	str	r2, [r3, #4]
 8017f22:	68bb      	ldr	r3, [r7, #8]
 8017f24:	685a      	ldr	r2, [r3, #4]
 8017f26:	68bb      	ldr	r3, [r7, #8]
 8017f28:	3308      	adds	r3, #8
 8017f2a:	429a      	cmp	r2, r3
 8017f2c:	d104      	bne.n	8017f38 <vTaskSwitchContext+0x8c>
 8017f2e:	68bb      	ldr	r3, [r7, #8]
 8017f30:	685b      	ldr	r3, [r3, #4]
 8017f32:	685a      	ldr	r2, [r3, #4]
 8017f34:	68bb      	ldr	r3, [r7, #8]
 8017f36:	605a      	str	r2, [r3, #4]
 8017f38:	68bb      	ldr	r3, [r7, #8]
 8017f3a:	685b      	ldr	r3, [r3, #4]
 8017f3c:	68db      	ldr	r3, [r3, #12]
 8017f3e:	4a0c      	ldr	r2, [pc, #48]	@ (8017f70 <vTaskSwitchContext+0xc4>)
 8017f40:	6013      	str	r3, [r2, #0]
 8017f42:	4a09      	ldr	r2, [pc, #36]	@ (8017f68 <vTaskSwitchContext+0xbc>)
 8017f44:	68fb      	ldr	r3, [r7, #12]
 8017f46:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017f48:	4b09      	ldr	r3, [pc, #36]	@ (8017f70 <vTaskSwitchContext+0xc4>)
 8017f4a:	681b      	ldr	r3, [r3, #0]
 8017f4c:	3354      	adds	r3, #84	@ 0x54
 8017f4e:	4a09      	ldr	r2, [pc, #36]	@ (8017f74 <vTaskSwitchContext+0xc8>)
 8017f50:	6013      	str	r3, [r2, #0]
}
 8017f52:	bf00      	nop
 8017f54:	3714      	adds	r7, #20
 8017f56:	46bd      	mov	sp, r7
 8017f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f5c:	4770      	bx	lr
 8017f5e:	bf00      	nop
 8017f60:	20004348 	.word	0x20004348
 8017f64:	20004334 	.word	0x20004334
 8017f68:	20004328 	.word	0x20004328
 8017f6c:	20003e50 	.word	0x20003e50
 8017f70:	20003e4c 	.word	0x20003e4c
 8017f74:	20000288 	.word	0x20000288

08017f78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8017f78:	b580      	push	{r7, lr}
 8017f7a:	b084      	sub	sp, #16
 8017f7c:	af00      	add	r7, sp, #0
 8017f7e:	6078      	str	r0, [r7, #4]
 8017f80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	d10b      	bne.n	8017fa0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8017f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017f8c:	f383 8811 	msr	BASEPRI, r3
 8017f90:	f3bf 8f6f 	isb	sy
 8017f94:	f3bf 8f4f 	dsb	sy
 8017f98:	60fb      	str	r3, [r7, #12]
}
 8017f9a:	bf00      	nop
 8017f9c:	bf00      	nop
 8017f9e:	e7fd      	b.n	8017f9c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017fa0:	4b07      	ldr	r3, [pc, #28]	@ (8017fc0 <vTaskPlaceOnEventList+0x48>)
 8017fa2:	681b      	ldr	r3, [r3, #0]
 8017fa4:	3318      	adds	r3, #24
 8017fa6:	4619      	mov	r1, r3
 8017fa8:	6878      	ldr	r0, [r7, #4]
 8017faa:	f7fe fa4c 	bl	8016446 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017fae:	2101      	movs	r1, #1
 8017fb0:	6838      	ldr	r0, [r7, #0]
 8017fb2:	f000 fb97 	bl	80186e4 <prvAddCurrentTaskToDelayedList>
}
 8017fb6:	bf00      	nop
 8017fb8:	3710      	adds	r7, #16
 8017fba:	46bd      	mov	sp, r7
 8017fbc:	bd80      	pop	{r7, pc}
 8017fbe:	bf00      	nop
 8017fc0:	20003e4c 	.word	0x20003e4c

08017fc4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017fc4:	b580      	push	{r7, lr}
 8017fc6:	b086      	sub	sp, #24
 8017fc8:	af00      	add	r7, sp, #0
 8017fca:	60f8      	str	r0, [r7, #12]
 8017fcc:	60b9      	str	r1, [r7, #8]
 8017fce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8017fd0:	68fb      	ldr	r3, [r7, #12]
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	d10b      	bne.n	8017fee <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8017fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017fda:	f383 8811 	msr	BASEPRI, r3
 8017fde:	f3bf 8f6f 	isb	sy
 8017fe2:	f3bf 8f4f 	dsb	sy
 8017fe6:	617b      	str	r3, [r7, #20]
}
 8017fe8:	bf00      	nop
 8017fea:	bf00      	nop
 8017fec:	e7fd      	b.n	8017fea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017fee:	4b0a      	ldr	r3, [pc, #40]	@ (8018018 <vTaskPlaceOnEventListRestricted+0x54>)
 8017ff0:	681b      	ldr	r3, [r3, #0]
 8017ff2:	3318      	adds	r3, #24
 8017ff4:	4619      	mov	r1, r3
 8017ff6:	68f8      	ldr	r0, [r7, #12]
 8017ff8:	f7fe fa01 	bl	80163fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d002      	beq.n	8018008 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8018002:	f04f 33ff 	mov.w	r3, #4294967295
 8018006:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8018008:	6879      	ldr	r1, [r7, #4]
 801800a:	68b8      	ldr	r0, [r7, #8]
 801800c:	f000 fb6a 	bl	80186e4 <prvAddCurrentTaskToDelayedList>
	}
 8018010:	bf00      	nop
 8018012:	3718      	adds	r7, #24
 8018014:	46bd      	mov	sp, r7
 8018016:	bd80      	pop	{r7, pc}
 8018018:	20003e4c 	.word	0x20003e4c

0801801c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801801c:	b580      	push	{r7, lr}
 801801e:	b086      	sub	sp, #24
 8018020:	af00      	add	r7, sp, #0
 8018022:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	68db      	ldr	r3, [r3, #12]
 8018028:	68db      	ldr	r3, [r3, #12]
 801802a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801802c:	693b      	ldr	r3, [r7, #16]
 801802e:	2b00      	cmp	r3, #0
 8018030:	d10b      	bne.n	801804a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8018032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018036:	f383 8811 	msr	BASEPRI, r3
 801803a:	f3bf 8f6f 	isb	sy
 801803e:	f3bf 8f4f 	dsb	sy
 8018042:	60fb      	str	r3, [r7, #12]
}
 8018044:	bf00      	nop
 8018046:	bf00      	nop
 8018048:	e7fd      	b.n	8018046 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801804a:	693b      	ldr	r3, [r7, #16]
 801804c:	3318      	adds	r3, #24
 801804e:	4618      	mov	r0, r3
 8018050:	f7fe fa32 	bl	80164b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018054:	4b1d      	ldr	r3, [pc, #116]	@ (80180cc <xTaskRemoveFromEventList+0xb0>)
 8018056:	681b      	ldr	r3, [r3, #0]
 8018058:	2b00      	cmp	r3, #0
 801805a:	d11d      	bne.n	8018098 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801805c:	693b      	ldr	r3, [r7, #16]
 801805e:	3304      	adds	r3, #4
 8018060:	4618      	mov	r0, r3
 8018062:	f7fe fa29 	bl	80164b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8018066:	693b      	ldr	r3, [r7, #16]
 8018068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801806a:	4b19      	ldr	r3, [pc, #100]	@ (80180d0 <xTaskRemoveFromEventList+0xb4>)
 801806c:	681b      	ldr	r3, [r3, #0]
 801806e:	429a      	cmp	r2, r3
 8018070:	d903      	bls.n	801807a <xTaskRemoveFromEventList+0x5e>
 8018072:	693b      	ldr	r3, [r7, #16]
 8018074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018076:	4a16      	ldr	r2, [pc, #88]	@ (80180d0 <xTaskRemoveFromEventList+0xb4>)
 8018078:	6013      	str	r3, [r2, #0]
 801807a:	693b      	ldr	r3, [r7, #16]
 801807c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801807e:	4613      	mov	r3, r2
 8018080:	009b      	lsls	r3, r3, #2
 8018082:	4413      	add	r3, r2
 8018084:	009b      	lsls	r3, r3, #2
 8018086:	4a13      	ldr	r2, [pc, #76]	@ (80180d4 <xTaskRemoveFromEventList+0xb8>)
 8018088:	441a      	add	r2, r3
 801808a:	693b      	ldr	r3, [r7, #16]
 801808c:	3304      	adds	r3, #4
 801808e:	4619      	mov	r1, r3
 8018090:	4610      	mov	r0, r2
 8018092:	f7fe f9b4 	bl	80163fe <vListInsertEnd>
 8018096:	e005      	b.n	80180a4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8018098:	693b      	ldr	r3, [r7, #16]
 801809a:	3318      	adds	r3, #24
 801809c:	4619      	mov	r1, r3
 801809e:	480e      	ldr	r0, [pc, #56]	@ (80180d8 <xTaskRemoveFromEventList+0xbc>)
 80180a0:	f7fe f9ad 	bl	80163fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80180a4:	693b      	ldr	r3, [r7, #16]
 80180a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80180a8:	4b0c      	ldr	r3, [pc, #48]	@ (80180dc <xTaskRemoveFromEventList+0xc0>)
 80180aa:	681b      	ldr	r3, [r3, #0]
 80180ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80180ae:	429a      	cmp	r2, r3
 80180b0:	d905      	bls.n	80180be <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80180b2:	2301      	movs	r3, #1
 80180b4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80180b6:	4b0a      	ldr	r3, [pc, #40]	@ (80180e0 <xTaskRemoveFromEventList+0xc4>)
 80180b8:	2201      	movs	r2, #1
 80180ba:	601a      	str	r2, [r3, #0]
 80180bc:	e001      	b.n	80180c2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80180be:	2300      	movs	r3, #0
 80180c0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80180c2:	697b      	ldr	r3, [r7, #20]
}
 80180c4:	4618      	mov	r0, r3
 80180c6:	3718      	adds	r7, #24
 80180c8:	46bd      	mov	sp, r7
 80180ca:	bd80      	pop	{r7, pc}
 80180cc:	20004348 	.word	0x20004348
 80180d0:	20004328 	.word	0x20004328
 80180d4:	20003e50 	.word	0x20003e50
 80180d8:	200042e0 	.word	0x200042e0
 80180dc:	20003e4c 	.word	0x20003e4c
 80180e0:	20004334 	.word	0x20004334

080180e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80180e4:	b480      	push	{r7}
 80180e6:	b083      	sub	sp, #12
 80180e8:	af00      	add	r7, sp, #0
 80180ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80180ec:	4b06      	ldr	r3, [pc, #24]	@ (8018108 <vTaskInternalSetTimeOutState+0x24>)
 80180ee:	681a      	ldr	r2, [r3, #0]
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80180f4:	4b05      	ldr	r3, [pc, #20]	@ (801810c <vTaskInternalSetTimeOutState+0x28>)
 80180f6:	681a      	ldr	r2, [r3, #0]
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	605a      	str	r2, [r3, #4]
}
 80180fc:	bf00      	nop
 80180fe:	370c      	adds	r7, #12
 8018100:	46bd      	mov	sp, r7
 8018102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018106:	4770      	bx	lr
 8018108:	20004338 	.word	0x20004338
 801810c:	20004324 	.word	0x20004324

08018110 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018110:	b580      	push	{r7, lr}
 8018112:	b088      	sub	sp, #32
 8018114:	af00      	add	r7, sp, #0
 8018116:	6078      	str	r0, [r7, #4]
 8018118:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	2b00      	cmp	r3, #0
 801811e:	d10b      	bne.n	8018138 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8018120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018124:	f383 8811 	msr	BASEPRI, r3
 8018128:	f3bf 8f6f 	isb	sy
 801812c:	f3bf 8f4f 	dsb	sy
 8018130:	613b      	str	r3, [r7, #16]
}
 8018132:	bf00      	nop
 8018134:	bf00      	nop
 8018136:	e7fd      	b.n	8018134 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8018138:	683b      	ldr	r3, [r7, #0]
 801813a:	2b00      	cmp	r3, #0
 801813c:	d10b      	bne.n	8018156 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 801813e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018142:	f383 8811 	msr	BASEPRI, r3
 8018146:	f3bf 8f6f 	isb	sy
 801814a:	f3bf 8f4f 	dsb	sy
 801814e:	60fb      	str	r3, [r7, #12]
}
 8018150:	bf00      	nop
 8018152:	bf00      	nop
 8018154:	e7fd      	b.n	8018152 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8018156:	f000 ffa7 	bl	80190a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801815a:	4b1d      	ldr	r3, [pc, #116]	@ (80181d0 <xTaskCheckForTimeOut+0xc0>)
 801815c:	681b      	ldr	r3, [r3, #0]
 801815e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	685b      	ldr	r3, [r3, #4]
 8018164:	69ba      	ldr	r2, [r7, #24]
 8018166:	1ad3      	subs	r3, r2, r3
 8018168:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801816a:	683b      	ldr	r3, [r7, #0]
 801816c:	681b      	ldr	r3, [r3, #0]
 801816e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018172:	d102      	bne.n	801817a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8018174:	2300      	movs	r3, #0
 8018176:	61fb      	str	r3, [r7, #28]
 8018178:	e023      	b.n	80181c2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	681a      	ldr	r2, [r3, #0]
 801817e:	4b15      	ldr	r3, [pc, #84]	@ (80181d4 <xTaskCheckForTimeOut+0xc4>)
 8018180:	681b      	ldr	r3, [r3, #0]
 8018182:	429a      	cmp	r2, r3
 8018184:	d007      	beq.n	8018196 <xTaskCheckForTimeOut+0x86>
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	685b      	ldr	r3, [r3, #4]
 801818a:	69ba      	ldr	r2, [r7, #24]
 801818c:	429a      	cmp	r2, r3
 801818e:	d302      	bcc.n	8018196 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018190:	2301      	movs	r3, #1
 8018192:	61fb      	str	r3, [r7, #28]
 8018194:	e015      	b.n	80181c2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8018196:	683b      	ldr	r3, [r7, #0]
 8018198:	681b      	ldr	r3, [r3, #0]
 801819a:	697a      	ldr	r2, [r7, #20]
 801819c:	429a      	cmp	r2, r3
 801819e:	d20b      	bcs.n	80181b8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80181a0:	683b      	ldr	r3, [r7, #0]
 80181a2:	681a      	ldr	r2, [r3, #0]
 80181a4:	697b      	ldr	r3, [r7, #20]
 80181a6:	1ad2      	subs	r2, r2, r3
 80181a8:	683b      	ldr	r3, [r7, #0]
 80181aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80181ac:	6878      	ldr	r0, [r7, #4]
 80181ae:	f7ff ff99 	bl	80180e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80181b2:	2300      	movs	r3, #0
 80181b4:	61fb      	str	r3, [r7, #28]
 80181b6:	e004      	b.n	80181c2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80181b8:	683b      	ldr	r3, [r7, #0]
 80181ba:	2200      	movs	r2, #0
 80181bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80181be:	2301      	movs	r3, #1
 80181c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80181c2:	f000 ffa3 	bl	801910c <vPortExitCritical>

	return xReturn;
 80181c6:	69fb      	ldr	r3, [r7, #28]
}
 80181c8:	4618      	mov	r0, r3
 80181ca:	3720      	adds	r7, #32
 80181cc:	46bd      	mov	sp, r7
 80181ce:	bd80      	pop	{r7, pc}
 80181d0:	20004324 	.word	0x20004324
 80181d4:	20004338 	.word	0x20004338

080181d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80181d8:	b480      	push	{r7}
 80181da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80181dc:	4b03      	ldr	r3, [pc, #12]	@ (80181ec <vTaskMissedYield+0x14>)
 80181de:	2201      	movs	r2, #1
 80181e0:	601a      	str	r2, [r3, #0]
}
 80181e2:	bf00      	nop
 80181e4:	46bd      	mov	sp, r7
 80181e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181ea:	4770      	bx	lr
 80181ec:	20004334 	.word	0x20004334

080181f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80181f0:	b580      	push	{r7, lr}
 80181f2:	b082      	sub	sp, #8
 80181f4:	af00      	add	r7, sp, #0
 80181f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80181f8:	f000 f852 	bl	80182a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80181fc:	4b06      	ldr	r3, [pc, #24]	@ (8018218 <prvIdleTask+0x28>)
 80181fe:	681b      	ldr	r3, [r3, #0]
 8018200:	2b01      	cmp	r3, #1
 8018202:	d9f9      	bls.n	80181f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8018204:	4b05      	ldr	r3, [pc, #20]	@ (801821c <prvIdleTask+0x2c>)
 8018206:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801820a:	601a      	str	r2, [r3, #0]
 801820c:	f3bf 8f4f 	dsb	sy
 8018210:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8018214:	e7f0      	b.n	80181f8 <prvIdleTask+0x8>
 8018216:	bf00      	nop
 8018218:	20003e50 	.word	0x20003e50
 801821c:	e000ed04 	.word	0xe000ed04

08018220 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8018220:	b580      	push	{r7, lr}
 8018222:	b082      	sub	sp, #8
 8018224:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018226:	2300      	movs	r3, #0
 8018228:	607b      	str	r3, [r7, #4]
 801822a:	e00c      	b.n	8018246 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801822c:	687a      	ldr	r2, [r7, #4]
 801822e:	4613      	mov	r3, r2
 8018230:	009b      	lsls	r3, r3, #2
 8018232:	4413      	add	r3, r2
 8018234:	009b      	lsls	r3, r3, #2
 8018236:	4a12      	ldr	r2, [pc, #72]	@ (8018280 <prvInitialiseTaskLists+0x60>)
 8018238:	4413      	add	r3, r2
 801823a:	4618      	mov	r0, r3
 801823c:	f7fe f8b2 	bl	80163a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	3301      	adds	r3, #1
 8018244:	607b      	str	r3, [r7, #4]
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	2b37      	cmp	r3, #55	@ 0x37
 801824a:	d9ef      	bls.n	801822c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801824c:	480d      	ldr	r0, [pc, #52]	@ (8018284 <prvInitialiseTaskLists+0x64>)
 801824e:	f7fe f8a9 	bl	80163a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8018252:	480d      	ldr	r0, [pc, #52]	@ (8018288 <prvInitialiseTaskLists+0x68>)
 8018254:	f7fe f8a6 	bl	80163a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8018258:	480c      	ldr	r0, [pc, #48]	@ (801828c <prvInitialiseTaskLists+0x6c>)
 801825a:	f7fe f8a3 	bl	80163a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801825e:	480c      	ldr	r0, [pc, #48]	@ (8018290 <prvInitialiseTaskLists+0x70>)
 8018260:	f7fe f8a0 	bl	80163a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8018264:	480b      	ldr	r0, [pc, #44]	@ (8018294 <prvInitialiseTaskLists+0x74>)
 8018266:	f7fe f89d 	bl	80163a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801826a:	4b0b      	ldr	r3, [pc, #44]	@ (8018298 <prvInitialiseTaskLists+0x78>)
 801826c:	4a05      	ldr	r2, [pc, #20]	@ (8018284 <prvInitialiseTaskLists+0x64>)
 801826e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018270:	4b0a      	ldr	r3, [pc, #40]	@ (801829c <prvInitialiseTaskLists+0x7c>)
 8018272:	4a05      	ldr	r2, [pc, #20]	@ (8018288 <prvInitialiseTaskLists+0x68>)
 8018274:	601a      	str	r2, [r3, #0]
}
 8018276:	bf00      	nop
 8018278:	3708      	adds	r7, #8
 801827a:	46bd      	mov	sp, r7
 801827c:	bd80      	pop	{r7, pc}
 801827e:	bf00      	nop
 8018280:	20003e50 	.word	0x20003e50
 8018284:	200042b0 	.word	0x200042b0
 8018288:	200042c4 	.word	0x200042c4
 801828c:	200042e0 	.word	0x200042e0
 8018290:	200042f4 	.word	0x200042f4
 8018294:	2000430c 	.word	0x2000430c
 8018298:	200042d8 	.word	0x200042d8
 801829c:	200042dc 	.word	0x200042dc

080182a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80182a0:	b580      	push	{r7, lr}
 80182a2:	b082      	sub	sp, #8
 80182a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80182a6:	e019      	b.n	80182dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80182a8:	f000 fefe 	bl	80190a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80182ac:	4b10      	ldr	r3, [pc, #64]	@ (80182f0 <prvCheckTasksWaitingTermination+0x50>)
 80182ae:	68db      	ldr	r3, [r3, #12]
 80182b0:	68db      	ldr	r3, [r3, #12]
 80182b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80182b4:	687b      	ldr	r3, [r7, #4]
 80182b6:	3304      	adds	r3, #4
 80182b8:	4618      	mov	r0, r3
 80182ba:	f7fe f8fd 	bl	80164b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80182be:	4b0d      	ldr	r3, [pc, #52]	@ (80182f4 <prvCheckTasksWaitingTermination+0x54>)
 80182c0:	681b      	ldr	r3, [r3, #0]
 80182c2:	3b01      	subs	r3, #1
 80182c4:	4a0b      	ldr	r2, [pc, #44]	@ (80182f4 <prvCheckTasksWaitingTermination+0x54>)
 80182c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80182c8:	4b0b      	ldr	r3, [pc, #44]	@ (80182f8 <prvCheckTasksWaitingTermination+0x58>)
 80182ca:	681b      	ldr	r3, [r3, #0]
 80182cc:	3b01      	subs	r3, #1
 80182ce:	4a0a      	ldr	r2, [pc, #40]	@ (80182f8 <prvCheckTasksWaitingTermination+0x58>)
 80182d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80182d2:	f000 ff1b 	bl	801910c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80182d6:	6878      	ldr	r0, [r7, #4]
 80182d8:	f000 f810 	bl	80182fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80182dc:	4b06      	ldr	r3, [pc, #24]	@ (80182f8 <prvCheckTasksWaitingTermination+0x58>)
 80182de:	681b      	ldr	r3, [r3, #0]
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	d1e1      	bne.n	80182a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80182e4:	bf00      	nop
 80182e6:	bf00      	nop
 80182e8:	3708      	adds	r7, #8
 80182ea:	46bd      	mov	sp, r7
 80182ec:	bd80      	pop	{r7, pc}
 80182ee:	bf00      	nop
 80182f0:	200042f4 	.word	0x200042f4
 80182f4:	20004320 	.word	0x20004320
 80182f8:	20004308 	.word	0x20004308

080182fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80182fc:	b580      	push	{r7, lr}
 80182fe:	b084      	sub	sp, #16
 8018300:	af00      	add	r7, sp, #0
 8018302:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	3354      	adds	r3, #84	@ 0x54
 8018308:	4618      	mov	r0, r3
 801830a:	f003 f831 	bl	801b370 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8018314:	2b00      	cmp	r3, #0
 8018316:	d108      	bne.n	801832a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801831c:	4618      	mov	r0, r3
 801831e:	f001 f8b3 	bl	8019488 <vPortFree>
				vPortFree( pxTCB );
 8018322:	6878      	ldr	r0, [r7, #4]
 8018324:	f001 f8b0 	bl	8019488 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8018328:	e019      	b.n	801835e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8018330:	2b01      	cmp	r3, #1
 8018332:	d103      	bne.n	801833c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8018334:	6878      	ldr	r0, [r7, #4]
 8018336:	f001 f8a7 	bl	8019488 <vPortFree>
	}
 801833a:	e010      	b.n	801835e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8018342:	2b02      	cmp	r3, #2
 8018344:	d00b      	beq.n	801835e <prvDeleteTCB+0x62>
	__asm volatile
 8018346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801834a:	f383 8811 	msr	BASEPRI, r3
 801834e:	f3bf 8f6f 	isb	sy
 8018352:	f3bf 8f4f 	dsb	sy
 8018356:	60fb      	str	r3, [r7, #12]
}
 8018358:	bf00      	nop
 801835a:	bf00      	nop
 801835c:	e7fd      	b.n	801835a <prvDeleteTCB+0x5e>
	}
 801835e:	bf00      	nop
 8018360:	3710      	adds	r7, #16
 8018362:	46bd      	mov	sp, r7
 8018364:	bd80      	pop	{r7, pc}
	...

08018368 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018368:	b480      	push	{r7}
 801836a:	b083      	sub	sp, #12
 801836c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801836e:	4b0c      	ldr	r3, [pc, #48]	@ (80183a0 <prvResetNextTaskUnblockTime+0x38>)
 8018370:	681b      	ldr	r3, [r3, #0]
 8018372:	681b      	ldr	r3, [r3, #0]
 8018374:	2b00      	cmp	r3, #0
 8018376:	d104      	bne.n	8018382 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018378:	4b0a      	ldr	r3, [pc, #40]	@ (80183a4 <prvResetNextTaskUnblockTime+0x3c>)
 801837a:	f04f 32ff 	mov.w	r2, #4294967295
 801837e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018380:	e008      	b.n	8018394 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018382:	4b07      	ldr	r3, [pc, #28]	@ (80183a0 <prvResetNextTaskUnblockTime+0x38>)
 8018384:	681b      	ldr	r3, [r3, #0]
 8018386:	68db      	ldr	r3, [r3, #12]
 8018388:	68db      	ldr	r3, [r3, #12]
 801838a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	685b      	ldr	r3, [r3, #4]
 8018390:	4a04      	ldr	r2, [pc, #16]	@ (80183a4 <prvResetNextTaskUnblockTime+0x3c>)
 8018392:	6013      	str	r3, [r2, #0]
}
 8018394:	bf00      	nop
 8018396:	370c      	adds	r7, #12
 8018398:	46bd      	mov	sp, r7
 801839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801839e:	4770      	bx	lr
 80183a0:	200042d8 	.word	0x200042d8
 80183a4:	20004340 	.word	0x20004340

080183a8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80183a8:	b480      	push	{r7}
 80183aa:	b083      	sub	sp, #12
 80183ac:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80183ae:	4b05      	ldr	r3, [pc, #20]	@ (80183c4 <xTaskGetCurrentTaskHandle+0x1c>)
 80183b0:	681b      	ldr	r3, [r3, #0]
 80183b2:	607b      	str	r3, [r7, #4]

		return xReturn;
 80183b4:	687b      	ldr	r3, [r7, #4]
	}
 80183b6:	4618      	mov	r0, r3
 80183b8:	370c      	adds	r7, #12
 80183ba:	46bd      	mov	sp, r7
 80183bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183c0:	4770      	bx	lr
 80183c2:	bf00      	nop
 80183c4:	20003e4c 	.word	0x20003e4c

080183c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80183c8:	b480      	push	{r7}
 80183ca:	b083      	sub	sp, #12
 80183cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80183ce:	4b0b      	ldr	r3, [pc, #44]	@ (80183fc <xTaskGetSchedulerState+0x34>)
 80183d0:	681b      	ldr	r3, [r3, #0]
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	d102      	bne.n	80183dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80183d6:	2301      	movs	r3, #1
 80183d8:	607b      	str	r3, [r7, #4]
 80183da:	e008      	b.n	80183ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80183dc:	4b08      	ldr	r3, [pc, #32]	@ (8018400 <xTaskGetSchedulerState+0x38>)
 80183de:	681b      	ldr	r3, [r3, #0]
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	d102      	bne.n	80183ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80183e4:	2302      	movs	r3, #2
 80183e6:	607b      	str	r3, [r7, #4]
 80183e8:	e001      	b.n	80183ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80183ea:	2300      	movs	r3, #0
 80183ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80183ee:	687b      	ldr	r3, [r7, #4]
	}
 80183f0:	4618      	mov	r0, r3
 80183f2:	370c      	adds	r7, #12
 80183f4:	46bd      	mov	sp, r7
 80183f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183fa:	4770      	bx	lr
 80183fc:	2000432c 	.word	0x2000432c
 8018400:	20004348 	.word	0x20004348

08018404 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8018404:	b580      	push	{r7, lr}
 8018406:	b084      	sub	sp, #16
 8018408:	af00      	add	r7, sp, #0
 801840a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8018410:	2300      	movs	r3, #0
 8018412:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	2b00      	cmp	r3, #0
 8018418:	d051      	beq.n	80184be <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801841a:	68bb      	ldr	r3, [r7, #8]
 801841c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801841e:	4b2a      	ldr	r3, [pc, #168]	@ (80184c8 <xTaskPriorityInherit+0xc4>)
 8018420:	681b      	ldr	r3, [r3, #0]
 8018422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018424:	429a      	cmp	r2, r3
 8018426:	d241      	bcs.n	80184ac <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018428:	68bb      	ldr	r3, [r7, #8]
 801842a:	699b      	ldr	r3, [r3, #24]
 801842c:	2b00      	cmp	r3, #0
 801842e:	db06      	blt.n	801843e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018430:	4b25      	ldr	r3, [pc, #148]	@ (80184c8 <xTaskPriorityInherit+0xc4>)
 8018432:	681b      	ldr	r3, [r3, #0]
 8018434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018436:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801843a:	68bb      	ldr	r3, [r7, #8]
 801843c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801843e:	68bb      	ldr	r3, [r7, #8]
 8018440:	6959      	ldr	r1, [r3, #20]
 8018442:	68bb      	ldr	r3, [r7, #8]
 8018444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018446:	4613      	mov	r3, r2
 8018448:	009b      	lsls	r3, r3, #2
 801844a:	4413      	add	r3, r2
 801844c:	009b      	lsls	r3, r3, #2
 801844e:	4a1f      	ldr	r2, [pc, #124]	@ (80184cc <xTaskPriorityInherit+0xc8>)
 8018450:	4413      	add	r3, r2
 8018452:	4299      	cmp	r1, r3
 8018454:	d122      	bne.n	801849c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018456:	68bb      	ldr	r3, [r7, #8]
 8018458:	3304      	adds	r3, #4
 801845a:	4618      	mov	r0, r3
 801845c:	f7fe f82c 	bl	80164b8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018460:	4b19      	ldr	r3, [pc, #100]	@ (80184c8 <xTaskPriorityInherit+0xc4>)
 8018462:	681b      	ldr	r3, [r3, #0]
 8018464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018466:	68bb      	ldr	r3, [r7, #8]
 8018468:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801846a:	68bb      	ldr	r3, [r7, #8]
 801846c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801846e:	4b18      	ldr	r3, [pc, #96]	@ (80184d0 <xTaskPriorityInherit+0xcc>)
 8018470:	681b      	ldr	r3, [r3, #0]
 8018472:	429a      	cmp	r2, r3
 8018474:	d903      	bls.n	801847e <xTaskPriorityInherit+0x7a>
 8018476:	68bb      	ldr	r3, [r7, #8]
 8018478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801847a:	4a15      	ldr	r2, [pc, #84]	@ (80184d0 <xTaskPriorityInherit+0xcc>)
 801847c:	6013      	str	r3, [r2, #0]
 801847e:	68bb      	ldr	r3, [r7, #8]
 8018480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018482:	4613      	mov	r3, r2
 8018484:	009b      	lsls	r3, r3, #2
 8018486:	4413      	add	r3, r2
 8018488:	009b      	lsls	r3, r3, #2
 801848a:	4a10      	ldr	r2, [pc, #64]	@ (80184cc <xTaskPriorityInherit+0xc8>)
 801848c:	441a      	add	r2, r3
 801848e:	68bb      	ldr	r3, [r7, #8]
 8018490:	3304      	adds	r3, #4
 8018492:	4619      	mov	r1, r3
 8018494:	4610      	mov	r0, r2
 8018496:	f7fd ffb2 	bl	80163fe <vListInsertEnd>
 801849a:	e004      	b.n	80184a6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801849c:	4b0a      	ldr	r3, [pc, #40]	@ (80184c8 <xTaskPriorityInherit+0xc4>)
 801849e:	681b      	ldr	r3, [r3, #0]
 80184a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80184a2:	68bb      	ldr	r3, [r7, #8]
 80184a4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80184a6:	2301      	movs	r3, #1
 80184a8:	60fb      	str	r3, [r7, #12]
 80184aa:	e008      	b.n	80184be <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80184ac:	68bb      	ldr	r3, [r7, #8]
 80184ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80184b0:	4b05      	ldr	r3, [pc, #20]	@ (80184c8 <xTaskPriorityInherit+0xc4>)
 80184b2:	681b      	ldr	r3, [r3, #0]
 80184b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80184b6:	429a      	cmp	r2, r3
 80184b8:	d201      	bcs.n	80184be <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80184ba:	2301      	movs	r3, #1
 80184bc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80184be:	68fb      	ldr	r3, [r7, #12]
	}
 80184c0:	4618      	mov	r0, r3
 80184c2:	3710      	adds	r7, #16
 80184c4:	46bd      	mov	sp, r7
 80184c6:	bd80      	pop	{r7, pc}
 80184c8:	20003e4c 	.word	0x20003e4c
 80184cc:	20003e50 	.word	0x20003e50
 80184d0:	20004328 	.word	0x20004328

080184d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80184d4:	b580      	push	{r7, lr}
 80184d6:	b086      	sub	sp, #24
 80184d8:	af00      	add	r7, sp, #0
 80184da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80184e0:	2300      	movs	r3, #0
 80184e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	d058      	beq.n	801859c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80184ea:	4b2f      	ldr	r3, [pc, #188]	@ (80185a8 <xTaskPriorityDisinherit+0xd4>)
 80184ec:	681b      	ldr	r3, [r3, #0]
 80184ee:	693a      	ldr	r2, [r7, #16]
 80184f0:	429a      	cmp	r2, r3
 80184f2:	d00b      	beq.n	801850c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80184f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80184f8:	f383 8811 	msr	BASEPRI, r3
 80184fc:	f3bf 8f6f 	isb	sy
 8018500:	f3bf 8f4f 	dsb	sy
 8018504:	60fb      	str	r3, [r7, #12]
}
 8018506:	bf00      	nop
 8018508:	bf00      	nop
 801850a:	e7fd      	b.n	8018508 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801850c:	693b      	ldr	r3, [r7, #16]
 801850e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018510:	2b00      	cmp	r3, #0
 8018512:	d10b      	bne.n	801852c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8018514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018518:	f383 8811 	msr	BASEPRI, r3
 801851c:	f3bf 8f6f 	isb	sy
 8018520:	f3bf 8f4f 	dsb	sy
 8018524:	60bb      	str	r3, [r7, #8]
}
 8018526:	bf00      	nop
 8018528:	bf00      	nop
 801852a:	e7fd      	b.n	8018528 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 801852c:	693b      	ldr	r3, [r7, #16]
 801852e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018530:	1e5a      	subs	r2, r3, #1
 8018532:	693b      	ldr	r3, [r7, #16]
 8018534:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018536:	693b      	ldr	r3, [r7, #16]
 8018538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801853a:	693b      	ldr	r3, [r7, #16]
 801853c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801853e:	429a      	cmp	r2, r3
 8018540:	d02c      	beq.n	801859c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018542:	693b      	ldr	r3, [r7, #16]
 8018544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018546:	2b00      	cmp	r3, #0
 8018548:	d128      	bne.n	801859c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801854a:	693b      	ldr	r3, [r7, #16]
 801854c:	3304      	adds	r3, #4
 801854e:	4618      	mov	r0, r3
 8018550:	f7fd ffb2 	bl	80164b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018554:	693b      	ldr	r3, [r7, #16]
 8018556:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018558:	693b      	ldr	r3, [r7, #16]
 801855a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801855c:	693b      	ldr	r3, [r7, #16]
 801855e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018560:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8018564:	693b      	ldr	r3, [r7, #16]
 8018566:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018568:	693b      	ldr	r3, [r7, #16]
 801856a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801856c:	4b0f      	ldr	r3, [pc, #60]	@ (80185ac <xTaskPriorityDisinherit+0xd8>)
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	429a      	cmp	r2, r3
 8018572:	d903      	bls.n	801857c <xTaskPriorityDisinherit+0xa8>
 8018574:	693b      	ldr	r3, [r7, #16]
 8018576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018578:	4a0c      	ldr	r2, [pc, #48]	@ (80185ac <xTaskPriorityDisinherit+0xd8>)
 801857a:	6013      	str	r3, [r2, #0]
 801857c:	693b      	ldr	r3, [r7, #16]
 801857e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018580:	4613      	mov	r3, r2
 8018582:	009b      	lsls	r3, r3, #2
 8018584:	4413      	add	r3, r2
 8018586:	009b      	lsls	r3, r3, #2
 8018588:	4a09      	ldr	r2, [pc, #36]	@ (80185b0 <xTaskPriorityDisinherit+0xdc>)
 801858a:	441a      	add	r2, r3
 801858c:	693b      	ldr	r3, [r7, #16]
 801858e:	3304      	adds	r3, #4
 8018590:	4619      	mov	r1, r3
 8018592:	4610      	mov	r0, r2
 8018594:	f7fd ff33 	bl	80163fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018598:	2301      	movs	r3, #1
 801859a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801859c:	697b      	ldr	r3, [r7, #20]
	}
 801859e:	4618      	mov	r0, r3
 80185a0:	3718      	adds	r7, #24
 80185a2:	46bd      	mov	sp, r7
 80185a4:	bd80      	pop	{r7, pc}
 80185a6:	bf00      	nop
 80185a8:	20003e4c 	.word	0x20003e4c
 80185ac:	20004328 	.word	0x20004328
 80185b0:	20003e50 	.word	0x20003e50

080185b4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80185b4:	b580      	push	{r7, lr}
 80185b6:	b088      	sub	sp, #32
 80185b8:	af00      	add	r7, sp, #0
 80185ba:	6078      	str	r0, [r7, #4]
 80185bc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80185c2:	2301      	movs	r3, #1
 80185c4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	d06c      	beq.n	80186a6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80185cc:	69bb      	ldr	r3, [r7, #24]
 80185ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80185d0:	2b00      	cmp	r3, #0
 80185d2:	d10b      	bne.n	80185ec <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80185d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80185d8:	f383 8811 	msr	BASEPRI, r3
 80185dc:	f3bf 8f6f 	isb	sy
 80185e0:	f3bf 8f4f 	dsb	sy
 80185e4:	60fb      	str	r3, [r7, #12]
}
 80185e6:	bf00      	nop
 80185e8:	bf00      	nop
 80185ea:	e7fd      	b.n	80185e8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80185ec:	69bb      	ldr	r3, [r7, #24]
 80185ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80185f0:	683a      	ldr	r2, [r7, #0]
 80185f2:	429a      	cmp	r2, r3
 80185f4:	d902      	bls.n	80185fc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80185f6:	683b      	ldr	r3, [r7, #0]
 80185f8:	61fb      	str	r3, [r7, #28]
 80185fa:	e002      	b.n	8018602 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80185fc:	69bb      	ldr	r3, [r7, #24]
 80185fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018600:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8018602:	69bb      	ldr	r3, [r7, #24]
 8018604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018606:	69fa      	ldr	r2, [r7, #28]
 8018608:	429a      	cmp	r2, r3
 801860a:	d04c      	beq.n	80186a6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801860c:	69bb      	ldr	r3, [r7, #24]
 801860e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018610:	697a      	ldr	r2, [r7, #20]
 8018612:	429a      	cmp	r2, r3
 8018614:	d147      	bne.n	80186a6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8018616:	4b26      	ldr	r3, [pc, #152]	@ (80186b0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8018618:	681b      	ldr	r3, [r3, #0]
 801861a:	69ba      	ldr	r2, [r7, #24]
 801861c:	429a      	cmp	r2, r3
 801861e:	d10b      	bne.n	8018638 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8018620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018624:	f383 8811 	msr	BASEPRI, r3
 8018628:	f3bf 8f6f 	isb	sy
 801862c:	f3bf 8f4f 	dsb	sy
 8018630:	60bb      	str	r3, [r7, #8]
}
 8018632:	bf00      	nop
 8018634:	bf00      	nop
 8018636:	e7fd      	b.n	8018634 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8018638:	69bb      	ldr	r3, [r7, #24]
 801863a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801863c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801863e:	69bb      	ldr	r3, [r7, #24]
 8018640:	69fa      	ldr	r2, [r7, #28]
 8018642:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018644:	69bb      	ldr	r3, [r7, #24]
 8018646:	699b      	ldr	r3, [r3, #24]
 8018648:	2b00      	cmp	r3, #0
 801864a:	db04      	blt.n	8018656 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801864c:	69fb      	ldr	r3, [r7, #28]
 801864e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8018652:	69bb      	ldr	r3, [r7, #24]
 8018654:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8018656:	69bb      	ldr	r3, [r7, #24]
 8018658:	6959      	ldr	r1, [r3, #20]
 801865a:	693a      	ldr	r2, [r7, #16]
 801865c:	4613      	mov	r3, r2
 801865e:	009b      	lsls	r3, r3, #2
 8018660:	4413      	add	r3, r2
 8018662:	009b      	lsls	r3, r3, #2
 8018664:	4a13      	ldr	r2, [pc, #76]	@ (80186b4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8018666:	4413      	add	r3, r2
 8018668:	4299      	cmp	r1, r3
 801866a:	d11c      	bne.n	80186a6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801866c:	69bb      	ldr	r3, [r7, #24]
 801866e:	3304      	adds	r3, #4
 8018670:	4618      	mov	r0, r3
 8018672:	f7fd ff21 	bl	80164b8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8018676:	69bb      	ldr	r3, [r7, #24]
 8018678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801867a:	4b0f      	ldr	r3, [pc, #60]	@ (80186b8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	429a      	cmp	r2, r3
 8018680:	d903      	bls.n	801868a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8018682:	69bb      	ldr	r3, [r7, #24]
 8018684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018686:	4a0c      	ldr	r2, [pc, #48]	@ (80186b8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8018688:	6013      	str	r3, [r2, #0]
 801868a:	69bb      	ldr	r3, [r7, #24]
 801868c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801868e:	4613      	mov	r3, r2
 8018690:	009b      	lsls	r3, r3, #2
 8018692:	4413      	add	r3, r2
 8018694:	009b      	lsls	r3, r3, #2
 8018696:	4a07      	ldr	r2, [pc, #28]	@ (80186b4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8018698:	441a      	add	r2, r3
 801869a:	69bb      	ldr	r3, [r7, #24]
 801869c:	3304      	adds	r3, #4
 801869e:	4619      	mov	r1, r3
 80186a0:	4610      	mov	r0, r2
 80186a2:	f7fd feac 	bl	80163fe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80186a6:	bf00      	nop
 80186a8:	3720      	adds	r7, #32
 80186aa:	46bd      	mov	sp, r7
 80186ac:	bd80      	pop	{r7, pc}
 80186ae:	bf00      	nop
 80186b0:	20003e4c 	.word	0x20003e4c
 80186b4:	20003e50 	.word	0x20003e50
 80186b8:	20004328 	.word	0x20004328

080186bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80186bc:	b480      	push	{r7}
 80186be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80186c0:	4b07      	ldr	r3, [pc, #28]	@ (80186e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80186c2:	681b      	ldr	r3, [r3, #0]
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	d004      	beq.n	80186d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80186c8:	4b05      	ldr	r3, [pc, #20]	@ (80186e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80186ca:	681b      	ldr	r3, [r3, #0]
 80186cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80186ce:	3201      	adds	r2, #1
 80186d0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80186d2:	4b03      	ldr	r3, [pc, #12]	@ (80186e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80186d4:	681b      	ldr	r3, [r3, #0]
	}
 80186d6:	4618      	mov	r0, r3
 80186d8:	46bd      	mov	sp, r7
 80186da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186de:	4770      	bx	lr
 80186e0:	20003e4c 	.word	0x20003e4c

080186e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80186e4:	b580      	push	{r7, lr}
 80186e6:	b084      	sub	sp, #16
 80186e8:	af00      	add	r7, sp, #0
 80186ea:	6078      	str	r0, [r7, #4]
 80186ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80186ee:	4b21      	ldr	r3, [pc, #132]	@ (8018774 <prvAddCurrentTaskToDelayedList+0x90>)
 80186f0:	681b      	ldr	r3, [r3, #0]
 80186f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80186f4:	4b20      	ldr	r3, [pc, #128]	@ (8018778 <prvAddCurrentTaskToDelayedList+0x94>)
 80186f6:	681b      	ldr	r3, [r3, #0]
 80186f8:	3304      	adds	r3, #4
 80186fa:	4618      	mov	r0, r3
 80186fc:	f7fd fedc 	bl	80164b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018706:	d10a      	bne.n	801871e <prvAddCurrentTaskToDelayedList+0x3a>
 8018708:	683b      	ldr	r3, [r7, #0]
 801870a:	2b00      	cmp	r3, #0
 801870c:	d007      	beq.n	801871e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801870e:	4b1a      	ldr	r3, [pc, #104]	@ (8018778 <prvAddCurrentTaskToDelayedList+0x94>)
 8018710:	681b      	ldr	r3, [r3, #0]
 8018712:	3304      	adds	r3, #4
 8018714:	4619      	mov	r1, r3
 8018716:	4819      	ldr	r0, [pc, #100]	@ (801877c <prvAddCurrentTaskToDelayedList+0x98>)
 8018718:	f7fd fe71 	bl	80163fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801871c:	e026      	b.n	801876c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801871e:	68fa      	ldr	r2, [r7, #12]
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	4413      	add	r3, r2
 8018724:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018726:	4b14      	ldr	r3, [pc, #80]	@ (8018778 <prvAddCurrentTaskToDelayedList+0x94>)
 8018728:	681b      	ldr	r3, [r3, #0]
 801872a:	68ba      	ldr	r2, [r7, #8]
 801872c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801872e:	68ba      	ldr	r2, [r7, #8]
 8018730:	68fb      	ldr	r3, [r7, #12]
 8018732:	429a      	cmp	r2, r3
 8018734:	d209      	bcs.n	801874a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018736:	4b12      	ldr	r3, [pc, #72]	@ (8018780 <prvAddCurrentTaskToDelayedList+0x9c>)
 8018738:	681a      	ldr	r2, [r3, #0]
 801873a:	4b0f      	ldr	r3, [pc, #60]	@ (8018778 <prvAddCurrentTaskToDelayedList+0x94>)
 801873c:	681b      	ldr	r3, [r3, #0]
 801873e:	3304      	adds	r3, #4
 8018740:	4619      	mov	r1, r3
 8018742:	4610      	mov	r0, r2
 8018744:	f7fd fe7f 	bl	8016446 <vListInsert>
}
 8018748:	e010      	b.n	801876c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801874a:	4b0e      	ldr	r3, [pc, #56]	@ (8018784 <prvAddCurrentTaskToDelayedList+0xa0>)
 801874c:	681a      	ldr	r2, [r3, #0]
 801874e:	4b0a      	ldr	r3, [pc, #40]	@ (8018778 <prvAddCurrentTaskToDelayedList+0x94>)
 8018750:	681b      	ldr	r3, [r3, #0]
 8018752:	3304      	adds	r3, #4
 8018754:	4619      	mov	r1, r3
 8018756:	4610      	mov	r0, r2
 8018758:	f7fd fe75 	bl	8016446 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801875c:	4b0a      	ldr	r3, [pc, #40]	@ (8018788 <prvAddCurrentTaskToDelayedList+0xa4>)
 801875e:	681b      	ldr	r3, [r3, #0]
 8018760:	68ba      	ldr	r2, [r7, #8]
 8018762:	429a      	cmp	r2, r3
 8018764:	d202      	bcs.n	801876c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8018766:	4a08      	ldr	r2, [pc, #32]	@ (8018788 <prvAddCurrentTaskToDelayedList+0xa4>)
 8018768:	68bb      	ldr	r3, [r7, #8]
 801876a:	6013      	str	r3, [r2, #0]
}
 801876c:	bf00      	nop
 801876e:	3710      	adds	r7, #16
 8018770:	46bd      	mov	sp, r7
 8018772:	bd80      	pop	{r7, pc}
 8018774:	20004324 	.word	0x20004324
 8018778:	20003e4c 	.word	0x20003e4c
 801877c:	2000430c 	.word	0x2000430c
 8018780:	200042dc 	.word	0x200042dc
 8018784:	200042d8 	.word	0x200042d8
 8018788:	20004340 	.word	0x20004340

0801878c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801878c:	b580      	push	{r7, lr}
 801878e:	b08a      	sub	sp, #40	@ 0x28
 8018790:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8018792:	2300      	movs	r3, #0
 8018794:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8018796:	f000 fb13 	bl	8018dc0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801879a:	4b1d      	ldr	r3, [pc, #116]	@ (8018810 <xTimerCreateTimerTask+0x84>)
 801879c:	681b      	ldr	r3, [r3, #0]
 801879e:	2b00      	cmp	r3, #0
 80187a0:	d021      	beq.n	80187e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80187a2:	2300      	movs	r3, #0
 80187a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80187a6:	2300      	movs	r3, #0
 80187a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80187aa:	1d3a      	adds	r2, r7, #4
 80187ac:	f107 0108 	add.w	r1, r7, #8
 80187b0:	f107 030c 	add.w	r3, r7, #12
 80187b4:	4618      	mov	r0, r3
 80187b6:	f7fd fddb 	bl	8016370 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80187ba:	6879      	ldr	r1, [r7, #4]
 80187bc:	68bb      	ldr	r3, [r7, #8]
 80187be:	68fa      	ldr	r2, [r7, #12]
 80187c0:	9202      	str	r2, [sp, #8]
 80187c2:	9301      	str	r3, [sp, #4]
 80187c4:	2302      	movs	r3, #2
 80187c6:	9300      	str	r3, [sp, #0]
 80187c8:	2300      	movs	r3, #0
 80187ca:	460a      	mov	r2, r1
 80187cc:	4911      	ldr	r1, [pc, #68]	@ (8018814 <xTimerCreateTimerTask+0x88>)
 80187ce:	4812      	ldr	r0, [pc, #72]	@ (8018818 <xTimerCreateTimerTask+0x8c>)
 80187d0:	f7fe ff80 	bl	80176d4 <xTaskCreateStatic>
 80187d4:	4603      	mov	r3, r0
 80187d6:	4a11      	ldr	r2, [pc, #68]	@ (801881c <xTimerCreateTimerTask+0x90>)
 80187d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80187da:	4b10      	ldr	r3, [pc, #64]	@ (801881c <xTimerCreateTimerTask+0x90>)
 80187dc:	681b      	ldr	r3, [r3, #0]
 80187de:	2b00      	cmp	r3, #0
 80187e0:	d001      	beq.n	80187e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80187e2:	2301      	movs	r3, #1
 80187e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80187e6:	697b      	ldr	r3, [r7, #20]
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	d10b      	bne.n	8018804 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80187ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80187f0:	f383 8811 	msr	BASEPRI, r3
 80187f4:	f3bf 8f6f 	isb	sy
 80187f8:	f3bf 8f4f 	dsb	sy
 80187fc:	613b      	str	r3, [r7, #16]
}
 80187fe:	bf00      	nop
 8018800:	bf00      	nop
 8018802:	e7fd      	b.n	8018800 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8018804:	697b      	ldr	r3, [r7, #20]
}
 8018806:	4618      	mov	r0, r3
 8018808:	3718      	adds	r7, #24
 801880a:	46bd      	mov	sp, r7
 801880c:	bd80      	pop	{r7, pc}
 801880e:	bf00      	nop
 8018810:	2000437c 	.word	0x2000437c
 8018814:	0801ed54 	.word	0x0801ed54
 8018818:	08018959 	.word	0x08018959
 801881c:	20004380 	.word	0x20004380

08018820 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018820:	b580      	push	{r7, lr}
 8018822:	b08a      	sub	sp, #40	@ 0x28
 8018824:	af00      	add	r7, sp, #0
 8018826:	60f8      	str	r0, [r7, #12]
 8018828:	60b9      	str	r1, [r7, #8]
 801882a:	607a      	str	r2, [r7, #4]
 801882c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801882e:	2300      	movs	r3, #0
 8018830:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8018832:	68fb      	ldr	r3, [r7, #12]
 8018834:	2b00      	cmp	r3, #0
 8018836:	d10b      	bne.n	8018850 <xTimerGenericCommand+0x30>
	__asm volatile
 8018838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801883c:	f383 8811 	msr	BASEPRI, r3
 8018840:	f3bf 8f6f 	isb	sy
 8018844:	f3bf 8f4f 	dsb	sy
 8018848:	623b      	str	r3, [r7, #32]
}
 801884a:	bf00      	nop
 801884c:	bf00      	nop
 801884e:	e7fd      	b.n	801884c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8018850:	4b19      	ldr	r3, [pc, #100]	@ (80188b8 <xTimerGenericCommand+0x98>)
 8018852:	681b      	ldr	r3, [r3, #0]
 8018854:	2b00      	cmp	r3, #0
 8018856:	d02a      	beq.n	80188ae <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8018858:	68bb      	ldr	r3, [r7, #8]
 801885a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8018860:	68fb      	ldr	r3, [r7, #12]
 8018862:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8018864:	68bb      	ldr	r3, [r7, #8]
 8018866:	2b05      	cmp	r3, #5
 8018868:	dc18      	bgt.n	801889c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801886a:	f7ff fdad 	bl	80183c8 <xTaskGetSchedulerState>
 801886e:	4603      	mov	r3, r0
 8018870:	2b02      	cmp	r3, #2
 8018872:	d109      	bne.n	8018888 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8018874:	4b10      	ldr	r3, [pc, #64]	@ (80188b8 <xTimerGenericCommand+0x98>)
 8018876:	6818      	ldr	r0, [r3, #0]
 8018878:	f107 0110 	add.w	r1, r7, #16
 801887c:	2300      	movs	r3, #0
 801887e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018880:	f7fe f8b0 	bl	80169e4 <xQueueGenericSend>
 8018884:	6278      	str	r0, [r7, #36]	@ 0x24
 8018886:	e012      	b.n	80188ae <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8018888:	4b0b      	ldr	r3, [pc, #44]	@ (80188b8 <xTimerGenericCommand+0x98>)
 801888a:	6818      	ldr	r0, [r3, #0]
 801888c:	f107 0110 	add.w	r1, r7, #16
 8018890:	2300      	movs	r3, #0
 8018892:	2200      	movs	r2, #0
 8018894:	f7fe f8a6 	bl	80169e4 <xQueueGenericSend>
 8018898:	6278      	str	r0, [r7, #36]	@ 0x24
 801889a:	e008      	b.n	80188ae <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801889c:	4b06      	ldr	r3, [pc, #24]	@ (80188b8 <xTimerGenericCommand+0x98>)
 801889e:	6818      	ldr	r0, [r3, #0]
 80188a0:	f107 0110 	add.w	r1, r7, #16
 80188a4:	2300      	movs	r3, #0
 80188a6:	683a      	ldr	r2, [r7, #0]
 80188a8:	f7fe f99e 	bl	8016be8 <xQueueGenericSendFromISR>
 80188ac:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80188ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80188b0:	4618      	mov	r0, r3
 80188b2:	3728      	adds	r7, #40	@ 0x28
 80188b4:	46bd      	mov	sp, r7
 80188b6:	bd80      	pop	{r7, pc}
 80188b8:	2000437c 	.word	0x2000437c

080188bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80188bc:	b580      	push	{r7, lr}
 80188be:	b088      	sub	sp, #32
 80188c0:	af02      	add	r7, sp, #8
 80188c2:	6078      	str	r0, [r7, #4]
 80188c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80188c6:	4b23      	ldr	r3, [pc, #140]	@ (8018954 <prvProcessExpiredTimer+0x98>)
 80188c8:	681b      	ldr	r3, [r3, #0]
 80188ca:	68db      	ldr	r3, [r3, #12]
 80188cc:	68db      	ldr	r3, [r3, #12]
 80188ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80188d0:	697b      	ldr	r3, [r7, #20]
 80188d2:	3304      	adds	r3, #4
 80188d4:	4618      	mov	r0, r3
 80188d6:	f7fd fdef 	bl	80164b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80188da:	697b      	ldr	r3, [r7, #20]
 80188dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80188e0:	f003 0304 	and.w	r3, r3, #4
 80188e4:	2b00      	cmp	r3, #0
 80188e6:	d023      	beq.n	8018930 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80188e8:	697b      	ldr	r3, [r7, #20]
 80188ea:	699a      	ldr	r2, [r3, #24]
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	18d1      	adds	r1, r2, r3
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	683a      	ldr	r2, [r7, #0]
 80188f4:	6978      	ldr	r0, [r7, #20]
 80188f6:	f000 f8d5 	bl	8018aa4 <prvInsertTimerInActiveList>
 80188fa:	4603      	mov	r3, r0
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	d020      	beq.n	8018942 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018900:	2300      	movs	r3, #0
 8018902:	9300      	str	r3, [sp, #0]
 8018904:	2300      	movs	r3, #0
 8018906:	687a      	ldr	r2, [r7, #4]
 8018908:	2100      	movs	r1, #0
 801890a:	6978      	ldr	r0, [r7, #20]
 801890c:	f7ff ff88 	bl	8018820 <xTimerGenericCommand>
 8018910:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8018912:	693b      	ldr	r3, [r7, #16]
 8018914:	2b00      	cmp	r3, #0
 8018916:	d114      	bne.n	8018942 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8018918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801891c:	f383 8811 	msr	BASEPRI, r3
 8018920:	f3bf 8f6f 	isb	sy
 8018924:	f3bf 8f4f 	dsb	sy
 8018928:	60fb      	str	r3, [r7, #12]
}
 801892a:	bf00      	nop
 801892c:	bf00      	nop
 801892e:	e7fd      	b.n	801892c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018930:	697b      	ldr	r3, [r7, #20]
 8018932:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8018936:	f023 0301 	bic.w	r3, r3, #1
 801893a:	b2da      	uxtb	r2, r3
 801893c:	697b      	ldr	r3, [r7, #20]
 801893e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018942:	697b      	ldr	r3, [r7, #20]
 8018944:	6a1b      	ldr	r3, [r3, #32]
 8018946:	6978      	ldr	r0, [r7, #20]
 8018948:	4798      	blx	r3
}
 801894a:	bf00      	nop
 801894c:	3718      	adds	r7, #24
 801894e:	46bd      	mov	sp, r7
 8018950:	bd80      	pop	{r7, pc}
 8018952:	bf00      	nop
 8018954:	20004374 	.word	0x20004374

08018958 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8018958:	b580      	push	{r7, lr}
 801895a:	b084      	sub	sp, #16
 801895c:	af00      	add	r7, sp, #0
 801895e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018960:	f107 0308 	add.w	r3, r7, #8
 8018964:	4618      	mov	r0, r3
 8018966:	f000 f859 	bl	8018a1c <prvGetNextExpireTime>
 801896a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801896c:	68bb      	ldr	r3, [r7, #8]
 801896e:	4619      	mov	r1, r3
 8018970:	68f8      	ldr	r0, [r7, #12]
 8018972:	f000 f805 	bl	8018980 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8018976:	f000 f8d7 	bl	8018b28 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801897a:	bf00      	nop
 801897c:	e7f0      	b.n	8018960 <prvTimerTask+0x8>
	...

08018980 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8018980:	b580      	push	{r7, lr}
 8018982:	b084      	sub	sp, #16
 8018984:	af00      	add	r7, sp, #0
 8018986:	6078      	str	r0, [r7, #4]
 8018988:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801898a:	f7ff f907 	bl	8017b9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801898e:	f107 0308 	add.w	r3, r7, #8
 8018992:	4618      	mov	r0, r3
 8018994:	f000 f866 	bl	8018a64 <prvSampleTimeNow>
 8018998:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801899a:	68bb      	ldr	r3, [r7, #8]
 801899c:	2b00      	cmp	r3, #0
 801899e:	d130      	bne.n	8018a02 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80189a0:	683b      	ldr	r3, [r7, #0]
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	d10a      	bne.n	80189bc <prvProcessTimerOrBlockTask+0x3c>
 80189a6:	687a      	ldr	r2, [r7, #4]
 80189a8:	68fb      	ldr	r3, [r7, #12]
 80189aa:	429a      	cmp	r2, r3
 80189ac:	d806      	bhi.n	80189bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80189ae:	f7ff f903 	bl	8017bb8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80189b2:	68f9      	ldr	r1, [r7, #12]
 80189b4:	6878      	ldr	r0, [r7, #4]
 80189b6:	f7ff ff81 	bl	80188bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80189ba:	e024      	b.n	8018a06 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80189bc:	683b      	ldr	r3, [r7, #0]
 80189be:	2b00      	cmp	r3, #0
 80189c0:	d008      	beq.n	80189d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80189c2:	4b13      	ldr	r3, [pc, #76]	@ (8018a10 <prvProcessTimerOrBlockTask+0x90>)
 80189c4:	681b      	ldr	r3, [r3, #0]
 80189c6:	681b      	ldr	r3, [r3, #0]
 80189c8:	2b00      	cmp	r3, #0
 80189ca:	d101      	bne.n	80189d0 <prvProcessTimerOrBlockTask+0x50>
 80189cc:	2301      	movs	r3, #1
 80189ce:	e000      	b.n	80189d2 <prvProcessTimerOrBlockTask+0x52>
 80189d0:	2300      	movs	r3, #0
 80189d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80189d4:	4b0f      	ldr	r3, [pc, #60]	@ (8018a14 <prvProcessTimerOrBlockTask+0x94>)
 80189d6:	6818      	ldr	r0, [r3, #0]
 80189d8:	687a      	ldr	r2, [r7, #4]
 80189da:	68fb      	ldr	r3, [r7, #12]
 80189dc:	1ad3      	subs	r3, r2, r3
 80189de:	683a      	ldr	r2, [r7, #0]
 80189e0:	4619      	mov	r1, r3
 80189e2:	f7fe fe43 	bl	801766c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80189e6:	f7ff f8e7 	bl	8017bb8 <xTaskResumeAll>
 80189ea:	4603      	mov	r3, r0
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	d10a      	bne.n	8018a06 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80189f0:	4b09      	ldr	r3, [pc, #36]	@ (8018a18 <prvProcessTimerOrBlockTask+0x98>)
 80189f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80189f6:	601a      	str	r2, [r3, #0]
 80189f8:	f3bf 8f4f 	dsb	sy
 80189fc:	f3bf 8f6f 	isb	sy
}
 8018a00:	e001      	b.n	8018a06 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8018a02:	f7ff f8d9 	bl	8017bb8 <xTaskResumeAll>
}
 8018a06:	bf00      	nop
 8018a08:	3710      	adds	r7, #16
 8018a0a:	46bd      	mov	sp, r7
 8018a0c:	bd80      	pop	{r7, pc}
 8018a0e:	bf00      	nop
 8018a10:	20004378 	.word	0x20004378
 8018a14:	2000437c 	.word	0x2000437c
 8018a18:	e000ed04 	.word	0xe000ed04

08018a1c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8018a1c:	b480      	push	{r7}
 8018a1e:	b085      	sub	sp, #20
 8018a20:	af00      	add	r7, sp, #0
 8018a22:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8018a24:	4b0e      	ldr	r3, [pc, #56]	@ (8018a60 <prvGetNextExpireTime+0x44>)
 8018a26:	681b      	ldr	r3, [r3, #0]
 8018a28:	681b      	ldr	r3, [r3, #0]
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	d101      	bne.n	8018a32 <prvGetNextExpireTime+0x16>
 8018a2e:	2201      	movs	r2, #1
 8018a30:	e000      	b.n	8018a34 <prvGetNextExpireTime+0x18>
 8018a32:	2200      	movs	r2, #0
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	681b      	ldr	r3, [r3, #0]
 8018a3c:	2b00      	cmp	r3, #0
 8018a3e:	d105      	bne.n	8018a4c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018a40:	4b07      	ldr	r3, [pc, #28]	@ (8018a60 <prvGetNextExpireTime+0x44>)
 8018a42:	681b      	ldr	r3, [r3, #0]
 8018a44:	68db      	ldr	r3, [r3, #12]
 8018a46:	681b      	ldr	r3, [r3, #0]
 8018a48:	60fb      	str	r3, [r7, #12]
 8018a4a:	e001      	b.n	8018a50 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8018a4c:	2300      	movs	r3, #0
 8018a4e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8018a50:	68fb      	ldr	r3, [r7, #12]
}
 8018a52:	4618      	mov	r0, r3
 8018a54:	3714      	adds	r7, #20
 8018a56:	46bd      	mov	sp, r7
 8018a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a5c:	4770      	bx	lr
 8018a5e:	bf00      	nop
 8018a60:	20004374 	.word	0x20004374

08018a64 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8018a64:	b580      	push	{r7, lr}
 8018a66:	b084      	sub	sp, #16
 8018a68:	af00      	add	r7, sp, #0
 8018a6a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8018a6c:	f7ff f942 	bl	8017cf4 <xTaskGetTickCount>
 8018a70:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8018a72:	4b0b      	ldr	r3, [pc, #44]	@ (8018aa0 <prvSampleTimeNow+0x3c>)
 8018a74:	681b      	ldr	r3, [r3, #0]
 8018a76:	68fa      	ldr	r2, [r7, #12]
 8018a78:	429a      	cmp	r2, r3
 8018a7a:	d205      	bcs.n	8018a88 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8018a7c:	f000 f93a 	bl	8018cf4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	2201      	movs	r2, #1
 8018a84:	601a      	str	r2, [r3, #0]
 8018a86:	e002      	b.n	8018a8e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	2200      	movs	r2, #0
 8018a8c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8018a8e:	4a04      	ldr	r2, [pc, #16]	@ (8018aa0 <prvSampleTimeNow+0x3c>)
 8018a90:	68fb      	ldr	r3, [r7, #12]
 8018a92:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8018a94:	68fb      	ldr	r3, [r7, #12]
}
 8018a96:	4618      	mov	r0, r3
 8018a98:	3710      	adds	r7, #16
 8018a9a:	46bd      	mov	sp, r7
 8018a9c:	bd80      	pop	{r7, pc}
 8018a9e:	bf00      	nop
 8018aa0:	20004384 	.word	0x20004384

08018aa4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8018aa4:	b580      	push	{r7, lr}
 8018aa6:	b086      	sub	sp, #24
 8018aa8:	af00      	add	r7, sp, #0
 8018aaa:	60f8      	str	r0, [r7, #12]
 8018aac:	60b9      	str	r1, [r7, #8]
 8018aae:	607a      	str	r2, [r7, #4]
 8018ab0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8018ab2:	2300      	movs	r3, #0
 8018ab4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8018ab6:	68fb      	ldr	r3, [r7, #12]
 8018ab8:	68ba      	ldr	r2, [r7, #8]
 8018aba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018abc:	68fb      	ldr	r3, [r7, #12]
 8018abe:	68fa      	ldr	r2, [r7, #12]
 8018ac0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8018ac2:	68ba      	ldr	r2, [r7, #8]
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	429a      	cmp	r2, r3
 8018ac8:	d812      	bhi.n	8018af0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018aca:	687a      	ldr	r2, [r7, #4]
 8018acc:	683b      	ldr	r3, [r7, #0]
 8018ace:	1ad2      	subs	r2, r2, r3
 8018ad0:	68fb      	ldr	r3, [r7, #12]
 8018ad2:	699b      	ldr	r3, [r3, #24]
 8018ad4:	429a      	cmp	r2, r3
 8018ad6:	d302      	bcc.n	8018ade <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8018ad8:	2301      	movs	r3, #1
 8018ada:	617b      	str	r3, [r7, #20]
 8018adc:	e01b      	b.n	8018b16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8018ade:	4b10      	ldr	r3, [pc, #64]	@ (8018b20 <prvInsertTimerInActiveList+0x7c>)
 8018ae0:	681a      	ldr	r2, [r3, #0]
 8018ae2:	68fb      	ldr	r3, [r7, #12]
 8018ae4:	3304      	adds	r3, #4
 8018ae6:	4619      	mov	r1, r3
 8018ae8:	4610      	mov	r0, r2
 8018aea:	f7fd fcac 	bl	8016446 <vListInsert>
 8018aee:	e012      	b.n	8018b16 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018af0:	687a      	ldr	r2, [r7, #4]
 8018af2:	683b      	ldr	r3, [r7, #0]
 8018af4:	429a      	cmp	r2, r3
 8018af6:	d206      	bcs.n	8018b06 <prvInsertTimerInActiveList+0x62>
 8018af8:	68ba      	ldr	r2, [r7, #8]
 8018afa:	683b      	ldr	r3, [r7, #0]
 8018afc:	429a      	cmp	r2, r3
 8018afe:	d302      	bcc.n	8018b06 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8018b00:	2301      	movs	r3, #1
 8018b02:	617b      	str	r3, [r7, #20]
 8018b04:	e007      	b.n	8018b16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018b06:	4b07      	ldr	r3, [pc, #28]	@ (8018b24 <prvInsertTimerInActiveList+0x80>)
 8018b08:	681a      	ldr	r2, [r3, #0]
 8018b0a:	68fb      	ldr	r3, [r7, #12]
 8018b0c:	3304      	adds	r3, #4
 8018b0e:	4619      	mov	r1, r3
 8018b10:	4610      	mov	r0, r2
 8018b12:	f7fd fc98 	bl	8016446 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8018b16:	697b      	ldr	r3, [r7, #20]
}
 8018b18:	4618      	mov	r0, r3
 8018b1a:	3718      	adds	r7, #24
 8018b1c:	46bd      	mov	sp, r7
 8018b1e:	bd80      	pop	{r7, pc}
 8018b20:	20004378 	.word	0x20004378
 8018b24:	20004374 	.word	0x20004374

08018b28 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8018b28:	b580      	push	{r7, lr}
 8018b2a:	b08e      	sub	sp, #56	@ 0x38
 8018b2c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018b2e:	e0ce      	b.n	8018cce <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	da19      	bge.n	8018b6a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8018b36:	1d3b      	adds	r3, r7, #4
 8018b38:	3304      	adds	r3, #4
 8018b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8018b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	d10b      	bne.n	8018b5a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8018b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b46:	f383 8811 	msr	BASEPRI, r3
 8018b4a:	f3bf 8f6f 	isb	sy
 8018b4e:	f3bf 8f4f 	dsb	sy
 8018b52:	61fb      	str	r3, [r7, #28]
}
 8018b54:	bf00      	nop
 8018b56:	bf00      	nop
 8018b58:	e7fd      	b.n	8018b56 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8018b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018b5c:	681b      	ldr	r3, [r3, #0]
 8018b5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018b60:	6850      	ldr	r0, [r2, #4]
 8018b62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018b64:	6892      	ldr	r2, [r2, #8]
 8018b66:	4611      	mov	r1, r2
 8018b68:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	2b00      	cmp	r3, #0
 8018b6e:	f2c0 80ae 	blt.w	8018cce <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8018b72:	68fb      	ldr	r3, [r7, #12]
 8018b74:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8018b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b78:	695b      	ldr	r3, [r3, #20]
 8018b7a:	2b00      	cmp	r3, #0
 8018b7c:	d004      	beq.n	8018b88 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b80:	3304      	adds	r3, #4
 8018b82:	4618      	mov	r0, r3
 8018b84:	f7fd fc98 	bl	80164b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018b88:	463b      	mov	r3, r7
 8018b8a:	4618      	mov	r0, r3
 8018b8c:	f7ff ff6a 	bl	8018a64 <prvSampleTimeNow>
 8018b90:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8018b92:	687b      	ldr	r3, [r7, #4]
 8018b94:	2b09      	cmp	r3, #9
 8018b96:	f200 8097 	bhi.w	8018cc8 <prvProcessReceivedCommands+0x1a0>
 8018b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8018ba0 <prvProcessReceivedCommands+0x78>)
 8018b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ba0:	08018bc9 	.word	0x08018bc9
 8018ba4:	08018bc9 	.word	0x08018bc9
 8018ba8:	08018bc9 	.word	0x08018bc9
 8018bac:	08018c3f 	.word	0x08018c3f
 8018bb0:	08018c53 	.word	0x08018c53
 8018bb4:	08018c9f 	.word	0x08018c9f
 8018bb8:	08018bc9 	.word	0x08018bc9
 8018bbc:	08018bc9 	.word	0x08018bc9
 8018bc0:	08018c3f 	.word	0x08018c3f
 8018bc4:	08018c53 	.word	0x08018c53
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8018bce:	f043 0301 	orr.w	r3, r3, #1
 8018bd2:	b2da      	uxtb	r2, r3
 8018bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bd6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8018bda:	68ba      	ldr	r2, [r7, #8]
 8018bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bde:	699b      	ldr	r3, [r3, #24]
 8018be0:	18d1      	adds	r1, r2, r3
 8018be2:	68bb      	ldr	r3, [r7, #8]
 8018be4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018be6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018be8:	f7ff ff5c 	bl	8018aa4 <prvInsertTimerInActiveList>
 8018bec:	4603      	mov	r3, r0
 8018bee:	2b00      	cmp	r3, #0
 8018bf0:	d06c      	beq.n	8018ccc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bf4:	6a1b      	ldr	r3, [r3, #32]
 8018bf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018bf8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bfc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8018c00:	f003 0304 	and.w	r3, r3, #4
 8018c04:	2b00      	cmp	r3, #0
 8018c06:	d061      	beq.n	8018ccc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8018c08:	68ba      	ldr	r2, [r7, #8]
 8018c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c0c:	699b      	ldr	r3, [r3, #24]
 8018c0e:	441a      	add	r2, r3
 8018c10:	2300      	movs	r3, #0
 8018c12:	9300      	str	r3, [sp, #0]
 8018c14:	2300      	movs	r3, #0
 8018c16:	2100      	movs	r1, #0
 8018c18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018c1a:	f7ff fe01 	bl	8018820 <xTimerGenericCommand>
 8018c1e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8018c20:	6a3b      	ldr	r3, [r7, #32]
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	d152      	bne.n	8018ccc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8018c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018c2a:	f383 8811 	msr	BASEPRI, r3
 8018c2e:	f3bf 8f6f 	isb	sy
 8018c32:	f3bf 8f4f 	dsb	sy
 8018c36:	61bb      	str	r3, [r7, #24]
}
 8018c38:	bf00      	nop
 8018c3a:	bf00      	nop
 8018c3c:	e7fd      	b.n	8018c3a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8018c44:	f023 0301 	bic.w	r3, r3, #1
 8018c48:	b2da      	uxtb	r2, r3
 8018c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c4c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8018c50:	e03d      	b.n	8018cce <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8018c58:	f043 0301 	orr.w	r3, r3, #1
 8018c5c:	b2da      	uxtb	r2, r3
 8018c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c60:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8018c64:	68ba      	ldr	r2, [r7, #8]
 8018c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c68:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8018c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c6c:	699b      	ldr	r3, [r3, #24]
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	d10b      	bne.n	8018c8a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8018c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018c76:	f383 8811 	msr	BASEPRI, r3
 8018c7a:	f3bf 8f6f 	isb	sy
 8018c7e:	f3bf 8f4f 	dsb	sy
 8018c82:	617b      	str	r3, [r7, #20]
}
 8018c84:	bf00      	nop
 8018c86:	bf00      	nop
 8018c88:	e7fd      	b.n	8018c86 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8018c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c8c:	699a      	ldr	r2, [r3, #24]
 8018c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c90:	18d1      	adds	r1, r2, r3
 8018c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018c96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018c98:	f7ff ff04 	bl	8018aa4 <prvInsertTimerInActiveList>
					break;
 8018c9c:	e017      	b.n	8018cce <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8018c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018ca0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8018ca4:	f003 0302 	and.w	r3, r3, #2
 8018ca8:	2b00      	cmp	r3, #0
 8018caa:	d103      	bne.n	8018cb4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8018cac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018cae:	f000 fbeb 	bl	8019488 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8018cb2:	e00c      	b.n	8018cce <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018cb6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8018cba:	f023 0301 	bic.w	r3, r3, #1
 8018cbe:	b2da      	uxtb	r2, r3
 8018cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018cc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8018cc6:	e002      	b.n	8018cce <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8018cc8:	bf00      	nop
 8018cca:	e000      	b.n	8018cce <prvProcessReceivedCommands+0x1a6>
					break;
 8018ccc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018cce:	4b08      	ldr	r3, [pc, #32]	@ (8018cf0 <prvProcessReceivedCommands+0x1c8>)
 8018cd0:	681b      	ldr	r3, [r3, #0]
 8018cd2:	1d39      	adds	r1, r7, #4
 8018cd4:	2200      	movs	r2, #0
 8018cd6:	4618      	mov	r0, r3
 8018cd8:	f7fe f8b4 	bl	8016e44 <xQueueReceive>
 8018cdc:	4603      	mov	r3, r0
 8018cde:	2b00      	cmp	r3, #0
 8018ce0:	f47f af26 	bne.w	8018b30 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8018ce4:	bf00      	nop
 8018ce6:	bf00      	nop
 8018ce8:	3730      	adds	r7, #48	@ 0x30
 8018cea:	46bd      	mov	sp, r7
 8018cec:	bd80      	pop	{r7, pc}
 8018cee:	bf00      	nop
 8018cf0:	2000437c 	.word	0x2000437c

08018cf4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8018cf4:	b580      	push	{r7, lr}
 8018cf6:	b088      	sub	sp, #32
 8018cf8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018cfa:	e049      	b.n	8018d90 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018cfc:	4b2e      	ldr	r3, [pc, #184]	@ (8018db8 <prvSwitchTimerLists+0xc4>)
 8018cfe:	681b      	ldr	r3, [r3, #0]
 8018d00:	68db      	ldr	r3, [r3, #12]
 8018d02:	681b      	ldr	r3, [r3, #0]
 8018d04:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018d06:	4b2c      	ldr	r3, [pc, #176]	@ (8018db8 <prvSwitchTimerLists+0xc4>)
 8018d08:	681b      	ldr	r3, [r3, #0]
 8018d0a:	68db      	ldr	r3, [r3, #12]
 8018d0c:	68db      	ldr	r3, [r3, #12]
 8018d0e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018d10:	68fb      	ldr	r3, [r7, #12]
 8018d12:	3304      	adds	r3, #4
 8018d14:	4618      	mov	r0, r3
 8018d16:	f7fd fbcf 	bl	80164b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018d1a:	68fb      	ldr	r3, [r7, #12]
 8018d1c:	6a1b      	ldr	r3, [r3, #32]
 8018d1e:	68f8      	ldr	r0, [r7, #12]
 8018d20:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018d22:	68fb      	ldr	r3, [r7, #12]
 8018d24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8018d28:	f003 0304 	and.w	r3, r3, #4
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	d02f      	beq.n	8018d90 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8018d30:	68fb      	ldr	r3, [r7, #12]
 8018d32:	699b      	ldr	r3, [r3, #24]
 8018d34:	693a      	ldr	r2, [r7, #16]
 8018d36:	4413      	add	r3, r2
 8018d38:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8018d3a:	68ba      	ldr	r2, [r7, #8]
 8018d3c:	693b      	ldr	r3, [r7, #16]
 8018d3e:	429a      	cmp	r2, r3
 8018d40:	d90e      	bls.n	8018d60 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8018d42:	68fb      	ldr	r3, [r7, #12]
 8018d44:	68ba      	ldr	r2, [r7, #8]
 8018d46:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018d48:	68fb      	ldr	r3, [r7, #12]
 8018d4a:	68fa      	ldr	r2, [r7, #12]
 8018d4c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8018db8 <prvSwitchTimerLists+0xc4>)
 8018d50:	681a      	ldr	r2, [r3, #0]
 8018d52:	68fb      	ldr	r3, [r7, #12]
 8018d54:	3304      	adds	r3, #4
 8018d56:	4619      	mov	r1, r3
 8018d58:	4610      	mov	r0, r2
 8018d5a:	f7fd fb74 	bl	8016446 <vListInsert>
 8018d5e:	e017      	b.n	8018d90 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018d60:	2300      	movs	r3, #0
 8018d62:	9300      	str	r3, [sp, #0]
 8018d64:	2300      	movs	r3, #0
 8018d66:	693a      	ldr	r2, [r7, #16]
 8018d68:	2100      	movs	r1, #0
 8018d6a:	68f8      	ldr	r0, [r7, #12]
 8018d6c:	f7ff fd58 	bl	8018820 <xTimerGenericCommand>
 8018d70:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8018d72:	687b      	ldr	r3, [r7, #4]
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	d10b      	bne.n	8018d90 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8018d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018d7c:	f383 8811 	msr	BASEPRI, r3
 8018d80:	f3bf 8f6f 	isb	sy
 8018d84:	f3bf 8f4f 	dsb	sy
 8018d88:	603b      	str	r3, [r7, #0]
}
 8018d8a:	bf00      	nop
 8018d8c:	bf00      	nop
 8018d8e:	e7fd      	b.n	8018d8c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018d90:	4b09      	ldr	r3, [pc, #36]	@ (8018db8 <prvSwitchTimerLists+0xc4>)
 8018d92:	681b      	ldr	r3, [r3, #0]
 8018d94:	681b      	ldr	r3, [r3, #0]
 8018d96:	2b00      	cmp	r3, #0
 8018d98:	d1b0      	bne.n	8018cfc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8018d9a:	4b07      	ldr	r3, [pc, #28]	@ (8018db8 <prvSwitchTimerLists+0xc4>)
 8018d9c:	681b      	ldr	r3, [r3, #0]
 8018d9e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8018da0:	4b06      	ldr	r3, [pc, #24]	@ (8018dbc <prvSwitchTimerLists+0xc8>)
 8018da2:	681b      	ldr	r3, [r3, #0]
 8018da4:	4a04      	ldr	r2, [pc, #16]	@ (8018db8 <prvSwitchTimerLists+0xc4>)
 8018da6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8018da8:	4a04      	ldr	r2, [pc, #16]	@ (8018dbc <prvSwitchTimerLists+0xc8>)
 8018daa:	697b      	ldr	r3, [r7, #20]
 8018dac:	6013      	str	r3, [r2, #0]
}
 8018dae:	bf00      	nop
 8018db0:	3718      	adds	r7, #24
 8018db2:	46bd      	mov	sp, r7
 8018db4:	bd80      	pop	{r7, pc}
 8018db6:	bf00      	nop
 8018db8:	20004374 	.word	0x20004374
 8018dbc:	20004378 	.word	0x20004378

08018dc0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8018dc0:	b580      	push	{r7, lr}
 8018dc2:	b082      	sub	sp, #8
 8018dc4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8018dc6:	f000 f96f 	bl	80190a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8018dca:	4b15      	ldr	r3, [pc, #84]	@ (8018e20 <prvCheckForValidListAndQueue+0x60>)
 8018dcc:	681b      	ldr	r3, [r3, #0]
 8018dce:	2b00      	cmp	r3, #0
 8018dd0:	d120      	bne.n	8018e14 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8018dd2:	4814      	ldr	r0, [pc, #80]	@ (8018e24 <prvCheckForValidListAndQueue+0x64>)
 8018dd4:	f7fd fae6 	bl	80163a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8018dd8:	4813      	ldr	r0, [pc, #76]	@ (8018e28 <prvCheckForValidListAndQueue+0x68>)
 8018dda:	f7fd fae3 	bl	80163a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8018dde:	4b13      	ldr	r3, [pc, #76]	@ (8018e2c <prvCheckForValidListAndQueue+0x6c>)
 8018de0:	4a10      	ldr	r2, [pc, #64]	@ (8018e24 <prvCheckForValidListAndQueue+0x64>)
 8018de2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8018de4:	4b12      	ldr	r3, [pc, #72]	@ (8018e30 <prvCheckForValidListAndQueue+0x70>)
 8018de6:	4a10      	ldr	r2, [pc, #64]	@ (8018e28 <prvCheckForValidListAndQueue+0x68>)
 8018de8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8018dea:	2300      	movs	r3, #0
 8018dec:	9300      	str	r3, [sp, #0]
 8018dee:	4b11      	ldr	r3, [pc, #68]	@ (8018e34 <prvCheckForValidListAndQueue+0x74>)
 8018df0:	4a11      	ldr	r2, [pc, #68]	@ (8018e38 <prvCheckForValidListAndQueue+0x78>)
 8018df2:	2110      	movs	r1, #16
 8018df4:	200a      	movs	r0, #10
 8018df6:	f7fd fbf3 	bl	80165e0 <xQueueGenericCreateStatic>
 8018dfa:	4603      	mov	r3, r0
 8018dfc:	4a08      	ldr	r2, [pc, #32]	@ (8018e20 <prvCheckForValidListAndQueue+0x60>)
 8018dfe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8018e00:	4b07      	ldr	r3, [pc, #28]	@ (8018e20 <prvCheckForValidListAndQueue+0x60>)
 8018e02:	681b      	ldr	r3, [r3, #0]
 8018e04:	2b00      	cmp	r3, #0
 8018e06:	d005      	beq.n	8018e14 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8018e08:	4b05      	ldr	r3, [pc, #20]	@ (8018e20 <prvCheckForValidListAndQueue+0x60>)
 8018e0a:	681b      	ldr	r3, [r3, #0]
 8018e0c:	490b      	ldr	r1, [pc, #44]	@ (8018e3c <prvCheckForValidListAndQueue+0x7c>)
 8018e0e:	4618      	mov	r0, r3
 8018e10:	f7fe fbd8 	bl	80175c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018e14:	f000 f97a 	bl	801910c <vPortExitCritical>
}
 8018e18:	bf00      	nop
 8018e1a:	46bd      	mov	sp, r7
 8018e1c:	bd80      	pop	{r7, pc}
 8018e1e:	bf00      	nop
 8018e20:	2000437c 	.word	0x2000437c
 8018e24:	2000434c 	.word	0x2000434c
 8018e28:	20004360 	.word	0x20004360
 8018e2c:	20004374 	.word	0x20004374
 8018e30:	20004378 	.word	0x20004378
 8018e34:	20004428 	.word	0x20004428
 8018e38:	20004388 	.word	0x20004388
 8018e3c:	0801ed5c 	.word	0x0801ed5c

08018e40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018e40:	b480      	push	{r7}
 8018e42:	b085      	sub	sp, #20
 8018e44:	af00      	add	r7, sp, #0
 8018e46:	60f8      	str	r0, [r7, #12]
 8018e48:	60b9      	str	r1, [r7, #8]
 8018e4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8018e4c:	68fb      	ldr	r3, [r7, #12]
 8018e4e:	3b04      	subs	r3, #4
 8018e50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8018e52:	68fb      	ldr	r3, [r7, #12]
 8018e54:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8018e58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018e5a:	68fb      	ldr	r3, [r7, #12]
 8018e5c:	3b04      	subs	r3, #4
 8018e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018e60:	68bb      	ldr	r3, [r7, #8]
 8018e62:	f023 0201 	bic.w	r2, r3, #1
 8018e66:	68fb      	ldr	r3, [r7, #12]
 8018e68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018e6a:	68fb      	ldr	r3, [r7, #12]
 8018e6c:	3b04      	subs	r3, #4
 8018e6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018e70:	4a0c      	ldr	r2, [pc, #48]	@ (8018ea4 <pxPortInitialiseStack+0x64>)
 8018e72:	68fb      	ldr	r3, [r7, #12]
 8018e74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8018e76:	68fb      	ldr	r3, [r7, #12]
 8018e78:	3b14      	subs	r3, #20
 8018e7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018e7c:	687a      	ldr	r2, [r7, #4]
 8018e7e:	68fb      	ldr	r3, [r7, #12]
 8018e80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8018e82:	68fb      	ldr	r3, [r7, #12]
 8018e84:	3b04      	subs	r3, #4
 8018e86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8018e88:	68fb      	ldr	r3, [r7, #12]
 8018e8a:	f06f 0202 	mvn.w	r2, #2
 8018e8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8018e90:	68fb      	ldr	r3, [r7, #12]
 8018e92:	3b20      	subs	r3, #32
 8018e94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8018e96:	68fb      	ldr	r3, [r7, #12]
}
 8018e98:	4618      	mov	r0, r3
 8018e9a:	3714      	adds	r7, #20
 8018e9c:	46bd      	mov	sp, r7
 8018e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ea2:	4770      	bx	lr
 8018ea4:	08018ea9 	.word	0x08018ea9

08018ea8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8018ea8:	b480      	push	{r7}
 8018eaa:	b085      	sub	sp, #20
 8018eac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8018eae:	2300      	movs	r3, #0
 8018eb0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8018eb2:	4b13      	ldr	r3, [pc, #76]	@ (8018f00 <prvTaskExitError+0x58>)
 8018eb4:	681b      	ldr	r3, [r3, #0]
 8018eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018eba:	d00b      	beq.n	8018ed4 <prvTaskExitError+0x2c>
	__asm volatile
 8018ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018ec0:	f383 8811 	msr	BASEPRI, r3
 8018ec4:	f3bf 8f6f 	isb	sy
 8018ec8:	f3bf 8f4f 	dsb	sy
 8018ecc:	60fb      	str	r3, [r7, #12]
}
 8018ece:	bf00      	nop
 8018ed0:	bf00      	nop
 8018ed2:	e7fd      	b.n	8018ed0 <prvTaskExitError+0x28>
	__asm volatile
 8018ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018ed8:	f383 8811 	msr	BASEPRI, r3
 8018edc:	f3bf 8f6f 	isb	sy
 8018ee0:	f3bf 8f4f 	dsb	sy
 8018ee4:	60bb      	str	r3, [r7, #8]
}
 8018ee6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8018ee8:	bf00      	nop
 8018eea:	687b      	ldr	r3, [r7, #4]
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	d0fc      	beq.n	8018eea <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8018ef0:	bf00      	nop
 8018ef2:	bf00      	nop
 8018ef4:	3714      	adds	r7, #20
 8018ef6:	46bd      	mov	sp, r7
 8018ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018efc:	4770      	bx	lr
 8018efe:	bf00      	nop
 8018f00:	20000098 	.word	0x20000098
	...

08018f10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018f10:	4b07      	ldr	r3, [pc, #28]	@ (8018f30 <pxCurrentTCBConst2>)
 8018f12:	6819      	ldr	r1, [r3, #0]
 8018f14:	6808      	ldr	r0, [r1, #0]
 8018f16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f1a:	f380 8809 	msr	PSP, r0
 8018f1e:	f3bf 8f6f 	isb	sy
 8018f22:	f04f 0000 	mov.w	r0, #0
 8018f26:	f380 8811 	msr	BASEPRI, r0
 8018f2a:	4770      	bx	lr
 8018f2c:	f3af 8000 	nop.w

08018f30 <pxCurrentTCBConst2>:
 8018f30:	20003e4c 	.word	0x20003e4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018f34:	bf00      	nop
 8018f36:	bf00      	nop

08018f38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018f38:	4808      	ldr	r0, [pc, #32]	@ (8018f5c <prvPortStartFirstTask+0x24>)
 8018f3a:	6800      	ldr	r0, [r0, #0]
 8018f3c:	6800      	ldr	r0, [r0, #0]
 8018f3e:	f380 8808 	msr	MSP, r0
 8018f42:	f04f 0000 	mov.w	r0, #0
 8018f46:	f380 8814 	msr	CONTROL, r0
 8018f4a:	b662      	cpsie	i
 8018f4c:	b661      	cpsie	f
 8018f4e:	f3bf 8f4f 	dsb	sy
 8018f52:	f3bf 8f6f 	isb	sy
 8018f56:	df00      	svc	0
 8018f58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8018f5a:	bf00      	nop
 8018f5c:	e000ed08 	.word	0xe000ed08

08018f60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018f60:	b580      	push	{r7, lr}
 8018f62:	b086      	sub	sp, #24
 8018f64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8018f66:	4b47      	ldr	r3, [pc, #284]	@ (8019084 <xPortStartScheduler+0x124>)
 8018f68:	681b      	ldr	r3, [r3, #0]
 8018f6a:	4a47      	ldr	r2, [pc, #284]	@ (8019088 <xPortStartScheduler+0x128>)
 8018f6c:	4293      	cmp	r3, r2
 8018f6e:	d10b      	bne.n	8018f88 <xPortStartScheduler+0x28>
	__asm volatile
 8018f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f74:	f383 8811 	msr	BASEPRI, r3
 8018f78:	f3bf 8f6f 	isb	sy
 8018f7c:	f3bf 8f4f 	dsb	sy
 8018f80:	613b      	str	r3, [r7, #16]
}
 8018f82:	bf00      	nop
 8018f84:	bf00      	nop
 8018f86:	e7fd      	b.n	8018f84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8018f88:	4b3e      	ldr	r3, [pc, #248]	@ (8019084 <xPortStartScheduler+0x124>)
 8018f8a:	681b      	ldr	r3, [r3, #0]
 8018f8c:	4a3f      	ldr	r2, [pc, #252]	@ (801908c <xPortStartScheduler+0x12c>)
 8018f8e:	4293      	cmp	r3, r2
 8018f90:	d10b      	bne.n	8018faa <xPortStartScheduler+0x4a>
	__asm volatile
 8018f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f96:	f383 8811 	msr	BASEPRI, r3
 8018f9a:	f3bf 8f6f 	isb	sy
 8018f9e:	f3bf 8f4f 	dsb	sy
 8018fa2:	60fb      	str	r3, [r7, #12]
}
 8018fa4:	bf00      	nop
 8018fa6:	bf00      	nop
 8018fa8:	e7fd      	b.n	8018fa6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8018faa:	4b39      	ldr	r3, [pc, #228]	@ (8019090 <xPortStartScheduler+0x130>)
 8018fac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018fae:	697b      	ldr	r3, [r7, #20]
 8018fb0:	781b      	ldrb	r3, [r3, #0]
 8018fb2:	b2db      	uxtb	r3, r3
 8018fb4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018fb6:	697b      	ldr	r3, [r7, #20]
 8018fb8:	22ff      	movs	r2, #255	@ 0xff
 8018fba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018fbc:	697b      	ldr	r3, [r7, #20]
 8018fbe:	781b      	ldrb	r3, [r3, #0]
 8018fc0:	b2db      	uxtb	r3, r3
 8018fc2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018fc4:	78fb      	ldrb	r3, [r7, #3]
 8018fc6:	b2db      	uxtb	r3, r3
 8018fc8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8018fcc:	b2da      	uxtb	r2, r3
 8018fce:	4b31      	ldr	r3, [pc, #196]	@ (8019094 <xPortStartScheduler+0x134>)
 8018fd0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8018fd2:	4b31      	ldr	r3, [pc, #196]	@ (8019098 <xPortStartScheduler+0x138>)
 8018fd4:	2207      	movs	r2, #7
 8018fd6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018fd8:	e009      	b.n	8018fee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8018fda:	4b2f      	ldr	r3, [pc, #188]	@ (8019098 <xPortStartScheduler+0x138>)
 8018fdc:	681b      	ldr	r3, [r3, #0]
 8018fde:	3b01      	subs	r3, #1
 8018fe0:	4a2d      	ldr	r2, [pc, #180]	@ (8019098 <xPortStartScheduler+0x138>)
 8018fe2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018fe4:	78fb      	ldrb	r3, [r7, #3]
 8018fe6:	b2db      	uxtb	r3, r3
 8018fe8:	005b      	lsls	r3, r3, #1
 8018fea:	b2db      	uxtb	r3, r3
 8018fec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018fee:	78fb      	ldrb	r3, [r7, #3]
 8018ff0:	b2db      	uxtb	r3, r3
 8018ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018ff6:	2b80      	cmp	r3, #128	@ 0x80
 8018ff8:	d0ef      	beq.n	8018fda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018ffa:	4b27      	ldr	r3, [pc, #156]	@ (8019098 <xPortStartScheduler+0x138>)
 8018ffc:	681b      	ldr	r3, [r3, #0]
 8018ffe:	f1c3 0307 	rsb	r3, r3, #7
 8019002:	2b04      	cmp	r3, #4
 8019004:	d00b      	beq.n	801901e <xPortStartScheduler+0xbe>
	__asm volatile
 8019006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801900a:	f383 8811 	msr	BASEPRI, r3
 801900e:	f3bf 8f6f 	isb	sy
 8019012:	f3bf 8f4f 	dsb	sy
 8019016:	60bb      	str	r3, [r7, #8]
}
 8019018:	bf00      	nop
 801901a:	bf00      	nop
 801901c:	e7fd      	b.n	801901a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801901e:	4b1e      	ldr	r3, [pc, #120]	@ (8019098 <xPortStartScheduler+0x138>)
 8019020:	681b      	ldr	r3, [r3, #0]
 8019022:	021b      	lsls	r3, r3, #8
 8019024:	4a1c      	ldr	r2, [pc, #112]	@ (8019098 <xPortStartScheduler+0x138>)
 8019026:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8019028:	4b1b      	ldr	r3, [pc, #108]	@ (8019098 <xPortStartScheduler+0x138>)
 801902a:	681b      	ldr	r3, [r3, #0]
 801902c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8019030:	4a19      	ldr	r2, [pc, #100]	@ (8019098 <xPortStartScheduler+0x138>)
 8019032:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	b2da      	uxtb	r2, r3
 8019038:	697b      	ldr	r3, [r7, #20]
 801903a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801903c:	4b17      	ldr	r3, [pc, #92]	@ (801909c <xPortStartScheduler+0x13c>)
 801903e:	681b      	ldr	r3, [r3, #0]
 8019040:	4a16      	ldr	r2, [pc, #88]	@ (801909c <xPortStartScheduler+0x13c>)
 8019042:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8019046:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8019048:	4b14      	ldr	r3, [pc, #80]	@ (801909c <xPortStartScheduler+0x13c>)
 801904a:	681b      	ldr	r3, [r3, #0]
 801904c:	4a13      	ldr	r2, [pc, #76]	@ (801909c <xPortStartScheduler+0x13c>)
 801904e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8019052:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8019054:	f000 f8da 	bl	801920c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8019058:	4b11      	ldr	r3, [pc, #68]	@ (80190a0 <xPortStartScheduler+0x140>)
 801905a:	2200      	movs	r2, #0
 801905c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801905e:	f000 f8f9 	bl	8019254 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8019062:	4b10      	ldr	r3, [pc, #64]	@ (80190a4 <xPortStartScheduler+0x144>)
 8019064:	681b      	ldr	r3, [r3, #0]
 8019066:	4a0f      	ldr	r2, [pc, #60]	@ (80190a4 <xPortStartScheduler+0x144>)
 8019068:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801906c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801906e:	f7ff ff63 	bl	8018f38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8019072:	f7fe ff1b 	bl	8017eac <vTaskSwitchContext>
	prvTaskExitError();
 8019076:	f7ff ff17 	bl	8018ea8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801907a:	2300      	movs	r3, #0
}
 801907c:	4618      	mov	r0, r3
 801907e:	3718      	adds	r7, #24
 8019080:	46bd      	mov	sp, r7
 8019082:	bd80      	pop	{r7, pc}
 8019084:	e000ed00 	.word	0xe000ed00
 8019088:	410fc271 	.word	0x410fc271
 801908c:	410fc270 	.word	0x410fc270
 8019090:	e000e400 	.word	0xe000e400
 8019094:	20004478 	.word	0x20004478
 8019098:	2000447c 	.word	0x2000447c
 801909c:	e000ed20 	.word	0xe000ed20
 80190a0:	20000098 	.word	0x20000098
 80190a4:	e000ef34 	.word	0xe000ef34

080190a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80190a8:	b480      	push	{r7}
 80190aa:	b083      	sub	sp, #12
 80190ac:	af00      	add	r7, sp, #0
	__asm volatile
 80190ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80190b2:	f383 8811 	msr	BASEPRI, r3
 80190b6:	f3bf 8f6f 	isb	sy
 80190ba:	f3bf 8f4f 	dsb	sy
 80190be:	607b      	str	r3, [r7, #4]
}
 80190c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80190c2:	4b10      	ldr	r3, [pc, #64]	@ (8019104 <vPortEnterCritical+0x5c>)
 80190c4:	681b      	ldr	r3, [r3, #0]
 80190c6:	3301      	adds	r3, #1
 80190c8:	4a0e      	ldr	r2, [pc, #56]	@ (8019104 <vPortEnterCritical+0x5c>)
 80190ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80190cc:	4b0d      	ldr	r3, [pc, #52]	@ (8019104 <vPortEnterCritical+0x5c>)
 80190ce:	681b      	ldr	r3, [r3, #0]
 80190d0:	2b01      	cmp	r3, #1
 80190d2:	d110      	bne.n	80190f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80190d4:	4b0c      	ldr	r3, [pc, #48]	@ (8019108 <vPortEnterCritical+0x60>)
 80190d6:	681b      	ldr	r3, [r3, #0]
 80190d8:	b2db      	uxtb	r3, r3
 80190da:	2b00      	cmp	r3, #0
 80190dc:	d00b      	beq.n	80190f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80190de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80190e2:	f383 8811 	msr	BASEPRI, r3
 80190e6:	f3bf 8f6f 	isb	sy
 80190ea:	f3bf 8f4f 	dsb	sy
 80190ee:	603b      	str	r3, [r7, #0]
}
 80190f0:	bf00      	nop
 80190f2:	bf00      	nop
 80190f4:	e7fd      	b.n	80190f2 <vPortEnterCritical+0x4a>
	}
}
 80190f6:	bf00      	nop
 80190f8:	370c      	adds	r7, #12
 80190fa:	46bd      	mov	sp, r7
 80190fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019100:	4770      	bx	lr
 8019102:	bf00      	nop
 8019104:	20000098 	.word	0x20000098
 8019108:	e000ed04 	.word	0xe000ed04

0801910c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801910c:	b480      	push	{r7}
 801910e:	b083      	sub	sp, #12
 8019110:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8019112:	4b12      	ldr	r3, [pc, #72]	@ (801915c <vPortExitCritical+0x50>)
 8019114:	681b      	ldr	r3, [r3, #0]
 8019116:	2b00      	cmp	r3, #0
 8019118:	d10b      	bne.n	8019132 <vPortExitCritical+0x26>
	__asm volatile
 801911a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801911e:	f383 8811 	msr	BASEPRI, r3
 8019122:	f3bf 8f6f 	isb	sy
 8019126:	f3bf 8f4f 	dsb	sy
 801912a:	607b      	str	r3, [r7, #4]
}
 801912c:	bf00      	nop
 801912e:	bf00      	nop
 8019130:	e7fd      	b.n	801912e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8019132:	4b0a      	ldr	r3, [pc, #40]	@ (801915c <vPortExitCritical+0x50>)
 8019134:	681b      	ldr	r3, [r3, #0]
 8019136:	3b01      	subs	r3, #1
 8019138:	4a08      	ldr	r2, [pc, #32]	@ (801915c <vPortExitCritical+0x50>)
 801913a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801913c:	4b07      	ldr	r3, [pc, #28]	@ (801915c <vPortExitCritical+0x50>)
 801913e:	681b      	ldr	r3, [r3, #0]
 8019140:	2b00      	cmp	r3, #0
 8019142:	d105      	bne.n	8019150 <vPortExitCritical+0x44>
 8019144:	2300      	movs	r3, #0
 8019146:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019148:	683b      	ldr	r3, [r7, #0]
 801914a:	f383 8811 	msr	BASEPRI, r3
}
 801914e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8019150:	bf00      	nop
 8019152:	370c      	adds	r7, #12
 8019154:	46bd      	mov	sp, r7
 8019156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801915a:	4770      	bx	lr
 801915c:	20000098 	.word	0x20000098

08019160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8019160:	f3ef 8009 	mrs	r0, PSP
 8019164:	f3bf 8f6f 	isb	sy
 8019168:	4b15      	ldr	r3, [pc, #84]	@ (80191c0 <pxCurrentTCBConst>)
 801916a:	681a      	ldr	r2, [r3, #0]
 801916c:	f01e 0f10 	tst.w	lr, #16
 8019170:	bf08      	it	eq
 8019172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8019176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801917a:	6010      	str	r0, [r2, #0]
 801917c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019180:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8019184:	f380 8811 	msr	BASEPRI, r0
 8019188:	f3bf 8f4f 	dsb	sy
 801918c:	f3bf 8f6f 	isb	sy
 8019190:	f7fe fe8c 	bl	8017eac <vTaskSwitchContext>
 8019194:	f04f 0000 	mov.w	r0, #0
 8019198:	f380 8811 	msr	BASEPRI, r0
 801919c:	bc09      	pop	{r0, r3}
 801919e:	6819      	ldr	r1, [r3, #0]
 80191a0:	6808      	ldr	r0, [r1, #0]
 80191a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191a6:	f01e 0f10 	tst.w	lr, #16
 80191aa:	bf08      	it	eq
 80191ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80191b0:	f380 8809 	msr	PSP, r0
 80191b4:	f3bf 8f6f 	isb	sy
 80191b8:	4770      	bx	lr
 80191ba:	bf00      	nop
 80191bc:	f3af 8000 	nop.w

080191c0 <pxCurrentTCBConst>:
 80191c0:	20003e4c 	.word	0x20003e4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80191c4:	bf00      	nop
 80191c6:	bf00      	nop

080191c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80191c8:	b580      	push	{r7, lr}
 80191ca:	b082      	sub	sp, #8
 80191cc:	af00      	add	r7, sp, #0
	__asm volatile
 80191ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80191d2:	f383 8811 	msr	BASEPRI, r3
 80191d6:	f3bf 8f6f 	isb	sy
 80191da:	f3bf 8f4f 	dsb	sy
 80191de:	607b      	str	r3, [r7, #4]
}
 80191e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80191e2:	f7fe fda9 	bl	8017d38 <xTaskIncrementTick>
 80191e6:	4603      	mov	r3, r0
 80191e8:	2b00      	cmp	r3, #0
 80191ea:	d003      	beq.n	80191f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80191ec:	4b06      	ldr	r3, [pc, #24]	@ (8019208 <xPortSysTickHandler+0x40>)
 80191ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80191f2:	601a      	str	r2, [r3, #0]
 80191f4:	2300      	movs	r3, #0
 80191f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80191f8:	683b      	ldr	r3, [r7, #0]
 80191fa:	f383 8811 	msr	BASEPRI, r3
}
 80191fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8019200:	bf00      	nop
 8019202:	3708      	adds	r7, #8
 8019204:	46bd      	mov	sp, r7
 8019206:	bd80      	pop	{r7, pc}
 8019208:	e000ed04 	.word	0xe000ed04

0801920c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801920c:	b480      	push	{r7}
 801920e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019210:	4b0b      	ldr	r3, [pc, #44]	@ (8019240 <vPortSetupTimerInterrupt+0x34>)
 8019212:	2200      	movs	r2, #0
 8019214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019216:	4b0b      	ldr	r3, [pc, #44]	@ (8019244 <vPortSetupTimerInterrupt+0x38>)
 8019218:	2200      	movs	r2, #0
 801921a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801921c:	4b0a      	ldr	r3, [pc, #40]	@ (8019248 <vPortSetupTimerInterrupt+0x3c>)
 801921e:	681b      	ldr	r3, [r3, #0]
 8019220:	4a0a      	ldr	r2, [pc, #40]	@ (801924c <vPortSetupTimerInterrupt+0x40>)
 8019222:	fba2 2303 	umull	r2, r3, r2, r3
 8019226:	099b      	lsrs	r3, r3, #6
 8019228:	4a09      	ldr	r2, [pc, #36]	@ (8019250 <vPortSetupTimerInterrupt+0x44>)
 801922a:	3b01      	subs	r3, #1
 801922c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801922e:	4b04      	ldr	r3, [pc, #16]	@ (8019240 <vPortSetupTimerInterrupt+0x34>)
 8019230:	2207      	movs	r2, #7
 8019232:	601a      	str	r2, [r3, #0]
}
 8019234:	bf00      	nop
 8019236:	46bd      	mov	sp, r7
 8019238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801923c:	4770      	bx	lr
 801923e:	bf00      	nop
 8019240:	e000e010 	.word	0xe000e010
 8019244:	e000e018 	.word	0xe000e018
 8019248:	20000000 	.word	0x20000000
 801924c:	10624dd3 	.word	0x10624dd3
 8019250:	e000e014 	.word	0xe000e014

08019254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019254:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8019264 <vPortEnableVFP+0x10>
 8019258:	6801      	ldr	r1, [r0, #0]
 801925a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801925e:	6001      	str	r1, [r0, #0]
 8019260:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019262:	bf00      	nop
 8019264:	e000ed88 	.word	0xe000ed88

08019268 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8019268:	b480      	push	{r7}
 801926a:	b085      	sub	sp, #20
 801926c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801926e:	f3ef 8305 	mrs	r3, IPSR
 8019272:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8019274:	68fb      	ldr	r3, [r7, #12]
 8019276:	2b0f      	cmp	r3, #15
 8019278:	d915      	bls.n	80192a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801927a:	4a18      	ldr	r2, [pc, #96]	@ (80192dc <vPortValidateInterruptPriority+0x74>)
 801927c:	68fb      	ldr	r3, [r7, #12]
 801927e:	4413      	add	r3, r2
 8019280:	781b      	ldrb	r3, [r3, #0]
 8019282:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8019284:	4b16      	ldr	r3, [pc, #88]	@ (80192e0 <vPortValidateInterruptPriority+0x78>)
 8019286:	781b      	ldrb	r3, [r3, #0]
 8019288:	7afa      	ldrb	r2, [r7, #11]
 801928a:	429a      	cmp	r2, r3
 801928c:	d20b      	bcs.n	80192a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801928e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019292:	f383 8811 	msr	BASEPRI, r3
 8019296:	f3bf 8f6f 	isb	sy
 801929a:	f3bf 8f4f 	dsb	sy
 801929e:	607b      	str	r3, [r7, #4]
}
 80192a0:	bf00      	nop
 80192a2:	bf00      	nop
 80192a4:	e7fd      	b.n	80192a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80192a6:	4b0f      	ldr	r3, [pc, #60]	@ (80192e4 <vPortValidateInterruptPriority+0x7c>)
 80192a8:	681b      	ldr	r3, [r3, #0]
 80192aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80192ae:	4b0e      	ldr	r3, [pc, #56]	@ (80192e8 <vPortValidateInterruptPriority+0x80>)
 80192b0:	681b      	ldr	r3, [r3, #0]
 80192b2:	429a      	cmp	r2, r3
 80192b4:	d90b      	bls.n	80192ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80192b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80192ba:	f383 8811 	msr	BASEPRI, r3
 80192be:	f3bf 8f6f 	isb	sy
 80192c2:	f3bf 8f4f 	dsb	sy
 80192c6:	603b      	str	r3, [r7, #0]
}
 80192c8:	bf00      	nop
 80192ca:	bf00      	nop
 80192cc:	e7fd      	b.n	80192ca <vPortValidateInterruptPriority+0x62>
	}
 80192ce:	bf00      	nop
 80192d0:	3714      	adds	r7, #20
 80192d2:	46bd      	mov	sp, r7
 80192d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192d8:	4770      	bx	lr
 80192da:	bf00      	nop
 80192dc:	e000e3f0 	.word	0xe000e3f0
 80192e0:	20004478 	.word	0x20004478
 80192e4:	e000ed0c 	.word	0xe000ed0c
 80192e8:	2000447c 	.word	0x2000447c

080192ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80192ec:	b580      	push	{r7, lr}
 80192ee:	b08a      	sub	sp, #40	@ 0x28
 80192f0:	af00      	add	r7, sp, #0
 80192f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80192f4:	2300      	movs	r3, #0
 80192f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80192f8:	f7fe fc50 	bl	8017b9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80192fc:	4b5c      	ldr	r3, [pc, #368]	@ (8019470 <pvPortMalloc+0x184>)
 80192fe:	681b      	ldr	r3, [r3, #0]
 8019300:	2b00      	cmp	r3, #0
 8019302:	d101      	bne.n	8019308 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019304:	f000 f924 	bl	8019550 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019308:	4b5a      	ldr	r3, [pc, #360]	@ (8019474 <pvPortMalloc+0x188>)
 801930a:	681a      	ldr	r2, [r3, #0]
 801930c:	687b      	ldr	r3, [r7, #4]
 801930e:	4013      	ands	r3, r2
 8019310:	2b00      	cmp	r3, #0
 8019312:	f040 8095 	bne.w	8019440 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	2b00      	cmp	r3, #0
 801931a:	d01e      	beq.n	801935a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801931c:	2208      	movs	r2, #8
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	4413      	add	r3, r2
 8019322:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	f003 0307 	and.w	r3, r3, #7
 801932a:	2b00      	cmp	r3, #0
 801932c:	d015      	beq.n	801935a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801932e:	687b      	ldr	r3, [r7, #4]
 8019330:	f023 0307 	bic.w	r3, r3, #7
 8019334:	3308      	adds	r3, #8
 8019336:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019338:	687b      	ldr	r3, [r7, #4]
 801933a:	f003 0307 	and.w	r3, r3, #7
 801933e:	2b00      	cmp	r3, #0
 8019340:	d00b      	beq.n	801935a <pvPortMalloc+0x6e>
	__asm volatile
 8019342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019346:	f383 8811 	msr	BASEPRI, r3
 801934a:	f3bf 8f6f 	isb	sy
 801934e:	f3bf 8f4f 	dsb	sy
 8019352:	617b      	str	r3, [r7, #20]
}
 8019354:	bf00      	nop
 8019356:	bf00      	nop
 8019358:	e7fd      	b.n	8019356 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801935a:	687b      	ldr	r3, [r7, #4]
 801935c:	2b00      	cmp	r3, #0
 801935e:	d06f      	beq.n	8019440 <pvPortMalloc+0x154>
 8019360:	4b45      	ldr	r3, [pc, #276]	@ (8019478 <pvPortMalloc+0x18c>)
 8019362:	681b      	ldr	r3, [r3, #0]
 8019364:	687a      	ldr	r2, [r7, #4]
 8019366:	429a      	cmp	r2, r3
 8019368:	d86a      	bhi.n	8019440 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801936a:	4b44      	ldr	r3, [pc, #272]	@ (801947c <pvPortMalloc+0x190>)
 801936c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801936e:	4b43      	ldr	r3, [pc, #268]	@ (801947c <pvPortMalloc+0x190>)
 8019370:	681b      	ldr	r3, [r3, #0]
 8019372:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019374:	e004      	b.n	8019380 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8019376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019378:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801937a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801937c:	681b      	ldr	r3, [r3, #0]
 801937e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019382:	685b      	ldr	r3, [r3, #4]
 8019384:	687a      	ldr	r2, [r7, #4]
 8019386:	429a      	cmp	r2, r3
 8019388:	d903      	bls.n	8019392 <pvPortMalloc+0xa6>
 801938a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801938c:	681b      	ldr	r3, [r3, #0]
 801938e:	2b00      	cmp	r3, #0
 8019390:	d1f1      	bne.n	8019376 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8019392:	4b37      	ldr	r3, [pc, #220]	@ (8019470 <pvPortMalloc+0x184>)
 8019394:	681b      	ldr	r3, [r3, #0]
 8019396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019398:	429a      	cmp	r2, r3
 801939a:	d051      	beq.n	8019440 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801939c:	6a3b      	ldr	r3, [r7, #32]
 801939e:	681b      	ldr	r3, [r3, #0]
 80193a0:	2208      	movs	r2, #8
 80193a2:	4413      	add	r3, r2
 80193a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80193a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193a8:	681a      	ldr	r2, [r3, #0]
 80193aa:	6a3b      	ldr	r3, [r7, #32]
 80193ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80193ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193b0:	685a      	ldr	r2, [r3, #4]
 80193b2:	687b      	ldr	r3, [r7, #4]
 80193b4:	1ad2      	subs	r2, r2, r3
 80193b6:	2308      	movs	r3, #8
 80193b8:	005b      	lsls	r3, r3, #1
 80193ba:	429a      	cmp	r2, r3
 80193bc:	d920      	bls.n	8019400 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80193be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80193c0:	687b      	ldr	r3, [r7, #4]
 80193c2:	4413      	add	r3, r2
 80193c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80193c6:	69bb      	ldr	r3, [r7, #24]
 80193c8:	f003 0307 	and.w	r3, r3, #7
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	d00b      	beq.n	80193e8 <pvPortMalloc+0xfc>
	__asm volatile
 80193d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80193d4:	f383 8811 	msr	BASEPRI, r3
 80193d8:	f3bf 8f6f 	isb	sy
 80193dc:	f3bf 8f4f 	dsb	sy
 80193e0:	613b      	str	r3, [r7, #16]
}
 80193e2:	bf00      	nop
 80193e4:	bf00      	nop
 80193e6:	e7fd      	b.n	80193e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80193e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193ea:	685a      	ldr	r2, [r3, #4]
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	1ad2      	subs	r2, r2, r3
 80193f0:	69bb      	ldr	r3, [r7, #24]
 80193f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80193f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193f6:	687a      	ldr	r2, [r7, #4]
 80193f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80193fa:	69b8      	ldr	r0, [r7, #24]
 80193fc:	f000 f90a 	bl	8019614 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019400:	4b1d      	ldr	r3, [pc, #116]	@ (8019478 <pvPortMalloc+0x18c>)
 8019402:	681a      	ldr	r2, [r3, #0]
 8019404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019406:	685b      	ldr	r3, [r3, #4]
 8019408:	1ad3      	subs	r3, r2, r3
 801940a:	4a1b      	ldr	r2, [pc, #108]	@ (8019478 <pvPortMalloc+0x18c>)
 801940c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801940e:	4b1a      	ldr	r3, [pc, #104]	@ (8019478 <pvPortMalloc+0x18c>)
 8019410:	681a      	ldr	r2, [r3, #0]
 8019412:	4b1b      	ldr	r3, [pc, #108]	@ (8019480 <pvPortMalloc+0x194>)
 8019414:	681b      	ldr	r3, [r3, #0]
 8019416:	429a      	cmp	r2, r3
 8019418:	d203      	bcs.n	8019422 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801941a:	4b17      	ldr	r3, [pc, #92]	@ (8019478 <pvPortMalloc+0x18c>)
 801941c:	681b      	ldr	r3, [r3, #0]
 801941e:	4a18      	ldr	r2, [pc, #96]	@ (8019480 <pvPortMalloc+0x194>)
 8019420:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8019422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019424:	685a      	ldr	r2, [r3, #4]
 8019426:	4b13      	ldr	r3, [pc, #76]	@ (8019474 <pvPortMalloc+0x188>)
 8019428:	681b      	ldr	r3, [r3, #0]
 801942a:	431a      	orrs	r2, r3
 801942c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801942e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019432:	2200      	movs	r2, #0
 8019434:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8019436:	4b13      	ldr	r3, [pc, #76]	@ (8019484 <pvPortMalloc+0x198>)
 8019438:	681b      	ldr	r3, [r3, #0]
 801943a:	3301      	adds	r3, #1
 801943c:	4a11      	ldr	r2, [pc, #68]	@ (8019484 <pvPortMalloc+0x198>)
 801943e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8019440:	f7fe fbba 	bl	8017bb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8019444:	69fb      	ldr	r3, [r7, #28]
 8019446:	f003 0307 	and.w	r3, r3, #7
 801944a:	2b00      	cmp	r3, #0
 801944c:	d00b      	beq.n	8019466 <pvPortMalloc+0x17a>
	__asm volatile
 801944e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019452:	f383 8811 	msr	BASEPRI, r3
 8019456:	f3bf 8f6f 	isb	sy
 801945a:	f3bf 8f4f 	dsb	sy
 801945e:	60fb      	str	r3, [r7, #12]
}
 8019460:	bf00      	nop
 8019462:	bf00      	nop
 8019464:	e7fd      	b.n	8019462 <pvPortMalloc+0x176>
	return pvReturn;
 8019466:	69fb      	ldr	r3, [r7, #28]
}
 8019468:	4618      	mov	r0, r3
 801946a:	3728      	adds	r7, #40	@ 0x28
 801946c:	46bd      	mov	sp, r7
 801946e:	bd80      	pop	{r7, pc}
 8019470:	20007368 	.word	0x20007368
 8019474:	2000737c 	.word	0x2000737c
 8019478:	2000736c 	.word	0x2000736c
 801947c:	20007360 	.word	0x20007360
 8019480:	20007370 	.word	0x20007370
 8019484:	20007374 	.word	0x20007374

08019488 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8019488:	b580      	push	{r7, lr}
 801948a:	b086      	sub	sp, #24
 801948c:	af00      	add	r7, sp, #0
 801948e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	2b00      	cmp	r3, #0
 8019498:	d04f      	beq.n	801953a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801949a:	2308      	movs	r3, #8
 801949c:	425b      	negs	r3, r3
 801949e:	697a      	ldr	r2, [r7, #20]
 80194a0:	4413      	add	r3, r2
 80194a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80194a4:	697b      	ldr	r3, [r7, #20]
 80194a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80194a8:	693b      	ldr	r3, [r7, #16]
 80194aa:	685a      	ldr	r2, [r3, #4]
 80194ac:	4b25      	ldr	r3, [pc, #148]	@ (8019544 <vPortFree+0xbc>)
 80194ae:	681b      	ldr	r3, [r3, #0]
 80194b0:	4013      	ands	r3, r2
 80194b2:	2b00      	cmp	r3, #0
 80194b4:	d10b      	bne.n	80194ce <vPortFree+0x46>
	__asm volatile
 80194b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80194ba:	f383 8811 	msr	BASEPRI, r3
 80194be:	f3bf 8f6f 	isb	sy
 80194c2:	f3bf 8f4f 	dsb	sy
 80194c6:	60fb      	str	r3, [r7, #12]
}
 80194c8:	bf00      	nop
 80194ca:	bf00      	nop
 80194cc:	e7fd      	b.n	80194ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80194ce:	693b      	ldr	r3, [r7, #16]
 80194d0:	681b      	ldr	r3, [r3, #0]
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d00b      	beq.n	80194ee <vPortFree+0x66>
	__asm volatile
 80194d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80194da:	f383 8811 	msr	BASEPRI, r3
 80194de:	f3bf 8f6f 	isb	sy
 80194e2:	f3bf 8f4f 	dsb	sy
 80194e6:	60bb      	str	r3, [r7, #8]
}
 80194e8:	bf00      	nop
 80194ea:	bf00      	nop
 80194ec:	e7fd      	b.n	80194ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80194ee:	693b      	ldr	r3, [r7, #16]
 80194f0:	685a      	ldr	r2, [r3, #4]
 80194f2:	4b14      	ldr	r3, [pc, #80]	@ (8019544 <vPortFree+0xbc>)
 80194f4:	681b      	ldr	r3, [r3, #0]
 80194f6:	4013      	ands	r3, r2
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	d01e      	beq.n	801953a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80194fc:	693b      	ldr	r3, [r7, #16]
 80194fe:	681b      	ldr	r3, [r3, #0]
 8019500:	2b00      	cmp	r3, #0
 8019502:	d11a      	bne.n	801953a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019504:	693b      	ldr	r3, [r7, #16]
 8019506:	685a      	ldr	r2, [r3, #4]
 8019508:	4b0e      	ldr	r3, [pc, #56]	@ (8019544 <vPortFree+0xbc>)
 801950a:	681b      	ldr	r3, [r3, #0]
 801950c:	43db      	mvns	r3, r3
 801950e:	401a      	ands	r2, r3
 8019510:	693b      	ldr	r3, [r7, #16]
 8019512:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019514:	f7fe fb42 	bl	8017b9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8019518:	693b      	ldr	r3, [r7, #16]
 801951a:	685a      	ldr	r2, [r3, #4]
 801951c:	4b0a      	ldr	r3, [pc, #40]	@ (8019548 <vPortFree+0xc0>)
 801951e:	681b      	ldr	r3, [r3, #0]
 8019520:	4413      	add	r3, r2
 8019522:	4a09      	ldr	r2, [pc, #36]	@ (8019548 <vPortFree+0xc0>)
 8019524:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8019526:	6938      	ldr	r0, [r7, #16]
 8019528:	f000 f874 	bl	8019614 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801952c:	4b07      	ldr	r3, [pc, #28]	@ (801954c <vPortFree+0xc4>)
 801952e:	681b      	ldr	r3, [r3, #0]
 8019530:	3301      	adds	r3, #1
 8019532:	4a06      	ldr	r2, [pc, #24]	@ (801954c <vPortFree+0xc4>)
 8019534:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8019536:	f7fe fb3f 	bl	8017bb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801953a:	bf00      	nop
 801953c:	3718      	adds	r7, #24
 801953e:	46bd      	mov	sp, r7
 8019540:	bd80      	pop	{r7, pc}
 8019542:	bf00      	nop
 8019544:	2000737c 	.word	0x2000737c
 8019548:	2000736c 	.word	0x2000736c
 801954c:	20007378 	.word	0x20007378

08019550 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019550:	b480      	push	{r7}
 8019552:	b085      	sub	sp, #20
 8019554:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8019556:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 801955a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801955c:	4b27      	ldr	r3, [pc, #156]	@ (80195fc <prvHeapInit+0xac>)
 801955e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019560:	68fb      	ldr	r3, [r7, #12]
 8019562:	f003 0307 	and.w	r3, r3, #7
 8019566:	2b00      	cmp	r3, #0
 8019568:	d00c      	beq.n	8019584 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801956a:	68fb      	ldr	r3, [r7, #12]
 801956c:	3307      	adds	r3, #7
 801956e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019570:	68fb      	ldr	r3, [r7, #12]
 8019572:	f023 0307 	bic.w	r3, r3, #7
 8019576:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8019578:	68ba      	ldr	r2, [r7, #8]
 801957a:	68fb      	ldr	r3, [r7, #12]
 801957c:	1ad3      	subs	r3, r2, r3
 801957e:	4a1f      	ldr	r2, [pc, #124]	@ (80195fc <prvHeapInit+0xac>)
 8019580:	4413      	add	r3, r2
 8019582:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019584:	68fb      	ldr	r3, [r7, #12]
 8019586:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8019588:	4a1d      	ldr	r2, [pc, #116]	@ (8019600 <prvHeapInit+0xb0>)
 801958a:	687b      	ldr	r3, [r7, #4]
 801958c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801958e:	4b1c      	ldr	r3, [pc, #112]	@ (8019600 <prvHeapInit+0xb0>)
 8019590:	2200      	movs	r2, #0
 8019592:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019594:	687b      	ldr	r3, [r7, #4]
 8019596:	68ba      	ldr	r2, [r7, #8]
 8019598:	4413      	add	r3, r2
 801959a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801959c:	2208      	movs	r2, #8
 801959e:	68fb      	ldr	r3, [r7, #12]
 80195a0:	1a9b      	subs	r3, r3, r2
 80195a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80195a4:	68fb      	ldr	r3, [r7, #12]
 80195a6:	f023 0307 	bic.w	r3, r3, #7
 80195aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80195ac:	68fb      	ldr	r3, [r7, #12]
 80195ae:	4a15      	ldr	r2, [pc, #84]	@ (8019604 <prvHeapInit+0xb4>)
 80195b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80195b2:	4b14      	ldr	r3, [pc, #80]	@ (8019604 <prvHeapInit+0xb4>)
 80195b4:	681b      	ldr	r3, [r3, #0]
 80195b6:	2200      	movs	r2, #0
 80195b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80195ba:	4b12      	ldr	r3, [pc, #72]	@ (8019604 <prvHeapInit+0xb4>)
 80195bc:	681b      	ldr	r3, [r3, #0]
 80195be:	2200      	movs	r2, #0
 80195c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80195c2:	687b      	ldr	r3, [r7, #4]
 80195c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80195c6:	683b      	ldr	r3, [r7, #0]
 80195c8:	68fa      	ldr	r2, [r7, #12]
 80195ca:	1ad2      	subs	r2, r2, r3
 80195cc:	683b      	ldr	r3, [r7, #0]
 80195ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80195d0:	4b0c      	ldr	r3, [pc, #48]	@ (8019604 <prvHeapInit+0xb4>)
 80195d2:	681a      	ldr	r2, [r3, #0]
 80195d4:	683b      	ldr	r3, [r7, #0]
 80195d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80195d8:	683b      	ldr	r3, [r7, #0]
 80195da:	685b      	ldr	r3, [r3, #4]
 80195dc:	4a0a      	ldr	r2, [pc, #40]	@ (8019608 <prvHeapInit+0xb8>)
 80195de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80195e0:	683b      	ldr	r3, [r7, #0]
 80195e2:	685b      	ldr	r3, [r3, #4]
 80195e4:	4a09      	ldr	r2, [pc, #36]	@ (801960c <prvHeapInit+0xbc>)
 80195e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80195e8:	4b09      	ldr	r3, [pc, #36]	@ (8019610 <prvHeapInit+0xc0>)
 80195ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80195ee:	601a      	str	r2, [r3, #0]
}
 80195f0:	bf00      	nop
 80195f2:	3714      	adds	r7, #20
 80195f4:	46bd      	mov	sp, r7
 80195f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195fa:	4770      	bx	lr
 80195fc:	20004480 	.word	0x20004480
 8019600:	20007360 	.word	0x20007360
 8019604:	20007368 	.word	0x20007368
 8019608:	20007370 	.word	0x20007370
 801960c:	2000736c 	.word	0x2000736c
 8019610:	2000737c 	.word	0x2000737c

08019614 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019614:	b480      	push	{r7}
 8019616:	b085      	sub	sp, #20
 8019618:	af00      	add	r7, sp, #0
 801961a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801961c:	4b28      	ldr	r3, [pc, #160]	@ (80196c0 <prvInsertBlockIntoFreeList+0xac>)
 801961e:	60fb      	str	r3, [r7, #12]
 8019620:	e002      	b.n	8019628 <prvInsertBlockIntoFreeList+0x14>
 8019622:	68fb      	ldr	r3, [r7, #12]
 8019624:	681b      	ldr	r3, [r3, #0]
 8019626:	60fb      	str	r3, [r7, #12]
 8019628:	68fb      	ldr	r3, [r7, #12]
 801962a:	681b      	ldr	r3, [r3, #0]
 801962c:	687a      	ldr	r2, [r7, #4]
 801962e:	429a      	cmp	r2, r3
 8019630:	d8f7      	bhi.n	8019622 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019632:	68fb      	ldr	r3, [r7, #12]
 8019634:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8019636:	68fb      	ldr	r3, [r7, #12]
 8019638:	685b      	ldr	r3, [r3, #4]
 801963a:	68ba      	ldr	r2, [r7, #8]
 801963c:	4413      	add	r3, r2
 801963e:	687a      	ldr	r2, [r7, #4]
 8019640:	429a      	cmp	r2, r3
 8019642:	d108      	bne.n	8019656 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019644:	68fb      	ldr	r3, [r7, #12]
 8019646:	685a      	ldr	r2, [r3, #4]
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	685b      	ldr	r3, [r3, #4]
 801964c:	441a      	add	r2, r3
 801964e:	68fb      	ldr	r3, [r7, #12]
 8019650:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019652:	68fb      	ldr	r3, [r7, #12]
 8019654:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801965a:	687b      	ldr	r3, [r7, #4]
 801965c:	685b      	ldr	r3, [r3, #4]
 801965e:	68ba      	ldr	r2, [r7, #8]
 8019660:	441a      	add	r2, r3
 8019662:	68fb      	ldr	r3, [r7, #12]
 8019664:	681b      	ldr	r3, [r3, #0]
 8019666:	429a      	cmp	r2, r3
 8019668:	d118      	bne.n	801969c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801966a:	68fb      	ldr	r3, [r7, #12]
 801966c:	681a      	ldr	r2, [r3, #0]
 801966e:	4b15      	ldr	r3, [pc, #84]	@ (80196c4 <prvInsertBlockIntoFreeList+0xb0>)
 8019670:	681b      	ldr	r3, [r3, #0]
 8019672:	429a      	cmp	r2, r3
 8019674:	d00d      	beq.n	8019692 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019676:	687b      	ldr	r3, [r7, #4]
 8019678:	685a      	ldr	r2, [r3, #4]
 801967a:	68fb      	ldr	r3, [r7, #12]
 801967c:	681b      	ldr	r3, [r3, #0]
 801967e:	685b      	ldr	r3, [r3, #4]
 8019680:	441a      	add	r2, r3
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019686:	68fb      	ldr	r3, [r7, #12]
 8019688:	681b      	ldr	r3, [r3, #0]
 801968a:	681a      	ldr	r2, [r3, #0]
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	601a      	str	r2, [r3, #0]
 8019690:	e008      	b.n	80196a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8019692:	4b0c      	ldr	r3, [pc, #48]	@ (80196c4 <prvInsertBlockIntoFreeList+0xb0>)
 8019694:	681a      	ldr	r2, [r3, #0]
 8019696:	687b      	ldr	r3, [r7, #4]
 8019698:	601a      	str	r2, [r3, #0]
 801969a:	e003      	b.n	80196a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801969c:	68fb      	ldr	r3, [r7, #12]
 801969e:	681a      	ldr	r2, [r3, #0]
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80196a4:	68fa      	ldr	r2, [r7, #12]
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	429a      	cmp	r2, r3
 80196aa:	d002      	beq.n	80196b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80196ac:	68fb      	ldr	r3, [r7, #12]
 80196ae:	687a      	ldr	r2, [r7, #4]
 80196b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80196b2:	bf00      	nop
 80196b4:	3714      	adds	r7, #20
 80196b6:	46bd      	mov	sp, r7
 80196b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196bc:	4770      	bx	lr
 80196be:	bf00      	nop
 80196c0:	20007360 	.word	0x20007360
 80196c4:	20007368 	.word	0x20007368

080196c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80196c8:	b580      	push	{r7, lr}
 80196ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80196cc:	2200      	movs	r2, #0
 80196ce:	4912      	ldr	r1, [pc, #72]	@ (8019718 <MX_USB_DEVICE_Init+0x50>)
 80196d0:	4812      	ldr	r0, [pc, #72]	@ (801971c <MX_USB_DEVICE_Init+0x54>)
 80196d2:	f7f7 fbab 	bl	8010e2c <USBD_Init>
 80196d6:	4603      	mov	r3, r0
 80196d8:	2b00      	cmp	r3, #0
 80196da:	d001      	beq.n	80196e0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80196dc:	f7ec fa34 	bl	8005b48 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80196e0:	490f      	ldr	r1, [pc, #60]	@ (8019720 <MX_USB_DEVICE_Init+0x58>)
 80196e2:	480e      	ldr	r0, [pc, #56]	@ (801971c <MX_USB_DEVICE_Init+0x54>)
 80196e4:	f7f7 fbd2 	bl	8010e8c <USBD_RegisterClass>
 80196e8:	4603      	mov	r3, r0
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	d001      	beq.n	80196f2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80196ee:	f7ec fa2b 	bl	8005b48 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80196f2:	490c      	ldr	r1, [pc, #48]	@ (8019724 <MX_USB_DEVICE_Init+0x5c>)
 80196f4:	4809      	ldr	r0, [pc, #36]	@ (801971c <MX_USB_DEVICE_Init+0x54>)
 80196f6:	f7f7 fb09 	bl	8010d0c <USBD_CDC_RegisterInterface>
 80196fa:	4603      	mov	r3, r0
 80196fc:	2b00      	cmp	r3, #0
 80196fe:	d001      	beq.n	8019704 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8019700:	f7ec fa22 	bl	8005b48 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8019704:	4805      	ldr	r0, [pc, #20]	@ (801971c <MX_USB_DEVICE_Init+0x54>)
 8019706:	f7f7 fbf7 	bl	8010ef8 <USBD_Start>
 801970a:	4603      	mov	r3, r0
 801970c:	2b00      	cmp	r3, #0
 801970e:	d001      	beq.n	8019714 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8019710:	f7ec fa1a 	bl	8005b48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8019714:	bf00      	nop
 8019716:	bd80      	pop	{r7, pc}
 8019718:	200000b0 	.word	0x200000b0
 801971c:	20007380 	.word	0x20007380
 8019720:	20000018 	.word	0x20000018
 8019724:	2000009c 	.word	0x2000009c

08019728 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8019728:	b580      	push	{r7, lr}
 801972a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801972c:	2200      	movs	r2, #0
 801972e:	4905      	ldr	r1, [pc, #20]	@ (8019744 <CDC_Init_FS+0x1c>)
 8019730:	4805      	ldr	r0, [pc, #20]	@ (8019748 <CDC_Init_FS+0x20>)
 8019732:	f7f7 fb05 	bl	8010d40 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8019736:	4905      	ldr	r1, [pc, #20]	@ (801974c <CDC_Init_FS+0x24>)
 8019738:	4803      	ldr	r0, [pc, #12]	@ (8019748 <CDC_Init_FS+0x20>)
 801973a:	f7f7 fb23 	bl	8010d84 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801973e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8019740:	4618      	mov	r0, r3
 8019742:	bd80      	pop	{r7, pc}
 8019744:	20007e5c 	.word	0x20007e5c
 8019748:	20007380 	.word	0x20007380
 801974c:	2000765c 	.word	0x2000765c

08019750 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8019750:	b480      	push	{r7}
 8019752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8019754:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8019756:	4618      	mov	r0, r3
 8019758:	46bd      	mov	sp, r7
 801975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801975e:	4770      	bx	lr

08019760 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8019760:	b480      	push	{r7}
 8019762:	b083      	sub	sp, #12
 8019764:	af00      	add	r7, sp, #0
 8019766:	4603      	mov	r3, r0
 8019768:	6039      	str	r1, [r7, #0]
 801976a:	71fb      	strb	r3, [r7, #7]
 801976c:	4613      	mov	r3, r2
 801976e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8019770:	79fb      	ldrb	r3, [r7, #7]
 8019772:	2b23      	cmp	r3, #35	@ 0x23
 8019774:	d84a      	bhi.n	801980c <CDC_Control_FS+0xac>
 8019776:	a201      	add	r2, pc, #4	@ (adr r2, 801977c <CDC_Control_FS+0x1c>)
 8019778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801977c:	0801980d 	.word	0x0801980d
 8019780:	0801980d 	.word	0x0801980d
 8019784:	0801980d 	.word	0x0801980d
 8019788:	0801980d 	.word	0x0801980d
 801978c:	0801980d 	.word	0x0801980d
 8019790:	0801980d 	.word	0x0801980d
 8019794:	0801980d 	.word	0x0801980d
 8019798:	0801980d 	.word	0x0801980d
 801979c:	0801980d 	.word	0x0801980d
 80197a0:	0801980d 	.word	0x0801980d
 80197a4:	0801980d 	.word	0x0801980d
 80197a8:	0801980d 	.word	0x0801980d
 80197ac:	0801980d 	.word	0x0801980d
 80197b0:	0801980d 	.word	0x0801980d
 80197b4:	0801980d 	.word	0x0801980d
 80197b8:	0801980d 	.word	0x0801980d
 80197bc:	0801980d 	.word	0x0801980d
 80197c0:	0801980d 	.word	0x0801980d
 80197c4:	0801980d 	.word	0x0801980d
 80197c8:	0801980d 	.word	0x0801980d
 80197cc:	0801980d 	.word	0x0801980d
 80197d0:	0801980d 	.word	0x0801980d
 80197d4:	0801980d 	.word	0x0801980d
 80197d8:	0801980d 	.word	0x0801980d
 80197dc:	0801980d 	.word	0x0801980d
 80197e0:	0801980d 	.word	0x0801980d
 80197e4:	0801980d 	.word	0x0801980d
 80197e8:	0801980d 	.word	0x0801980d
 80197ec:	0801980d 	.word	0x0801980d
 80197f0:	0801980d 	.word	0x0801980d
 80197f4:	0801980d 	.word	0x0801980d
 80197f8:	0801980d 	.word	0x0801980d
 80197fc:	0801980d 	.word	0x0801980d
 8019800:	0801980d 	.word	0x0801980d
 8019804:	0801980d 	.word	0x0801980d
 8019808:	0801980d 	.word	0x0801980d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801980c:	bf00      	nop
  }

  return (USBD_OK);
 801980e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8019810:	4618      	mov	r0, r3
 8019812:	370c      	adds	r7, #12
 8019814:	46bd      	mov	sp, r7
 8019816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801981a:	4770      	bx	lr

0801981c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801981c:	b580      	push	{r7, lr}
 801981e:	b082      	sub	sp, #8
 8019820:	af00      	add	r7, sp, #0
 8019822:	6078      	str	r0, [r7, #4]
 8019824:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8019826:	6879      	ldr	r1, [r7, #4]
 8019828:	4805      	ldr	r0, [pc, #20]	@ (8019840 <CDC_Receive_FS+0x24>)
 801982a:	f7f7 faab 	bl	8010d84 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801982e:	4804      	ldr	r0, [pc, #16]	@ (8019840 <CDC_Receive_FS+0x24>)
 8019830:	f7f7 fac6 	bl	8010dc0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8019834:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8019836:	4618      	mov	r0, r3
 8019838:	3708      	adds	r7, #8
 801983a:	46bd      	mov	sp, r7
 801983c:	bd80      	pop	{r7, pc}
 801983e:	bf00      	nop
 8019840:	20007380 	.word	0x20007380

08019844 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8019844:	b480      	push	{r7}
 8019846:	b087      	sub	sp, #28
 8019848:	af00      	add	r7, sp, #0
 801984a:	60f8      	str	r0, [r7, #12]
 801984c:	60b9      	str	r1, [r7, #8]
 801984e:	4613      	mov	r3, r2
 8019850:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8019852:	2300      	movs	r3, #0
 8019854:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8019856:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801985a:	4618      	mov	r0, r3
 801985c:	371c      	adds	r7, #28
 801985e:	46bd      	mov	sp, r7
 8019860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019864:	4770      	bx	lr
	...

08019868 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019868:	b480      	push	{r7}
 801986a:	b083      	sub	sp, #12
 801986c:	af00      	add	r7, sp, #0
 801986e:	4603      	mov	r3, r0
 8019870:	6039      	str	r1, [r7, #0]
 8019872:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8019874:	683b      	ldr	r3, [r7, #0]
 8019876:	2212      	movs	r2, #18
 8019878:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801987a:	4b03      	ldr	r3, [pc, #12]	@ (8019888 <USBD_FS_DeviceDescriptor+0x20>)
}
 801987c:	4618      	mov	r0, r3
 801987e:	370c      	adds	r7, #12
 8019880:	46bd      	mov	sp, r7
 8019882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019886:	4770      	bx	lr
 8019888:	200000d0 	.word	0x200000d0

0801988c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801988c:	b480      	push	{r7}
 801988e:	b083      	sub	sp, #12
 8019890:	af00      	add	r7, sp, #0
 8019892:	4603      	mov	r3, r0
 8019894:	6039      	str	r1, [r7, #0]
 8019896:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8019898:	683b      	ldr	r3, [r7, #0]
 801989a:	2204      	movs	r2, #4
 801989c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801989e:	4b03      	ldr	r3, [pc, #12]	@ (80198ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80198a0:	4618      	mov	r0, r3
 80198a2:	370c      	adds	r7, #12
 80198a4:	46bd      	mov	sp, r7
 80198a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198aa:	4770      	bx	lr
 80198ac:	200000f0 	.word	0x200000f0

080198b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80198b0:	b580      	push	{r7, lr}
 80198b2:	b082      	sub	sp, #8
 80198b4:	af00      	add	r7, sp, #0
 80198b6:	4603      	mov	r3, r0
 80198b8:	6039      	str	r1, [r7, #0]
 80198ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80198bc:	79fb      	ldrb	r3, [r7, #7]
 80198be:	2b00      	cmp	r3, #0
 80198c0:	d105      	bne.n	80198ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80198c2:	683a      	ldr	r2, [r7, #0]
 80198c4:	4907      	ldr	r1, [pc, #28]	@ (80198e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80198c6:	4808      	ldr	r0, [pc, #32]	@ (80198e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80198c8:	f7f8 fcf0 	bl	80122ac <USBD_GetString>
 80198cc:	e004      	b.n	80198d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80198ce:	683a      	ldr	r2, [r7, #0]
 80198d0:	4904      	ldr	r1, [pc, #16]	@ (80198e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80198d2:	4805      	ldr	r0, [pc, #20]	@ (80198e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80198d4:	f7f8 fcea 	bl	80122ac <USBD_GetString>
  }
  return USBD_StrDesc;
 80198d8:	4b02      	ldr	r3, [pc, #8]	@ (80198e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80198da:	4618      	mov	r0, r3
 80198dc:	3708      	adds	r7, #8
 80198de:	46bd      	mov	sp, r7
 80198e0:	bd80      	pop	{r7, pc}
 80198e2:	bf00      	nop
 80198e4:	2000865c 	.word	0x2000865c
 80198e8:	0801ed64 	.word	0x0801ed64

080198ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80198ec:	b580      	push	{r7, lr}
 80198ee:	b082      	sub	sp, #8
 80198f0:	af00      	add	r7, sp, #0
 80198f2:	4603      	mov	r3, r0
 80198f4:	6039      	str	r1, [r7, #0]
 80198f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80198f8:	683a      	ldr	r2, [r7, #0]
 80198fa:	4904      	ldr	r1, [pc, #16]	@ (801990c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80198fc:	4804      	ldr	r0, [pc, #16]	@ (8019910 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80198fe:	f7f8 fcd5 	bl	80122ac <USBD_GetString>
  return USBD_StrDesc;
 8019902:	4b02      	ldr	r3, [pc, #8]	@ (801990c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8019904:	4618      	mov	r0, r3
 8019906:	3708      	adds	r7, #8
 8019908:	46bd      	mov	sp, r7
 801990a:	bd80      	pop	{r7, pc}
 801990c:	2000865c 	.word	0x2000865c
 8019910:	0801ed7c 	.word	0x0801ed7c

08019914 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019914:	b580      	push	{r7, lr}
 8019916:	b082      	sub	sp, #8
 8019918:	af00      	add	r7, sp, #0
 801991a:	4603      	mov	r3, r0
 801991c:	6039      	str	r1, [r7, #0]
 801991e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8019920:	683b      	ldr	r3, [r7, #0]
 8019922:	221a      	movs	r2, #26
 8019924:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8019926:	f000 f855 	bl	80199d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801992a:	4b02      	ldr	r3, [pc, #8]	@ (8019934 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801992c:	4618      	mov	r0, r3
 801992e:	3708      	adds	r7, #8
 8019930:	46bd      	mov	sp, r7
 8019932:	bd80      	pop	{r7, pc}
 8019934:	200000f4 	.word	0x200000f4

08019938 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019938:	b580      	push	{r7, lr}
 801993a:	b082      	sub	sp, #8
 801993c:	af00      	add	r7, sp, #0
 801993e:	4603      	mov	r3, r0
 8019940:	6039      	str	r1, [r7, #0]
 8019942:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8019944:	79fb      	ldrb	r3, [r7, #7]
 8019946:	2b00      	cmp	r3, #0
 8019948:	d105      	bne.n	8019956 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801994a:	683a      	ldr	r2, [r7, #0]
 801994c:	4907      	ldr	r1, [pc, #28]	@ (801996c <USBD_FS_ConfigStrDescriptor+0x34>)
 801994e:	4808      	ldr	r0, [pc, #32]	@ (8019970 <USBD_FS_ConfigStrDescriptor+0x38>)
 8019950:	f7f8 fcac 	bl	80122ac <USBD_GetString>
 8019954:	e004      	b.n	8019960 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8019956:	683a      	ldr	r2, [r7, #0]
 8019958:	4904      	ldr	r1, [pc, #16]	@ (801996c <USBD_FS_ConfigStrDescriptor+0x34>)
 801995a:	4805      	ldr	r0, [pc, #20]	@ (8019970 <USBD_FS_ConfigStrDescriptor+0x38>)
 801995c:	f7f8 fca6 	bl	80122ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8019960:	4b02      	ldr	r3, [pc, #8]	@ (801996c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8019962:	4618      	mov	r0, r3
 8019964:	3708      	adds	r7, #8
 8019966:	46bd      	mov	sp, r7
 8019968:	bd80      	pop	{r7, pc}
 801996a:	bf00      	nop
 801996c:	2000865c 	.word	0x2000865c
 8019970:	0801ed90 	.word	0x0801ed90

08019974 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019974:	b580      	push	{r7, lr}
 8019976:	b082      	sub	sp, #8
 8019978:	af00      	add	r7, sp, #0
 801997a:	4603      	mov	r3, r0
 801997c:	6039      	str	r1, [r7, #0]
 801997e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019980:	79fb      	ldrb	r3, [r7, #7]
 8019982:	2b00      	cmp	r3, #0
 8019984:	d105      	bne.n	8019992 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8019986:	683a      	ldr	r2, [r7, #0]
 8019988:	4907      	ldr	r1, [pc, #28]	@ (80199a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801998a:	4808      	ldr	r0, [pc, #32]	@ (80199ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 801998c:	f7f8 fc8e 	bl	80122ac <USBD_GetString>
 8019990:	e004      	b.n	801999c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8019992:	683a      	ldr	r2, [r7, #0]
 8019994:	4904      	ldr	r1, [pc, #16]	@ (80199a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8019996:	4805      	ldr	r0, [pc, #20]	@ (80199ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8019998:	f7f8 fc88 	bl	80122ac <USBD_GetString>
  }
  return USBD_StrDesc;
 801999c:	4b02      	ldr	r3, [pc, #8]	@ (80199a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801999e:	4618      	mov	r0, r3
 80199a0:	3708      	adds	r7, #8
 80199a2:	46bd      	mov	sp, r7
 80199a4:	bd80      	pop	{r7, pc}
 80199a6:	bf00      	nop
 80199a8:	2000865c 	.word	0x2000865c
 80199ac:	0801ed9c 	.word	0x0801ed9c

080199b0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80199b0:	b480      	push	{r7}
 80199b2:	b083      	sub	sp, #12
 80199b4:	af00      	add	r7, sp, #0
 80199b6:	4603      	mov	r3, r0
 80199b8:	6039      	str	r1, [r7, #0]
 80199ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80199bc:	683b      	ldr	r3, [r7, #0]
 80199be:	220c      	movs	r2, #12
 80199c0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80199c2:	4b03      	ldr	r3, [pc, #12]	@ (80199d0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80199c4:	4618      	mov	r0, r3
 80199c6:	370c      	adds	r7, #12
 80199c8:	46bd      	mov	sp, r7
 80199ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199ce:	4770      	bx	lr
 80199d0:	200000e4 	.word	0x200000e4

080199d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80199d4:	b580      	push	{r7, lr}
 80199d6:	b084      	sub	sp, #16
 80199d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80199da:	4b0f      	ldr	r3, [pc, #60]	@ (8019a18 <Get_SerialNum+0x44>)
 80199dc:	681b      	ldr	r3, [r3, #0]
 80199de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80199e0:	4b0e      	ldr	r3, [pc, #56]	@ (8019a1c <Get_SerialNum+0x48>)
 80199e2:	681b      	ldr	r3, [r3, #0]
 80199e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80199e6:	4b0e      	ldr	r3, [pc, #56]	@ (8019a20 <Get_SerialNum+0x4c>)
 80199e8:	681b      	ldr	r3, [r3, #0]
 80199ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80199ec:	68fa      	ldr	r2, [r7, #12]
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	4413      	add	r3, r2
 80199f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80199f4:	68fb      	ldr	r3, [r7, #12]
 80199f6:	2b00      	cmp	r3, #0
 80199f8:	d009      	beq.n	8019a0e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80199fa:	2208      	movs	r2, #8
 80199fc:	4909      	ldr	r1, [pc, #36]	@ (8019a24 <Get_SerialNum+0x50>)
 80199fe:	68f8      	ldr	r0, [r7, #12]
 8019a00:	f000 f814 	bl	8019a2c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8019a04:	2204      	movs	r2, #4
 8019a06:	4908      	ldr	r1, [pc, #32]	@ (8019a28 <Get_SerialNum+0x54>)
 8019a08:	68b8      	ldr	r0, [r7, #8]
 8019a0a:	f000 f80f 	bl	8019a2c <IntToUnicode>
  }
}
 8019a0e:	bf00      	nop
 8019a10:	3710      	adds	r7, #16
 8019a12:	46bd      	mov	sp, r7
 8019a14:	bd80      	pop	{r7, pc}
 8019a16:	bf00      	nop
 8019a18:	1fff7590 	.word	0x1fff7590
 8019a1c:	1fff7594 	.word	0x1fff7594
 8019a20:	1fff7598 	.word	0x1fff7598
 8019a24:	200000f6 	.word	0x200000f6
 8019a28:	20000106 	.word	0x20000106

08019a2c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8019a2c:	b480      	push	{r7}
 8019a2e:	b087      	sub	sp, #28
 8019a30:	af00      	add	r7, sp, #0
 8019a32:	60f8      	str	r0, [r7, #12]
 8019a34:	60b9      	str	r1, [r7, #8]
 8019a36:	4613      	mov	r3, r2
 8019a38:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8019a3a:	2300      	movs	r3, #0
 8019a3c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8019a3e:	2300      	movs	r3, #0
 8019a40:	75fb      	strb	r3, [r7, #23]
 8019a42:	e027      	b.n	8019a94 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8019a44:	68fb      	ldr	r3, [r7, #12]
 8019a46:	0f1b      	lsrs	r3, r3, #28
 8019a48:	2b09      	cmp	r3, #9
 8019a4a:	d80b      	bhi.n	8019a64 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8019a4c:	68fb      	ldr	r3, [r7, #12]
 8019a4e:	0f1b      	lsrs	r3, r3, #28
 8019a50:	b2da      	uxtb	r2, r3
 8019a52:	7dfb      	ldrb	r3, [r7, #23]
 8019a54:	005b      	lsls	r3, r3, #1
 8019a56:	4619      	mov	r1, r3
 8019a58:	68bb      	ldr	r3, [r7, #8]
 8019a5a:	440b      	add	r3, r1
 8019a5c:	3230      	adds	r2, #48	@ 0x30
 8019a5e:	b2d2      	uxtb	r2, r2
 8019a60:	701a      	strb	r2, [r3, #0]
 8019a62:	e00a      	b.n	8019a7a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8019a64:	68fb      	ldr	r3, [r7, #12]
 8019a66:	0f1b      	lsrs	r3, r3, #28
 8019a68:	b2da      	uxtb	r2, r3
 8019a6a:	7dfb      	ldrb	r3, [r7, #23]
 8019a6c:	005b      	lsls	r3, r3, #1
 8019a6e:	4619      	mov	r1, r3
 8019a70:	68bb      	ldr	r3, [r7, #8]
 8019a72:	440b      	add	r3, r1
 8019a74:	3237      	adds	r2, #55	@ 0x37
 8019a76:	b2d2      	uxtb	r2, r2
 8019a78:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8019a7a:	68fb      	ldr	r3, [r7, #12]
 8019a7c:	011b      	lsls	r3, r3, #4
 8019a7e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8019a80:	7dfb      	ldrb	r3, [r7, #23]
 8019a82:	005b      	lsls	r3, r3, #1
 8019a84:	3301      	adds	r3, #1
 8019a86:	68ba      	ldr	r2, [r7, #8]
 8019a88:	4413      	add	r3, r2
 8019a8a:	2200      	movs	r2, #0
 8019a8c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8019a8e:	7dfb      	ldrb	r3, [r7, #23]
 8019a90:	3301      	adds	r3, #1
 8019a92:	75fb      	strb	r3, [r7, #23]
 8019a94:	7dfa      	ldrb	r2, [r7, #23]
 8019a96:	79fb      	ldrb	r3, [r7, #7]
 8019a98:	429a      	cmp	r2, r3
 8019a9a:	d3d3      	bcc.n	8019a44 <IntToUnicode+0x18>
  }
}
 8019a9c:	bf00      	nop
 8019a9e:	bf00      	nop
 8019aa0:	371c      	adds	r7, #28
 8019aa2:	46bd      	mov	sp, r7
 8019aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019aa8:	4770      	bx	lr
	...

08019aac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8019aac:	b580      	push	{r7, lr}
 8019aae:	b08a      	sub	sp, #40	@ 0x28
 8019ab0:	af00      	add	r7, sp, #0
 8019ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019ab4:	f107 0314 	add.w	r3, r7, #20
 8019ab8:	2200      	movs	r2, #0
 8019aba:	601a      	str	r2, [r3, #0]
 8019abc:	605a      	str	r2, [r3, #4]
 8019abe:	609a      	str	r2, [r3, #8]
 8019ac0:	60da      	str	r2, [r3, #12]
 8019ac2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8019ac4:	687b      	ldr	r3, [r7, #4]
 8019ac6:	681b      	ldr	r3, [r3, #0]
 8019ac8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8019acc:	d14e      	bne.n	8019b6c <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019ace:	4b29      	ldr	r3, [pc, #164]	@ (8019b74 <HAL_PCD_MspInit+0xc8>)
 8019ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019ad2:	4a28      	ldr	r2, [pc, #160]	@ (8019b74 <HAL_PCD_MspInit+0xc8>)
 8019ad4:	f043 0301 	orr.w	r3, r3, #1
 8019ad8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8019ada:	4b26      	ldr	r3, [pc, #152]	@ (8019b74 <HAL_PCD_MspInit+0xc8>)
 8019adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019ade:	f003 0301 	and.w	r3, r3, #1
 8019ae2:	613b      	str	r3, [r7, #16]
 8019ae4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8019ae6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8019aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019aec:	2302      	movs	r3, #2
 8019aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019af0:	2300      	movs	r3, #0
 8019af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019af4:	2303      	movs	r3, #3
 8019af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8019af8:	230a      	movs	r3, #10
 8019afa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019afc:	f107 0314 	add.w	r3, r7, #20
 8019b00:	4619      	mov	r1, r3
 8019b02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8019b06:	f7ed f8a5 	bl	8006c54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8019b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8019b74 <HAL_PCD_MspInit+0xc8>)
 8019b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019b0e:	4a19      	ldr	r2, [pc, #100]	@ (8019b74 <HAL_PCD_MspInit+0xc8>)
 8019b10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8019b14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8019b16:	4b17      	ldr	r3, [pc, #92]	@ (8019b74 <HAL_PCD_MspInit+0xc8>)
 8019b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019b1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8019b1e:	60fb      	str	r3, [r7, #12]
 8019b20:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8019b22:	4b14      	ldr	r3, [pc, #80]	@ (8019b74 <HAL_PCD_MspInit+0xc8>)
 8019b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8019b2a:	2b00      	cmp	r3, #0
 8019b2c:	d114      	bne.n	8019b58 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8019b2e:	4b11      	ldr	r3, [pc, #68]	@ (8019b74 <HAL_PCD_MspInit+0xc8>)
 8019b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019b32:	4a10      	ldr	r2, [pc, #64]	@ (8019b74 <HAL_PCD_MspInit+0xc8>)
 8019b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8019b38:	6593      	str	r3, [r2, #88]	@ 0x58
 8019b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8019b74 <HAL_PCD_MspInit+0xc8>)
 8019b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8019b42:	60bb      	str	r3, [r7, #8]
 8019b44:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8019b46:	f7ee fdcd 	bl	80086e4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8019b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8019b74 <HAL_PCD_MspInit+0xc8>)
 8019b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019b4e:	4a09      	ldr	r2, [pc, #36]	@ (8019b74 <HAL_PCD_MspInit+0xc8>)
 8019b50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8019b54:	6593      	str	r3, [r2, #88]	@ 0x58
 8019b56:	e001      	b.n	8019b5c <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8019b58:	f7ee fdc4 	bl	80086e4 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8019b5c:	2200      	movs	r2, #0
 8019b5e:	2105      	movs	r1, #5
 8019b60:	2043      	movs	r0, #67	@ 0x43
 8019b62:	f7ec fe55 	bl	8006810 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8019b66:	2043      	movs	r0, #67	@ 0x43
 8019b68:	f7ec fe6e 	bl	8006848 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8019b6c:	bf00      	nop
 8019b6e:	3728      	adds	r7, #40	@ 0x28
 8019b70:	46bd      	mov	sp, r7
 8019b72:	bd80      	pop	{r7, pc}
 8019b74:	40021000 	.word	0x40021000

08019b78 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019b78:	b580      	push	{r7, lr}
 8019b7a:	b082      	sub	sp, #8
 8019b7c:	af00      	add	r7, sp, #0
 8019b7e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8019b80:	687b      	ldr	r3, [r7, #4]
 8019b82:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8019b86:	687b      	ldr	r3, [r7, #4]
 8019b88:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8019b8c:	4619      	mov	r1, r3
 8019b8e:	4610      	mov	r0, r2
 8019b90:	f7f7 f9ff 	bl	8010f92 <USBD_LL_SetupStage>
}
 8019b94:	bf00      	nop
 8019b96:	3708      	adds	r7, #8
 8019b98:	46bd      	mov	sp, r7
 8019b9a:	bd80      	pop	{r7, pc}

08019b9c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019b9c:	b580      	push	{r7, lr}
 8019b9e:	b082      	sub	sp, #8
 8019ba0:	af00      	add	r7, sp, #0
 8019ba2:	6078      	str	r0, [r7, #4]
 8019ba4:	460b      	mov	r3, r1
 8019ba6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8019ba8:	687b      	ldr	r3, [r7, #4]
 8019baa:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8019bae:	78fa      	ldrb	r2, [r7, #3]
 8019bb0:	6879      	ldr	r1, [r7, #4]
 8019bb2:	4613      	mov	r3, r2
 8019bb4:	00db      	lsls	r3, r3, #3
 8019bb6:	4413      	add	r3, r2
 8019bb8:	009b      	lsls	r3, r3, #2
 8019bba:	440b      	add	r3, r1
 8019bbc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8019bc0:	681a      	ldr	r2, [r3, #0]
 8019bc2:	78fb      	ldrb	r3, [r7, #3]
 8019bc4:	4619      	mov	r1, r3
 8019bc6:	f7f7 fa39 	bl	801103c <USBD_LL_DataOutStage>
}
 8019bca:	bf00      	nop
 8019bcc:	3708      	adds	r7, #8
 8019bce:	46bd      	mov	sp, r7
 8019bd0:	bd80      	pop	{r7, pc}

08019bd2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019bd2:	b580      	push	{r7, lr}
 8019bd4:	b082      	sub	sp, #8
 8019bd6:	af00      	add	r7, sp, #0
 8019bd8:	6078      	str	r0, [r7, #4]
 8019bda:	460b      	mov	r3, r1
 8019bdc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8019bde:	687b      	ldr	r3, [r7, #4]
 8019be0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8019be4:	78fa      	ldrb	r2, [r7, #3]
 8019be6:	6879      	ldr	r1, [r7, #4]
 8019be8:	4613      	mov	r3, r2
 8019bea:	00db      	lsls	r3, r3, #3
 8019bec:	4413      	add	r3, r2
 8019bee:	009b      	lsls	r3, r3, #2
 8019bf0:	440b      	add	r3, r1
 8019bf2:	3320      	adds	r3, #32
 8019bf4:	681a      	ldr	r2, [r3, #0]
 8019bf6:	78fb      	ldrb	r3, [r7, #3]
 8019bf8:	4619      	mov	r1, r3
 8019bfa:	f7f7 fad2 	bl	80111a2 <USBD_LL_DataInStage>
}
 8019bfe:	bf00      	nop
 8019c00:	3708      	adds	r7, #8
 8019c02:	46bd      	mov	sp, r7
 8019c04:	bd80      	pop	{r7, pc}

08019c06 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019c06:	b580      	push	{r7, lr}
 8019c08:	b082      	sub	sp, #8
 8019c0a:	af00      	add	r7, sp, #0
 8019c0c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8019c0e:	687b      	ldr	r3, [r7, #4]
 8019c10:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8019c14:	4618      	mov	r0, r3
 8019c16:	f7f7 fc0c 	bl	8011432 <USBD_LL_SOF>
}
 8019c1a:	bf00      	nop
 8019c1c:	3708      	adds	r7, #8
 8019c1e:	46bd      	mov	sp, r7
 8019c20:	bd80      	pop	{r7, pc}

08019c22 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019c22:	b580      	push	{r7, lr}
 8019c24:	b084      	sub	sp, #16
 8019c26:	af00      	add	r7, sp, #0
 8019c28:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8019c2a:	2301      	movs	r3, #1
 8019c2c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	79db      	ldrb	r3, [r3, #7]
 8019c32:	2b02      	cmp	r3, #2
 8019c34:	d001      	beq.n	8019c3a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8019c36:	f7eb ff87 	bl	8005b48 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8019c3a:	687b      	ldr	r3, [r7, #4]
 8019c3c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8019c40:	7bfa      	ldrb	r2, [r7, #15]
 8019c42:	4611      	mov	r1, r2
 8019c44:	4618      	mov	r0, r3
 8019c46:	f7f7 fbb0 	bl	80113aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8019c4a:	687b      	ldr	r3, [r7, #4]
 8019c4c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8019c50:	4618      	mov	r0, r3
 8019c52:	f7f7 fb58 	bl	8011306 <USBD_LL_Reset>
}
 8019c56:	bf00      	nop
 8019c58:	3710      	adds	r7, #16
 8019c5a:	46bd      	mov	sp, r7
 8019c5c:	bd80      	pop	{r7, pc}
	...

08019c60 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019c60:	b580      	push	{r7, lr}
 8019c62:	b082      	sub	sp, #8
 8019c64:	af00      	add	r7, sp, #0
 8019c66:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8019c68:	687b      	ldr	r3, [r7, #4]
 8019c6a:	681b      	ldr	r3, [r3, #0]
 8019c6c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8019c70:	681b      	ldr	r3, [r3, #0]
 8019c72:	687a      	ldr	r2, [r7, #4]
 8019c74:	6812      	ldr	r2, [r2, #0]
 8019c76:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8019c7a:	f043 0301 	orr.w	r3, r3, #1
 8019c7e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019c80:	687b      	ldr	r3, [r7, #4]
 8019c82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8019c86:	4618      	mov	r0, r3
 8019c88:	f7f7 fb9f 	bl	80113ca <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	7adb      	ldrb	r3, [r3, #11]
 8019c90:	2b00      	cmp	r3, #0
 8019c92:	d005      	beq.n	8019ca0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019c94:	4b04      	ldr	r3, [pc, #16]	@ (8019ca8 <HAL_PCD_SuspendCallback+0x48>)
 8019c96:	691b      	ldr	r3, [r3, #16]
 8019c98:	4a03      	ldr	r2, [pc, #12]	@ (8019ca8 <HAL_PCD_SuspendCallback+0x48>)
 8019c9a:	f043 0306 	orr.w	r3, r3, #6
 8019c9e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8019ca0:	bf00      	nop
 8019ca2:	3708      	adds	r7, #8
 8019ca4:	46bd      	mov	sp, r7
 8019ca6:	bd80      	pop	{r7, pc}
 8019ca8:	e000ed00 	.word	0xe000ed00

08019cac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019cac:	b580      	push	{r7, lr}
 8019cae:	b082      	sub	sp, #8
 8019cb0:	af00      	add	r7, sp, #0
 8019cb2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	681b      	ldr	r3, [r3, #0]
 8019cb8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8019cbc:	681b      	ldr	r3, [r3, #0]
 8019cbe:	687a      	ldr	r2, [r7, #4]
 8019cc0:	6812      	ldr	r2, [r2, #0]
 8019cc2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8019cc6:	f023 0301 	bic.w	r3, r3, #1
 8019cca:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	7adb      	ldrb	r3, [r3, #11]
 8019cd0:	2b00      	cmp	r3, #0
 8019cd2:	d007      	beq.n	8019ce4 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019cd4:	4b08      	ldr	r3, [pc, #32]	@ (8019cf8 <HAL_PCD_ResumeCallback+0x4c>)
 8019cd6:	691b      	ldr	r3, [r3, #16]
 8019cd8:	4a07      	ldr	r2, [pc, #28]	@ (8019cf8 <HAL_PCD_ResumeCallback+0x4c>)
 8019cda:	f023 0306 	bic.w	r3, r3, #6
 8019cde:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8019ce0:	f000 faf6 	bl	801a2d0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8019cea:	4618      	mov	r0, r3
 8019cec:	f7f7 fb89 	bl	8011402 <USBD_LL_Resume>
}
 8019cf0:	bf00      	nop
 8019cf2:	3708      	adds	r7, #8
 8019cf4:	46bd      	mov	sp, r7
 8019cf6:	bd80      	pop	{r7, pc}
 8019cf8:	e000ed00 	.word	0xe000ed00

08019cfc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019cfc:	b580      	push	{r7, lr}
 8019cfe:	b082      	sub	sp, #8
 8019d00:	af00      	add	r7, sp, #0
 8019d02:	6078      	str	r0, [r7, #4]
 8019d04:	460b      	mov	r3, r1
 8019d06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019d08:	687b      	ldr	r3, [r7, #4]
 8019d0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8019d0e:	78fa      	ldrb	r2, [r7, #3]
 8019d10:	4611      	mov	r1, r2
 8019d12:	4618      	mov	r0, r3
 8019d14:	f7f7 fbdf 	bl	80114d6 <USBD_LL_IsoOUTIncomplete>
}
 8019d18:	bf00      	nop
 8019d1a:	3708      	adds	r7, #8
 8019d1c:	46bd      	mov	sp, r7
 8019d1e:	bd80      	pop	{r7, pc}

08019d20 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019d20:	b580      	push	{r7, lr}
 8019d22:	b082      	sub	sp, #8
 8019d24:	af00      	add	r7, sp, #0
 8019d26:	6078      	str	r0, [r7, #4]
 8019d28:	460b      	mov	r3, r1
 8019d2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019d2c:	687b      	ldr	r3, [r7, #4]
 8019d2e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8019d32:	78fa      	ldrb	r2, [r7, #3]
 8019d34:	4611      	mov	r1, r2
 8019d36:	4618      	mov	r0, r3
 8019d38:	f7f7 fb9b 	bl	8011472 <USBD_LL_IsoINIncomplete>
}
 8019d3c:	bf00      	nop
 8019d3e:	3708      	adds	r7, #8
 8019d40:	46bd      	mov	sp, r7
 8019d42:	bd80      	pop	{r7, pc}

08019d44 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019d44:	b580      	push	{r7, lr}
 8019d46:	b082      	sub	sp, #8
 8019d48:	af00      	add	r7, sp, #0
 8019d4a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8019d52:	4618      	mov	r0, r3
 8019d54:	f7f7 fbf1 	bl	801153a <USBD_LL_DevConnected>
}
 8019d58:	bf00      	nop
 8019d5a:	3708      	adds	r7, #8
 8019d5c:	46bd      	mov	sp, r7
 8019d5e:	bd80      	pop	{r7, pc}

08019d60 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019d60:	b580      	push	{r7, lr}
 8019d62:	b082      	sub	sp, #8
 8019d64:	af00      	add	r7, sp, #0
 8019d66:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8019d68:	687b      	ldr	r3, [r7, #4]
 8019d6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8019d6e:	4618      	mov	r0, r3
 8019d70:	f7f7 fbee 	bl	8011550 <USBD_LL_DevDisconnected>
}
 8019d74:	bf00      	nop
 8019d76:	3708      	adds	r7, #8
 8019d78:	46bd      	mov	sp, r7
 8019d7a:	bd80      	pop	{r7, pc}

08019d7c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019d7c:	b580      	push	{r7, lr}
 8019d7e:	b082      	sub	sp, #8
 8019d80:	af00      	add	r7, sp, #0
 8019d82:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8019d84:	687b      	ldr	r3, [r7, #4]
 8019d86:	781b      	ldrb	r3, [r3, #0]
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	d13c      	bne.n	8019e06 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8019d8c:	4a20      	ldr	r2, [pc, #128]	@ (8019e10 <USBD_LL_Init+0x94>)
 8019d8e:	687b      	ldr	r3, [r7, #4]
 8019d90:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	4a1e      	ldr	r2, [pc, #120]	@ (8019e10 <USBD_LL_Init+0x94>)
 8019d98:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8019d9c:	4b1c      	ldr	r3, [pc, #112]	@ (8019e10 <USBD_LL_Init+0x94>)
 8019d9e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8019da2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8019da4:	4b1a      	ldr	r3, [pc, #104]	@ (8019e10 <USBD_LL_Init+0x94>)
 8019da6:	2206      	movs	r2, #6
 8019da8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8019daa:	4b19      	ldr	r3, [pc, #100]	@ (8019e10 <USBD_LL_Init+0x94>)
 8019dac:	2202      	movs	r2, #2
 8019dae:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8019db0:	4b17      	ldr	r3, [pc, #92]	@ (8019e10 <USBD_LL_Init+0x94>)
 8019db2:	2202      	movs	r2, #2
 8019db4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8019db6:	4b16      	ldr	r3, [pc, #88]	@ (8019e10 <USBD_LL_Init+0x94>)
 8019db8:	2200      	movs	r2, #0
 8019dba:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8019dbc:	4b14      	ldr	r3, [pc, #80]	@ (8019e10 <USBD_LL_Init+0x94>)
 8019dbe:	2200      	movs	r2, #0
 8019dc0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8019dc2:	4b13      	ldr	r3, [pc, #76]	@ (8019e10 <USBD_LL_Init+0x94>)
 8019dc4:	2200      	movs	r2, #0
 8019dc6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8019dc8:	4b11      	ldr	r3, [pc, #68]	@ (8019e10 <USBD_LL_Init+0x94>)
 8019dca:	2200      	movs	r2, #0
 8019dcc:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8019dce:	4b10      	ldr	r3, [pc, #64]	@ (8019e10 <USBD_LL_Init+0x94>)
 8019dd0:	2200      	movs	r2, #0
 8019dd2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8019dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8019e10 <USBD_LL_Init+0x94>)
 8019dd6:	2200      	movs	r2, #0
 8019dd8:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8019dda:	480d      	ldr	r0, [pc, #52]	@ (8019e10 <USBD_LL_Init+0x94>)
 8019ddc:	f7ed fa78 	bl	80072d0 <HAL_PCD_Init>
 8019de0:	4603      	mov	r3, r0
 8019de2:	2b00      	cmp	r3, #0
 8019de4:	d001      	beq.n	8019dea <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8019de6:	f7eb feaf 	bl	8005b48 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8019dea:	2180      	movs	r1, #128	@ 0x80
 8019dec:	4808      	ldr	r0, [pc, #32]	@ (8019e10 <USBD_LL_Init+0x94>)
 8019dee:	f7ee fbd0 	bl	8008592 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8019df2:	2240      	movs	r2, #64	@ 0x40
 8019df4:	2100      	movs	r1, #0
 8019df6:	4806      	ldr	r0, [pc, #24]	@ (8019e10 <USBD_LL_Init+0x94>)
 8019df8:	f7ee fb84 	bl	8008504 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8019dfc:	2280      	movs	r2, #128	@ 0x80
 8019dfe:	2101      	movs	r1, #1
 8019e00:	4803      	ldr	r0, [pc, #12]	@ (8019e10 <USBD_LL_Init+0x94>)
 8019e02:	f7ee fb7f 	bl	8008504 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8019e06:	2300      	movs	r3, #0
}
 8019e08:	4618      	mov	r0, r3
 8019e0a:	3708      	adds	r7, #8
 8019e0c:	46bd      	mov	sp, r7
 8019e0e:	bd80      	pop	{r7, pc}
 8019e10:	2000885c 	.word	0x2000885c

08019e14 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8019e14:	b580      	push	{r7, lr}
 8019e16:	b084      	sub	sp, #16
 8019e18:	af00      	add	r7, sp, #0
 8019e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019e1c:	2300      	movs	r3, #0
 8019e1e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019e20:	2300      	movs	r3, #0
 8019e22:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8019e24:	687b      	ldr	r3, [r7, #4]
 8019e26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8019e2a:	4618      	mov	r0, r3
 8019e2c:	f7ed fb5f 	bl	80074ee <HAL_PCD_Start>
 8019e30:	4603      	mov	r3, r0
 8019e32:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019e34:	7bbb      	ldrb	r3, [r7, #14]
 8019e36:	2b03      	cmp	r3, #3
 8019e38:	d816      	bhi.n	8019e68 <USBD_LL_Start+0x54>
 8019e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8019e40 <USBD_LL_Start+0x2c>)
 8019e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019e40:	08019e51 	.word	0x08019e51
 8019e44:	08019e57 	.word	0x08019e57
 8019e48:	08019e5d 	.word	0x08019e5d
 8019e4c:	08019e63 	.word	0x08019e63
    case HAL_OK :
      usb_status = USBD_OK;
 8019e50:	2300      	movs	r3, #0
 8019e52:	73fb      	strb	r3, [r7, #15]
    break;
 8019e54:	e00b      	b.n	8019e6e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019e56:	2303      	movs	r3, #3
 8019e58:	73fb      	strb	r3, [r7, #15]
    break;
 8019e5a:	e008      	b.n	8019e6e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019e5c:	2301      	movs	r3, #1
 8019e5e:	73fb      	strb	r3, [r7, #15]
    break;
 8019e60:	e005      	b.n	8019e6e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019e62:	2303      	movs	r3, #3
 8019e64:	73fb      	strb	r3, [r7, #15]
    break;
 8019e66:	e002      	b.n	8019e6e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8019e68:	2303      	movs	r3, #3
 8019e6a:	73fb      	strb	r3, [r7, #15]
    break;
 8019e6c:	bf00      	nop
  }
  return usb_status;
 8019e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019e70:	4618      	mov	r0, r3
 8019e72:	3710      	adds	r7, #16
 8019e74:	46bd      	mov	sp, r7
 8019e76:	bd80      	pop	{r7, pc}

08019e78 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019e78:	b580      	push	{r7, lr}
 8019e7a:	b084      	sub	sp, #16
 8019e7c:	af00      	add	r7, sp, #0
 8019e7e:	6078      	str	r0, [r7, #4]
 8019e80:	4608      	mov	r0, r1
 8019e82:	4611      	mov	r1, r2
 8019e84:	461a      	mov	r2, r3
 8019e86:	4603      	mov	r3, r0
 8019e88:	70fb      	strb	r3, [r7, #3]
 8019e8a:	460b      	mov	r3, r1
 8019e8c:	70bb      	strb	r3, [r7, #2]
 8019e8e:	4613      	mov	r3, r2
 8019e90:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019e92:	2300      	movs	r3, #0
 8019e94:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019e96:	2300      	movs	r3, #0
 8019e98:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8019ea0:	78bb      	ldrb	r3, [r7, #2]
 8019ea2:	883a      	ldrh	r2, [r7, #0]
 8019ea4:	78f9      	ldrb	r1, [r7, #3]
 8019ea6:	f7ee f80b 	bl	8007ec0 <HAL_PCD_EP_Open>
 8019eaa:	4603      	mov	r3, r0
 8019eac:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019eae:	7bbb      	ldrb	r3, [r7, #14]
 8019eb0:	2b03      	cmp	r3, #3
 8019eb2:	d817      	bhi.n	8019ee4 <USBD_LL_OpenEP+0x6c>
 8019eb4:	a201      	add	r2, pc, #4	@ (adr r2, 8019ebc <USBD_LL_OpenEP+0x44>)
 8019eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019eba:	bf00      	nop
 8019ebc:	08019ecd 	.word	0x08019ecd
 8019ec0:	08019ed3 	.word	0x08019ed3
 8019ec4:	08019ed9 	.word	0x08019ed9
 8019ec8:	08019edf 	.word	0x08019edf
    case HAL_OK :
      usb_status = USBD_OK;
 8019ecc:	2300      	movs	r3, #0
 8019ece:	73fb      	strb	r3, [r7, #15]
    break;
 8019ed0:	e00b      	b.n	8019eea <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019ed2:	2303      	movs	r3, #3
 8019ed4:	73fb      	strb	r3, [r7, #15]
    break;
 8019ed6:	e008      	b.n	8019eea <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019ed8:	2301      	movs	r3, #1
 8019eda:	73fb      	strb	r3, [r7, #15]
    break;
 8019edc:	e005      	b.n	8019eea <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019ede:	2303      	movs	r3, #3
 8019ee0:	73fb      	strb	r3, [r7, #15]
    break;
 8019ee2:	e002      	b.n	8019eea <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8019ee4:	2303      	movs	r3, #3
 8019ee6:	73fb      	strb	r3, [r7, #15]
    break;
 8019ee8:	bf00      	nop
  }
  return usb_status;
 8019eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8019eec:	4618      	mov	r0, r3
 8019eee:	3710      	adds	r7, #16
 8019ef0:	46bd      	mov	sp, r7
 8019ef2:	bd80      	pop	{r7, pc}

08019ef4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019ef4:	b580      	push	{r7, lr}
 8019ef6:	b084      	sub	sp, #16
 8019ef8:	af00      	add	r7, sp, #0
 8019efa:	6078      	str	r0, [r7, #4]
 8019efc:	460b      	mov	r3, r1
 8019efe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019f00:	2300      	movs	r3, #0
 8019f02:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019f04:	2300      	movs	r3, #0
 8019f06:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019f08:	687b      	ldr	r3, [r7, #4]
 8019f0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8019f0e:	78fa      	ldrb	r2, [r7, #3]
 8019f10:	4611      	mov	r1, r2
 8019f12:	4618      	mov	r0, r3
 8019f14:	f7ee f83e 	bl	8007f94 <HAL_PCD_EP_Close>
 8019f18:	4603      	mov	r3, r0
 8019f1a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019f1c:	7bbb      	ldrb	r3, [r7, #14]
 8019f1e:	2b03      	cmp	r3, #3
 8019f20:	d816      	bhi.n	8019f50 <USBD_LL_CloseEP+0x5c>
 8019f22:	a201      	add	r2, pc, #4	@ (adr r2, 8019f28 <USBD_LL_CloseEP+0x34>)
 8019f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019f28:	08019f39 	.word	0x08019f39
 8019f2c:	08019f3f 	.word	0x08019f3f
 8019f30:	08019f45 	.word	0x08019f45
 8019f34:	08019f4b 	.word	0x08019f4b
    case HAL_OK :
      usb_status = USBD_OK;
 8019f38:	2300      	movs	r3, #0
 8019f3a:	73fb      	strb	r3, [r7, #15]
    break;
 8019f3c:	e00b      	b.n	8019f56 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019f3e:	2303      	movs	r3, #3
 8019f40:	73fb      	strb	r3, [r7, #15]
    break;
 8019f42:	e008      	b.n	8019f56 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019f44:	2301      	movs	r3, #1
 8019f46:	73fb      	strb	r3, [r7, #15]
    break;
 8019f48:	e005      	b.n	8019f56 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019f4a:	2303      	movs	r3, #3
 8019f4c:	73fb      	strb	r3, [r7, #15]
    break;
 8019f4e:	e002      	b.n	8019f56 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8019f50:	2303      	movs	r3, #3
 8019f52:	73fb      	strb	r3, [r7, #15]
    break;
 8019f54:	bf00      	nop
  }
  return usb_status;
 8019f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8019f58:	4618      	mov	r0, r3
 8019f5a:	3710      	adds	r7, #16
 8019f5c:	46bd      	mov	sp, r7
 8019f5e:	bd80      	pop	{r7, pc}

08019f60 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019f60:	b580      	push	{r7, lr}
 8019f62:	b084      	sub	sp, #16
 8019f64:	af00      	add	r7, sp, #0
 8019f66:	6078      	str	r0, [r7, #4]
 8019f68:	460b      	mov	r3, r1
 8019f6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019f6c:	2300      	movs	r3, #0
 8019f6e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019f70:	2300      	movs	r3, #0
 8019f72:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019f74:	687b      	ldr	r3, [r7, #4]
 8019f76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8019f7a:	78fa      	ldrb	r2, [r7, #3]
 8019f7c:	4611      	mov	r1, r2
 8019f7e:	4618      	mov	r0, r3
 8019f80:	f7ee f8cd 	bl	800811e <HAL_PCD_EP_SetStall>
 8019f84:	4603      	mov	r3, r0
 8019f86:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019f88:	7bbb      	ldrb	r3, [r7, #14]
 8019f8a:	2b03      	cmp	r3, #3
 8019f8c:	d816      	bhi.n	8019fbc <USBD_LL_StallEP+0x5c>
 8019f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8019f94 <USBD_LL_StallEP+0x34>)
 8019f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019f94:	08019fa5 	.word	0x08019fa5
 8019f98:	08019fab 	.word	0x08019fab
 8019f9c:	08019fb1 	.word	0x08019fb1
 8019fa0:	08019fb7 	.word	0x08019fb7
    case HAL_OK :
      usb_status = USBD_OK;
 8019fa4:	2300      	movs	r3, #0
 8019fa6:	73fb      	strb	r3, [r7, #15]
    break;
 8019fa8:	e00b      	b.n	8019fc2 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019faa:	2303      	movs	r3, #3
 8019fac:	73fb      	strb	r3, [r7, #15]
    break;
 8019fae:	e008      	b.n	8019fc2 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019fb0:	2301      	movs	r3, #1
 8019fb2:	73fb      	strb	r3, [r7, #15]
    break;
 8019fb4:	e005      	b.n	8019fc2 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019fb6:	2303      	movs	r3, #3
 8019fb8:	73fb      	strb	r3, [r7, #15]
    break;
 8019fba:	e002      	b.n	8019fc2 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8019fbc:	2303      	movs	r3, #3
 8019fbe:	73fb      	strb	r3, [r7, #15]
    break;
 8019fc0:	bf00      	nop
  }
  return usb_status;
 8019fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8019fc4:	4618      	mov	r0, r3
 8019fc6:	3710      	adds	r7, #16
 8019fc8:	46bd      	mov	sp, r7
 8019fca:	bd80      	pop	{r7, pc}

08019fcc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019fcc:	b580      	push	{r7, lr}
 8019fce:	b084      	sub	sp, #16
 8019fd0:	af00      	add	r7, sp, #0
 8019fd2:	6078      	str	r0, [r7, #4]
 8019fd4:	460b      	mov	r3, r1
 8019fd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019fd8:	2300      	movs	r3, #0
 8019fda:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019fdc:	2300      	movs	r3, #0
 8019fde:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8019fe0:	687b      	ldr	r3, [r7, #4]
 8019fe2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8019fe6:	78fa      	ldrb	r2, [r7, #3]
 8019fe8:	4611      	mov	r1, r2
 8019fea:	4618      	mov	r0, r3
 8019fec:	f7ee f8f9 	bl	80081e2 <HAL_PCD_EP_ClrStall>
 8019ff0:	4603      	mov	r3, r0
 8019ff2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019ff4:	7bbb      	ldrb	r3, [r7, #14]
 8019ff6:	2b03      	cmp	r3, #3
 8019ff8:	d816      	bhi.n	801a028 <USBD_LL_ClearStallEP+0x5c>
 8019ffa:	a201      	add	r2, pc, #4	@ (adr r2, 801a000 <USBD_LL_ClearStallEP+0x34>)
 8019ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a000:	0801a011 	.word	0x0801a011
 801a004:	0801a017 	.word	0x0801a017
 801a008:	0801a01d 	.word	0x0801a01d
 801a00c:	0801a023 	.word	0x0801a023
    case HAL_OK :
      usb_status = USBD_OK;
 801a010:	2300      	movs	r3, #0
 801a012:	73fb      	strb	r3, [r7, #15]
    break;
 801a014:	e00b      	b.n	801a02e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a016:	2303      	movs	r3, #3
 801a018:	73fb      	strb	r3, [r7, #15]
    break;
 801a01a:	e008      	b.n	801a02e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a01c:	2301      	movs	r3, #1
 801a01e:	73fb      	strb	r3, [r7, #15]
    break;
 801a020:	e005      	b.n	801a02e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a022:	2303      	movs	r3, #3
 801a024:	73fb      	strb	r3, [r7, #15]
    break;
 801a026:	e002      	b.n	801a02e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801a028:	2303      	movs	r3, #3
 801a02a:	73fb      	strb	r3, [r7, #15]
    break;
 801a02c:	bf00      	nop
  }
  return usb_status;
 801a02e:	7bfb      	ldrb	r3, [r7, #15]
}
 801a030:	4618      	mov	r0, r3
 801a032:	3710      	adds	r7, #16
 801a034:	46bd      	mov	sp, r7
 801a036:	bd80      	pop	{r7, pc}

0801a038 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a038:	b480      	push	{r7}
 801a03a:	b085      	sub	sp, #20
 801a03c:	af00      	add	r7, sp, #0
 801a03e:	6078      	str	r0, [r7, #4]
 801a040:	460b      	mov	r3, r1
 801a042:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801a044:	687b      	ldr	r3, [r7, #4]
 801a046:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a04a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801a04c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a050:	2b00      	cmp	r3, #0
 801a052:	da0b      	bge.n	801a06c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801a054:	78fb      	ldrb	r3, [r7, #3]
 801a056:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801a05a:	68f9      	ldr	r1, [r7, #12]
 801a05c:	4613      	mov	r3, r2
 801a05e:	00db      	lsls	r3, r3, #3
 801a060:	4413      	add	r3, r2
 801a062:	009b      	lsls	r3, r3, #2
 801a064:	440b      	add	r3, r1
 801a066:	3316      	adds	r3, #22
 801a068:	781b      	ldrb	r3, [r3, #0]
 801a06a:	e00b      	b.n	801a084 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801a06c:	78fb      	ldrb	r3, [r7, #3]
 801a06e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801a072:	68f9      	ldr	r1, [r7, #12]
 801a074:	4613      	mov	r3, r2
 801a076:	00db      	lsls	r3, r3, #3
 801a078:	4413      	add	r3, r2
 801a07a:	009b      	lsls	r3, r3, #2
 801a07c:	440b      	add	r3, r1
 801a07e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801a082:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a084:	4618      	mov	r0, r3
 801a086:	3714      	adds	r7, #20
 801a088:	46bd      	mov	sp, r7
 801a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a08e:	4770      	bx	lr

0801a090 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801a090:	b580      	push	{r7, lr}
 801a092:	b084      	sub	sp, #16
 801a094:	af00      	add	r7, sp, #0
 801a096:	6078      	str	r0, [r7, #4]
 801a098:	460b      	mov	r3, r1
 801a09a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a09c:	2300      	movs	r3, #0
 801a09e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a0a0:	2300      	movs	r3, #0
 801a0a2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a0aa:	78fa      	ldrb	r2, [r7, #3]
 801a0ac:	4611      	mov	r1, r2
 801a0ae:	4618      	mov	r0, r3
 801a0b0:	f7ed fee2 	bl	8007e78 <HAL_PCD_SetAddress>
 801a0b4:	4603      	mov	r3, r0
 801a0b6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801a0b8:	7bbb      	ldrb	r3, [r7, #14]
 801a0ba:	2b03      	cmp	r3, #3
 801a0bc:	d816      	bhi.n	801a0ec <USBD_LL_SetUSBAddress+0x5c>
 801a0be:	a201      	add	r2, pc, #4	@ (adr r2, 801a0c4 <USBD_LL_SetUSBAddress+0x34>)
 801a0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a0c4:	0801a0d5 	.word	0x0801a0d5
 801a0c8:	0801a0db 	.word	0x0801a0db
 801a0cc:	0801a0e1 	.word	0x0801a0e1
 801a0d0:	0801a0e7 	.word	0x0801a0e7
    case HAL_OK :
      usb_status = USBD_OK;
 801a0d4:	2300      	movs	r3, #0
 801a0d6:	73fb      	strb	r3, [r7, #15]
    break;
 801a0d8:	e00b      	b.n	801a0f2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a0da:	2303      	movs	r3, #3
 801a0dc:	73fb      	strb	r3, [r7, #15]
    break;
 801a0de:	e008      	b.n	801a0f2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a0e0:	2301      	movs	r3, #1
 801a0e2:	73fb      	strb	r3, [r7, #15]
    break;
 801a0e4:	e005      	b.n	801a0f2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a0e6:	2303      	movs	r3, #3
 801a0e8:	73fb      	strb	r3, [r7, #15]
    break;
 801a0ea:	e002      	b.n	801a0f2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 801a0ec:	2303      	movs	r3, #3
 801a0ee:	73fb      	strb	r3, [r7, #15]
    break;
 801a0f0:	bf00      	nop
  }
  return usb_status;
 801a0f2:	7bfb      	ldrb	r3, [r7, #15]
}
 801a0f4:	4618      	mov	r0, r3
 801a0f6:	3710      	adds	r7, #16
 801a0f8:	46bd      	mov	sp, r7
 801a0fa:	bd80      	pop	{r7, pc}

0801a0fc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a0fc:	b580      	push	{r7, lr}
 801a0fe:	b086      	sub	sp, #24
 801a100:	af00      	add	r7, sp, #0
 801a102:	60f8      	str	r0, [r7, #12]
 801a104:	607a      	str	r2, [r7, #4]
 801a106:	603b      	str	r3, [r7, #0]
 801a108:	460b      	mov	r3, r1
 801a10a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a10c:	2300      	movs	r3, #0
 801a10e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a110:	2300      	movs	r3, #0
 801a112:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801a114:	68fb      	ldr	r3, [r7, #12]
 801a116:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801a11a:	7af9      	ldrb	r1, [r7, #11]
 801a11c:	683b      	ldr	r3, [r7, #0]
 801a11e:	687a      	ldr	r2, [r7, #4]
 801a120:	f7ed ffcc 	bl	80080bc <HAL_PCD_EP_Transmit>
 801a124:	4603      	mov	r3, r0
 801a126:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 801a128:	7dbb      	ldrb	r3, [r7, #22]
 801a12a:	2b03      	cmp	r3, #3
 801a12c:	d816      	bhi.n	801a15c <USBD_LL_Transmit+0x60>
 801a12e:	a201      	add	r2, pc, #4	@ (adr r2, 801a134 <USBD_LL_Transmit+0x38>)
 801a130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a134:	0801a145 	.word	0x0801a145
 801a138:	0801a14b 	.word	0x0801a14b
 801a13c:	0801a151 	.word	0x0801a151
 801a140:	0801a157 	.word	0x0801a157
    case HAL_OK :
      usb_status = USBD_OK;
 801a144:	2300      	movs	r3, #0
 801a146:	75fb      	strb	r3, [r7, #23]
    break;
 801a148:	e00b      	b.n	801a162 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a14a:	2303      	movs	r3, #3
 801a14c:	75fb      	strb	r3, [r7, #23]
    break;
 801a14e:	e008      	b.n	801a162 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a150:	2301      	movs	r3, #1
 801a152:	75fb      	strb	r3, [r7, #23]
    break;
 801a154:	e005      	b.n	801a162 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a156:	2303      	movs	r3, #3
 801a158:	75fb      	strb	r3, [r7, #23]
    break;
 801a15a:	e002      	b.n	801a162 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 801a15c:	2303      	movs	r3, #3
 801a15e:	75fb      	strb	r3, [r7, #23]
    break;
 801a160:	bf00      	nop
  }
  return usb_status;
 801a162:	7dfb      	ldrb	r3, [r7, #23]
}
 801a164:	4618      	mov	r0, r3
 801a166:	3718      	adds	r7, #24
 801a168:	46bd      	mov	sp, r7
 801a16a:	bd80      	pop	{r7, pc}

0801a16c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a16c:	b580      	push	{r7, lr}
 801a16e:	b086      	sub	sp, #24
 801a170:	af00      	add	r7, sp, #0
 801a172:	60f8      	str	r0, [r7, #12]
 801a174:	607a      	str	r2, [r7, #4]
 801a176:	603b      	str	r3, [r7, #0]
 801a178:	460b      	mov	r3, r1
 801a17a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a17c:	2300      	movs	r3, #0
 801a17e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a180:	2300      	movs	r3, #0
 801a182:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801a184:	68fb      	ldr	r3, [r7, #12]
 801a186:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801a18a:	7af9      	ldrb	r1, [r7, #11]
 801a18c:	683b      	ldr	r3, [r7, #0]
 801a18e:	687a      	ldr	r2, [r7, #4]
 801a190:	f7ed ff4a 	bl	8008028 <HAL_PCD_EP_Receive>
 801a194:	4603      	mov	r3, r0
 801a196:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 801a198:	7dbb      	ldrb	r3, [r7, #22]
 801a19a:	2b03      	cmp	r3, #3
 801a19c:	d816      	bhi.n	801a1cc <USBD_LL_PrepareReceive+0x60>
 801a19e:	a201      	add	r2, pc, #4	@ (adr r2, 801a1a4 <USBD_LL_PrepareReceive+0x38>)
 801a1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a1a4:	0801a1b5 	.word	0x0801a1b5
 801a1a8:	0801a1bb 	.word	0x0801a1bb
 801a1ac:	0801a1c1 	.word	0x0801a1c1
 801a1b0:	0801a1c7 	.word	0x0801a1c7
    case HAL_OK :
      usb_status = USBD_OK;
 801a1b4:	2300      	movs	r3, #0
 801a1b6:	75fb      	strb	r3, [r7, #23]
    break;
 801a1b8:	e00b      	b.n	801a1d2 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a1ba:	2303      	movs	r3, #3
 801a1bc:	75fb      	strb	r3, [r7, #23]
    break;
 801a1be:	e008      	b.n	801a1d2 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a1c0:	2301      	movs	r3, #1
 801a1c2:	75fb      	strb	r3, [r7, #23]
    break;
 801a1c4:	e005      	b.n	801a1d2 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a1c6:	2303      	movs	r3, #3
 801a1c8:	75fb      	strb	r3, [r7, #23]
    break;
 801a1ca:	e002      	b.n	801a1d2 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 801a1cc:	2303      	movs	r3, #3
 801a1ce:	75fb      	strb	r3, [r7, #23]
    break;
 801a1d0:	bf00      	nop
  }
  return usb_status;
 801a1d2:	7dfb      	ldrb	r3, [r7, #23]
}
 801a1d4:	4618      	mov	r0, r3
 801a1d6:	3718      	adds	r7, #24
 801a1d8:	46bd      	mov	sp, r7
 801a1da:	bd80      	pop	{r7, pc}

0801a1dc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a1dc:	b580      	push	{r7, lr}
 801a1de:	b082      	sub	sp, #8
 801a1e0:	af00      	add	r7, sp, #0
 801a1e2:	6078      	str	r0, [r7, #4]
 801a1e4:	460b      	mov	r3, r1
 801a1e6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a1ee:	78fa      	ldrb	r2, [r7, #3]
 801a1f0:	4611      	mov	r1, r2
 801a1f2:	4618      	mov	r0, r3
 801a1f4:	f7ed ff4a 	bl	800808c <HAL_PCD_EP_GetRxCount>
 801a1f8:	4603      	mov	r3, r0
}
 801a1fa:	4618      	mov	r0, r3
 801a1fc:	3708      	adds	r7, #8
 801a1fe:	46bd      	mov	sp, r7
 801a200:	bd80      	pop	{r7, pc}
	...

0801a204 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801a204:	b580      	push	{r7, lr}
 801a206:	b082      	sub	sp, #8
 801a208:	af00      	add	r7, sp, #0
 801a20a:	6078      	str	r0, [r7, #4]
 801a20c:	460b      	mov	r3, r1
 801a20e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 801a210:	78fb      	ldrb	r3, [r7, #3]
 801a212:	2b00      	cmp	r3, #0
 801a214:	d002      	beq.n	801a21c <HAL_PCDEx_LPM_Callback+0x18>
 801a216:	2b01      	cmp	r3, #1
 801a218:	d01f      	beq.n	801a25a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801a21a:	e03b      	b.n	801a294 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	7adb      	ldrb	r3, [r3, #11]
 801a220:	2b00      	cmp	r3, #0
 801a222:	d007      	beq.n	801a234 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801a224:	f000 f854 	bl	801a2d0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a228:	4b1c      	ldr	r3, [pc, #112]	@ (801a29c <HAL_PCDEx_LPM_Callback+0x98>)
 801a22a:	691b      	ldr	r3, [r3, #16]
 801a22c:	4a1b      	ldr	r2, [pc, #108]	@ (801a29c <HAL_PCDEx_LPM_Callback+0x98>)
 801a22e:	f023 0306 	bic.w	r3, r3, #6
 801a232:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	681b      	ldr	r3, [r3, #0]
 801a238:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801a23c:	681b      	ldr	r3, [r3, #0]
 801a23e:	687a      	ldr	r2, [r7, #4]
 801a240:	6812      	ldr	r2, [r2, #0]
 801a242:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801a246:	f023 0301 	bic.w	r3, r3, #1
 801a24a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 801a24c:	687b      	ldr	r3, [r7, #4]
 801a24e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a252:	4618      	mov	r0, r3
 801a254:	f7f7 f8d5 	bl	8011402 <USBD_LL_Resume>
    break;
 801a258:	e01c      	b.n	801a294 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801a25a:	687b      	ldr	r3, [r7, #4]
 801a25c:	681b      	ldr	r3, [r3, #0]
 801a25e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801a262:	681b      	ldr	r3, [r3, #0]
 801a264:	687a      	ldr	r2, [r7, #4]
 801a266:	6812      	ldr	r2, [r2, #0]
 801a268:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801a26c:	f043 0301 	orr.w	r3, r3, #1
 801a270:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801a272:	687b      	ldr	r3, [r7, #4]
 801a274:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a278:	4618      	mov	r0, r3
 801a27a:	f7f7 f8a6 	bl	80113ca <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801a27e:	687b      	ldr	r3, [r7, #4]
 801a280:	7adb      	ldrb	r3, [r3, #11]
 801a282:	2b00      	cmp	r3, #0
 801a284:	d005      	beq.n	801a292 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a286:	4b05      	ldr	r3, [pc, #20]	@ (801a29c <HAL_PCDEx_LPM_Callback+0x98>)
 801a288:	691b      	ldr	r3, [r3, #16]
 801a28a:	4a04      	ldr	r2, [pc, #16]	@ (801a29c <HAL_PCDEx_LPM_Callback+0x98>)
 801a28c:	f043 0306 	orr.w	r3, r3, #6
 801a290:	6113      	str	r3, [r2, #16]
    break;
 801a292:	bf00      	nop
}
 801a294:	bf00      	nop
 801a296:	3708      	adds	r7, #8
 801a298:	46bd      	mov	sp, r7
 801a29a:	bd80      	pop	{r7, pc}
 801a29c:	e000ed00 	.word	0xe000ed00

0801a2a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801a2a0:	b480      	push	{r7}
 801a2a2:	b083      	sub	sp, #12
 801a2a4:	af00      	add	r7, sp, #0
 801a2a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801a2a8:	4b03      	ldr	r3, [pc, #12]	@ (801a2b8 <USBD_static_malloc+0x18>)
}
 801a2aa:	4618      	mov	r0, r3
 801a2ac:	370c      	adds	r7, #12
 801a2ae:	46bd      	mov	sp, r7
 801a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2b4:	4770      	bx	lr
 801a2b6:	bf00      	nop
 801a2b8:	20008d40 	.word	0x20008d40

0801a2bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801a2bc:	b480      	push	{r7}
 801a2be:	b083      	sub	sp, #12
 801a2c0:	af00      	add	r7, sp, #0
 801a2c2:	6078      	str	r0, [r7, #4]

}
 801a2c4:	bf00      	nop
 801a2c6:	370c      	adds	r7, #12
 801a2c8:	46bd      	mov	sp, r7
 801a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2ce:	4770      	bx	lr

0801a2d0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801a2d0:	b580      	push	{r7, lr}
 801a2d2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801a2d4:	f7eb f8ba 	bl	800544c <SystemClock_Config>
}
 801a2d8:	bf00      	nop
 801a2da:	bd80      	pop	{r7, pc}

0801a2dc <atof>:
 801a2dc:	2100      	movs	r1, #0
 801a2de:	f000 be07 	b.w	801aef0 <strtod>

0801a2e2 <atoi>:
 801a2e2:	220a      	movs	r2, #10
 801a2e4:	2100      	movs	r1, #0
 801a2e6:	f000 be89 	b.w	801affc <strtol>

0801a2ea <sulp>:
 801a2ea:	b570      	push	{r4, r5, r6, lr}
 801a2ec:	4604      	mov	r4, r0
 801a2ee:	460d      	mov	r5, r1
 801a2f0:	ec45 4b10 	vmov	d0, r4, r5
 801a2f4:	4616      	mov	r6, r2
 801a2f6:	f002 f8cb 	bl	801c490 <__ulp>
 801a2fa:	ec51 0b10 	vmov	r0, r1, d0
 801a2fe:	b17e      	cbz	r6, 801a320 <sulp+0x36>
 801a300:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801a304:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801a308:	2b00      	cmp	r3, #0
 801a30a:	dd09      	ble.n	801a320 <sulp+0x36>
 801a30c:	051b      	lsls	r3, r3, #20
 801a30e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801a312:	2400      	movs	r4, #0
 801a314:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801a318:	4622      	mov	r2, r4
 801a31a:	462b      	mov	r3, r5
 801a31c:	f7e6 f96c 	bl	80005f8 <__aeabi_dmul>
 801a320:	ec41 0b10 	vmov	d0, r0, r1
 801a324:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a328 <_strtod_l>:
 801a328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a32c:	b09f      	sub	sp, #124	@ 0x7c
 801a32e:	460c      	mov	r4, r1
 801a330:	9217      	str	r2, [sp, #92]	@ 0x5c
 801a332:	2200      	movs	r2, #0
 801a334:	921a      	str	r2, [sp, #104]	@ 0x68
 801a336:	9005      	str	r0, [sp, #20]
 801a338:	f04f 0a00 	mov.w	sl, #0
 801a33c:	f04f 0b00 	mov.w	fp, #0
 801a340:	460a      	mov	r2, r1
 801a342:	9219      	str	r2, [sp, #100]	@ 0x64
 801a344:	7811      	ldrb	r1, [r2, #0]
 801a346:	292b      	cmp	r1, #43	@ 0x2b
 801a348:	d04a      	beq.n	801a3e0 <_strtod_l+0xb8>
 801a34a:	d838      	bhi.n	801a3be <_strtod_l+0x96>
 801a34c:	290d      	cmp	r1, #13
 801a34e:	d832      	bhi.n	801a3b6 <_strtod_l+0x8e>
 801a350:	2908      	cmp	r1, #8
 801a352:	d832      	bhi.n	801a3ba <_strtod_l+0x92>
 801a354:	2900      	cmp	r1, #0
 801a356:	d03b      	beq.n	801a3d0 <_strtod_l+0xa8>
 801a358:	2200      	movs	r2, #0
 801a35a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801a35c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801a35e:	782a      	ldrb	r2, [r5, #0]
 801a360:	2a30      	cmp	r2, #48	@ 0x30
 801a362:	f040 80b3 	bne.w	801a4cc <_strtod_l+0x1a4>
 801a366:	786a      	ldrb	r2, [r5, #1]
 801a368:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801a36c:	2a58      	cmp	r2, #88	@ 0x58
 801a36e:	d16e      	bne.n	801a44e <_strtod_l+0x126>
 801a370:	9302      	str	r3, [sp, #8]
 801a372:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a374:	9301      	str	r3, [sp, #4]
 801a376:	ab1a      	add	r3, sp, #104	@ 0x68
 801a378:	9300      	str	r3, [sp, #0]
 801a37a:	4a8e      	ldr	r2, [pc, #568]	@ (801a5b4 <_strtod_l+0x28c>)
 801a37c:	9805      	ldr	r0, [sp, #20]
 801a37e:	ab1b      	add	r3, sp, #108	@ 0x6c
 801a380:	a919      	add	r1, sp, #100	@ 0x64
 801a382:	f001 f97f 	bl	801b684 <__gethex>
 801a386:	f010 060f 	ands.w	r6, r0, #15
 801a38a:	4604      	mov	r4, r0
 801a38c:	d005      	beq.n	801a39a <_strtod_l+0x72>
 801a38e:	2e06      	cmp	r6, #6
 801a390:	d128      	bne.n	801a3e4 <_strtod_l+0xbc>
 801a392:	3501      	adds	r5, #1
 801a394:	2300      	movs	r3, #0
 801a396:	9519      	str	r5, [sp, #100]	@ 0x64
 801a398:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a39a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801a39c:	2b00      	cmp	r3, #0
 801a39e:	f040 858e 	bne.w	801aebe <_strtod_l+0xb96>
 801a3a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a3a4:	b1cb      	cbz	r3, 801a3da <_strtod_l+0xb2>
 801a3a6:	4652      	mov	r2, sl
 801a3a8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801a3ac:	ec43 2b10 	vmov	d0, r2, r3
 801a3b0:	b01f      	add	sp, #124	@ 0x7c
 801a3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3b6:	2920      	cmp	r1, #32
 801a3b8:	d1ce      	bne.n	801a358 <_strtod_l+0x30>
 801a3ba:	3201      	adds	r2, #1
 801a3bc:	e7c1      	b.n	801a342 <_strtod_l+0x1a>
 801a3be:	292d      	cmp	r1, #45	@ 0x2d
 801a3c0:	d1ca      	bne.n	801a358 <_strtod_l+0x30>
 801a3c2:	2101      	movs	r1, #1
 801a3c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 801a3c6:	1c51      	adds	r1, r2, #1
 801a3c8:	9119      	str	r1, [sp, #100]	@ 0x64
 801a3ca:	7852      	ldrb	r2, [r2, #1]
 801a3cc:	2a00      	cmp	r2, #0
 801a3ce:	d1c5      	bne.n	801a35c <_strtod_l+0x34>
 801a3d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801a3d2:	9419      	str	r4, [sp, #100]	@ 0x64
 801a3d4:	2b00      	cmp	r3, #0
 801a3d6:	f040 8570 	bne.w	801aeba <_strtod_l+0xb92>
 801a3da:	4652      	mov	r2, sl
 801a3dc:	465b      	mov	r3, fp
 801a3de:	e7e5      	b.n	801a3ac <_strtod_l+0x84>
 801a3e0:	2100      	movs	r1, #0
 801a3e2:	e7ef      	b.n	801a3c4 <_strtod_l+0x9c>
 801a3e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801a3e6:	b13a      	cbz	r2, 801a3f8 <_strtod_l+0xd0>
 801a3e8:	2135      	movs	r1, #53	@ 0x35
 801a3ea:	a81c      	add	r0, sp, #112	@ 0x70
 801a3ec:	f002 f94a 	bl	801c684 <__copybits>
 801a3f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801a3f2:	9805      	ldr	r0, [sp, #20]
 801a3f4:	f001 fd18 	bl	801be28 <_Bfree>
 801a3f8:	3e01      	subs	r6, #1
 801a3fa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801a3fc:	2e04      	cmp	r6, #4
 801a3fe:	d806      	bhi.n	801a40e <_strtod_l+0xe6>
 801a400:	e8df f006 	tbb	[pc, r6]
 801a404:	201d0314 	.word	0x201d0314
 801a408:	14          	.byte	0x14
 801a409:	00          	.byte	0x00
 801a40a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801a40e:	05e1      	lsls	r1, r4, #23
 801a410:	bf48      	it	mi
 801a412:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801a416:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801a41a:	0d1b      	lsrs	r3, r3, #20
 801a41c:	051b      	lsls	r3, r3, #20
 801a41e:	2b00      	cmp	r3, #0
 801a420:	d1bb      	bne.n	801a39a <_strtod_l+0x72>
 801a422:	f001 f831 	bl	801b488 <__errno>
 801a426:	2322      	movs	r3, #34	@ 0x22
 801a428:	6003      	str	r3, [r0, #0]
 801a42a:	e7b6      	b.n	801a39a <_strtod_l+0x72>
 801a42c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 801a430:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801a434:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801a438:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801a43c:	e7e7      	b.n	801a40e <_strtod_l+0xe6>
 801a43e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 801a5bc <_strtod_l+0x294>
 801a442:	e7e4      	b.n	801a40e <_strtod_l+0xe6>
 801a444:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 801a448:	f04f 3aff 	mov.w	sl, #4294967295
 801a44c:	e7df      	b.n	801a40e <_strtod_l+0xe6>
 801a44e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a450:	1c5a      	adds	r2, r3, #1
 801a452:	9219      	str	r2, [sp, #100]	@ 0x64
 801a454:	785b      	ldrb	r3, [r3, #1]
 801a456:	2b30      	cmp	r3, #48	@ 0x30
 801a458:	d0f9      	beq.n	801a44e <_strtod_l+0x126>
 801a45a:	2b00      	cmp	r3, #0
 801a45c:	d09d      	beq.n	801a39a <_strtod_l+0x72>
 801a45e:	2301      	movs	r3, #1
 801a460:	9309      	str	r3, [sp, #36]	@ 0x24
 801a462:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a464:	930c      	str	r3, [sp, #48]	@ 0x30
 801a466:	2300      	movs	r3, #0
 801a468:	9308      	str	r3, [sp, #32]
 801a46a:	930a      	str	r3, [sp, #40]	@ 0x28
 801a46c:	461f      	mov	r7, r3
 801a46e:	220a      	movs	r2, #10
 801a470:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801a472:	7805      	ldrb	r5, [r0, #0]
 801a474:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 801a478:	b2d9      	uxtb	r1, r3
 801a47a:	2909      	cmp	r1, #9
 801a47c:	d928      	bls.n	801a4d0 <_strtod_l+0x1a8>
 801a47e:	494e      	ldr	r1, [pc, #312]	@ (801a5b8 <_strtod_l+0x290>)
 801a480:	2201      	movs	r2, #1
 801a482:	f000 ff3f 	bl	801b304 <strncmp>
 801a486:	2800      	cmp	r0, #0
 801a488:	d032      	beq.n	801a4f0 <_strtod_l+0x1c8>
 801a48a:	2000      	movs	r0, #0
 801a48c:	462a      	mov	r2, r5
 801a48e:	4681      	mov	r9, r0
 801a490:	463d      	mov	r5, r7
 801a492:	4603      	mov	r3, r0
 801a494:	2a65      	cmp	r2, #101	@ 0x65
 801a496:	d001      	beq.n	801a49c <_strtod_l+0x174>
 801a498:	2a45      	cmp	r2, #69	@ 0x45
 801a49a:	d114      	bne.n	801a4c6 <_strtod_l+0x19e>
 801a49c:	b91d      	cbnz	r5, 801a4a6 <_strtod_l+0x17e>
 801a49e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a4a0:	4302      	orrs	r2, r0
 801a4a2:	d095      	beq.n	801a3d0 <_strtod_l+0xa8>
 801a4a4:	2500      	movs	r5, #0
 801a4a6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 801a4a8:	1c62      	adds	r2, r4, #1
 801a4aa:	9219      	str	r2, [sp, #100]	@ 0x64
 801a4ac:	7862      	ldrb	r2, [r4, #1]
 801a4ae:	2a2b      	cmp	r2, #43	@ 0x2b
 801a4b0:	d077      	beq.n	801a5a2 <_strtod_l+0x27a>
 801a4b2:	2a2d      	cmp	r2, #45	@ 0x2d
 801a4b4:	d07b      	beq.n	801a5ae <_strtod_l+0x286>
 801a4b6:	f04f 0c00 	mov.w	ip, #0
 801a4ba:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801a4be:	2909      	cmp	r1, #9
 801a4c0:	f240 8082 	bls.w	801a5c8 <_strtod_l+0x2a0>
 801a4c4:	9419      	str	r4, [sp, #100]	@ 0x64
 801a4c6:	f04f 0800 	mov.w	r8, #0
 801a4ca:	e0a2      	b.n	801a612 <_strtod_l+0x2ea>
 801a4cc:	2300      	movs	r3, #0
 801a4ce:	e7c7      	b.n	801a460 <_strtod_l+0x138>
 801a4d0:	2f08      	cmp	r7, #8
 801a4d2:	bfd5      	itete	le
 801a4d4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801a4d6:	9908      	ldrgt	r1, [sp, #32]
 801a4d8:	fb02 3301 	mlale	r3, r2, r1, r3
 801a4dc:	fb02 3301 	mlagt	r3, r2, r1, r3
 801a4e0:	f100 0001 	add.w	r0, r0, #1
 801a4e4:	bfd4      	ite	le
 801a4e6:	930a      	strle	r3, [sp, #40]	@ 0x28
 801a4e8:	9308      	strgt	r3, [sp, #32]
 801a4ea:	3701      	adds	r7, #1
 801a4ec:	9019      	str	r0, [sp, #100]	@ 0x64
 801a4ee:	e7bf      	b.n	801a470 <_strtod_l+0x148>
 801a4f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a4f2:	1c5a      	adds	r2, r3, #1
 801a4f4:	9219      	str	r2, [sp, #100]	@ 0x64
 801a4f6:	785a      	ldrb	r2, [r3, #1]
 801a4f8:	b37f      	cbz	r7, 801a55a <_strtod_l+0x232>
 801a4fa:	4681      	mov	r9, r0
 801a4fc:	463d      	mov	r5, r7
 801a4fe:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801a502:	2b09      	cmp	r3, #9
 801a504:	d912      	bls.n	801a52c <_strtod_l+0x204>
 801a506:	2301      	movs	r3, #1
 801a508:	e7c4      	b.n	801a494 <_strtod_l+0x16c>
 801a50a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a50c:	1c5a      	adds	r2, r3, #1
 801a50e:	9219      	str	r2, [sp, #100]	@ 0x64
 801a510:	785a      	ldrb	r2, [r3, #1]
 801a512:	3001      	adds	r0, #1
 801a514:	2a30      	cmp	r2, #48	@ 0x30
 801a516:	d0f8      	beq.n	801a50a <_strtod_l+0x1e2>
 801a518:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801a51c:	2b08      	cmp	r3, #8
 801a51e:	f200 84d3 	bhi.w	801aec8 <_strtod_l+0xba0>
 801a522:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a524:	930c      	str	r3, [sp, #48]	@ 0x30
 801a526:	4681      	mov	r9, r0
 801a528:	2000      	movs	r0, #0
 801a52a:	4605      	mov	r5, r0
 801a52c:	3a30      	subs	r2, #48	@ 0x30
 801a52e:	f100 0301 	add.w	r3, r0, #1
 801a532:	d02a      	beq.n	801a58a <_strtod_l+0x262>
 801a534:	4499      	add	r9, r3
 801a536:	eb00 0c05 	add.w	ip, r0, r5
 801a53a:	462b      	mov	r3, r5
 801a53c:	210a      	movs	r1, #10
 801a53e:	4563      	cmp	r3, ip
 801a540:	d10d      	bne.n	801a55e <_strtod_l+0x236>
 801a542:	1c69      	adds	r1, r5, #1
 801a544:	4401      	add	r1, r0
 801a546:	4428      	add	r0, r5
 801a548:	2808      	cmp	r0, #8
 801a54a:	dc16      	bgt.n	801a57a <_strtod_l+0x252>
 801a54c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801a54e:	230a      	movs	r3, #10
 801a550:	fb03 2300 	mla	r3, r3, r0, r2
 801a554:	930a      	str	r3, [sp, #40]	@ 0x28
 801a556:	2300      	movs	r3, #0
 801a558:	e018      	b.n	801a58c <_strtod_l+0x264>
 801a55a:	4638      	mov	r0, r7
 801a55c:	e7da      	b.n	801a514 <_strtod_l+0x1ec>
 801a55e:	2b08      	cmp	r3, #8
 801a560:	f103 0301 	add.w	r3, r3, #1
 801a564:	dc03      	bgt.n	801a56e <_strtod_l+0x246>
 801a566:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801a568:	434e      	muls	r6, r1
 801a56a:	960a      	str	r6, [sp, #40]	@ 0x28
 801a56c:	e7e7      	b.n	801a53e <_strtod_l+0x216>
 801a56e:	2b10      	cmp	r3, #16
 801a570:	bfde      	ittt	le
 801a572:	9e08      	ldrle	r6, [sp, #32]
 801a574:	434e      	mulle	r6, r1
 801a576:	9608      	strle	r6, [sp, #32]
 801a578:	e7e1      	b.n	801a53e <_strtod_l+0x216>
 801a57a:	280f      	cmp	r0, #15
 801a57c:	dceb      	bgt.n	801a556 <_strtod_l+0x22e>
 801a57e:	9808      	ldr	r0, [sp, #32]
 801a580:	230a      	movs	r3, #10
 801a582:	fb03 2300 	mla	r3, r3, r0, r2
 801a586:	9308      	str	r3, [sp, #32]
 801a588:	e7e5      	b.n	801a556 <_strtod_l+0x22e>
 801a58a:	4629      	mov	r1, r5
 801a58c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801a58e:	1c50      	adds	r0, r2, #1
 801a590:	9019      	str	r0, [sp, #100]	@ 0x64
 801a592:	7852      	ldrb	r2, [r2, #1]
 801a594:	4618      	mov	r0, r3
 801a596:	460d      	mov	r5, r1
 801a598:	e7b1      	b.n	801a4fe <_strtod_l+0x1d6>
 801a59a:	f04f 0900 	mov.w	r9, #0
 801a59e:	2301      	movs	r3, #1
 801a5a0:	e77d      	b.n	801a49e <_strtod_l+0x176>
 801a5a2:	f04f 0c00 	mov.w	ip, #0
 801a5a6:	1ca2      	adds	r2, r4, #2
 801a5a8:	9219      	str	r2, [sp, #100]	@ 0x64
 801a5aa:	78a2      	ldrb	r2, [r4, #2]
 801a5ac:	e785      	b.n	801a4ba <_strtod_l+0x192>
 801a5ae:	f04f 0c01 	mov.w	ip, #1
 801a5b2:	e7f8      	b.n	801a5a6 <_strtod_l+0x27e>
 801a5b4:	0801f738 	.word	0x0801f738
 801a5b8:	0801f714 	.word	0x0801f714
 801a5bc:	7ff00000 	.word	0x7ff00000
 801a5c0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801a5c2:	1c51      	adds	r1, r2, #1
 801a5c4:	9119      	str	r1, [sp, #100]	@ 0x64
 801a5c6:	7852      	ldrb	r2, [r2, #1]
 801a5c8:	2a30      	cmp	r2, #48	@ 0x30
 801a5ca:	d0f9      	beq.n	801a5c0 <_strtod_l+0x298>
 801a5cc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801a5d0:	2908      	cmp	r1, #8
 801a5d2:	f63f af78 	bhi.w	801a4c6 <_strtod_l+0x19e>
 801a5d6:	3a30      	subs	r2, #48	@ 0x30
 801a5d8:	920e      	str	r2, [sp, #56]	@ 0x38
 801a5da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801a5dc:	920f      	str	r2, [sp, #60]	@ 0x3c
 801a5de:	f04f 080a 	mov.w	r8, #10
 801a5e2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801a5e4:	1c56      	adds	r6, r2, #1
 801a5e6:	9619      	str	r6, [sp, #100]	@ 0x64
 801a5e8:	7852      	ldrb	r2, [r2, #1]
 801a5ea:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801a5ee:	f1be 0f09 	cmp.w	lr, #9
 801a5f2:	d939      	bls.n	801a668 <_strtod_l+0x340>
 801a5f4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801a5f6:	1a76      	subs	r6, r6, r1
 801a5f8:	2e08      	cmp	r6, #8
 801a5fa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801a5fe:	dc03      	bgt.n	801a608 <_strtod_l+0x2e0>
 801a600:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801a602:	4588      	cmp	r8, r1
 801a604:	bfa8      	it	ge
 801a606:	4688      	movge	r8, r1
 801a608:	f1bc 0f00 	cmp.w	ip, #0
 801a60c:	d001      	beq.n	801a612 <_strtod_l+0x2ea>
 801a60e:	f1c8 0800 	rsb	r8, r8, #0
 801a612:	2d00      	cmp	r5, #0
 801a614:	d14e      	bne.n	801a6b4 <_strtod_l+0x38c>
 801a616:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a618:	4308      	orrs	r0, r1
 801a61a:	f47f aebe 	bne.w	801a39a <_strtod_l+0x72>
 801a61e:	2b00      	cmp	r3, #0
 801a620:	f47f aed6 	bne.w	801a3d0 <_strtod_l+0xa8>
 801a624:	2a69      	cmp	r2, #105	@ 0x69
 801a626:	d028      	beq.n	801a67a <_strtod_l+0x352>
 801a628:	dc25      	bgt.n	801a676 <_strtod_l+0x34e>
 801a62a:	2a49      	cmp	r2, #73	@ 0x49
 801a62c:	d025      	beq.n	801a67a <_strtod_l+0x352>
 801a62e:	2a4e      	cmp	r2, #78	@ 0x4e
 801a630:	f47f aece 	bne.w	801a3d0 <_strtod_l+0xa8>
 801a634:	499b      	ldr	r1, [pc, #620]	@ (801a8a4 <_strtod_l+0x57c>)
 801a636:	a819      	add	r0, sp, #100	@ 0x64
 801a638:	f001 fa46 	bl	801bac8 <__match>
 801a63c:	2800      	cmp	r0, #0
 801a63e:	f43f aec7 	beq.w	801a3d0 <_strtod_l+0xa8>
 801a642:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a644:	781b      	ldrb	r3, [r3, #0]
 801a646:	2b28      	cmp	r3, #40	@ 0x28
 801a648:	d12e      	bne.n	801a6a8 <_strtod_l+0x380>
 801a64a:	4997      	ldr	r1, [pc, #604]	@ (801a8a8 <_strtod_l+0x580>)
 801a64c:	aa1c      	add	r2, sp, #112	@ 0x70
 801a64e:	a819      	add	r0, sp, #100	@ 0x64
 801a650:	f001 fa4e 	bl	801baf0 <__hexnan>
 801a654:	2805      	cmp	r0, #5
 801a656:	d127      	bne.n	801a6a8 <_strtod_l+0x380>
 801a658:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a65a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801a65e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801a662:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801a666:	e698      	b.n	801a39a <_strtod_l+0x72>
 801a668:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801a66a:	fb08 2101 	mla	r1, r8, r1, r2
 801a66e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801a672:	920e      	str	r2, [sp, #56]	@ 0x38
 801a674:	e7b5      	b.n	801a5e2 <_strtod_l+0x2ba>
 801a676:	2a6e      	cmp	r2, #110	@ 0x6e
 801a678:	e7da      	b.n	801a630 <_strtod_l+0x308>
 801a67a:	498c      	ldr	r1, [pc, #560]	@ (801a8ac <_strtod_l+0x584>)
 801a67c:	a819      	add	r0, sp, #100	@ 0x64
 801a67e:	f001 fa23 	bl	801bac8 <__match>
 801a682:	2800      	cmp	r0, #0
 801a684:	f43f aea4 	beq.w	801a3d0 <_strtod_l+0xa8>
 801a688:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a68a:	4989      	ldr	r1, [pc, #548]	@ (801a8b0 <_strtod_l+0x588>)
 801a68c:	3b01      	subs	r3, #1
 801a68e:	a819      	add	r0, sp, #100	@ 0x64
 801a690:	9319      	str	r3, [sp, #100]	@ 0x64
 801a692:	f001 fa19 	bl	801bac8 <__match>
 801a696:	b910      	cbnz	r0, 801a69e <_strtod_l+0x376>
 801a698:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a69a:	3301      	adds	r3, #1
 801a69c:	9319      	str	r3, [sp, #100]	@ 0x64
 801a69e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 801a8c0 <_strtod_l+0x598>
 801a6a2:	f04f 0a00 	mov.w	sl, #0
 801a6a6:	e678      	b.n	801a39a <_strtod_l+0x72>
 801a6a8:	4882      	ldr	r0, [pc, #520]	@ (801a8b4 <_strtod_l+0x58c>)
 801a6aa:	f000 ff31 	bl	801b510 <nan>
 801a6ae:	ec5b ab10 	vmov	sl, fp, d0
 801a6b2:	e672      	b.n	801a39a <_strtod_l+0x72>
 801a6b4:	eba8 0309 	sub.w	r3, r8, r9
 801a6b8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801a6ba:	9309      	str	r3, [sp, #36]	@ 0x24
 801a6bc:	2f00      	cmp	r7, #0
 801a6be:	bf08      	it	eq
 801a6c0:	462f      	moveq	r7, r5
 801a6c2:	2d10      	cmp	r5, #16
 801a6c4:	462c      	mov	r4, r5
 801a6c6:	bfa8      	it	ge
 801a6c8:	2410      	movge	r4, #16
 801a6ca:	f7e5 ff1b 	bl	8000504 <__aeabi_ui2d>
 801a6ce:	2d09      	cmp	r5, #9
 801a6d0:	4682      	mov	sl, r0
 801a6d2:	468b      	mov	fp, r1
 801a6d4:	dc13      	bgt.n	801a6fe <_strtod_l+0x3d6>
 801a6d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a6d8:	2b00      	cmp	r3, #0
 801a6da:	f43f ae5e 	beq.w	801a39a <_strtod_l+0x72>
 801a6de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a6e0:	dd78      	ble.n	801a7d4 <_strtod_l+0x4ac>
 801a6e2:	2b16      	cmp	r3, #22
 801a6e4:	dc5f      	bgt.n	801a7a6 <_strtod_l+0x47e>
 801a6e6:	4974      	ldr	r1, [pc, #464]	@ (801a8b8 <_strtod_l+0x590>)
 801a6e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801a6ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a6f0:	4652      	mov	r2, sl
 801a6f2:	465b      	mov	r3, fp
 801a6f4:	f7e5 ff80 	bl	80005f8 <__aeabi_dmul>
 801a6f8:	4682      	mov	sl, r0
 801a6fa:	468b      	mov	fp, r1
 801a6fc:	e64d      	b.n	801a39a <_strtod_l+0x72>
 801a6fe:	4b6e      	ldr	r3, [pc, #440]	@ (801a8b8 <_strtod_l+0x590>)
 801a700:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a704:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 801a708:	f7e5 ff76 	bl	80005f8 <__aeabi_dmul>
 801a70c:	4682      	mov	sl, r0
 801a70e:	9808      	ldr	r0, [sp, #32]
 801a710:	468b      	mov	fp, r1
 801a712:	f7e5 fef7 	bl	8000504 <__aeabi_ui2d>
 801a716:	4602      	mov	r2, r0
 801a718:	460b      	mov	r3, r1
 801a71a:	4650      	mov	r0, sl
 801a71c:	4659      	mov	r1, fp
 801a71e:	f7e5 fdb5 	bl	800028c <__adddf3>
 801a722:	2d0f      	cmp	r5, #15
 801a724:	4682      	mov	sl, r0
 801a726:	468b      	mov	fp, r1
 801a728:	ddd5      	ble.n	801a6d6 <_strtod_l+0x3ae>
 801a72a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a72c:	1b2c      	subs	r4, r5, r4
 801a72e:	441c      	add	r4, r3
 801a730:	2c00      	cmp	r4, #0
 801a732:	f340 8096 	ble.w	801a862 <_strtod_l+0x53a>
 801a736:	f014 030f 	ands.w	r3, r4, #15
 801a73a:	d00a      	beq.n	801a752 <_strtod_l+0x42a>
 801a73c:	495e      	ldr	r1, [pc, #376]	@ (801a8b8 <_strtod_l+0x590>)
 801a73e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801a742:	4652      	mov	r2, sl
 801a744:	465b      	mov	r3, fp
 801a746:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a74a:	f7e5 ff55 	bl	80005f8 <__aeabi_dmul>
 801a74e:	4682      	mov	sl, r0
 801a750:	468b      	mov	fp, r1
 801a752:	f034 040f 	bics.w	r4, r4, #15
 801a756:	d073      	beq.n	801a840 <_strtod_l+0x518>
 801a758:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801a75c:	dd48      	ble.n	801a7f0 <_strtod_l+0x4c8>
 801a75e:	2400      	movs	r4, #0
 801a760:	46a0      	mov	r8, r4
 801a762:	940a      	str	r4, [sp, #40]	@ 0x28
 801a764:	46a1      	mov	r9, r4
 801a766:	9a05      	ldr	r2, [sp, #20]
 801a768:	f8df b154 	ldr.w	fp, [pc, #340]	@ 801a8c0 <_strtod_l+0x598>
 801a76c:	2322      	movs	r3, #34	@ 0x22
 801a76e:	6013      	str	r3, [r2, #0]
 801a770:	f04f 0a00 	mov.w	sl, #0
 801a774:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a776:	2b00      	cmp	r3, #0
 801a778:	f43f ae0f 	beq.w	801a39a <_strtod_l+0x72>
 801a77c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801a77e:	9805      	ldr	r0, [sp, #20]
 801a780:	f001 fb52 	bl	801be28 <_Bfree>
 801a784:	9805      	ldr	r0, [sp, #20]
 801a786:	4649      	mov	r1, r9
 801a788:	f001 fb4e 	bl	801be28 <_Bfree>
 801a78c:	9805      	ldr	r0, [sp, #20]
 801a78e:	4641      	mov	r1, r8
 801a790:	f001 fb4a 	bl	801be28 <_Bfree>
 801a794:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801a796:	9805      	ldr	r0, [sp, #20]
 801a798:	f001 fb46 	bl	801be28 <_Bfree>
 801a79c:	9805      	ldr	r0, [sp, #20]
 801a79e:	4621      	mov	r1, r4
 801a7a0:	f001 fb42 	bl	801be28 <_Bfree>
 801a7a4:	e5f9      	b.n	801a39a <_strtod_l+0x72>
 801a7a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a7a8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801a7ac:	4293      	cmp	r3, r2
 801a7ae:	dbbc      	blt.n	801a72a <_strtod_l+0x402>
 801a7b0:	4c41      	ldr	r4, [pc, #260]	@ (801a8b8 <_strtod_l+0x590>)
 801a7b2:	f1c5 050f 	rsb	r5, r5, #15
 801a7b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801a7ba:	4652      	mov	r2, sl
 801a7bc:	465b      	mov	r3, fp
 801a7be:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a7c2:	f7e5 ff19 	bl	80005f8 <__aeabi_dmul>
 801a7c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a7c8:	1b5d      	subs	r5, r3, r5
 801a7ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801a7ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a7d2:	e78f      	b.n	801a6f4 <_strtod_l+0x3cc>
 801a7d4:	3316      	adds	r3, #22
 801a7d6:	dba8      	blt.n	801a72a <_strtod_l+0x402>
 801a7d8:	4b37      	ldr	r3, [pc, #220]	@ (801a8b8 <_strtod_l+0x590>)
 801a7da:	eba9 0808 	sub.w	r8, r9, r8
 801a7de:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801a7e2:	e9d8 2300 	ldrd	r2, r3, [r8]
 801a7e6:	4650      	mov	r0, sl
 801a7e8:	4659      	mov	r1, fp
 801a7ea:	f7e6 f82f 	bl	800084c <__aeabi_ddiv>
 801a7ee:	e783      	b.n	801a6f8 <_strtod_l+0x3d0>
 801a7f0:	4b32      	ldr	r3, [pc, #200]	@ (801a8bc <_strtod_l+0x594>)
 801a7f2:	9308      	str	r3, [sp, #32]
 801a7f4:	2300      	movs	r3, #0
 801a7f6:	1124      	asrs	r4, r4, #4
 801a7f8:	4650      	mov	r0, sl
 801a7fa:	4659      	mov	r1, fp
 801a7fc:	461e      	mov	r6, r3
 801a7fe:	2c01      	cmp	r4, #1
 801a800:	dc21      	bgt.n	801a846 <_strtod_l+0x51e>
 801a802:	b10b      	cbz	r3, 801a808 <_strtod_l+0x4e0>
 801a804:	4682      	mov	sl, r0
 801a806:	468b      	mov	fp, r1
 801a808:	492c      	ldr	r1, [pc, #176]	@ (801a8bc <_strtod_l+0x594>)
 801a80a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801a80e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801a812:	4652      	mov	r2, sl
 801a814:	465b      	mov	r3, fp
 801a816:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a81a:	f7e5 feed 	bl	80005f8 <__aeabi_dmul>
 801a81e:	4b28      	ldr	r3, [pc, #160]	@ (801a8c0 <_strtod_l+0x598>)
 801a820:	460a      	mov	r2, r1
 801a822:	400b      	ands	r3, r1
 801a824:	4927      	ldr	r1, [pc, #156]	@ (801a8c4 <_strtod_l+0x59c>)
 801a826:	428b      	cmp	r3, r1
 801a828:	4682      	mov	sl, r0
 801a82a:	d898      	bhi.n	801a75e <_strtod_l+0x436>
 801a82c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 801a830:	428b      	cmp	r3, r1
 801a832:	bf86      	itte	hi
 801a834:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 801a8c8 <_strtod_l+0x5a0>
 801a838:	f04f 3aff 	movhi.w	sl, #4294967295
 801a83c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 801a840:	2300      	movs	r3, #0
 801a842:	9308      	str	r3, [sp, #32]
 801a844:	e07a      	b.n	801a93c <_strtod_l+0x614>
 801a846:	07e2      	lsls	r2, r4, #31
 801a848:	d505      	bpl.n	801a856 <_strtod_l+0x52e>
 801a84a:	9b08      	ldr	r3, [sp, #32]
 801a84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a850:	f7e5 fed2 	bl	80005f8 <__aeabi_dmul>
 801a854:	2301      	movs	r3, #1
 801a856:	9a08      	ldr	r2, [sp, #32]
 801a858:	3208      	adds	r2, #8
 801a85a:	3601      	adds	r6, #1
 801a85c:	1064      	asrs	r4, r4, #1
 801a85e:	9208      	str	r2, [sp, #32]
 801a860:	e7cd      	b.n	801a7fe <_strtod_l+0x4d6>
 801a862:	d0ed      	beq.n	801a840 <_strtod_l+0x518>
 801a864:	4264      	negs	r4, r4
 801a866:	f014 020f 	ands.w	r2, r4, #15
 801a86a:	d00a      	beq.n	801a882 <_strtod_l+0x55a>
 801a86c:	4b12      	ldr	r3, [pc, #72]	@ (801a8b8 <_strtod_l+0x590>)
 801a86e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a872:	4650      	mov	r0, sl
 801a874:	4659      	mov	r1, fp
 801a876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a87a:	f7e5 ffe7 	bl	800084c <__aeabi_ddiv>
 801a87e:	4682      	mov	sl, r0
 801a880:	468b      	mov	fp, r1
 801a882:	1124      	asrs	r4, r4, #4
 801a884:	d0dc      	beq.n	801a840 <_strtod_l+0x518>
 801a886:	2c1f      	cmp	r4, #31
 801a888:	dd20      	ble.n	801a8cc <_strtod_l+0x5a4>
 801a88a:	2400      	movs	r4, #0
 801a88c:	46a0      	mov	r8, r4
 801a88e:	940a      	str	r4, [sp, #40]	@ 0x28
 801a890:	46a1      	mov	r9, r4
 801a892:	9a05      	ldr	r2, [sp, #20]
 801a894:	2322      	movs	r3, #34	@ 0x22
 801a896:	f04f 0a00 	mov.w	sl, #0
 801a89a:	f04f 0b00 	mov.w	fp, #0
 801a89e:	6013      	str	r3, [r2, #0]
 801a8a0:	e768      	b.n	801a774 <_strtod_l+0x44c>
 801a8a2:	bf00      	nop
 801a8a4:	0801f71f 	.word	0x0801f71f
 801a8a8:	0801f724 	.word	0x0801f724
 801a8ac:	0801f716 	.word	0x0801f716
 801a8b0:	0801f719 	.word	0x0801f719
 801a8b4:	0801face 	.word	0x0801face
 801a8b8:	0801f998 	.word	0x0801f998
 801a8bc:	0801f970 	.word	0x0801f970
 801a8c0:	7ff00000 	.word	0x7ff00000
 801a8c4:	7ca00000 	.word	0x7ca00000
 801a8c8:	7fefffff 	.word	0x7fefffff
 801a8cc:	f014 0310 	ands.w	r3, r4, #16
 801a8d0:	bf18      	it	ne
 801a8d2:	236a      	movne	r3, #106	@ 0x6a
 801a8d4:	4ea9      	ldr	r6, [pc, #676]	@ (801ab7c <_strtod_l+0x854>)
 801a8d6:	9308      	str	r3, [sp, #32]
 801a8d8:	4650      	mov	r0, sl
 801a8da:	4659      	mov	r1, fp
 801a8dc:	2300      	movs	r3, #0
 801a8de:	07e2      	lsls	r2, r4, #31
 801a8e0:	d504      	bpl.n	801a8ec <_strtod_l+0x5c4>
 801a8e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 801a8e6:	f7e5 fe87 	bl	80005f8 <__aeabi_dmul>
 801a8ea:	2301      	movs	r3, #1
 801a8ec:	1064      	asrs	r4, r4, #1
 801a8ee:	f106 0608 	add.w	r6, r6, #8
 801a8f2:	d1f4      	bne.n	801a8de <_strtod_l+0x5b6>
 801a8f4:	b10b      	cbz	r3, 801a8fa <_strtod_l+0x5d2>
 801a8f6:	4682      	mov	sl, r0
 801a8f8:	468b      	mov	fp, r1
 801a8fa:	9b08      	ldr	r3, [sp, #32]
 801a8fc:	b1b3      	cbz	r3, 801a92c <_strtod_l+0x604>
 801a8fe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801a902:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801a906:	2b00      	cmp	r3, #0
 801a908:	4659      	mov	r1, fp
 801a90a:	dd0f      	ble.n	801a92c <_strtod_l+0x604>
 801a90c:	2b1f      	cmp	r3, #31
 801a90e:	dd55      	ble.n	801a9bc <_strtod_l+0x694>
 801a910:	2b34      	cmp	r3, #52	@ 0x34
 801a912:	bfde      	ittt	le
 801a914:	f04f 33ff 	movle.w	r3, #4294967295
 801a918:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801a91c:	4093      	lslle	r3, r2
 801a91e:	f04f 0a00 	mov.w	sl, #0
 801a922:	bfcc      	ite	gt
 801a924:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801a928:	ea03 0b01 	andle.w	fp, r3, r1
 801a92c:	2200      	movs	r2, #0
 801a92e:	2300      	movs	r3, #0
 801a930:	4650      	mov	r0, sl
 801a932:	4659      	mov	r1, fp
 801a934:	f7e6 f8c8 	bl	8000ac8 <__aeabi_dcmpeq>
 801a938:	2800      	cmp	r0, #0
 801a93a:	d1a6      	bne.n	801a88a <_strtod_l+0x562>
 801a93c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a93e:	9300      	str	r3, [sp, #0]
 801a940:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801a942:	9805      	ldr	r0, [sp, #20]
 801a944:	462b      	mov	r3, r5
 801a946:	463a      	mov	r2, r7
 801a948:	f001 fad6 	bl	801bef8 <__s2b>
 801a94c:	900a      	str	r0, [sp, #40]	@ 0x28
 801a94e:	2800      	cmp	r0, #0
 801a950:	f43f af05 	beq.w	801a75e <_strtod_l+0x436>
 801a954:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a956:	2a00      	cmp	r2, #0
 801a958:	eba9 0308 	sub.w	r3, r9, r8
 801a95c:	bfa8      	it	ge
 801a95e:	2300      	movge	r3, #0
 801a960:	9312      	str	r3, [sp, #72]	@ 0x48
 801a962:	2400      	movs	r4, #0
 801a964:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801a968:	9316      	str	r3, [sp, #88]	@ 0x58
 801a96a:	46a0      	mov	r8, r4
 801a96c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a96e:	9805      	ldr	r0, [sp, #20]
 801a970:	6859      	ldr	r1, [r3, #4]
 801a972:	f001 fa19 	bl	801bda8 <_Balloc>
 801a976:	4681      	mov	r9, r0
 801a978:	2800      	cmp	r0, #0
 801a97a:	f43f aef4 	beq.w	801a766 <_strtod_l+0x43e>
 801a97e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a980:	691a      	ldr	r2, [r3, #16]
 801a982:	3202      	adds	r2, #2
 801a984:	f103 010c 	add.w	r1, r3, #12
 801a988:	0092      	lsls	r2, r2, #2
 801a98a:	300c      	adds	r0, #12
 801a98c:	f000 fdb1 	bl	801b4f2 <memcpy>
 801a990:	ec4b ab10 	vmov	d0, sl, fp
 801a994:	9805      	ldr	r0, [sp, #20]
 801a996:	aa1c      	add	r2, sp, #112	@ 0x70
 801a998:	a91b      	add	r1, sp, #108	@ 0x6c
 801a99a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801a99e:	f001 fde7 	bl	801c570 <__d2b>
 801a9a2:	901a      	str	r0, [sp, #104]	@ 0x68
 801a9a4:	2800      	cmp	r0, #0
 801a9a6:	f43f aede 	beq.w	801a766 <_strtod_l+0x43e>
 801a9aa:	9805      	ldr	r0, [sp, #20]
 801a9ac:	2101      	movs	r1, #1
 801a9ae:	f001 fb39 	bl	801c024 <__i2b>
 801a9b2:	4680      	mov	r8, r0
 801a9b4:	b948      	cbnz	r0, 801a9ca <_strtod_l+0x6a2>
 801a9b6:	f04f 0800 	mov.w	r8, #0
 801a9ba:	e6d4      	b.n	801a766 <_strtod_l+0x43e>
 801a9bc:	f04f 32ff 	mov.w	r2, #4294967295
 801a9c0:	fa02 f303 	lsl.w	r3, r2, r3
 801a9c4:	ea03 0a0a 	and.w	sl, r3, sl
 801a9c8:	e7b0      	b.n	801a92c <_strtod_l+0x604>
 801a9ca:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801a9cc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801a9ce:	2d00      	cmp	r5, #0
 801a9d0:	bfab      	itete	ge
 801a9d2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801a9d4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801a9d6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801a9d8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801a9da:	bfac      	ite	ge
 801a9dc:	18ef      	addge	r7, r5, r3
 801a9de:	1b5e      	sublt	r6, r3, r5
 801a9e0:	9b08      	ldr	r3, [sp, #32]
 801a9e2:	1aed      	subs	r5, r5, r3
 801a9e4:	4415      	add	r5, r2
 801a9e6:	4b66      	ldr	r3, [pc, #408]	@ (801ab80 <_strtod_l+0x858>)
 801a9e8:	3d01      	subs	r5, #1
 801a9ea:	429d      	cmp	r5, r3
 801a9ec:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801a9f0:	da50      	bge.n	801aa94 <_strtod_l+0x76c>
 801a9f2:	1b5b      	subs	r3, r3, r5
 801a9f4:	2b1f      	cmp	r3, #31
 801a9f6:	eba2 0203 	sub.w	r2, r2, r3
 801a9fa:	f04f 0101 	mov.w	r1, #1
 801a9fe:	dc3d      	bgt.n	801aa7c <_strtod_l+0x754>
 801aa00:	fa01 f303 	lsl.w	r3, r1, r3
 801aa04:	9313      	str	r3, [sp, #76]	@ 0x4c
 801aa06:	2300      	movs	r3, #0
 801aa08:	9310      	str	r3, [sp, #64]	@ 0x40
 801aa0a:	18bd      	adds	r5, r7, r2
 801aa0c:	9b08      	ldr	r3, [sp, #32]
 801aa0e:	42af      	cmp	r7, r5
 801aa10:	4416      	add	r6, r2
 801aa12:	441e      	add	r6, r3
 801aa14:	463b      	mov	r3, r7
 801aa16:	bfa8      	it	ge
 801aa18:	462b      	movge	r3, r5
 801aa1a:	42b3      	cmp	r3, r6
 801aa1c:	bfa8      	it	ge
 801aa1e:	4633      	movge	r3, r6
 801aa20:	2b00      	cmp	r3, #0
 801aa22:	bfc2      	ittt	gt
 801aa24:	1aed      	subgt	r5, r5, r3
 801aa26:	1af6      	subgt	r6, r6, r3
 801aa28:	1aff      	subgt	r7, r7, r3
 801aa2a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801aa2c:	2b00      	cmp	r3, #0
 801aa2e:	dd16      	ble.n	801aa5e <_strtod_l+0x736>
 801aa30:	4641      	mov	r1, r8
 801aa32:	9805      	ldr	r0, [sp, #20]
 801aa34:	461a      	mov	r2, r3
 801aa36:	f001 fbb5 	bl	801c1a4 <__pow5mult>
 801aa3a:	4680      	mov	r8, r0
 801aa3c:	2800      	cmp	r0, #0
 801aa3e:	d0ba      	beq.n	801a9b6 <_strtod_l+0x68e>
 801aa40:	4601      	mov	r1, r0
 801aa42:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801aa44:	9805      	ldr	r0, [sp, #20]
 801aa46:	f001 fb03 	bl	801c050 <__multiply>
 801aa4a:	900e      	str	r0, [sp, #56]	@ 0x38
 801aa4c:	2800      	cmp	r0, #0
 801aa4e:	f43f ae8a 	beq.w	801a766 <_strtod_l+0x43e>
 801aa52:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801aa54:	9805      	ldr	r0, [sp, #20]
 801aa56:	f001 f9e7 	bl	801be28 <_Bfree>
 801aa5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801aa5c:	931a      	str	r3, [sp, #104]	@ 0x68
 801aa5e:	2d00      	cmp	r5, #0
 801aa60:	dc1d      	bgt.n	801aa9e <_strtod_l+0x776>
 801aa62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aa64:	2b00      	cmp	r3, #0
 801aa66:	dd23      	ble.n	801aab0 <_strtod_l+0x788>
 801aa68:	4649      	mov	r1, r9
 801aa6a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801aa6c:	9805      	ldr	r0, [sp, #20]
 801aa6e:	f001 fb99 	bl	801c1a4 <__pow5mult>
 801aa72:	4681      	mov	r9, r0
 801aa74:	b9e0      	cbnz	r0, 801aab0 <_strtod_l+0x788>
 801aa76:	f04f 0900 	mov.w	r9, #0
 801aa7a:	e674      	b.n	801a766 <_strtod_l+0x43e>
 801aa7c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801aa80:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801aa84:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801aa88:	35e2      	adds	r5, #226	@ 0xe2
 801aa8a:	fa01 f305 	lsl.w	r3, r1, r5
 801aa8e:	9310      	str	r3, [sp, #64]	@ 0x40
 801aa90:	9113      	str	r1, [sp, #76]	@ 0x4c
 801aa92:	e7ba      	b.n	801aa0a <_strtod_l+0x6e2>
 801aa94:	2300      	movs	r3, #0
 801aa96:	9310      	str	r3, [sp, #64]	@ 0x40
 801aa98:	2301      	movs	r3, #1
 801aa9a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801aa9c:	e7b5      	b.n	801aa0a <_strtod_l+0x6e2>
 801aa9e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801aaa0:	9805      	ldr	r0, [sp, #20]
 801aaa2:	462a      	mov	r2, r5
 801aaa4:	f001 fbd8 	bl	801c258 <__lshift>
 801aaa8:	901a      	str	r0, [sp, #104]	@ 0x68
 801aaaa:	2800      	cmp	r0, #0
 801aaac:	d1d9      	bne.n	801aa62 <_strtod_l+0x73a>
 801aaae:	e65a      	b.n	801a766 <_strtod_l+0x43e>
 801aab0:	2e00      	cmp	r6, #0
 801aab2:	dd07      	ble.n	801aac4 <_strtod_l+0x79c>
 801aab4:	4649      	mov	r1, r9
 801aab6:	9805      	ldr	r0, [sp, #20]
 801aab8:	4632      	mov	r2, r6
 801aaba:	f001 fbcd 	bl	801c258 <__lshift>
 801aabe:	4681      	mov	r9, r0
 801aac0:	2800      	cmp	r0, #0
 801aac2:	d0d8      	beq.n	801aa76 <_strtod_l+0x74e>
 801aac4:	2f00      	cmp	r7, #0
 801aac6:	dd08      	ble.n	801aada <_strtod_l+0x7b2>
 801aac8:	4641      	mov	r1, r8
 801aaca:	9805      	ldr	r0, [sp, #20]
 801aacc:	463a      	mov	r2, r7
 801aace:	f001 fbc3 	bl	801c258 <__lshift>
 801aad2:	4680      	mov	r8, r0
 801aad4:	2800      	cmp	r0, #0
 801aad6:	f43f ae46 	beq.w	801a766 <_strtod_l+0x43e>
 801aada:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801aadc:	9805      	ldr	r0, [sp, #20]
 801aade:	464a      	mov	r2, r9
 801aae0:	f001 fc42 	bl	801c368 <__mdiff>
 801aae4:	4604      	mov	r4, r0
 801aae6:	2800      	cmp	r0, #0
 801aae8:	f43f ae3d 	beq.w	801a766 <_strtod_l+0x43e>
 801aaec:	68c3      	ldr	r3, [r0, #12]
 801aaee:	930f      	str	r3, [sp, #60]	@ 0x3c
 801aaf0:	2300      	movs	r3, #0
 801aaf2:	60c3      	str	r3, [r0, #12]
 801aaf4:	4641      	mov	r1, r8
 801aaf6:	f001 fc1b 	bl	801c330 <__mcmp>
 801aafa:	2800      	cmp	r0, #0
 801aafc:	da46      	bge.n	801ab8c <_strtod_l+0x864>
 801aafe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ab00:	ea53 030a 	orrs.w	r3, r3, sl
 801ab04:	d16c      	bne.n	801abe0 <_strtod_l+0x8b8>
 801ab06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ab0a:	2b00      	cmp	r3, #0
 801ab0c:	d168      	bne.n	801abe0 <_strtod_l+0x8b8>
 801ab0e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801ab12:	0d1b      	lsrs	r3, r3, #20
 801ab14:	051b      	lsls	r3, r3, #20
 801ab16:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801ab1a:	d961      	bls.n	801abe0 <_strtod_l+0x8b8>
 801ab1c:	6963      	ldr	r3, [r4, #20]
 801ab1e:	b913      	cbnz	r3, 801ab26 <_strtod_l+0x7fe>
 801ab20:	6923      	ldr	r3, [r4, #16]
 801ab22:	2b01      	cmp	r3, #1
 801ab24:	dd5c      	ble.n	801abe0 <_strtod_l+0x8b8>
 801ab26:	4621      	mov	r1, r4
 801ab28:	2201      	movs	r2, #1
 801ab2a:	9805      	ldr	r0, [sp, #20]
 801ab2c:	f001 fb94 	bl	801c258 <__lshift>
 801ab30:	4641      	mov	r1, r8
 801ab32:	4604      	mov	r4, r0
 801ab34:	f001 fbfc 	bl	801c330 <__mcmp>
 801ab38:	2800      	cmp	r0, #0
 801ab3a:	dd51      	ble.n	801abe0 <_strtod_l+0x8b8>
 801ab3c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801ab40:	9a08      	ldr	r2, [sp, #32]
 801ab42:	0d1b      	lsrs	r3, r3, #20
 801ab44:	051b      	lsls	r3, r3, #20
 801ab46:	2a00      	cmp	r2, #0
 801ab48:	d06b      	beq.n	801ac22 <_strtod_l+0x8fa>
 801ab4a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801ab4e:	d868      	bhi.n	801ac22 <_strtod_l+0x8fa>
 801ab50:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801ab54:	f67f ae9d 	bls.w	801a892 <_strtod_l+0x56a>
 801ab58:	4b0a      	ldr	r3, [pc, #40]	@ (801ab84 <_strtod_l+0x85c>)
 801ab5a:	4650      	mov	r0, sl
 801ab5c:	4659      	mov	r1, fp
 801ab5e:	2200      	movs	r2, #0
 801ab60:	f7e5 fd4a 	bl	80005f8 <__aeabi_dmul>
 801ab64:	4b08      	ldr	r3, [pc, #32]	@ (801ab88 <_strtod_l+0x860>)
 801ab66:	400b      	ands	r3, r1
 801ab68:	4682      	mov	sl, r0
 801ab6a:	468b      	mov	fp, r1
 801ab6c:	2b00      	cmp	r3, #0
 801ab6e:	f47f ae05 	bne.w	801a77c <_strtod_l+0x454>
 801ab72:	9a05      	ldr	r2, [sp, #20]
 801ab74:	2322      	movs	r3, #34	@ 0x22
 801ab76:	6013      	str	r3, [r2, #0]
 801ab78:	e600      	b.n	801a77c <_strtod_l+0x454>
 801ab7a:	bf00      	nop
 801ab7c:	0801f750 	.word	0x0801f750
 801ab80:	fffffc02 	.word	0xfffffc02
 801ab84:	39500000 	.word	0x39500000
 801ab88:	7ff00000 	.word	0x7ff00000
 801ab8c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801ab90:	d165      	bne.n	801ac5e <_strtod_l+0x936>
 801ab92:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ab94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ab98:	b35a      	cbz	r2, 801abf2 <_strtod_l+0x8ca>
 801ab9a:	4a9f      	ldr	r2, [pc, #636]	@ (801ae18 <_strtod_l+0xaf0>)
 801ab9c:	4293      	cmp	r3, r2
 801ab9e:	d12b      	bne.n	801abf8 <_strtod_l+0x8d0>
 801aba0:	9b08      	ldr	r3, [sp, #32]
 801aba2:	4651      	mov	r1, sl
 801aba4:	b303      	cbz	r3, 801abe8 <_strtod_l+0x8c0>
 801aba6:	4b9d      	ldr	r3, [pc, #628]	@ (801ae1c <_strtod_l+0xaf4>)
 801aba8:	465a      	mov	r2, fp
 801abaa:	4013      	ands	r3, r2
 801abac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 801abb0:	f04f 32ff 	mov.w	r2, #4294967295
 801abb4:	d81b      	bhi.n	801abee <_strtod_l+0x8c6>
 801abb6:	0d1b      	lsrs	r3, r3, #20
 801abb8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801abbc:	fa02 f303 	lsl.w	r3, r2, r3
 801abc0:	4299      	cmp	r1, r3
 801abc2:	d119      	bne.n	801abf8 <_strtod_l+0x8d0>
 801abc4:	4b96      	ldr	r3, [pc, #600]	@ (801ae20 <_strtod_l+0xaf8>)
 801abc6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801abc8:	429a      	cmp	r2, r3
 801abca:	d102      	bne.n	801abd2 <_strtod_l+0x8aa>
 801abcc:	3101      	adds	r1, #1
 801abce:	f43f adca 	beq.w	801a766 <_strtod_l+0x43e>
 801abd2:	4b92      	ldr	r3, [pc, #584]	@ (801ae1c <_strtod_l+0xaf4>)
 801abd4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801abd6:	401a      	ands	r2, r3
 801abd8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801abdc:	f04f 0a00 	mov.w	sl, #0
 801abe0:	9b08      	ldr	r3, [sp, #32]
 801abe2:	2b00      	cmp	r3, #0
 801abe4:	d1b8      	bne.n	801ab58 <_strtod_l+0x830>
 801abe6:	e5c9      	b.n	801a77c <_strtod_l+0x454>
 801abe8:	f04f 33ff 	mov.w	r3, #4294967295
 801abec:	e7e8      	b.n	801abc0 <_strtod_l+0x898>
 801abee:	4613      	mov	r3, r2
 801abf0:	e7e6      	b.n	801abc0 <_strtod_l+0x898>
 801abf2:	ea53 030a 	orrs.w	r3, r3, sl
 801abf6:	d0a1      	beq.n	801ab3c <_strtod_l+0x814>
 801abf8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801abfa:	b1db      	cbz	r3, 801ac34 <_strtod_l+0x90c>
 801abfc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801abfe:	4213      	tst	r3, r2
 801ac00:	d0ee      	beq.n	801abe0 <_strtod_l+0x8b8>
 801ac02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ac04:	9a08      	ldr	r2, [sp, #32]
 801ac06:	4650      	mov	r0, sl
 801ac08:	4659      	mov	r1, fp
 801ac0a:	b1bb      	cbz	r3, 801ac3c <_strtod_l+0x914>
 801ac0c:	f7ff fb6d 	bl	801a2ea <sulp>
 801ac10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ac14:	ec53 2b10 	vmov	r2, r3, d0
 801ac18:	f7e5 fb38 	bl	800028c <__adddf3>
 801ac1c:	4682      	mov	sl, r0
 801ac1e:	468b      	mov	fp, r1
 801ac20:	e7de      	b.n	801abe0 <_strtod_l+0x8b8>
 801ac22:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801ac26:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801ac2a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801ac2e:	f04f 3aff 	mov.w	sl, #4294967295
 801ac32:	e7d5      	b.n	801abe0 <_strtod_l+0x8b8>
 801ac34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ac36:	ea13 0f0a 	tst.w	r3, sl
 801ac3a:	e7e1      	b.n	801ac00 <_strtod_l+0x8d8>
 801ac3c:	f7ff fb55 	bl	801a2ea <sulp>
 801ac40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ac44:	ec53 2b10 	vmov	r2, r3, d0
 801ac48:	f7e5 fb1e 	bl	8000288 <__aeabi_dsub>
 801ac4c:	2200      	movs	r2, #0
 801ac4e:	2300      	movs	r3, #0
 801ac50:	4682      	mov	sl, r0
 801ac52:	468b      	mov	fp, r1
 801ac54:	f7e5 ff38 	bl	8000ac8 <__aeabi_dcmpeq>
 801ac58:	2800      	cmp	r0, #0
 801ac5a:	d0c1      	beq.n	801abe0 <_strtod_l+0x8b8>
 801ac5c:	e619      	b.n	801a892 <_strtod_l+0x56a>
 801ac5e:	4641      	mov	r1, r8
 801ac60:	4620      	mov	r0, r4
 801ac62:	f001 fcdd 	bl	801c620 <__ratio>
 801ac66:	ec57 6b10 	vmov	r6, r7, d0
 801ac6a:	2200      	movs	r2, #0
 801ac6c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801ac70:	4630      	mov	r0, r6
 801ac72:	4639      	mov	r1, r7
 801ac74:	f7e5 ff3c 	bl	8000af0 <__aeabi_dcmple>
 801ac78:	2800      	cmp	r0, #0
 801ac7a:	d06f      	beq.n	801ad5c <_strtod_l+0xa34>
 801ac7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ac7e:	2b00      	cmp	r3, #0
 801ac80:	d17a      	bne.n	801ad78 <_strtod_l+0xa50>
 801ac82:	f1ba 0f00 	cmp.w	sl, #0
 801ac86:	d158      	bne.n	801ad3a <_strtod_l+0xa12>
 801ac88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ac8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	d15a      	bne.n	801ad48 <_strtod_l+0xa20>
 801ac92:	4b64      	ldr	r3, [pc, #400]	@ (801ae24 <_strtod_l+0xafc>)
 801ac94:	2200      	movs	r2, #0
 801ac96:	4630      	mov	r0, r6
 801ac98:	4639      	mov	r1, r7
 801ac9a:	f7e5 ff1f 	bl	8000adc <__aeabi_dcmplt>
 801ac9e:	2800      	cmp	r0, #0
 801aca0:	d159      	bne.n	801ad56 <_strtod_l+0xa2e>
 801aca2:	4630      	mov	r0, r6
 801aca4:	4639      	mov	r1, r7
 801aca6:	4b60      	ldr	r3, [pc, #384]	@ (801ae28 <_strtod_l+0xb00>)
 801aca8:	2200      	movs	r2, #0
 801acaa:	f7e5 fca5 	bl	80005f8 <__aeabi_dmul>
 801acae:	4606      	mov	r6, r0
 801acb0:	460f      	mov	r7, r1
 801acb2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801acb6:	9606      	str	r6, [sp, #24]
 801acb8:	9307      	str	r3, [sp, #28]
 801acba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801acbe:	4d57      	ldr	r5, [pc, #348]	@ (801ae1c <_strtod_l+0xaf4>)
 801acc0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801acc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801acc6:	401d      	ands	r5, r3
 801acc8:	4b58      	ldr	r3, [pc, #352]	@ (801ae2c <_strtod_l+0xb04>)
 801acca:	429d      	cmp	r5, r3
 801accc:	f040 80b2 	bne.w	801ae34 <_strtod_l+0xb0c>
 801acd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801acd2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801acd6:	ec4b ab10 	vmov	d0, sl, fp
 801acda:	f001 fbd9 	bl	801c490 <__ulp>
 801acde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ace2:	ec51 0b10 	vmov	r0, r1, d0
 801ace6:	f7e5 fc87 	bl	80005f8 <__aeabi_dmul>
 801acea:	4652      	mov	r2, sl
 801acec:	465b      	mov	r3, fp
 801acee:	f7e5 facd 	bl	800028c <__adddf3>
 801acf2:	460b      	mov	r3, r1
 801acf4:	4949      	ldr	r1, [pc, #292]	@ (801ae1c <_strtod_l+0xaf4>)
 801acf6:	4a4e      	ldr	r2, [pc, #312]	@ (801ae30 <_strtod_l+0xb08>)
 801acf8:	4019      	ands	r1, r3
 801acfa:	4291      	cmp	r1, r2
 801acfc:	4682      	mov	sl, r0
 801acfe:	d942      	bls.n	801ad86 <_strtod_l+0xa5e>
 801ad00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ad02:	4b47      	ldr	r3, [pc, #284]	@ (801ae20 <_strtod_l+0xaf8>)
 801ad04:	429a      	cmp	r2, r3
 801ad06:	d103      	bne.n	801ad10 <_strtod_l+0x9e8>
 801ad08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ad0a:	3301      	adds	r3, #1
 801ad0c:	f43f ad2b 	beq.w	801a766 <_strtod_l+0x43e>
 801ad10:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 801ae20 <_strtod_l+0xaf8>
 801ad14:	f04f 3aff 	mov.w	sl, #4294967295
 801ad18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801ad1a:	9805      	ldr	r0, [sp, #20]
 801ad1c:	f001 f884 	bl	801be28 <_Bfree>
 801ad20:	9805      	ldr	r0, [sp, #20]
 801ad22:	4649      	mov	r1, r9
 801ad24:	f001 f880 	bl	801be28 <_Bfree>
 801ad28:	9805      	ldr	r0, [sp, #20]
 801ad2a:	4641      	mov	r1, r8
 801ad2c:	f001 f87c 	bl	801be28 <_Bfree>
 801ad30:	9805      	ldr	r0, [sp, #20]
 801ad32:	4621      	mov	r1, r4
 801ad34:	f001 f878 	bl	801be28 <_Bfree>
 801ad38:	e618      	b.n	801a96c <_strtod_l+0x644>
 801ad3a:	f1ba 0f01 	cmp.w	sl, #1
 801ad3e:	d103      	bne.n	801ad48 <_strtod_l+0xa20>
 801ad40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ad42:	2b00      	cmp	r3, #0
 801ad44:	f43f ada5 	beq.w	801a892 <_strtod_l+0x56a>
 801ad48:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 801adf8 <_strtod_l+0xad0>
 801ad4c:	4f35      	ldr	r7, [pc, #212]	@ (801ae24 <_strtod_l+0xafc>)
 801ad4e:	ed8d 7b06 	vstr	d7, [sp, #24]
 801ad52:	2600      	movs	r6, #0
 801ad54:	e7b1      	b.n	801acba <_strtod_l+0x992>
 801ad56:	4f34      	ldr	r7, [pc, #208]	@ (801ae28 <_strtod_l+0xb00>)
 801ad58:	2600      	movs	r6, #0
 801ad5a:	e7aa      	b.n	801acb2 <_strtod_l+0x98a>
 801ad5c:	4b32      	ldr	r3, [pc, #200]	@ (801ae28 <_strtod_l+0xb00>)
 801ad5e:	4630      	mov	r0, r6
 801ad60:	4639      	mov	r1, r7
 801ad62:	2200      	movs	r2, #0
 801ad64:	f7e5 fc48 	bl	80005f8 <__aeabi_dmul>
 801ad68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ad6a:	4606      	mov	r6, r0
 801ad6c:	460f      	mov	r7, r1
 801ad6e:	2b00      	cmp	r3, #0
 801ad70:	d09f      	beq.n	801acb2 <_strtod_l+0x98a>
 801ad72:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801ad76:	e7a0      	b.n	801acba <_strtod_l+0x992>
 801ad78:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801ae00 <_strtod_l+0xad8>
 801ad7c:	ed8d 7b06 	vstr	d7, [sp, #24]
 801ad80:	ec57 6b17 	vmov	r6, r7, d7
 801ad84:	e799      	b.n	801acba <_strtod_l+0x992>
 801ad86:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801ad8a:	9b08      	ldr	r3, [sp, #32]
 801ad8c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801ad90:	2b00      	cmp	r3, #0
 801ad92:	d1c1      	bne.n	801ad18 <_strtod_l+0x9f0>
 801ad94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801ad98:	0d1b      	lsrs	r3, r3, #20
 801ad9a:	051b      	lsls	r3, r3, #20
 801ad9c:	429d      	cmp	r5, r3
 801ad9e:	d1bb      	bne.n	801ad18 <_strtod_l+0x9f0>
 801ada0:	4630      	mov	r0, r6
 801ada2:	4639      	mov	r1, r7
 801ada4:	f7e5 ff72 	bl	8000c8c <__aeabi_d2lz>
 801ada8:	f7e5 fbf8 	bl	800059c <__aeabi_l2d>
 801adac:	4602      	mov	r2, r0
 801adae:	460b      	mov	r3, r1
 801adb0:	4630      	mov	r0, r6
 801adb2:	4639      	mov	r1, r7
 801adb4:	f7e5 fa68 	bl	8000288 <__aeabi_dsub>
 801adb8:	460b      	mov	r3, r1
 801adba:	4602      	mov	r2, r0
 801adbc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801adc0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801adc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801adc6:	ea46 060a 	orr.w	r6, r6, sl
 801adca:	431e      	orrs	r6, r3
 801adcc:	d06f      	beq.n	801aeae <_strtod_l+0xb86>
 801adce:	a30e      	add	r3, pc, #56	@ (adr r3, 801ae08 <_strtod_l+0xae0>)
 801add0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801add4:	f7e5 fe82 	bl	8000adc <__aeabi_dcmplt>
 801add8:	2800      	cmp	r0, #0
 801adda:	f47f accf 	bne.w	801a77c <_strtod_l+0x454>
 801adde:	a30c      	add	r3, pc, #48	@ (adr r3, 801ae10 <_strtod_l+0xae8>)
 801ade0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ade4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ade8:	f7e5 fe96 	bl	8000b18 <__aeabi_dcmpgt>
 801adec:	2800      	cmp	r0, #0
 801adee:	d093      	beq.n	801ad18 <_strtod_l+0x9f0>
 801adf0:	e4c4      	b.n	801a77c <_strtod_l+0x454>
 801adf2:	bf00      	nop
 801adf4:	f3af 8000 	nop.w
 801adf8:	00000000 	.word	0x00000000
 801adfc:	bff00000 	.word	0xbff00000
 801ae00:	00000000 	.word	0x00000000
 801ae04:	3ff00000 	.word	0x3ff00000
 801ae08:	94a03595 	.word	0x94a03595
 801ae0c:	3fdfffff 	.word	0x3fdfffff
 801ae10:	35afe535 	.word	0x35afe535
 801ae14:	3fe00000 	.word	0x3fe00000
 801ae18:	000fffff 	.word	0x000fffff
 801ae1c:	7ff00000 	.word	0x7ff00000
 801ae20:	7fefffff 	.word	0x7fefffff
 801ae24:	3ff00000 	.word	0x3ff00000
 801ae28:	3fe00000 	.word	0x3fe00000
 801ae2c:	7fe00000 	.word	0x7fe00000
 801ae30:	7c9fffff 	.word	0x7c9fffff
 801ae34:	9b08      	ldr	r3, [sp, #32]
 801ae36:	b323      	cbz	r3, 801ae82 <_strtod_l+0xb5a>
 801ae38:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801ae3c:	d821      	bhi.n	801ae82 <_strtod_l+0xb5a>
 801ae3e:	a328      	add	r3, pc, #160	@ (adr r3, 801aee0 <_strtod_l+0xbb8>)
 801ae40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae44:	4630      	mov	r0, r6
 801ae46:	4639      	mov	r1, r7
 801ae48:	f7e5 fe52 	bl	8000af0 <__aeabi_dcmple>
 801ae4c:	b1a0      	cbz	r0, 801ae78 <_strtod_l+0xb50>
 801ae4e:	4639      	mov	r1, r7
 801ae50:	4630      	mov	r0, r6
 801ae52:	f7e5 fe93 	bl	8000b7c <__aeabi_d2uiz>
 801ae56:	2801      	cmp	r0, #1
 801ae58:	bf38      	it	cc
 801ae5a:	2001      	movcc	r0, #1
 801ae5c:	f7e5 fb52 	bl	8000504 <__aeabi_ui2d>
 801ae60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ae62:	4606      	mov	r6, r0
 801ae64:	460f      	mov	r7, r1
 801ae66:	b9fb      	cbnz	r3, 801aea8 <_strtod_l+0xb80>
 801ae68:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801ae6c:	9014      	str	r0, [sp, #80]	@ 0x50
 801ae6e:	9315      	str	r3, [sp, #84]	@ 0x54
 801ae70:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801ae74:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801ae78:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ae7a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801ae7e:	1b5b      	subs	r3, r3, r5
 801ae80:	9311      	str	r3, [sp, #68]	@ 0x44
 801ae82:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801ae86:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801ae8a:	f001 fb01 	bl	801c490 <__ulp>
 801ae8e:	4650      	mov	r0, sl
 801ae90:	ec53 2b10 	vmov	r2, r3, d0
 801ae94:	4659      	mov	r1, fp
 801ae96:	f7e5 fbaf 	bl	80005f8 <__aeabi_dmul>
 801ae9a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801ae9e:	f7e5 f9f5 	bl	800028c <__adddf3>
 801aea2:	4682      	mov	sl, r0
 801aea4:	468b      	mov	fp, r1
 801aea6:	e770      	b.n	801ad8a <_strtod_l+0xa62>
 801aea8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801aeac:	e7e0      	b.n	801ae70 <_strtod_l+0xb48>
 801aeae:	a30e      	add	r3, pc, #56	@ (adr r3, 801aee8 <_strtod_l+0xbc0>)
 801aeb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aeb4:	f7e5 fe12 	bl	8000adc <__aeabi_dcmplt>
 801aeb8:	e798      	b.n	801adec <_strtod_l+0xac4>
 801aeba:	2300      	movs	r3, #0
 801aebc:	930b      	str	r3, [sp, #44]	@ 0x2c
 801aebe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801aec0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801aec2:	6013      	str	r3, [r2, #0]
 801aec4:	f7ff ba6d 	b.w	801a3a2 <_strtod_l+0x7a>
 801aec8:	2a65      	cmp	r2, #101	@ 0x65
 801aeca:	f43f ab66 	beq.w	801a59a <_strtod_l+0x272>
 801aece:	2a45      	cmp	r2, #69	@ 0x45
 801aed0:	f43f ab63 	beq.w	801a59a <_strtod_l+0x272>
 801aed4:	2301      	movs	r3, #1
 801aed6:	f7ff bb9e 	b.w	801a616 <_strtod_l+0x2ee>
 801aeda:	bf00      	nop
 801aedc:	f3af 8000 	nop.w
 801aee0:	ffc00000 	.word	0xffc00000
 801aee4:	41dfffff 	.word	0x41dfffff
 801aee8:	94a03595 	.word	0x94a03595
 801aeec:	3fcfffff 	.word	0x3fcfffff

0801aef0 <strtod>:
 801aef0:	460a      	mov	r2, r1
 801aef2:	4601      	mov	r1, r0
 801aef4:	4802      	ldr	r0, [pc, #8]	@ (801af00 <strtod+0x10>)
 801aef6:	4b03      	ldr	r3, [pc, #12]	@ (801af04 <strtod+0x14>)
 801aef8:	6800      	ldr	r0, [r0, #0]
 801aefa:	f7ff ba15 	b.w	801a328 <_strtod_l>
 801aefe:	bf00      	nop
 801af00:	20000288 	.word	0x20000288
 801af04:	2000011c 	.word	0x2000011c

0801af08 <_strtol_l.constprop.0>:
 801af08:	2b24      	cmp	r3, #36	@ 0x24
 801af0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801af0e:	4686      	mov	lr, r0
 801af10:	4690      	mov	r8, r2
 801af12:	d801      	bhi.n	801af18 <_strtol_l.constprop.0+0x10>
 801af14:	2b01      	cmp	r3, #1
 801af16:	d106      	bne.n	801af26 <_strtol_l.constprop.0+0x1e>
 801af18:	f000 fab6 	bl	801b488 <__errno>
 801af1c:	2316      	movs	r3, #22
 801af1e:	6003      	str	r3, [r0, #0]
 801af20:	2000      	movs	r0, #0
 801af22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801af26:	4834      	ldr	r0, [pc, #208]	@ (801aff8 <_strtol_l.constprop.0+0xf0>)
 801af28:	460d      	mov	r5, r1
 801af2a:	462a      	mov	r2, r5
 801af2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801af30:	5d06      	ldrb	r6, [r0, r4]
 801af32:	f016 0608 	ands.w	r6, r6, #8
 801af36:	d1f8      	bne.n	801af2a <_strtol_l.constprop.0+0x22>
 801af38:	2c2d      	cmp	r4, #45	@ 0x2d
 801af3a:	d12d      	bne.n	801af98 <_strtol_l.constprop.0+0x90>
 801af3c:	782c      	ldrb	r4, [r5, #0]
 801af3e:	2601      	movs	r6, #1
 801af40:	1c95      	adds	r5, r2, #2
 801af42:	f033 0210 	bics.w	r2, r3, #16
 801af46:	d109      	bne.n	801af5c <_strtol_l.constprop.0+0x54>
 801af48:	2c30      	cmp	r4, #48	@ 0x30
 801af4a:	d12a      	bne.n	801afa2 <_strtol_l.constprop.0+0x9a>
 801af4c:	782a      	ldrb	r2, [r5, #0]
 801af4e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801af52:	2a58      	cmp	r2, #88	@ 0x58
 801af54:	d125      	bne.n	801afa2 <_strtol_l.constprop.0+0x9a>
 801af56:	786c      	ldrb	r4, [r5, #1]
 801af58:	2310      	movs	r3, #16
 801af5a:	3502      	adds	r5, #2
 801af5c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801af60:	f10c 3cff 	add.w	ip, ip, #4294967295
 801af64:	2200      	movs	r2, #0
 801af66:	fbbc f9f3 	udiv	r9, ip, r3
 801af6a:	4610      	mov	r0, r2
 801af6c:	fb03 ca19 	mls	sl, r3, r9, ip
 801af70:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801af74:	2f09      	cmp	r7, #9
 801af76:	d81b      	bhi.n	801afb0 <_strtol_l.constprop.0+0xa8>
 801af78:	463c      	mov	r4, r7
 801af7a:	42a3      	cmp	r3, r4
 801af7c:	dd27      	ble.n	801afce <_strtol_l.constprop.0+0xc6>
 801af7e:	1c57      	adds	r7, r2, #1
 801af80:	d007      	beq.n	801af92 <_strtol_l.constprop.0+0x8a>
 801af82:	4581      	cmp	r9, r0
 801af84:	d320      	bcc.n	801afc8 <_strtol_l.constprop.0+0xc0>
 801af86:	d101      	bne.n	801af8c <_strtol_l.constprop.0+0x84>
 801af88:	45a2      	cmp	sl, r4
 801af8a:	db1d      	blt.n	801afc8 <_strtol_l.constprop.0+0xc0>
 801af8c:	fb00 4003 	mla	r0, r0, r3, r4
 801af90:	2201      	movs	r2, #1
 801af92:	f815 4b01 	ldrb.w	r4, [r5], #1
 801af96:	e7eb      	b.n	801af70 <_strtol_l.constprop.0+0x68>
 801af98:	2c2b      	cmp	r4, #43	@ 0x2b
 801af9a:	bf04      	itt	eq
 801af9c:	782c      	ldrbeq	r4, [r5, #0]
 801af9e:	1c95      	addeq	r5, r2, #2
 801afa0:	e7cf      	b.n	801af42 <_strtol_l.constprop.0+0x3a>
 801afa2:	2b00      	cmp	r3, #0
 801afa4:	d1da      	bne.n	801af5c <_strtol_l.constprop.0+0x54>
 801afa6:	2c30      	cmp	r4, #48	@ 0x30
 801afa8:	bf0c      	ite	eq
 801afaa:	2308      	moveq	r3, #8
 801afac:	230a      	movne	r3, #10
 801afae:	e7d5      	b.n	801af5c <_strtol_l.constprop.0+0x54>
 801afb0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801afb4:	2f19      	cmp	r7, #25
 801afb6:	d801      	bhi.n	801afbc <_strtol_l.constprop.0+0xb4>
 801afb8:	3c37      	subs	r4, #55	@ 0x37
 801afba:	e7de      	b.n	801af7a <_strtol_l.constprop.0+0x72>
 801afbc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801afc0:	2f19      	cmp	r7, #25
 801afc2:	d804      	bhi.n	801afce <_strtol_l.constprop.0+0xc6>
 801afc4:	3c57      	subs	r4, #87	@ 0x57
 801afc6:	e7d8      	b.n	801af7a <_strtol_l.constprop.0+0x72>
 801afc8:	f04f 32ff 	mov.w	r2, #4294967295
 801afcc:	e7e1      	b.n	801af92 <_strtol_l.constprop.0+0x8a>
 801afce:	1c53      	adds	r3, r2, #1
 801afd0:	d108      	bne.n	801afe4 <_strtol_l.constprop.0+0xdc>
 801afd2:	2322      	movs	r3, #34	@ 0x22
 801afd4:	f8ce 3000 	str.w	r3, [lr]
 801afd8:	4660      	mov	r0, ip
 801afda:	f1b8 0f00 	cmp.w	r8, #0
 801afde:	d0a0      	beq.n	801af22 <_strtol_l.constprop.0+0x1a>
 801afe0:	1e69      	subs	r1, r5, #1
 801afe2:	e006      	b.n	801aff2 <_strtol_l.constprop.0+0xea>
 801afe4:	b106      	cbz	r6, 801afe8 <_strtol_l.constprop.0+0xe0>
 801afe6:	4240      	negs	r0, r0
 801afe8:	f1b8 0f00 	cmp.w	r8, #0
 801afec:	d099      	beq.n	801af22 <_strtol_l.constprop.0+0x1a>
 801afee:	2a00      	cmp	r2, #0
 801aff0:	d1f6      	bne.n	801afe0 <_strtol_l.constprop.0+0xd8>
 801aff2:	f8c8 1000 	str.w	r1, [r8]
 801aff6:	e794      	b.n	801af22 <_strtol_l.constprop.0+0x1a>
 801aff8:	0801f779 	.word	0x0801f779

0801affc <strtol>:
 801affc:	4613      	mov	r3, r2
 801affe:	460a      	mov	r2, r1
 801b000:	4601      	mov	r1, r0
 801b002:	4802      	ldr	r0, [pc, #8]	@ (801b00c <strtol+0x10>)
 801b004:	6800      	ldr	r0, [r0, #0]
 801b006:	f7ff bf7f 	b.w	801af08 <_strtol_l.constprop.0>
 801b00a:	bf00      	nop
 801b00c:	20000288 	.word	0x20000288

0801b010 <std>:
 801b010:	2300      	movs	r3, #0
 801b012:	b510      	push	{r4, lr}
 801b014:	4604      	mov	r4, r0
 801b016:	e9c0 3300 	strd	r3, r3, [r0]
 801b01a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b01e:	6083      	str	r3, [r0, #8]
 801b020:	8181      	strh	r1, [r0, #12]
 801b022:	6643      	str	r3, [r0, #100]	@ 0x64
 801b024:	81c2      	strh	r2, [r0, #14]
 801b026:	6183      	str	r3, [r0, #24]
 801b028:	4619      	mov	r1, r3
 801b02a:	2208      	movs	r2, #8
 801b02c:	305c      	adds	r0, #92	@ 0x5c
 801b02e:	f000 f961 	bl	801b2f4 <memset>
 801b032:	4b0d      	ldr	r3, [pc, #52]	@ (801b068 <std+0x58>)
 801b034:	6263      	str	r3, [r4, #36]	@ 0x24
 801b036:	4b0d      	ldr	r3, [pc, #52]	@ (801b06c <std+0x5c>)
 801b038:	62a3      	str	r3, [r4, #40]	@ 0x28
 801b03a:	4b0d      	ldr	r3, [pc, #52]	@ (801b070 <std+0x60>)
 801b03c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801b03e:	4b0d      	ldr	r3, [pc, #52]	@ (801b074 <std+0x64>)
 801b040:	6323      	str	r3, [r4, #48]	@ 0x30
 801b042:	4b0d      	ldr	r3, [pc, #52]	@ (801b078 <std+0x68>)
 801b044:	6224      	str	r4, [r4, #32]
 801b046:	429c      	cmp	r4, r3
 801b048:	d006      	beq.n	801b058 <std+0x48>
 801b04a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801b04e:	4294      	cmp	r4, r2
 801b050:	d002      	beq.n	801b058 <std+0x48>
 801b052:	33d0      	adds	r3, #208	@ 0xd0
 801b054:	429c      	cmp	r4, r3
 801b056:	d105      	bne.n	801b064 <std+0x54>
 801b058:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801b05c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b060:	f000 ba3c 	b.w	801b4dc <__retarget_lock_init_recursive>
 801b064:	bd10      	pop	{r4, pc}
 801b066:	bf00      	nop
 801b068:	0801b1fd 	.word	0x0801b1fd
 801b06c:	0801b21f 	.word	0x0801b21f
 801b070:	0801b257 	.word	0x0801b257
 801b074:	0801b27b 	.word	0x0801b27b
 801b078:	20008f60 	.word	0x20008f60

0801b07c <stdio_exit_handler>:
 801b07c:	4a02      	ldr	r2, [pc, #8]	@ (801b088 <stdio_exit_handler+0xc>)
 801b07e:	4903      	ldr	r1, [pc, #12]	@ (801b08c <stdio_exit_handler+0x10>)
 801b080:	4803      	ldr	r0, [pc, #12]	@ (801b090 <stdio_exit_handler+0x14>)
 801b082:	f000 b869 	b.w	801b158 <_fwalk_sglue>
 801b086:	bf00      	nop
 801b088:	20000110 	.word	0x20000110
 801b08c:	0801cdf9 	.word	0x0801cdf9
 801b090:	2000028c 	.word	0x2000028c

0801b094 <cleanup_stdio>:
 801b094:	6841      	ldr	r1, [r0, #4]
 801b096:	4b0c      	ldr	r3, [pc, #48]	@ (801b0c8 <cleanup_stdio+0x34>)
 801b098:	4299      	cmp	r1, r3
 801b09a:	b510      	push	{r4, lr}
 801b09c:	4604      	mov	r4, r0
 801b09e:	d001      	beq.n	801b0a4 <cleanup_stdio+0x10>
 801b0a0:	f001 feaa 	bl	801cdf8 <_fflush_r>
 801b0a4:	68a1      	ldr	r1, [r4, #8]
 801b0a6:	4b09      	ldr	r3, [pc, #36]	@ (801b0cc <cleanup_stdio+0x38>)
 801b0a8:	4299      	cmp	r1, r3
 801b0aa:	d002      	beq.n	801b0b2 <cleanup_stdio+0x1e>
 801b0ac:	4620      	mov	r0, r4
 801b0ae:	f001 fea3 	bl	801cdf8 <_fflush_r>
 801b0b2:	68e1      	ldr	r1, [r4, #12]
 801b0b4:	4b06      	ldr	r3, [pc, #24]	@ (801b0d0 <cleanup_stdio+0x3c>)
 801b0b6:	4299      	cmp	r1, r3
 801b0b8:	d004      	beq.n	801b0c4 <cleanup_stdio+0x30>
 801b0ba:	4620      	mov	r0, r4
 801b0bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b0c0:	f001 be9a 	b.w	801cdf8 <_fflush_r>
 801b0c4:	bd10      	pop	{r4, pc}
 801b0c6:	bf00      	nop
 801b0c8:	20008f60 	.word	0x20008f60
 801b0cc:	20008fc8 	.word	0x20008fc8
 801b0d0:	20009030 	.word	0x20009030

0801b0d4 <global_stdio_init.part.0>:
 801b0d4:	b510      	push	{r4, lr}
 801b0d6:	4b0b      	ldr	r3, [pc, #44]	@ (801b104 <global_stdio_init.part.0+0x30>)
 801b0d8:	4c0b      	ldr	r4, [pc, #44]	@ (801b108 <global_stdio_init.part.0+0x34>)
 801b0da:	4a0c      	ldr	r2, [pc, #48]	@ (801b10c <global_stdio_init.part.0+0x38>)
 801b0dc:	601a      	str	r2, [r3, #0]
 801b0de:	4620      	mov	r0, r4
 801b0e0:	2200      	movs	r2, #0
 801b0e2:	2104      	movs	r1, #4
 801b0e4:	f7ff ff94 	bl	801b010 <std>
 801b0e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801b0ec:	2201      	movs	r2, #1
 801b0ee:	2109      	movs	r1, #9
 801b0f0:	f7ff ff8e 	bl	801b010 <std>
 801b0f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801b0f8:	2202      	movs	r2, #2
 801b0fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b0fe:	2112      	movs	r1, #18
 801b100:	f7ff bf86 	b.w	801b010 <std>
 801b104:	20009098 	.word	0x20009098
 801b108:	20008f60 	.word	0x20008f60
 801b10c:	0801b07d 	.word	0x0801b07d

0801b110 <__sfp_lock_acquire>:
 801b110:	4801      	ldr	r0, [pc, #4]	@ (801b118 <__sfp_lock_acquire+0x8>)
 801b112:	f000 b9e4 	b.w	801b4de <__retarget_lock_acquire_recursive>
 801b116:	bf00      	nop
 801b118:	200090a1 	.word	0x200090a1

0801b11c <__sfp_lock_release>:
 801b11c:	4801      	ldr	r0, [pc, #4]	@ (801b124 <__sfp_lock_release+0x8>)
 801b11e:	f000 b9df 	b.w	801b4e0 <__retarget_lock_release_recursive>
 801b122:	bf00      	nop
 801b124:	200090a1 	.word	0x200090a1

0801b128 <__sinit>:
 801b128:	b510      	push	{r4, lr}
 801b12a:	4604      	mov	r4, r0
 801b12c:	f7ff fff0 	bl	801b110 <__sfp_lock_acquire>
 801b130:	6a23      	ldr	r3, [r4, #32]
 801b132:	b11b      	cbz	r3, 801b13c <__sinit+0x14>
 801b134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b138:	f7ff bff0 	b.w	801b11c <__sfp_lock_release>
 801b13c:	4b04      	ldr	r3, [pc, #16]	@ (801b150 <__sinit+0x28>)
 801b13e:	6223      	str	r3, [r4, #32]
 801b140:	4b04      	ldr	r3, [pc, #16]	@ (801b154 <__sinit+0x2c>)
 801b142:	681b      	ldr	r3, [r3, #0]
 801b144:	2b00      	cmp	r3, #0
 801b146:	d1f5      	bne.n	801b134 <__sinit+0xc>
 801b148:	f7ff ffc4 	bl	801b0d4 <global_stdio_init.part.0>
 801b14c:	e7f2      	b.n	801b134 <__sinit+0xc>
 801b14e:	bf00      	nop
 801b150:	0801b095 	.word	0x0801b095
 801b154:	20009098 	.word	0x20009098

0801b158 <_fwalk_sglue>:
 801b158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b15c:	4607      	mov	r7, r0
 801b15e:	4688      	mov	r8, r1
 801b160:	4614      	mov	r4, r2
 801b162:	2600      	movs	r6, #0
 801b164:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b168:	f1b9 0901 	subs.w	r9, r9, #1
 801b16c:	d505      	bpl.n	801b17a <_fwalk_sglue+0x22>
 801b16e:	6824      	ldr	r4, [r4, #0]
 801b170:	2c00      	cmp	r4, #0
 801b172:	d1f7      	bne.n	801b164 <_fwalk_sglue+0xc>
 801b174:	4630      	mov	r0, r6
 801b176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b17a:	89ab      	ldrh	r3, [r5, #12]
 801b17c:	2b01      	cmp	r3, #1
 801b17e:	d907      	bls.n	801b190 <_fwalk_sglue+0x38>
 801b180:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b184:	3301      	adds	r3, #1
 801b186:	d003      	beq.n	801b190 <_fwalk_sglue+0x38>
 801b188:	4629      	mov	r1, r5
 801b18a:	4638      	mov	r0, r7
 801b18c:	47c0      	blx	r8
 801b18e:	4306      	orrs	r6, r0
 801b190:	3568      	adds	r5, #104	@ 0x68
 801b192:	e7e9      	b.n	801b168 <_fwalk_sglue+0x10>

0801b194 <sniprintf>:
 801b194:	b40c      	push	{r2, r3}
 801b196:	b530      	push	{r4, r5, lr}
 801b198:	4b17      	ldr	r3, [pc, #92]	@ (801b1f8 <sniprintf+0x64>)
 801b19a:	1e0c      	subs	r4, r1, #0
 801b19c:	681d      	ldr	r5, [r3, #0]
 801b19e:	b09d      	sub	sp, #116	@ 0x74
 801b1a0:	da08      	bge.n	801b1b4 <sniprintf+0x20>
 801b1a2:	238b      	movs	r3, #139	@ 0x8b
 801b1a4:	602b      	str	r3, [r5, #0]
 801b1a6:	f04f 30ff 	mov.w	r0, #4294967295
 801b1aa:	b01d      	add	sp, #116	@ 0x74
 801b1ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b1b0:	b002      	add	sp, #8
 801b1b2:	4770      	bx	lr
 801b1b4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b1b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b1bc:	bf14      	ite	ne
 801b1be:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b1c2:	4623      	moveq	r3, r4
 801b1c4:	9304      	str	r3, [sp, #16]
 801b1c6:	9307      	str	r3, [sp, #28]
 801b1c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b1cc:	9002      	str	r0, [sp, #8]
 801b1ce:	9006      	str	r0, [sp, #24]
 801b1d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b1d4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b1d6:	ab21      	add	r3, sp, #132	@ 0x84
 801b1d8:	a902      	add	r1, sp, #8
 801b1da:	4628      	mov	r0, r5
 801b1dc:	9301      	str	r3, [sp, #4]
 801b1de:	f001 fafd 	bl	801c7dc <_svfiprintf_r>
 801b1e2:	1c43      	adds	r3, r0, #1
 801b1e4:	bfbc      	itt	lt
 801b1e6:	238b      	movlt	r3, #139	@ 0x8b
 801b1e8:	602b      	strlt	r3, [r5, #0]
 801b1ea:	2c00      	cmp	r4, #0
 801b1ec:	d0dd      	beq.n	801b1aa <sniprintf+0x16>
 801b1ee:	9b02      	ldr	r3, [sp, #8]
 801b1f0:	2200      	movs	r2, #0
 801b1f2:	701a      	strb	r2, [r3, #0]
 801b1f4:	e7d9      	b.n	801b1aa <sniprintf+0x16>
 801b1f6:	bf00      	nop
 801b1f8:	20000288 	.word	0x20000288

0801b1fc <__sread>:
 801b1fc:	b510      	push	{r4, lr}
 801b1fe:	460c      	mov	r4, r1
 801b200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b204:	f000 f91c 	bl	801b440 <_read_r>
 801b208:	2800      	cmp	r0, #0
 801b20a:	bfab      	itete	ge
 801b20c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801b20e:	89a3      	ldrhlt	r3, [r4, #12]
 801b210:	181b      	addge	r3, r3, r0
 801b212:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b216:	bfac      	ite	ge
 801b218:	6563      	strge	r3, [r4, #84]	@ 0x54
 801b21a:	81a3      	strhlt	r3, [r4, #12]
 801b21c:	bd10      	pop	{r4, pc}

0801b21e <__swrite>:
 801b21e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b222:	461f      	mov	r7, r3
 801b224:	898b      	ldrh	r3, [r1, #12]
 801b226:	05db      	lsls	r3, r3, #23
 801b228:	4605      	mov	r5, r0
 801b22a:	460c      	mov	r4, r1
 801b22c:	4616      	mov	r6, r2
 801b22e:	d505      	bpl.n	801b23c <__swrite+0x1e>
 801b230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b234:	2302      	movs	r3, #2
 801b236:	2200      	movs	r2, #0
 801b238:	f000 f8f0 	bl	801b41c <_lseek_r>
 801b23c:	89a3      	ldrh	r3, [r4, #12]
 801b23e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b242:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b246:	81a3      	strh	r3, [r4, #12]
 801b248:	4632      	mov	r2, r6
 801b24a:	463b      	mov	r3, r7
 801b24c:	4628      	mov	r0, r5
 801b24e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b252:	f000 b907 	b.w	801b464 <_write_r>

0801b256 <__sseek>:
 801b256:	b510      	push	{r4, lr}
 801b258:	460c      	mov	r4, r1
 801b25a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b25e:	f000 f8dd 	bl	801b41c <_lseek_r>
 801b262:	1c43      	adds	r3, r0, #1
 801b264:	89a3      	ldrh	r3, [r4, #12]
 801b266:	bf15      	itete	ne
 801b268:	6560      	strne	r0, [r4, #84]	@ 0x54
 801b26a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b26e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b272:	81a3      	strheq	r3, [r4, #12]
 801b274:	bf18      	it	ne
 801b276:	81a3      	strhne	r3, [r4, #12]
 801b278:	bd10      	pop	{r4, pc}

0801b27a <__sclose>:
 801b27a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b27e:	f000 b867 	b.w	801b350 <_close_r>

0801b282 <_vsniprintf_r>:
 801b282:	b530      	push	{r4, r5, lr}
 801b284:	4614      	mov	r4, r2
 801b286:	2c00      	cmp	r4, #0
 801b288:	b09b      	sub	sp, #108	@ 0x6c
 801b28a:	4605      	mov	r5, r0
 801b28c:	461a      	mov	r2, r3
 801b28e:	da05      	bge.n	801b29c <_vsniprintf_r+0x1a>
 801b290:	238b      	movs	r3, #139	@ 0x8b
 801b292:	6003      	str	r3, [r0, #0]
 801b294:	f04f 30ff 	mov.w	r0, #4294967295
 801b298:	b01b      	add	sp, #108	@ 0x6c
 801b29a:	bd30      	pop	{r4, r5, pc}
 801b29c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b2a0:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b2a4:	bf14      	ite	ne
 801b2a6:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b2aa:	4623      	moveq	r3, r4
 801b2ac:	9302      	str	r3, [sp, #8]
 801b2ae:	9305      	str	r3, [sp, #20]
 801b2b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b2b4:	9100      	str	r1, [sp, #0]
 801b2b6:	9104      	str	r1, [sp, #16]
 801b2b8:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b2bc:	4669      	mov	r1, sp
 801b2be:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801b2c0:	f001 fa8c 	bl	801c7dc <_svfiprintf_r>
 801b2c4:	1c43      	adds	r3, r0, #1
 801b2c6:	bfbc      	itt	lt
 801b2c8:	238b      	movlt	r3, #139	@ 0x8b
 801b2ca:	602b      	strlt	r3, [r5, #0]
 801b2cc:	2c00      	cmp	r4, #0
 801b2ce:	d0e3      	beq.n	801b298 <_vsniprintf_r+0x16>
 801b2d0:	9b00      	ldr	r3, [sp, #0]
 801b2d2:	2200      	movs	r2, #0
 801b2d4:	701a      	strb	r2, [r3, #0]
 801b2d6:	e7df      	b.n	801b298 <_vsniprintf_r+0x16>

0801b2d8 <vsniprintf>:
 801b2d8:	b507      	push	{r0, r1, r2, lr}
 801b2da:	9300      	str	r3, [sp, #0]
 801b2dc:	4613      	mov	r3, r2
 801b2de:	460a      	mov	r2, r1
 801b2e0:	4601      	mov	r1, r0
 801b2e2:	4803      	ldr	r0, [pc, #12]	@ (801b2f0 <vsniprintf+0x18>)
 801b2e4:	6800      	ldr	r0, [r0, #0]
 801b2e6:	f7ff ffcc 	bl	801b282 <_vsniprintf_r>
 801b2ea:	b003      	add	sp, #12
 801b2ec:	f85d fb04 	ldr.w	pc, [sp], #4
 801b2f0:	20000288 	.word	0x20000288

0801b2f4 <memset>:
 801b2f4:	4402      	add	r2, r0
 801b2f6:	4603      	mov	r3, r0
 801b2f8:	4293      	cmp	r3, r2
 801b2fa:	d100      	bne.n	801b2fe <memset+0xa>
 801b2fc:	4770      	bx	lr
 801b2fe:	f803 1b01 	strb.w	r1, [r3], #1
 801b302:	e7f9      	b.n	801b2f8 <memset+0x4>

0801b304 <strncmp>:
 801b304:	b510      	push	{r4, lr}
 801b306:	b16a      	cbz	r2, 801b324 <strncmp+0x20>
 801b308:	3901      	subs	r1, #1
 801b30a:	1884      	adds	r4, r0, r2
 801b30c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b310:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b314:	429a      	cmp	r2, r3
 801b316:	d103      	bne.n	801b320 <strncmp+0x1c>
 801b318:	42a0      	cmp	r0, r4
 801b31a:	d001      	beq.n	801b320 <strncmp+0x1c>
 801b31c:	2a00      	cmp	r2, #0
 801b31e:	d1f5      	bne.n	801b30c <strncmp+0x8>
 801b320:	1ad0      	subs	r0, r2, r3
 801b322:	bd10      	pop	{r4, pc}
 801b324:	4610      	mov	r0, r2
 801b326:	e7fc      	b.n	801b322 <strncmp+0x1e>

0801b328 <strncpy>:
 801b328:	b510      	push	{r4, lr}
 801b32a:	3901      	subs	r1, #1
 801b32c:	4603      	mov	r3, r0
 801b32e:	b132      	cbz	r2, 801b33e <strncpy+0x16>
 801b330:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b334:	f803 4b01 	strb.w	r4, [r3], #1
 801b338:	3a01      	subs	r2, #1
 801b33a:	2c00      	cmp	r4, #0
 801b33c:	d1f7      	bne.n	801b32e <strncpy+0x6>
 801b33e:	441a      	add	r2, r3
 801b340:	2100      	movs	r1, #0
 801b342:	4293      	cmp	r3, r2
 801b344:	d100      	bne.n	801b348 <strncpy+0x20>
 801b346:	bd10      	pop	{r4, pc}
 801b348:	f803 1b01 	strb.w	r1, [r3], #1
 801b34c:	e7f9      	b.n	801b342 <strncpy+0x1a>
	...

0801b350 <_close_r>:
 801b350:	b538      	push	{r3, r4, r5, lr}
 801b352:	4d06      	ldr	r5, [pc, #24]	@ (801b36c <_close_r+0x1c>)
 801b354:	2300      	movs	r3, #0
 801b356:	4604      	mov	r4, r0
 801b358:	4608      	mov	r0, r1
 801b35a:	602b      	str	r3, [r5, #0]
 801b35c:	f7eb f896 	bl	800648c <_close>
 801b360:	1c43      	adds	r3, r0, #1
 801b362:	d102      	bne.n	801b36a <_close_r+0x1a>
 801b364:	682b      	ldr	r3, [r5, #0]
 801b366:	b103      	cbz	r3, 801b36a <_close_r+0x1a>
 801b368:	6023      	str	r3, [r4, #0]
 801b36a:	bd38      	pop	{r3, r4, r5, pc}
 801b36c:	2000909c 	.word	0x2000909c

0801b370 <_reclaim_reent>:
 801b370:	4b29      	ldr	r3, [pc, #164]	@ (801b418 <_reclaim_reent+0xa8>)
 801b372:	681b      	ldr	r3, [r3, #0]
 801b374:	4283      	cmp	r3, r0
 801b376:	b570      	push	{r4, r5, r6, lr}
 801b378:	4604      	mov	r4, r0
 801b37a:	d04b      	beq.n	801b414 <_reclaim_reent+0xa4>
 801b37c:	69c3      	ldr	r3, [r0, #28]
 801b37e:	b1ab      	cbz	r3, 801b3ac <_reclaim_reent+0x3c>
 801b380:	68db      	ldr	r3, [r3, #12]
 801b382:	b16b      	cbz	r3, 801b3a0 <_reclaim_reent+0x30>
 801b384:	2500      	movs	r5, #0
 801b386:	69e3      	ldr	r3, [r4, #28]
 801b388:	68db      	ldr	r3, [r3, #12]
 801b38a:	5959      	ldr	r1, [r3, r5]
 801b38c:	2900      	cmp	r1, #0
 801b38e:	d13b      	bne.n	801b408 <_reclaim_reent+0x98>
 801b390:	3504      	adds	r5, #4
 801b392:	2d80      	cmp	r5, #128	@ 0x80
 801b394:	d1f7      	bne.n	801b386 <_reclaim_reent+0x16>
 801b396:	69e3      	ldr	r3, [r4, #28]
 801b398:	4620      	mov	r0, r4
 801b39a:	68d9      	ldr	r1, [r3, #12]
 801b39c:	f000 f8c0 	bl	801b520 <_free_r>
 801b3a0:	69e3      	ldr	r3, [r4, #28]
 801b3a2:	6819      	ldr	r1, [r3, #0]
 801b3a4:	b111      	cbz	r1, 801b3ac <_reclaim_reent+0x3c>
 801b3a6:	4620      	mov	r0, r4
 801b3a8:	f000 f8ba 	bl	801b520 <_free_r>
 801b3ac:	6961      	ldr	r1, [r4, #20]
 801b3ae:	b111      	cbz	r1, 801b3b6 <_reclaim_reent+0x46>
 801b3b0:	4620      	mov	r0, r4
 801b3b2:	f000 f8b5 	bl	801b520 <_free_r>
 801b3b6:	69e1      	ldr	r1, [r4, #28]
 801b3b8:	b111      	cbz	r1, 801b3c0 <_reclaim_reent+0x50>
 801b3ba:	4620      	mov	r0, r4
 801b3bc:	f000 f8b0 	bl	801b520 <_free_r>
 801b3c0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801b3c2:	b111      	cbz	r1, 801b3ca <_reclaim_reent+0x5a>
 801b3c4:	4620      	mov	r0, r4
 801b3c6:	f000 f8ab 	bl	801b520 <_free_r>
 801b3ca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b3cc:	b111      	cbz	r1, 801b3d4 <_reclaim_reent+0x64>
 801b3ce:	4620      	mov	r0, r4
 801b3d0:	f000 f8a6 	bl	801b520 <_free_r>
 801b3d4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801b3d6:	b111      	cbz	r1, 801b3de <_reclaim_reent+0x6e>
 801b3d8:	4620      	mov	r0, r4
 801b3da:	f000 f8a1 	bl	801b520 <_free_r>
 801b3de:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801b3e0:	b111      	cbz	r1, 801b3e8 <_reclaim_reent+0x78>
 801b3e2:	4620      	mov	r0, r4
 801b3e4:	f000 f89c 	bl	801b520 <_free_r>
 801b3e8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801b3ea:	b111      	cbz	r1, 801b3f2 <_reclaim_reent+0x82>
 801b3ec:	4620      	mov	r0, r4
 801b3ee:	f000 f897 	bl	801b520 <_free_r>
 801b3f2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801b3f4:	b111      	cbz	r1, 801b3fc <_reclaim_reent+0x8c>
 801b3f6:	4620      	mov	r0, r4
 801b3f8:	f000 f892 	bl	801b520 <_free_r>
 801b3fc:	6a23      	ldr	r3, [r4, #32]
 801b3fe:	b14b      	cbz	r3, 801b414 <_reclaim_reent+0xa4>
 801b400:	4620      	mov	r0, r4
 801b402:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b406:	4718      	bx	r3
 801b408:	680e      	ldr	r6, [r1, #0]
 801b40a:	4620      	mov	r0, r4
 801b40c:	f000 f888 	bl	801b520 <_free_r>
 801b410:	4631      	mov	r1, r6
 801b412:	e7bb      	b.n	801b38c <_reclaim_reent+0x1c>
 801b414:	bd70      	pop	{r4, r5, r6, pc}
 801b416:	bf00      	nop
 801b418:	20000288 	.word	0x20000288

0801b41c <_lseek_r>:
 801b41c:	b538      	push	{r3, r4, r5, lr}
 801b41e:	4d07      	ldr	r5, [pc, #28]	@ (801b43c <_lseek_r+0x20>)
 801b420:	4604      	mov	r4, r0
 801b422:	4608      	mov	r0, r1
 801b424:	4611      	mov	r1, r2
 801b426:	2200      	movs	r2, #0
 801b428:	602a      	str	r2, [r5, #0]
 801b42a:	461a      	mov	r2, r3
 801b42c:	f7eb f855 	bl	80064da <_lseek>
 801b430:	1c43      	adds	r3, r0, #1
 801b432:	d102      	bne.n	801b43a <_lseek_r+0x1e>
 801b434:	682b      	ldr	r3, [r5, #0]
 801b436:	b103      	cbz	r3, 801b43a <_lseek_r+0x1e>
 801b438:	6023      	str	r3, [r4, #0]
 801b43a:	bd38      	pop	{r3, r4, r5, pc}
 801b43c:	2000909c 	.word	0x2000909c

0801b440 <_read_r>:
 801b440:	b538      	push	{r3, r4, r5, lr}
 801b442:	4d07      	ldr	r5, [pc, #28]	@ (801b460 <_read_r+0x20>)
 801b444:	4604      	mov	r4, r0
 801b446:	4608      	mov	r0, r1
 801b448:	4611      	mov	r1, r2
 801b44a:	2200      	movs	r2, #0
 801b44c:	602a      	str	r2, [r5, #0]
 801b44e:	461a      	mov	r2, r3
 801b450:	f7ea ffe3 	bl	800641a <_read>
 801b454:	1c43      	adds	r3, r0, #1
 801b456:	d102      	bne.n	801b45e <_read_r+0x1e>
 801b458:	682b      	ldr	r3, [r5, #0]
 801b45a:	b103      	cbz	r3, 801b45e <_read_r+0x1e>
 801b45c:	6023      	str	r3, [r4, #0]
 801b45e:	bd38      	pop	{r3, r4, r5, pc}
 801b460:	2000909c 	.word	0x2000909c

0801b464 <_write_r>:
 801b464:	b538      	push	{r3, r4, r5, lr}
 801b466:	4d07      	ldr	r5, [pc, #28]	@ (801b484 <_write_r+0x20>)
 801b468:	4604      	mov	r4, r0
 801b46a:	4608      	mov	r0, r1
 801b46c:	4611      	mov	r1, r2
 801b46e:	2200      	movs	r2, #0
 801b470:	602a      	str	r2, [r5, #0]
 801b472:	461a      	mov	r2, r3
 801b474:	f7ea ffee 	bl	8006454 <_write>
 801b478:	1c43      	adds	r3, r0, #1
 801b47a:	d102      	bne.n	801b482 <_write_r+0x1e>
 801b47c:	682b      	ldr	r3, [r5, #0]
 801b47e:	b103      	cbz	r3, 801b482 <_write_r+0x1e>
 801b480:	6023      	str	r3, [r4, #0]
 801b482:	bd38      	pop	{r3, r4, r5, pc}
 801b484:	2000909c 	.word	0x2000909c

0801b488 <__errno>:
 801b488:	4b01      	ldr	r3, [pc, #4]	@ (801b490 <__errno+0x8>)
 801b48a:	6818      	ldr	r0, [r3, #0]
 801b48c:	4770      	bx	lr
 801b48e:	bf00      	nop
 801b490:	20000288 	.word	0x20000288

0801b494 <__libc_init_array>:
 801b494:	b570      	push	{r4, r5, r6, lr}
 801b496:	4d0d      	ldr	r5, [pc, #52]	@ (801b4cc <__libc_init_array+0x38>)
 801b498:	4c0d      	ldr	r4, [pc, #52]	@ (801b4d0 <__libc_init_array+0x3c>)
 801b49a:	1b64      	subs	r4, r4, r5
 801b49c:	10a4      	asrs	r4, r4, #2
 801b49e:	2600      	movs	r6, #0
 801b4a0:	42a6      	cmp	r6, r4
 801b4a2:	d109      	bne.n	801b4b8 <__libc_init_array+0x24>
 801b4a4:	4d0b      	ldr	r5, [pc, #44]	@ (801b4d4 <__libc_init_array+0x40>)
 801b4a6:	4c0c      	ldr	r4, [pc, #48]	@ (801b4d8 <__libc_init_array+0x44>)
 801b4a8:	f003 f8a2 	bl	801e5f0 <_init>
 801b4ac:	1b64      	subs	r4, r4, r5
 801b4ae:	10a4      	asrs	r4, r4, #2
 801b4b0:	2600      	movs	r6, #0
 801b4b2:	42a6      	cmp	r6, r4
 801b4b4:	d105      	bne.n	801b4c2 <__libc_init_array+0x2e>
 801b4b6:	bd70      	pop	{r4, r5, r6, pc}
 801b4b8:	f855 3b04 	ldr.w	r3, [r5], #4
 801b4bc:	4798      	blx	r3
 801b4be:	3601      	adds	r6, #1
 801b4c0:	e7ee      	b.n	801b4a0 <__libc_init_array+0xc>
 801b4c2:	f855 3b04 	ldr.w	r3, [r5], #4
 801b4c6:	4798      	blx	r3
 801b4c8:	3601      	adds	r6, #1
 801b4ca:	e7f2      	b.n	801b4b2 <__libc_init_array+0x1e>
 801b4cc:	0801fcb0 	.word	0x0801fcb0
 801b4d0:	0801fcb0 	.word	0x0801fcb0
 801b4d4:	0801fcb0 	.word	0x0801fcb0
 801b4d8:	0801fcb4 	.word	0x0801fcb4

0801b4dc <__retarget_lock_init_recursive>:
 801b4dc:	4770      	bx	lr

0801b4de <__retarget_lock_acquire_recursive>:
 801b4de:	4770      	bx	lr

0801b4e0 <__retarget_lock_release_recursive>:
 801b4e0:	4770      	bx	lr

0801b4e2 <strcpy>:
 801b4e2:	4603      	mov	r3, r0
 801b4e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b4e8:	f803 2b01 	strb.w	r2, [r3], #1
 801b4ec:	2a00      	cmp	r2, #0
 801b4ee:	d1f9      	bne.n	801b4e4 <strcpy+0x2>
 801b4f0:	4770      	bx	lr

0801b4f2 <memcpy>:
 801b4f2:	440a      	add	r2, r1
 801b4f4:	4291      	cmp	r1, r2
 801b4f6:	f100 33ff 	add.w	r3, r0, #4294967295
 801b4fa:	d100      	bne.n	801b4fe <memcpy+0xc>
 801b4fc:	4770      	bx	lr
 801b4fe:	b510      	push	{r4, lr}
 801b500:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b504:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b508:	4291      	cmp	r1, r2
 801b50a:	d1f9      	bne.n	801b500 <memcpy+0xe>
 801b50c:	bd10      	pop	{r4, pc}
	...

0801b510 <nan>:
 801b510:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801b518 <nan+0x8>
 801b514:	4770      	bx	lr
 801b516:	bf00      	nop
 801b518:	00000000 	.word	0x00000000
 801b51c:	7ff80000 	.word	0x7ff80000

0801b520 <_free_r>:
 801b520:	b538      	push	{r3, r4, r5, lr}
 801b522:	4605      	mov	r5, r0
 801b524:	2900      	cmp	r1, #0
 801b526:	d041      	beq.n	801b5ac <_free_r+0x8c>
 801b528:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b52c:	1f0c      	subs	r4, r1, #4
 801b52e:	2b00      	cmp	r3, #0
 801b530:	bfb8      	it	lt
 801b532:	18e4      	addlt	r4, r4, r3
 801b534:	f000 fc2c 	bl	801bd90 <__malloc_lock>
 801b538:	4a1d      	ldr	r2, [pc, #116]	@ (801b5b0 <_free_r+0x90>)
 801b53a:	6813      	ldr	r3, [r2, #0]
 801b53c:	b933      	cbnz	r3, 801b54c <_free_r+0x2c>
 801b53e:	6063      	str	r3, [r4, #4]
 801b540:	6014      	str	r4, [r2, #0]
 801b542:	4628      	mov	r0, r5
 801b544:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b548:	f000 bc28 	b.w	801bd9c <__malloc_unlock>
 801b54c:	42a3      	cmp	r3, r4
 801b54e:	d908      	bls.n	801b562 <_free_r+0x42>
 801b550:	6820      	ldr	r0, [r4, #0]
 801b552:	1821      	adds	r1, r4, r0
 801b554:	428b      	cmp	r3, r1
 801b556:	bf01      	itttt	eq
 801b558:	6819      	ldreq	r1, [r3, #0]
 801b55a:	685b      	ldreq	r3, [r3, #4]
 801b55c:	1809      	addeq	r1, r1, r0
 801b55e:	6021      	streq	r1, [r4, #0]
 801b560:	e7ed      	b.n	801b53e <_free_r+0x1e>
 801b562:	461a      	mov	r2, r3
 801b564:	685b      	ldr	r3, [r3, #4]
 801b566:	b10b      	cbz	r3, 801b56c <_free_r+0x4c>
 801b568:	42a3      	cmp	r3, r4
 801b56a:	d9fa      	bls.n	801b562 <_free_r+0x42>
 801b56c:	6811      	ldr	r1, [r2, #0]
 801b56e:	1850      	adds	r0, r2, r1
 801b570:	42a0      	cmp	r0, r4
 801b572:	d10b      	bne.n	801b58c <_free_r+0x6c>
 801b574:	6820      	ldr	r0, [r4, #0]
 801b576:	4401      	add	r1, r0
 801b578:	1850      	adds	r0, r2, r1
 801b57a:	4283      	cmp	r3, r0
 801b57c:	6011      	str	r1, [r2, #0]
 801b57e:	d1e0      	bne.n	801b542 <_free_r+0x22>
 801b580:	6818      	ldr	r0, [r3, #0]
 801b582:	685b      	ldr	r3, [r3, #4]
 801b584:	6053      	str	r3, [r2, #4]
 801b586:	4408      	add	r0, r1
 801b588:	6010      	str	r0, [r2, #0]
 801b58a:	e7da      	b.n	801b542 <_free_r+0x22>
 801b58c:	d902      	bls.n	801b594 <_free_r+0x74>
 801b58e:	230c      	movs	r3, #12
 801b590:	602b      	str	r3, [r5, #0]
 801b592:	e7d6      	b.n	801b542 <_free_r+0x22>
 801b594:	6820      	ldr	r0, [r4, #0]
 801b596:	1821      	adds	r1, r4, r0
 801b598:	428b      	cmp	r3, r1
 801b59a:	bf04      	itt	eq
 801b59c:	6819      	ldreq	r1, [r3, #0]
 801b59e:	685b      	ldreq	r3, [r3, #4]
 801b5a0:	6063      	str	r3, [r4, #4]
 801b5a2:	bf04      	itt	eq
 801b5a4:	1809      	addeq	r1, r1, r0
 801b5a6:	6021      	streq	r1, [r4, #0]
 801b5a8:	6054      	str	r4, [r2, #4]
 801b5aa:	e7ca      	b.n	801b542 <_free_r+0x22>
 801b5ac:	bd38      	pop	{r3, r4, r5, pc}
 801b5ae:	bf00      	nop
 801b5b0:	200090a8 	.word	0x200090a8

0801b5b4 <rshift>:
 801b5b4:	6903      	ldr	r3, [r0, #16]
 801b5b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801b5ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b5be:	ea4f 1261 	mov.w	r2, r1, asr #5
 801b5c2:	f100 0414 	add.w	r4, r0, #20
 801b5c6:	dd45      	ble.n	801b654 <rshift+0xa0>
 801b5c8:	f011 011f 	ands.w	r1, r1, #31
 801b5cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801b5d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801b5d4:	d10c      	bne.n	801b5f0 <rshift+0x3c>
 801b5d6:	f100 0710 	add.w	r7, r0, #16
 801b5da:	4629      	mov	r1, r5
 801b5dc:	42b1      	cmp	r1, r6
 801b5de:	d334      	bcc.n	801b64a <rshift+0x96>
 801b5e0:	1a9b      	subs	r3, r3, r2
 801b5e2:	009b      	lsls	r3, r3, #2
 801b5e4:	1eea      	subs	r2, r5, #3
 801b5e6:	4296      	cmp	r6, r2
 801b5e8:	bf38      	it	cc
 801b5ea:	2300      	movcc	r3, #0
 801b5ec:	4423      	add	r3, r4
 801b5ee:	e015      	b.n	801b61c <rshift+0x68>
 801b5f0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801b5f4:	f1c1 0820 	rsb	r8, r1, #32
 801b5f8:	40cf      	lsrs	r7, r1
 801b5fa:	f105 0e04 	add.w	lr, r5, #4
 801b5fe:	46a1      	mov	r9, r4
 801b600:	4576      	cmp	r6, lr
 801b602:	46f4      	mov	ip, lr
 801b604:	d815      	bhi.n	801b632 <rshift+0x7e>
 801b606:	1a9a      	subs	r2, r3, r2
 801b608:	0092      	lsls	r2, r2, #2
 801b60a:	3a04      	subs	r2, #4
 801b60c:	3501      	adds	r5, #1
 801b60e:	42ae      	cmp	r6, r5
 801b610:	bf38      	it	cc
 801b612:	2200      	movcc	r2, #0
 801b614:	18a3      	adds	r3, r4, r2
 801b616:	50a7      	str	r7, [r4, r2]
 801b618:	b107      	cbz	r7, 801b61c <rshift+0x68>
 801b61a:	3304      	adds	r3, #4
 801b61c:	1b1a      	subs	r2, r3, r4
 801b61e:	42a3      	cmp	r3, r4
 801b620:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801b624:	bf08      	it	eq
 801b626:	2300      	moveq	r3, #0
 801b628:	6102      	str	r2, [r0, #16]
 801b62a:	bf08      	it	eq
 801b62c:	6143      	streq	r3, [r0, #20]
 801b62e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b632:	f8dc c000 	ldr.w	ip, [ip]
 801b636:	fa0c fc08 	lsl.w	ip, ip, r8
 801b63a:	ea4c 0707 	orr.w	r7, ip, r7
 801b63e:	f849 7b04 	str.w	r7, [r9], #4
 801b642:	f85e 7b04 	ldr.w	r7, [lr], #4
 801b646:	40cf      	lsrs	r7, r1
 801b648:	e7da      	b.n	801b600 <rshift+0x4c>
 801b64a:	f851 cb04 	ldr.w	ip, [r1], #4
 801b64e:	f847 cf04 	str.w	ip, [r7, #4]!
 801b652:	e7c3      	b.n	801b5dc <rshift+0x28>
 801b654:	4623      	mov	r3, r4
 801b656:	e7e1      	b.n	801b61c <rshift+0x68>

0801b658 <__hexdig_fun>:
 801b658:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801b65c:	2b09      	cmp	r3, #9
 801b65e:	d802      	bhi.n	801b666 <__hexdig_fun+0xe>
 801b660:	3820      	subs	r0, #32
 801b662:	b2c0      	uxtb	r0, r0
 801b664:	4770      	bx	lr
 801b666:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801b66a:	2b05      	cmp	r3, #5
 801b66c:	d801      	bhi.n	801b672 <__hexdig_fun+0x1a>
 801b66e:	3847      	subs	r0, #71	@ 0x47
 801b670:	e7f7      	b.n	801b662 <__hexdig_fun+0xa>
 801b672:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801b676:	2b05      	cmp	r3, #5
 801b678:	d801      	bhi.n	801b67e <__hexdig_fun+0x26>
 801b67a:	3827      	subs	r0, #39	@ 0x27
 801b67c:	e7f1      	b.n	801b662 <__hexdig_fun+0xa>
 801b67e:	2000      	movs	r0, #0
 801b680:	4770      	bx	lr
	...

0801b684 <__gethex>:
 801b684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b688:	b085      	sub	sp, #20
 801b68a:	468a      	mov	sl, r1
 801b68c:	9302      	str	r3, [sp, #8]
 801b68e:	680b      	ldr	r3, [r1, #0]
 801b690:	9001      	str	r0, [sp, #4]
 801b692:	4690      	mov	r8, r2
 801b694:	1c9c      	adds	r4, r3, #2
 801b696:	46a1      	mov	r9, r4
 801b698:	f814 0b01 	ldrb.w	r0, [r4], #1
 801b69c:	2830      	cmp	r0, #48	@ 0x30
 801b69e:	d0fa      	beq.n	801b696 <__gethex+0x12>
 801b6a0:	eba9 0303 	sub.w	r3, r9, r3
 801b6a4:	f1a3 0b02 	sub.w	fp, r3, #2
 801b6a8:	f7ff ffd6 	bl	801b658 <__hexdig_fun>
 801b6ac:	4605      	mov	r5, r0
 801b6ae:	2800      	cmp	r0, #0
 801b6b0:	d168      	bne.n	801b784 <__gethex+0x100>
 801b6b2:	49a0      	ldr	r1, [pc, #640]	@ (801b934 <__gethex+0x2b0>)
 801b6b4:	2201      	movs	r2, #1
 801b6b6:	4648      	mov	r0, r9
 801b6b8:	f7ff fe24 	bl	801b304 <strncmp>
 801b6bc:	4607      	mov	r7, r0
 801b6be:	2800      	cmp	r0, #0
 801b6c0:	d167      	bne.n	801b792 <__gethex+0x10e>
 801b6c2:	f899 0001 	ldrb.w	r0, [r9, #1]
 801b6c6:	4626      	mov	r6, r4
 801b6c8:	f7ff ffc6 	bl	801b658 <__hexdig_fun>
 801b6cc:	2800      	cmp	r0, #0
 801b6ce:	d062      	beq.n	801b796 <__gethex+0x112>
 801b6d0:	4623      	mov	r3, r4
 801b6d2:	7818      	ldrb	r0, [r3, #0]
 801b6d4:	2830      	cmp	r0, #48	@ 0x30
 801b6d6:	4699      	mov	r9, r3
 801b6d8:	f103 0301 	add.w	r3, r3, #1
 801b6dc:	d0f9      	beq.n	801b6d2 <__gethex+0x4e>
 801b6de:	f7ff ffbb 	bl	801b658 <__hexdig_fun>
 801b6e2:	fab0 f580 	clz	r5, r0
 801b6e6:	096d      	lsrs	r5, r5, #5
 801b6e8:	f04f 0b01 	mov.w	fp, #1
 801b6ec:	464a      	mov	r2, r9
 801b6ee:	4616      	mov	r6, r2
 801b6f0:	3201      	adds	r2, #1
 801b6f2:	7830      	ldrb	r0, [r6, #0]
 801b6f4:	f7ff ffb0 	bl	801b658 <__hexdig_fun>
 801b6f8:	2800      	cmp	r0, #0
 801b6fa:	d1f8      	bne.n	801b6ee <__gethex+0x6a>
 801b6fc:	498d      	ldr	r1, [pc, #564]	@ (801b934 <__gethex+0x2b0>)
 801b6fe:	2201      	movs	r2, #1
 801b700:	4630      	mov	r0, r6
 801b702:	f7ff fdff 	bl	801b304 <strncmp>
 801b706:	2800      	cmp	r0, #0
 801b708:	d13f      	bne.n	801b78a <__gethex+0x106>
 801b70a:	b944      	cbnz	r4, 801b71e <__gethex+0x9a>
 801b70c:	1c74      	adds	r4, r6, #1
 801b70e:	4622      	mov	r2, r4
 801b710:	4616      	mov	r6, r2
 801b712:	3201      	adds	r2, #1
 801b714:	7830      	ldrb	r0, [r6, #0]
 801b716:	f7ff ff9f 	bl	801b658 <__hexdig_fun>
 801b71a:	2800      	cmp	r0, #0
 801b71c:	d1f8      	bne.n	801b710 <__gethex+0x8c>
 801b71e:	1ba4      	subs	r4, r4, r6
 801b720:	00a7      	lsls	r7, r4, #2
 801b722:	7833      	ldrb	r3, [r6, #0]
 801b724:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801b728:	2b50      	cmp	r3, #80	@ 0x50
 801b72a:	d13e      	bne.n	801b7aa <__gethex+0x126>
 801b72c:	7873      	ldrb	r3, [r6, #1]
 801b72e:	2b2b      	cmp	r3, #43	@ 0x2b
 801b730:	d033      	beq.n	801b79a <__gethex+0x116>
 801b732:	2b2d      	cmp	r3, #45	@ 0x2d
 801b734:	d034      	beq.n	801b7a0 <__gethex+0x11c>
 801b736:	1c71      	adds	r1, r6, #1
 801b738:	2400      	movs	r4, #0
 801b73a:	7808      	ldrb	r0, [r1, #0]
 801b73c:	f7ff ff8c 	bl	801b658 <__hexdig_fun>
 801b740:	1e43      	subs	r3, r0, #1
 801b742:	b2db      	uxtb	r3, r3
 801b744:	2b18      	cmp	r3, #24
 801b746:	d830      	bhi.n	801b7aa <__gethex+0x126>
 801b748:	f1a0 0210 	sub.w	r2, r0, #16
 801b74c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801b750:	f7ff ff82 	bl	801b658 <__hexdig_fun>
 801b754:	f100 3cff 	add.w	ip, r0, #4294967295
 801b758:	fa5f fc8c 	uxtb.w	ip, ip
 801b75c:	f1bc 0f18 	cmp.w	ip, #24
 801b760:	f04f 030a 	mov.w	r3, #10
 801b764:	d91e      	bls.n	801b7a4 <__gethex+0x120>
 801b766:	b104      	cbz	r4, 801b76a <__gethex+0xe6>
 801b768:	4252      	negs	r2, r2
 801b76a:	4417      	add	r7, r2
 801b76c:	f8ca 1000 	str.w	r1, [sl]
 801b770:	b1ed      	cbz	r5, 801b7ae <__gethex+0x12a>
 801b772:	f1bb 0f00 	cmp.w	fp, #0
 801b776:	bf0c      	ite	eq
 801b778:	2506      	moveq	r5, #6
 801b77a:	2500      	movne	r5, #0
 801b77c:	4628      	mov	r0, r5
 801b77e:	b005      	add	sp, #20
 801b780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b784:	2500      	movs	r5, #0
 801b786:	462c      	mov	r4, r5
 801b788:	e7b0      	b.n	801b6ec <__gethex+0x68>
 801b78a:	2c00      	cmp	r4, #0
 801b78c:	d1c7      	bne.n	801b71e <__gethex+0x9a>
 801b78e:	4627      	mov	r7, r4
 801b790:	e7c7      	b.n	801b722 <__gethex+0x9e>
 801b792:	464e      	mov	r6, r9
 801b794:	462f      	mov	r7, r5
 801b796:	2501      	movs	r5, #1
 801b798:	e7c3      	b.n	801b722 <__gethex+0x9e>
 801b79a:	2400      	movs	r4, #0
 801b79c:	1cb1      	adds	r1, r6, #2
 801b79e:	e7cc      	b.n	801b73a <__gethex+0xb6>
 801b7a0:	2401      	movs	r4, #1
 801b7a2:	e7fb      	b.n	801b79c <__gethex+0x118>
 801b7a4:	fb03 0002 	mla	r0, r3, r2, r0
 801b7a8:	e7ce      	b.n	801b748 <__gethex+0xc4>
 801b7aa:	4631      	mov	r1, r6
 801b7ac:	e7de      	b.n	801b76c <__gethex+0xe8>
 801b7ae:	eba6 0309 	sub.w	r3, r6, r9
 801b7b2:	3b01      	subs	r3, #1
 801b7b4:	4629      	mov	r1, r5
 801b7b6:	2b07      	cmp	r3, #7
 801b7b8:	dc0a      	bgt.n	801b7d0 <__gethex+0x14c>
 801b7ba:	9801      	ldr	r0, [sp, #4]
 801b7bc:	f000 faf4 	bl	801bda8 <_Balloc>
 801b7c0:	4604      	mov	r4, r0
 801b7c2:	b940      	cbnz	r0, 801b7d6 <__gethex+0x152>
 801b7c4:	4b5c      	ldr	r3, [pc, #368]	@ (801b938 <__gethex+0x2b4>)
 801b7c6:	4602      	mov	r2, r0
 801b7c8:	21e4      	movs	r1, #228	@ 0xe4
 801b7ca:	485c      	ldr	r0, [pc, #368]	@ (801b93c <__gethex+0x2b8>)
 801b7cc:	f001 fb66 	bl	801ce9c <__assert_func>
 801b7d0:	3101      	adds	r1, #1
 801b7d2:	105b      	asrs	r3, r3, #1
 801b7d4:	e7ef      	b.n	801b7b6 <__gethex+0x132>
 801b7d6:	f100 0a14 	add.w	sl, r0, #20
 801b7da:	2300      	movs	r3, #0
 801b7dc:	4655      	mov	r5, sl
 801b7de:	469b      	mov	fp, r3
 801b7e0:	45b1      	cmp	r9, r6
 801b7e2:	d337      	bcc.n	801b854 <__gethex+0x1d0>
 801b7e4:	f845 bb04 	str.w	fp, [r5], #4
 801b7e8:	eba5 050a 	sub.w	r5, r5, sl
 801b7ec:	10ad      	asrs	r5, r5, #2
 801b7ee:	6125      	str	r5, [r4, #16]
 801b7f0:	4658      	mov	r0, fp
 801b7f2:	f000 fbcb 	bl	801bf8c <__hi0bits>
 801b7f6:	016d      	lsls	r5, r5, #5
 801b7f8:	f8d8 6000 	ldr.w	r6, [r8]
 801b7fc:	1a2d      	subs	r5, r5, r0
 801b7fe:	42b5      	cmp	r5, r6
 801b800:	dd54      	ble.n	801b8ac <__gethex+0x228>
 801b802:	1bad      	subs	r5, r5, r6
 801b804:	4629      	mov	r1, r5
 801b806:	4620      	mov	r0, r4
 801b808:	f000 ff5f 	bl	801c6ca <__any_on>
 801b80c:	4681      	mov	r9, r0
 801b80e:	b178      	cbz	r0, 801b830 <__gethex+0x1ac>
 801b810:	1e6b      	subs	r3, r5, #1
 801b812:	1159      	asrs	r1, r3, #5
 801b814:	f003 021f 	and.w	r2, r3, #31
 801b818:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801b81c:	f04f 0901 	mov.w	r9, #1
 801b820:	fa09 f202 	lsl.w	r2, r9, r2
 801b824:	420a      	tst	r2, r1
 801b826:	d003      	beq.n	801b830 <__gethex+0x1ac>
 801b828:	454b      	cmp	r3, r9
 801b82a:	dc36      	bgt.n	801b89a <__gethex+0x216>
 801b82c:	f04f 0902 	mov.w	r9, #2
 801b830:	4629      	mov	r1, r5
 801b832:	4620      	mov	r0, r4
 801b834:	f7ff febe 	bl	801b5b4 <rshift>
 801b838:	442f      	add	r7, r5
 801b83a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b83e:	42bb      	cmp	r3, r7
 801b840:	da42      	bge.n	801b8c8 <__gethex+0x244>
 801b842:	9801      	ldr	r0, [sp, #4]
 801b844:	4621      	mov	r1, r4
 801b846:	f000 faef 	bl	801be28 <_Bfree>
 801b84a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b84c:	2300      	movs	r3, #0
 801b84e:	6013      	str	r3, [r2, #0]
 801b850:	25a3      	movs	r5, #163	@ 0xa3
 801b852:	e793      	b.n	801b77c <__gethex+0xf8>
 801b854:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801b858:	2a2e      	cmp	r2, #46	@ 0x2e
 801b85a:	d012      	beq.n	801b882 <__gethex+0x1fe>
 801b85c:	2b20      	cmp	r3, #32
 801b85e:	d104      	bne.n	801b86a <__gethex+0x1e6>
 801b860:	f845 bb04 	str.w	fp, [r5], #4
 801b864:	f04f 0b00 	mov.w	fp, #0
 801b868:	465b      	mov	r3, fp
 801b86a:	7830      	ldrb	r0, [r6, #0]
 801b86c:	9303      	str	r3, [sp, #12]
 801b86e:	f7ff fef3 	bl	801b658 <__hexdig_fun>
 801b872:	9b03      	ldr	r3, [sp, #12]
 801b874:	f000 000f 	and.w	r0, r0, #15
 801b878:	4098      	lsls	r0, r3
 801b87a:	ea4b 0b00 	orr.w	fp, fp, r0
 801b87e:	3304      	adds	r3, #4
 801b880:	e7ae      	b.n	801b7e0 <__gethex+0x15c>
 801b882:	45b1      	cmp	r9, r6
 801b884:	d8ea      	bhi.n	801b85c <__gethex+0x1d8>
 801b886:	492b      	ldr	r1, [pc, #172]	@ (801b934 <__gethex+0x2b0>)
 801b888:	9303      	str	r3, [sp, #12]
 801b88a:	2201      	movs	r2, #1
 801b88c:	4630      	mov	r0, r6
 801b88e:	f7ff fd39 	bl	801b304 <strncmp>
 801b892:	9b03      	ldr	r3, [sp, #12]
 801b894:	2800      	cmp	r0, #0
 801b896:	d1e1      	bne.n	801b85c <__gethex+0x1d8>
 801b898:	e7a2      	b.n	801b7e0 <__gethex+0x15c>
 801b89a:	1ea9      	subs	r1, r5, #2
 801b89c:	4620      	mov	r0, r4
 801b89e:	f000 ff14 	bl	801c6ca <__any_on>
 801b8a2:	2800      	cmp	r0, #0
 801b8a4:	d0c2      	beq.n	801b82c <__gethex+0x1a8>
 801b8a6:	f04f 0903 	mov.w	r9, #3
 801b8aa:	e7c1      	b.n	801b830 <__gethex+0x1ac>
 801b8ac:	da09      	bge.n	801b8c2 <__gethex+0x23e>
 801b8ae:	1b75      	subs	r5, r6, r5
 801b8b0:	4621      	mov	r1, r4
 801b8b2:	9801      	ldr	r0, [sp, #4]
 801b8b4:	462a      	mov	r2, r5
 801b8b6:	f000 fccf 	bl	801c258 <__lshift>
 801b8ba:	1b7f      	subs	r7, r7, r5
 801b8bc:	4604      	mov	r4, r0
 801b8be:	f100 0a14 	add.w	sl, r0, #20
 801b8c2:	f04f 0900 	mov.w	r9, #0
 801b8c6:	e7b8      	b.n	801b83a <__gethex+0x1b6>
 801b8c8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801b8cc:	42bd      	cmp	r5, r7
 801b8ce:	dd6f      	ble.n	801b9b0 <__gethex+0x32c>
 801b8d0:	1bed      	subs	r5, r5, r7
 801b8d2:	42ae      	cmp	r6, r5
 801b8d4:	dc34      	bgt.n	801b940 <__gethex+0x2bc>
 801b8d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b8da:	2b02      	cmp	r3, #2
 801b8dc:	d022      	beq.n	801b924 <__gethex+0x2a0>
 801b8de:	2b03      	cmp	r3, #3
 801b8e0:	d024      	beq.n	801b92c <__gethex+0x2a8>
 801b8e2:	2b01      	cmp	r3, #1
 801b8e4:	d115      	bne.n	801b912 <__gethex+0x28e>
 801b8e6:	42ae      	cmp	r6, r5
 801b8e8:	d113      	bne.n	801b912 <__gethex+0x28e>
 801b8ea:	2e01      	cmp	r6, #1
 801b8ec:	d10b      	bne.n	801b906 <__gethex+0x282>
 801b8ee:	9a02      	ldr	r2, [sp, #8]
 801b8f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b8f4:	6013      	str	r3, [r2, #0]
 801b8f6:	2301      	movs	r3, #1
 801b8f8:	6123      	str	r3, [r4, #16]
 801b8fa:	f8ca 3000 	str.w	r3, [sl]
 801b8fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b900:	2562      	movs	r5, #98	@ 0x62
 801b902:	601c      	str	r4, [r3, #0]
 801b904:	e73a      	b.n	801b77c <__gethex+0xf8>
 801b906:	1e71      	subs	r1, r6, #1
 801b908:	4620      	mov	r0, r4
 801b90a:	f000 fede 	bl	801c6ca <__any_on>
 801b90e:	2800      	cmp	r0, #0
 801b910:	d1ed      	bne.n	801b8ee <__gethex+0x26a>
 801b912:	9801      	ldr	r0, [sp, #4]
 801b914:	4621      	mov	r1, r4
 801b916:	f000 fa87 	bl	801be28 <_Bfree>
 801b91a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b91c:	2300      	movs	r3, #0
 801b91e:	6013      	str	r3, [r2, #0]
 801b920:	2550      	movs	r5, #80	@ 0x50
 801b922:	e72b      	b.n	801b77c <__gethex+0xf8>
 801b924:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b926:	2b00      	cmp	r3, #0
 801b928:	d1f3      	bne.n	801b912 <__gethex+0x28e>
 801b92a:	e7e0      	b.n	801b8ee <__gethex+0x26a>
 801b92c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b92e:	2b00      	cmp	r3, #0
 801b930:	d1dd      	bne.n	801b8ee <__gethex+0x26a>
 801b932:	e7ee      	b.n	801b912 <__gethex+0x28e>
 801b934:	0801f714 	.word	0x0801f714
 801b938:	0801f881 	.word	0x0801f881
 801b93c:	0801f892 	.word	0x0801f892
 801b940:	1e6f      	subs	r7, r5, #1
 801b942:	f1b9 0f00 	cmp.w	r9, #0
 801b946:	d130      	bne.n	801b9aa <__gethex+0x326>
 801b948:	b127      	cbz	r7, 801b954 <__gethex+0x2d0>
 801b94a:	4639      	mov	r1, r7
 801b94c:	4620      	mov	r0, r4
 801b94e:	f000 febc 	bl	801c6ca <__any_on>
 801b952:	4681      	mov	r9, r0
 801b954:	117a      	asrs	r2, r7, #5
 801b956:	2301      	movs	r3, #1
 801b958:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801b95c:	f007 071f 	and.w	r7, r7, #31
 801b960:	40bb      	lsls	r3, r7
 801b962:	4213      	tst	r3, r2
 801b964:	4629      	mov	r1, r5
 801b966:	4620      	mov	r0, r4
 801b968:	bf18      	it	ne
 801b96a:	f049 0902 	orrne.w	r9, r9, #2
 801b96e:	f7ff fe21 	bl	801b5b4 <rshift>
 801b972:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801b976:	1b76      	subs	r6, r6, r5
 801b978:	2502      	movs	r5, #2
 801b97a:	f1b9 0f00 	cmp.w	r9, #0
 801b97e:	d047      	beq.n	801ba10 <__gethex+0x38c>
 801b980:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b984:	2b02      	cmp	r3, #2
 801b986:	d015      	beq.n	801b9b4 <__gethex+0x330>
 801b988:	2b03      	cmp	r3, #3
 801b98a:	d017      	beq.n	801b9bc <__gethex+0x338>
 801b98c:	2b01      	cmp	r3, #1
 801b98e:	d109      	bne.n	801b9a4 <__gethex+0x320>
 801b990:	f019 0f02 	tst.w	r9, #2
 801b994:	d006      	beq.n	801b9a4 <__gethex+0x320>
 801b996:	f8da 3000 	ldr.w	r3, [sl]
 801b99a:	ea49 0903 	orr.w	r9, r9, r3
 801b99e:	f019 0f01 	tst.w	r9, #1
 801b9a2:	d10e      	bne.n	801b9c2 <__gethex+0x33e>
 801b9a4:	f045 0510 	orr.w	r5, r5, #16
 801b9a8:	e032      	b.n	801ba10 <__gethex+0x38c>
 801b9aa:	f04f 0901 	mov.w	r9, #1
 801b9ae:	e7d1      	b.n	801b954 <__gethex+0x2d0>
 801b9b0:	2501      	movs	r5, #1
 801b9b2:	e7e2      	b.n	801b97a <__gethex+0x2f6>
 801b9b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b9b6:	f1c3 0301 	rsb	r3, r3, #1
 801b9ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b9bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b9be:	2b00      	cmp	r3, #0
 801b9c0:	d0f0      	beq.n	801b9a4 <__gethex+0x320>
 801b9c2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801b9c6:	f104 0314 	add.w	r3, r4, #20
 801b9ca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801b9ce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801b9d2:	f04f 0c00 	mov.w	ip, #0
 801b9d6:	4618      	mov	r0, r3
 801b9d8:	f853 2b04 	ldr.w	r2, [r3], #4
 801b9dc:	f1b2 3fff 	cmp.w	r2, #4294967295
 801b9e0:	d01b      	beq.n	801ba1a <__gethex+0x396>
 801b9e2:	3201      	adds	r2, #1
 801b9e4:	6002      	str	r2, [r0, #0]
 801b9e6:	2d02      	cmp	r5, #2
 801b9e8:	f104 0314 	add.w	r3, r4, #20
 801b9ec:	d13c      	bne.n	801ba68 <__gethex+0x3e4>
 801b9ee:	f8d8 2000 	ldr.w	r2, [r8]
 801b9f2:	3a01      	subs	r2, #1
 801b9f4:	42b2      	cmp	r2, r6
 801b9f6:	d109      	bne.n	801ba0c <__gethex+0x388>
 801b9f8:	1171      	asrs	r1, r6, #5
 801b9fa:	2201      	movs	r2, #1
 801b9fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ba00:	f006 061f 	and.w	r6, r6, #31
 801ba04:	fa02 f606 	lsl.w	r6, r2, r6
 801ba08:	421e      	tst	r6, r3
 801ba0a:	d13a      	bne.n	801ba82 <__gethex+0x3fe>
 801ba0c:	f045 0520 	orr.w	r5, r5, #32
 801ba10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ba12:	601c      	str	r4, [r3, #0]
 801ba14:	9b02      	ldr	r3, [sp, #8]
 801ba16:	601f      	str	r7, [r3, #0]
 801ba18:	e6b0      	b.n	801b77c <__gethex+0xf8>
 801ba1a:	4299      	cmp	r1, r3
 801ba1c:	f843 cc04 	str.w	ip, [r3, #-4]
 801ba20:	d8d9      	bhi.n	801b9d6 <__gethex+0x352>
 801ba22:	68a3      	ldr	r3, [r4, #8]
 801ba24:	459b      	cmp	fp, r3
 801ba26:	db17      	blt.n	801ba58 <__gethex+0x3d4>
 801ba28:	6861      	ldr	r1, [r4, #4]
 801ba2a:	9801      	ldr	r0, [sp, #4]
 801ba2c:	3101      	adds	r1, #1
 801ba2e:	f000 f9bb 	bl	801bda8 <_Balloc>
 801ba32:	4681      	mov	r9, r0
 801ba34:	b918      	cbnz	r0, 801ba3e <__gethex+0x3ba>
 801ba36:	4b1a      	ldr	r3, [pc, #104]	@ (801baa0 <__gethex+0x41c>)
 801ba38:	4602      	mov	r2, r0
 801ba3a:	2184      	movs	r1, #132	@ 0x84
 801ba3c:	e6c5      	b.n	801b7ca <__gethex+0x146>
 801ba3e:	6922      	ldr	r2, [r4, #16]
 801ba40:	3202      	adds	r2, #2
 801ba42:	f104 010c 	add.w	r1, r4, #12
 801ba46:	0092      	lsls	r2, r2, #2
 801ba48:	300c      	adds	r0, #12
 801ba4a:	f7ff fd52 	bl	801b4f2 <memcpy>
 801ba4e:	4621      	mov	r1, r4
 801ba50:	9801      	ldr	r0, [sp, #4]
 801ba52:	f000 f9e9 	bl	801be28 <_Bfree>
 801ba56:	464c      	mov	r4, r9
 801ba58:	6923      	ldr	r3, [r4, #16]
 801ba5a:	1c5a      	adds	r2, r3, #1
 801ba5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801ba60:	6122      	str	r2, [r4, #16]
 801ba62:	2201      	movs	r2, #1
 801ba64:	615a      	str	r2, [r3, #20]
 801ba66:	e7be      	b.n	801b9e6 <__gethex+0x362>
 801ba68:	6922      	ldr	r2, [r4, #16]
 801ba6a:	455a      	cmp	r2, fp
 801ba6c:	dd0b      	ble.n	801ba86 <__gethex+0x402>
 801ba6e:	2101      	movs	r1, #1
 801ba70:	4620      	mov	r0, r4
 801ba72:	f7ff fd9f 	bl	801b5b4 <rshift>
 801ba76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ba7a:	3701      	adds	r7, #1
 801ba7c:	42bb      	cmp	r3, r7
 801ba7e:	f6ff aee0 	blt.w	801b842 <__gethex+0x1be>
 801ba82:	2501      	movs	r5, #1
 801ba84:	e7c2      	b.n	801ba0c <__gethex+0x388>
 801ba86:	f016 061f 	ands.w	r6, r6, #31
 801ba8a:	d0fa      	beq.n	801ba82 <__gethex+0x3fe>
 801ba8c:	4453      	add	r3, sl
 801ba8e:	f1c6 0620 	rsb	r6, r6, #32
 801ba92:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801ba96:	f000 fa79 	bl	801bf8c <__hi0bits>
 801ba9a:	42b0      	cmp	r0, r6
 801ba9c:	dbe7      	blt.n	801ba6e <__gethex+0x3ea>
 801ba9e:	e7f0      	b.n	801ba82 <__gethex+0x3fe>
 801baa0:	0801f881 	.word	0x0801f881

0801baa4 <L_shift>:
 801baa4:	f1c2 0208 	rsb	r2, r2, #8
 801baa8:	0092      	lsls	r2, r2, #2
 801baaa:	b570      	push	{r4, r5, r6, lr}
 801baac:	f1c2 0620 	rsb	r6, r2, #32
 801bab0:	6843      	ldr	r3, [r0, #4]
 801bab2:	6804      	ldr	r4, [r0, #0]
 801bab4:	fa03 f506 	lsl.w	r5, r3, r6
 801bab8:	432c      	orrs	r4, r5
 801baba:	40d3      	lsrs	r3, r2
 801babc:	6004      	str	r4, [r0, #0]
 801babe:	f840 3f04 	str.w	r3, [r0, #4]!
 801bac2:	4288      	cmp	r0, r1
 801bac4:	d3f4      	bcc.n	801bab0 <L_shift+0xc>
 801bac6:	bd70      	pop	{r4, r5, r6, pc}

0801bac8 <__match>:
 801bac8:	b530      	push	{r4, r5, lr}
 801baca:	6803      	ldr	r3, [r0, #0]
 801bacc:	3301      	adds	r3, #1
 801bace:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bad2:	b914      	cbnz	r4, 801bada <__match+0x12>
 801bad4:	6003      	str	r3, [r0, #0]
 801bad6:	2001      	movs	r0, #1
 801bad8:	bd30      	pop	{r4, r5, pc}
 801bada:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bade:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801bae2:	2d19      	cmp	r5, #25
 801bae4:	bf98      	it	ls
 801bae6:	3220      	addls	r2, #32
 801bae8:	42a2      	cmp	r2, r4
 801baea:	d0f0      	beq.n	801bace <__match+0x6>
 801baec:	2000      	movs	r0, #0
 801baee:	e7f3      	b.n	801bad8 <__match+0x10>

0801baf0 <__hexnan>:
 801baf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801baf4:	680b      	ldr	r3, [r1, #0]
 801baf6:	6801      	ldr	r1, [r0, #0]
 801baf8:	115e      	asrs	r6, r3, #5
 801bafa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801bafe:	f013 031f 	ands.w	r3, r3, #31
 801bb02:	b087      	sub	sp, #28
 801bb04:	bf18      	it	ne
 801bb06:	3604      	addne	r6, #4
 801bb08:	2500      	movs	r5, #0
 801bb0a:	1f37      	subs	r7, r6, #4
 801bb0c:	4682      	mov	sl, r0
 801bb0e:	4690      	mov	r8, r2
 801bb10:	9301      	str	r3, [sp, #4]
 801bb12:	f846 5c04 	str.w	r5, [r6, #-4]
 801bb16:	46b9      	mov	r9, r7
 801bb18:	463c      	mov	r4, r7
 801bb1a:	9502      	str	r5, [sp, #8]
 801bb1c:	46ab      	mov	fp, r5
 801bb1e:	784a      	ldrb	r2, [r1, #1]
 801bb20:	1c4b      	adds	r3, r1, #1
 801bb22:	9303      	str	r3, [sp, #12]
 801bb24:	b342      	cbz	r2, 801bb78 <__hexnan+0x88>
 801bb26:	4610      	mov	r0, r2
 801bb28:	9105      	str	r1, [sp, #20]
 801bb2a:	9204      	str	r2, [sp, #16]
 801bb2c:	f7ff fd94 	bl	801b658 <__hexdig_fun>
 801bb30:	2800      	cmp	r0, #0
 801bb32:	d151      	bne.n	801bbd8 <__hexnan+0xe8>
 801bb34:	9a04      	ldr	r2, [sp, #16]
 801bb36:	9905      	ldr	r1, [sp, #20]
 801bb38:	2a20      	cmp	r2, #32
 801bb3a:	d818      	bhi.n	801bb6e <__hexnan+0x7e>
 801bb3c:	9b02      	ldr	r3, [sp, #8]
 801bb3e:	459b      	cmp	fp, r3
 801bb40:	dd13      	ble.n	801bb6a <__hexnan+0x7a>
 801bb42:	454c      	cmp	r4, r9
 801bb44:	d206      	bcs.n	801bb54 <__hexnan+0x64>
 801bb46:	2d07      	cmp	r5, #7
 801bb48:	dc04      	bgt.n	801bb54 <__hexnan+0x64>
 801bb4a:	462a      	mov	r2, r5
 801bb4c:	4649      	mov	r1, r9
 801bb4e:	4620      	mov	r0, r4
 801bb50:	f7ff ffa8 	bl	801baa4 <L_shift>
 801bb54:	4544      	cmp	r4, r8
 801bb56:	d952      	bls.n	801bbfe <__hexnan+0x10e>
 801bb58:	2300      	movs	r3, #0
 801bb5a:	f1a4 0904 	sub.w	r9, r4, #4
 801bb5e:	f844 3c04 	str.w	r3, [r4, #-4]
 801bb62:	f8cd b008 	str.w	fp, [sp, #8]
 801bb66:	464c      	mov	r4, r9
 801bb68:	461d      	mov	r5, r3
 801bb6a:	9903      	ldr	r1, [sp, #12]
 801bb6c:	e7d7      	b.n	801bb1e <__hexnan+0x2e>
 801bb6e:	2a29      	cmp	r2, #41	@ 0x29
 801bb70:	d157      	bne.n	801bc22 <__hexnan+0x132>
 801bb72:	3102      	adds	r1, #2
 801bb74:	f8ca 1000 	str.w	r1, [sl]
 801bb78:	f1bb 0f00 	cmp.w	fp, #0
 801bb7c:	d051      	beq.n	801bc22 <__hexnan+0x132>
 801bb7e:	454c      	cmp	r4, r9
 801bb80:	d206      	bcs.n	801bb90 <__hexnan+0xa0>
 801bb82:	2d07      	cmp	r5, #7
 801bb84:	dc04      	bgt.n	801bb90 <__hexnan+0xa0>
 801bb86:	462a      	mov	r2, r5
 801bb88:	4649      	mov	r1, r9
 801bb8a:	4620      	mov	r0, r4
 801bb8c:	f7ff ff8a 	bl	801baa4 <L_shift>
 801bb90:	4544      	cmp	r4, r8
 801bb92:	d936      	bls.n	801bc02 <__hexnan+0x112>
 801bb94:	f1a8 0204 	sub.w	r2, r8, #4
 801bb98:	4623      	mov	r3, r4
 801bb9a:	f853 1b04 	ldr.w	r1, [r3], #4
 801bb9e:	f842 1f04 	str.w	r1, [r2, #4]!
 801bba2:	429f      	cmp	r7, r3
 801bba4:	d2f9      	bcs.n	801bb9a <__hexnan+0xaa>
 801bba6:	1b3b      	subs	r3, r7, r4
 801bba8:	f023 0303 	bic.w	r3, r3, #3
 801bbac:	3304      	adds	r3, #4
 801bbae:	3401      	adds	r4, #1
 801bbb0:	3e03      	subs	r6, #3
 801bbb2:	42b4      	cmp	r4, r6
 801bbb4:	bf88      	it	hi
 801bbb6:	2304      	movhi	r3, #4
 801bbb8:	4443      	add	r3, r8
 801bbba:	2200      	movs	r2, #0
 801bbbc:	f843 2b04 	str.w	r2, [r3], #4
 801bbc0:	429f      	cmp	r7, r3
 801bbc2:	d2fb      	bcs.n	801bbbc <__hexnan+0xcc>
 801bbc4:	683b      	ldr	r3, [r7, #0]
 801bbc6:	b91b      	cbnz	r3, 801bbd0 <__hexnan+0xe0>
 801bbc8:	4547      	cmp	r7, r8
 801bbca:	d128      	bne.n	801bc1e <__hexnan+0x12e>
 801bbcc:	2301      	movs	r3, #1
 801bbce:	603b      	str	r3, [r7, #0]
 801bbd0:	2005      	movs	r0, #5
 801bbd2:	b007      	add	sp, #28
 801bbd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbd8:	3501      	adds	r5, #1
 801bbda:	2d08      	cmp	r5, #8
 801bbdc:	f10b 0b01 	add.w	fp, fp, #1
 801bbe0:	dd06      	ble.n	801bbf0 <__hexnan+0x100>
 801bbe2:	4544      	cmp	r4, r8
 801bbe4:	d9c1      	bls.n	801bb6a <__hexnan+0x7a>
 801bbe6:	2300      	movs	r3, #0
 801bbe8:	f844 3c04 	str.w	r3, [r4, #-4]
 801bbec:	2501      	movs	r5, #1
 801bbee:	3c04      	subs	r4, #4
 801bbf0:	6822      	ldr	r2, [r4, #0]
 801bbf2:	f000 000f 	and.w	r0, r0, #15
 801bbf6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801bbfa:	6020      	str	r0, [r4, #0]
 801bbfc:	e7b5      	b.n	801bb6a <__hexnan+0x7a>
 801bbfe:	2508      	movs	r5, #8
 801bc00:	e7b3      	b.n	801bb6a <__hexnan+0x7a>
 801bc02:	9b01      	ldr	r3, [sp, #4]
 801bc04:	2b00      	cmp	r3, #0
 801bc06:	d0dd      	beq.n	801bbc4 <__hexnan+0xd4>
 801bc08:	f1c3 0320 	rsb	r3, r3, #32
 801bc0c:	f04f 32ff 	mov.w	r2, #4294967295
 801bc10:	40da      	lsrs	r2, r3
 801bc12:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801bc16:	4013      	ands	r3, r2
 801bc18:	f846 3c04 	str.w	r3, [r6, #-4]
 801bc1c:	e7d2      	b.n	801bbc4 <__hexnan+0xd4>
 801bc1e:	3f04      	subs	r7, #4
 801bc20:	e7d0      	b.n	801bbc4 <__hexnan+0xd4>
 801bc22:	2004      	movs	r0, #4
 801bc24:	e7d5      	b.n	801bbd2 <__hexnan+0xe2>
	...

0801bc28 <sbrk_aligned>:
 801bc28:	b570      	push	{r4, r5, r6, lr}
 801bc2a:	4e0f      	ldr	r6, [pc, #60]	@ (801bc68 <sbrk_aligned+0x40>)
 801bc2c:	460c      	mov	r4, r1
 801bc2e:	6831      	ldr	r1, [r6, #0]
 801bc30:	4605      	mov	r5, r0
 801bc32:	b911      	cbnz	r1, 801bc3a <sbrk_aligned+0x12>
 801bc34:	f001 f922 	bl	801ce7c <_sbrk_r>
 801bc38:	6030      	str	r0, [r6, #0]
 801bc3a:	4621      	mov	r1, r4
 801bc3c:	4628      	mov	r0, r5
 801bc3e:	f001 f91d 	bl	801ce7c <_sbrk_r>
 801bc42:	1c43      	adds	r3, r0, #1
 801bc44:	d103      	bne.n	801bc4e <sbrk_aligned+0x26>
 801bc46:	f04f 34ff 	mov.w	r4, #4294967295
 801bc4a:	4620      	mov	r0, r4
 801bc4c:	bd70      	pop	{r4, r5, r6, pc}
 801bc4e:	1cc4      	adds	r4, r0, #3
 801bc50:	f024 0403 	bic.w	r4, r4, #3
 801bc54:	42a0      	cmp	r0, r4
 801bc56:	d0f8      	beq.n	801bc4a <sbrk_aligned+0x22>
 801bc58:	1a21      	subs	r1, r4, r0
 801bc5a:	4628      	mov	r0, r5
 801bc5c:	f001 f90e 	bl	801ce7c <_sbrk_r>
 801bc60:	3001      	adds	r0, #1
 801bc62:	d1f2      	bne.n	801bc4a <sbrk_aligned+0x22>
 801bc64:	e7ef      	b.n	801bc46 <sbrk_aligned+0x1e>
 801bc66:	bf00      	nop
 801bc68:	200090a4 	.word	0x200090a4

0801bc6c <_malloc_r>:
 801bc6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bc70:	1ccd      	adds	r5, r1, #3
 801bc72:	f025 0503 	bic.w	r5, r5, #3
 801bc76:	3508      	adds	r5, #8
 801bc78:	2d0c      	cmp	r5, #12
 801bc7a:	bf38      	it	cc
 801bc7c:	250c      	movcc	r5, #12
 801bc7e:	2d00      	cmp	r5, #0
 801bc80:	4606      	mov	r6, r0
 801bc82:	db01      	blt.n	801bc88 <_malloc_r+0x1c>
 801bc84:	42a9      	cmp	r1, r5
 801bc86:	d904      	bls.n	801bc92 <_malloc_r+0x26>
 801bc88:	230c      	movs	r3, #12
 801bc8a:	6033      	str	r3, [r6, #0]
 801bc8c:	2000      	movs	r0, #0
 801bc8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bc92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801bd68 <_malloc_r+0xfc>
 801bc96:	f000 f87b 	bl	801bd90 <__malloc_lock>
 801bc9a:	f8d8 3000 	ldr.w	r3, [r8]
 801bc9e:	461c      	mov	r4, r3
 801bca0:	bb44      	cbnz	r4, 801bcf4 <_malloc_r+0x88>
 801bca2:	4629      	mov	r1, r5
 801bca4:	4630      	mov	r0, r6
 801bca6:	f7ff ffbf 	bl	801bc28 <sbrk_aligned>
 801bcaa:	1c43      	adds	r3, r0, #1
 801bcac:	4604      	mov	r4, r0
 801bcae:	d158      	bne.n	801bd62 <_malloc_r+0xf6>
 801bcb0:	f8d8 4000 	ldr.w	r4, [r8]
 801bcb4:	4627      	mov	r7, r4
 801bcb6:	2f00      	cmp	r7, #0
 801bcb8:	d143      	bne.n	801bd42 <_malloc_r+0xd6>
 801bcba:	2c00      	cmp	r4, #0
 801bcbc:	d04b      	beq.n	801bd56 <_malloc_r+0xea>
 801bcbe:	6823      	ldr	r3, [r4, #0]
 801bcc0:	4639      	mov	r1, r7
 801bcc2:	4630      	mov	r0, r6
 801bcc4:	eb04 0903 	add.w	r9, r4, r3
 801bcc8:	f001 f8d8 	bl	801ce7c <_sbrk_r>
 801bccc:	4581      	cmp	r9, r0
 801bcce:	d142      	bne.n	801bd56 <_malloc_r+0xea>
 801bcd0:	6821      	ldr	r1, [r4, #0]
 801bcd2:	1a6d      	subs	r5, r5, r1
 801bcd4:	4629      	mov	r1, r5
 801bcd6:	4630      	mov	r0, r6
 801bcd8:	f7ff ffa6 	bl	801bc28 <sbrk_aligned>
 801bcdc:	3001      	adds	r0, #1
 801bcde:	d03a      	beq.n	801bd56 <_malloc_r+0xea>
 801bce0:	6823      	ldr	r3, [r4, #0]
 801bce2:	442b      	add	r3, r5
 801bce4:	6023      	str	r3, [r4, #0]
 801bce6:	f8d8 3000 	ldr.w	r3, [r8]
 801bcea:	685a      	ldr	r2, [r3, #4]
 801bcec:	bb62      	cbnz	r2, 801bd48 <_malloc_r+0xdc>
 801bcee:	f8c8 7000 	str.w	r7, [r8]
 801bcf2:	e00f      	b.n	801bd14 <_malloc_r+0xa8>
 801bcf4:	6822      	ldr	r2, [r4, #0]
 801bcf6:	1b52      	subs	r2, r2, r5
 801bcf8:	d420      	bmi.n	801bd3c <_malloc_r+0xd0>
 801bcfa:	2a0b      	cmp	r2, #11
 801bcfc:	d917      	bls.n	801bd2e <_malloc_r+0xc2>
 801bcfe:	1961      	adds	r1, r4, r5
 801bd00:	42a3      	cmp	r3, r4
 801bd02:	6025      	str	r5, [r4, #0]
 801bd04:	bf18      	it	ne
 801bd06:	6059      	strne	r1, [r3, #4]
 801bd08:	6863      	ldr	r3, [r4, #4]
 801bd0a:	bf08      	it	eq
 801bd0c:	f8c8 1000 	streq.w	r1, [r8]
 801bd10:	5162      	str	r2, [r4, r5]
 801bd12:	604b      	str	r3, [r1, #4]
 801bd14:	4630      	mov	r0, r6
 801bd16:	f000 f841 	bl	801bd9c <__malloc_unlock>
 801bd1a:	f104 000b 	add.w	r0, r4, #11
 801bd1e:	1d23      	adds	r3, r4, #4
 801bd20:	f020 0007 	bic.w	r0, r0, #7
 801bd24:	1ac2      	subs	r2, r0, r3
 801bd26:	bf1c      	itt	ne
 801bd28:	1a1b      	subne	r3, r3, r0
 801bd2a:	50a3      	strne	r3, [r4, r2]
 801bd2c:	e7af      	b.n	801bc8e <_malloc_r+0x22>
 801bd2e:	6862      	ldr	r2, [r4, #4]
 801bd30:	42a3      	cmp	r3, r4
 801bd32:	bf0c      	ite	eq
 801bd34:	f8c8 2000 	streq.w	r2, [r8]
 801bd38:	605a      	strne	r2, [r3, #4]
 801bd3a:	e7eb      	b.n	801bd14 <_malloc_r+0xa8>
 801bd3c:	4623      	mov	r3, r4
 801bd3e:	6864      	ldr	r4, [r4, #4]
 801bd40:	e7ae      	b.n	801bca0 <_malloc_r+0x34>
 801bd42:	463c      	mov	r4, r7
 801bd44:	687f      	ldr	r7, [r7, #4]
 801bd46:	e7b6      	b.n	801bcb6 <_malloc_r+0x4a>
 801bd48:	461a      	mov	r2, r3
 801bd4a:	685b      	ldr	r3, [r3, #4]
 801bd4c:	42a3      	cmp	r3, r4
 801bd4e:	d1fb      	bne.n	801bd48 <_malloc_r+0xdc>
 801bd50:	2300      	movs	r3, #0
 801bd52:	6053      	str	r3, [r2, #4]
 801bd54:	e7de      	b.n	801bd14 <_malloc_r+0xa8>
 801bd56:	230c      	movs	r3, #12
 801bd58:	6033      	str	r3, [r6, #0]
 801bd5a:	4630      	mov	r0, r6
 801bd5c:	f000 f81e 	bl	801bd9c <__malloc_unlock>
 801bd60:	e794      	b.n	801bc8c <_malloc_r+0x20>
 801bd62:	6005      	str	r5, [r0, #0]
 801bd64:	e7d6      	b.n	801bd14 <_malloc_r+0xa8>
 801bd66:	bf00      	nop
 801bd68:	200090a8 	.word	0x200090a8

0801bd6c <__ascii_mbtowc>:
 801bd6c:	b082      	sub	sp, #8
 801bd6e:	b901      	cbnz	r1, 801bd72 <__ascii_mbtowc+0x6>
 801bd70:	a901      	add	r1, sp, #4
 801bd72:	b142      	cbz	r2, 801bd86 <__ascii_mbtowc+0x1a>
 801bd74:	b14b      	cbz	r3, 801bd8a <__ascii_mbtowc+0x1e>
 801bd76:	7813      	ldrb	r3, [r2, #0]
 801bd78:	600b      	str	r3, [r1, #0]
 801bd7a:	7812      	ldrb	r2, [r2, #0]
 801bd7c:	1e10      	subs	r0, r2, #0
 801bd7e:	bf18      	it	ne
 801bd80:	2001      	movne	r0, #1
 801bd82:	b002      	add	sp, #8
 801bd84:	4770      	bx	lr
 801bd86:	4610      	mov	r0, r2
 801bd88:	e7fb      	b.n	801bd82 <__ascii_mbtowc+0x16>
 801bd8a:	f06f 0001 	mvn.w	r0, #1
 801bd8e:	e7f8      	b.n	801bd82 <__ascii_mbtowc+0x16>

0801bd90 <__malloc_lock>:
 801bd90:	4801      	ldr	r0, [pc, #4]	@ (801bd98 <__malloc_lock+0x8>)
 801bd92:	f7ff bba4 	b.w	801b4de <__retarget_lock_acquire_recursive>
 801bd96:	bf00      	nop
 801bd98:	200090a0 	.word	0x200090a0

0801bd9c <__malloc_unlock>:
 801bd9c:	4801      	ldr	r0, [pc, #4]	@ (801bda4 <__malloc_unlock+0x8>)
 801bd9e:	f7ff bb9f 	b.w	801b4e0 <__retarget_lock_release_recursive>
 801bda2:	bf00      	nop
 801bda4:	200090a0 	.word	0x200090a0

0801bda8 <_Balloc>:
 801bda8:	b570      	push	{r4, r5, r6, lr}
 801bdaa:	69c6      	ldr	r6, [r0, #28]
 801bdac:	4604      	mov	r4, r0
 801bdae:	460d      	mov	r5, r1
 801bdb0:	b976      	cbnz	r6, 801bdd0 <_Balloc+0x28>
 801bdb2:	2010      	movs	r0, #16
 801bdb4:	f001 f8a4 	bl	801cf00 <malloc>
 801bdb8:	4602      	mov	r2, r0
 801bdba:	61e0      	str	r0, [r4, #28]
 801bdbc:	b920      	cbnz	r0, 801bdc8 <_Balloc+0x20>
 801bdbe:	4b18      	ldr	r3, [pc, #96]	@ (801be20 <_Balloc+0x78>)
 801bdc0:	4818      	ldr	r0, [pc, #96]	@ (801be24 <_Balloc+0x7c>)
 801bdc2:	216b      	movs	r1, #107	@ 0x6b
 801bdc4:	f001 f86a 	bl	801ce9c <__assert_func>
 801bdc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801bdcc:	6006      	str	r6, [r0, #0]
 801bdce:	60c6      	str	r6, [r0, #12]
 801bdd0:	69e6      	ldr	r6, [r4, #28]
 801bdd2:	68f3      	ldr	r3, [r6, #12]
 801bdd4:	b183      	cbz	r3, 801bdf8 <_Balloc+0x50>
 801bdd6:	69e3      	ldr	r3, [r4, #28]
 801bdd8:	68db      	ldr	r3, [r3, #12]
 801bdda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801bdde:	b9b8      	cbnz	r0, 801be10 <_Balloc+0x68>
 801bde0:	2101      	movs	r1, #1
 801bde2:	fa01 f605 	lsl.w	r6, r1, r5
 801bde6:	1d72      	adds	r2, r6, #5
 801bde8:	0092      	lsls	r2, r2, #2
 801bdea:	4620      	mov	r0, r4
 801bdec:	f001 f874 	bl	801ced8 <_calloc_r>
 801bdf0:	b160      	cbz	r0, 801be0c <_Balloc+0x64>
 801bdf2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801bdf6:	e00e      	b.n	801be16 <_Balloc+0x6e>
 801bdf8:	2221      	movs	r2, #33	@ 0x21
 801bdfa:	2104      	movs	r1, #4
 801bdfc:	4620      	mov	r0, r4
 801bdfe:	f001 f86b 	bl	801ced8 <_calloc_r>
 801be02:	69e3      	ldr	r3, [r4, #28]
 801be04:	60f0      	str	r0, [r6, #12]
 801be06:	68db      	ldr	r3, [r3, #12]
 801be08:	2b00      	cmp	r3, #0
 801be0a:	d1e4      	bne.n	801bdd6 <_Balloc+0x2e>
 801be0c:	2000      	movs	r0, #0
 801be0e:	bd70      	pop	{r4, r5, r6, pc}
 801be10:	6802      	ldr	r2, [r0, #0]
 801be12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801be16:	2300      	movs	r3, #0
 801be18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801be1c:	e7f7      	b.n	801be0e <_Balloc+0x66>
 801be1e:	bf00      	nop
 801be20:	0801f8f2 	.word	0x0801f8f2
 801be24:	0801f909 	.word	0x0801f909

0801be28 <_Bfree>:
 801be28:	b570      	push	{r4, r5, r6, lr}
 801be2a:	69c6      	ldr	r6, [r0, #28]
 801be2c:	4605      	mov	r5, r0
 801be2e:	460c      	mov	r4, r1
 801be30:	b976      	cbnz	r6, 801be50 <_Bfree+0x28>
 801be32:	2010      	movs	r0, #16
 801be34:	f001 f864 	bl	801cf00 <malloc>
 801be38:	4602      	mov	r2, r0
 801be3a:	61e8      	str	r0, [r5, #28]
 801be3c:	b920      	cbnz	r0, 801be48 <_Bfree+0x20>
 801be3e:	4b09      	ldr	r3, [pc, #36]	@ (801be64 <_Bfree+0x3c>)
 801be40:	4809      	ldr	r0, [pc, #36]	@ (801be68 <_Bfree+0x40>)
 801be42:	218f      	movs	r1, #143	@ 0x8f
 801be44:	f001 f82a 	bl	801ce9c <__assert_func>
 801be48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801be4c:	6006      	str	r6, [r0, #0]
 801be4e:	60c6      	str	r6, [r0, #12]
 801be50:	b13c      	cbz	r4, 801be62 <_Bfree+0x3a>
 801be52:	69eb      	ldr	r3, [r5, #28]
 801be54:	6862      	ldr	r2, [r4, #4]
 801be56:	68db      	ldr	r3, [r3, #12]
 801be58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801be5c:	6021      	str	r1, [r4, #0]
 801be5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801be62:	bd70      	pop	{r4, r5, r6, pc}
 801be64:	0801f8f2 	.word	0x0801f8f2
 801be68:	0801f909 	.word	0x0801f909

0801be6c <__multadd>:
 801be6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be70:	690d      	ldr	r5, [r1, #16]
 801be72:	4607      	mov	r7, r0
 801be74:	460c      	mov	r4, r1
 801be76:	461e      	mov	r6, r3
 801be78:	f101 0c14 	add.w	ip, r1, #20
 801be7c:	2000      	movs	r0, #0
 801be7e:	f8dc 3000 	ldr.w	r3, [ip]
 801be82:	b299      	uxth	r1, r3
 801be84:	fb02 6101 	mla	r1, r2, r1, r6
 801be88:	0c1e      	lsrs	r6, r3, #16
 801be8a:	0c0b      	lsrs	r3, r1, #16
 801be8c:	fb02 3306 	mla	r3, r2, r6, r3
 801be90:	b289      	uxth	r1, r1
 801be92:	3001      	adds	r0, #1
 801be94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801be98:	4285      	cmp	r5, r0
 801be9a:	f84c 1b04 	str.w	r1, [ip], #4
 801be9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801bea2:	dcec      	bgt.n	801be7e <__multadd+0x12>
 801bea4:	b30e      	cbz	r6, 801beea <__multadd+0x7e>
 801bea6:	68a3      	ldr	r3, [r4, #8]
 801bea8:	42ab      	cmp	r3, r5
 801beaa:	dc19      	bgt.n	801bee0 <__multadd+0x74>
 801beac:	6861      	ldr	r1, [r4, #4]
 801beae:	4638      	mov	r0, r7
 801beb0:	3101      	adds	r1, #1
 801beb2:	f7ff ff79 	bl	801bda8 <_Balloc>
 801beb6:	4680      	mov	r8, r0
 801beb8:	b928      	cbnz	r0, 801bec6 <__multadd+0x5a>
 801beba:	4602      	mov	r2, r0
 801bebc:	4b0c      	ldr	r3, [pc, #48]	@ (801bef0 <__multadd+0x84>)
 801bebe:	480d      	ldr	r0, [pc, #52]	@ (801bef4 <__multadd+0x88>)
 801bec0:	21ba      	movs	r1, #186	@ 0xba
 801bec2:	f000 ffeb 	bl	801ce9c <__assert_func>
 801bec6:	6922      	ldr	r2, [r4, #16]
 801bec8:	3202      	adds	r2, #2
 801beca:	f104 010c 	add.w	r1, r4, #12
 801bece:	0092      	lsls	r2, r2, #2
 801bed0:	300c      	adds	r0, #12
 801bed2:	f7ff fb0e 	bl	801b4f2 <memcpy>
 801bed6:	4621      	mov	r1, r4
 801bed8:	4638      	mov	r0, r7
 801beda:	f7ff ffa5 	bl	801be28 <_Bfree>
 801bede:	4644      	mov	r4, r8
 801bee0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801bee4:	3501      	adds	r5, #1
 801bee6:	615e      	str	r6, [r3, #20]
 801bee8:	6125      	str	r5, [r4, #16]
 801beea:	4620      	mov	r0, r4
 801beec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bef0:	0801f881 	.word	0x0801f881
 801bef4:	0801f909 	.word	0x0801f909

0801bef8 <__s2b>:
 801bef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801befc:	460c      	mov	r4, r1
 801befe:	4615      	mov	r5, r2
 801bf00:	461f      	mov	r7, r3
 801bf02:	2209      	movs	r2, #9
 801bf04:	3308      	adds	r3, #8
 801bf06:	4606      	mov	r6, r0
 801bf08:	fb93 f3f2 	sdiv	r3, r3, r2
 801bf0c:	2100      	movs	r1, #0
 801bf0e:	2201      	movs	r2, #1
 801bf10:	429a      	cmp	r2, r3
 801bf12:	db09      	blt.n	801bf28 <__s2b+0x30>
 801bf14:	4630      	mov	r0, r6
 801bf16:	f7ff ff47 	bl	801bda8 <_Balloc>
 801bf1a:	b940      	cbnz	r0, 801bf2e <__s2b+0x36>
 801bf1c:	4602      	mov	r2, r0
 801bf1e:	4b19      	ldr	r3, [pc, #100]	@ (801bf84 <__s2b+0x8c>)
 801bf20:	4819      	ldr	r0, [pc, #100]	@ (801bf88 <__s2b+0x90>)
 801bf22:	21d3      	movs	r1, #211	@ 0xd3
 801bf24:	f000 ffba 	bl	801ce9c <__assert_func>
 801bf28:	0052      	lsls	r2, r2, #1
 801bf2a:	3101      	adds	r1, #1
 801bf2c:	e7f0      	b.n	801bf10 <__s2b+0x18>
 801bf2e:	9b08      	ldr	r3, [sp, #32]
 801bf30:	6143      	str	r3, [r0, #20]
 801bf32:	2d09      	cmp	r5, #9
 801bf34:	f04f 0301 	mov.w	r3, #1
 801bf38:	6103      	str	r3, [r0, #16]
 801bf3a:	dd16      	ble.n	801bf6a <__s2b+0x72>
 801bf3c:	f104 0909 	add.w	r9, r4, #9
 801bf40:	46c8      	mov	r8, r9
 801bf42:	442c      	add	r4, r5
 801bf44:	f818 3b01 	ldrb.w	r3, [r8], #1
 801bf48:	4601      	mov	r1, r0
 801bf4a:	3b30      	subs	r3, #48	@ 0x30
 801bf4c:	220a      	movs	r2, #10
 801bf4e:	4630      	mov	r0, r6
 801bf50:	f7ff ff8c 	bl	801be6c <__multadd>
 801bf54:	45a0      	cmp	r8, r4
 801bf56:	d1f5      	bne.n	801bf44 <__s2b+0x4c>
 801bf58:	f1a5 0408 	sub.w	r4, r5, #8
 801bf5c:	444c      	add	r4, r9
 801bf5e:	1b2d      	subs	r5, r5, r4
 801bf60:	1963      	adds	r3, r4, r5
 801bf62:	42bb      	cmp	r3, r7
 801bf64:	db04      	blt.n	801bf70 <__s2b+0x78>
 801bf66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bf6a:	340a      	adds	r4, #10
 801bf6c:	2509      	movs	r5, #9
 801bf6e:	e7f6      	b.n	801bf5e <__s2b+0x66>
 801bf70:	f814 3b01 	ldrb.w	r3, [r4], #1
 801bf74:	4601      	mov	r1, r0
 801bf76:	3b30      	subs	r3, #48	@ 0x30
 801bf78:	220a      	movs	r2, #10
 801bf7a:	4630      	mov	r0, r6
 801bf7c:	f7ff ff76 	bl	801be6c <__multadd>
 801bf80:	e7ee      	b.n	801bf60 <__s2b+0x68>
 801bf82:	bf00      	nop
 801bf84:	0801f881 	.word	0x0801f881
 801bf88:	0801f909 	.word	0x0801f909

0801bf8c <__hi0bits>:
 801bf8c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801bf90:	4603      	mov	r3, r0
 801bf92:	bf36      	itet	cc
 801bf94:	0403      	lslcc	r3, r0, #16
 801bf96:	2000      	movcs	r0, #0
 801bf98:	2010      	movcc	r0, #16
 801bf9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801bf9e:	bf3c      	itt	cc
 801bfa0:	021b      	lslcc	r3, r3, #8
 801bfa2:	3008      	addcc	r0, #8
 801bfa4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801bfa8:	bf3c      	itt	cc
 801bfaa:	011b      	lslcc	r3, r3, #4
 801bfac:	3004      	addcc	r0, #4
 801bfae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801bfb2:	bf3c      	itt	cc
 801bfb4:	009b      	lslcc	r3, r3, #2
 801bfb6:	3002      	addcc	r0, #2
 801bfb8:	2b00      	cmp	r3, #0
 801bfba:	db05      	blt.n	801bfc8 <__hi0bits+0x3c>
 801bfbc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801bfc0:	f100 0001 	add.w	r0, r0, #1
 801bfc4:	bf08      	it	eq
 801bfc6:	2020      	moveq	r0, #32
 801bfc8:	4770      	bx	lr

0801bfca <__lo0bits>:
 801bfca:	6803      	ldr	r3, [r0, #0]
 801bfcc:	4602      	mov	r2, r0
 801bfce:	f013 0007 	ands.w	r0, r3, #7
 801bfd2:	d00b      	beq.n	801bfec <__lo0bits+0x22>
 801bfd4:	07d9      	lsls	r1, r3, #31
 801bfd6:	d421      	bmi.n	801c01c <__lo0bits+0x52>
 801bfd8:	0798      	lsls	r0, r3, #30
 801bfda:	bf49      	itett	mi
 801bfdc:	085b      	lsrmi	r3, r3, #1
 801bfde:	089b      	lsrpl	r3, r3, #2
 801bfe0:	2001      	movmi	r0, #1
 801bfe2:	6013      	strmi	r3, [r2, #0]
 801bfe4:	bf5c      	itt	pl
 801bfe6:	6013      	strpl	r3, [r2, #0]
 801bfe8:	2002      	movpl	r0, #2
 801bfea:	4770      	bx	lr
 801bfec:	b299      	uxth	r1, r3
 801bfee:	b909      	cbnz	r1, 801bff4 <__lo0bits+0x2a>
 801bff0:	0c1b      	lsrs	r3, r3, #16
 801bff2:	2010      	movs	r0, #16
 801bff4:	b2d9      	uxtb	r1, r3
 801bff6:	b909      	cbnz	r1, 801bffc <__lo0bits+0x32>
 801bff8:	3008      	adds	r0, #8
 801bffa:	0a1b      	lsrs	r3, r3, #8
 801bffc:	0719      	lsls	r1, r3, #28
 801bffe:	bf04      	itt	eq
 801c000:	091b      	lsreq	r3, r3, #4
 801c002:	3004      	addeq	r0, #4
 801c004:	0799      	lsls	r1, r3, #30
 801c006:	bf04      	itt	eq
 801c008:	089b      	lsreq	r3, r3, #2
 801c00a:	3002      	addeq	r0, #2
 801c00c:	07d9      	lsls	r1, r3, #31
 801c00e:	d403      	bmi.n	801c018 <__lo0bits+0x4e>
 801c010:	085b      	lsrs	r3, r3, #1
 801c012:	f100 0001 	add.w	r0, r0, #1
 801c016:	d003      	beq.n	801c020 <__lo0bits+0x56>
 801c018:	6013      	str	r3, [r2, #0]
 801c01a:	4770      	bx	lr
 801c01c:	2000      	movs	r0, #0
 801c01e:	4770      	bx	lr
 801c020:	2020      	movs	r0, #32
 801c022:	4770      	bx	lr

0801c024 <__i2b>:
 801c024:	b510      	push	{r4, lr}
 801c026:	460c      	mov	r4, r1
 801c028:	2101      	movs	r1, #1
 801c02a:	f7ff febd 	bl	801bda8 <_Balloc>
 801c02e:	4602      	mov	r2, r0
 801c030:	b928      	cbnz	r0, 801c03e <__i2b+0x1a>
 801c032:	4b05      	ldr	r3, [pc, #20]	@ (801c048 <__i2b+0x24>)
 801c034:	4805      	ldr	r0, [pc, #20]	@ (801c04c <__i2b+0x28>)
 801c036:	f240 1145 	movw	r1, #325	@ 0x145
 801c03a:	f000 ff2f 	bl	801ce9c <__assert_func>
 801c03e:	2301      	movs	r3, #1
 801c040:	6144      	str	r4, [r0, #20]
 801c042:	6103      	str	r3, [r0, #16]
 801c044:	bd10      	pop	{r4, pc}
 801c046:	bf00      	nop
 801c048:	0801f881 	.word	0x0801f881
 801c04c:	0801f909 	.word	0x0801f909

0801c050 <__multiply>:
 801c050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c054:	4614      	mov	r4, r2
 801c056:	690a      	ldr	r2, [r1, #16]
 801c058:	6923      	ldr	r3, [r4, #16]
 801c05a:	429a      	cmp	r2, r3
 801c05c:	bfa8      	it	ge
 801c05e:	4623      	movge	r3, r4
 801c060:	460f      	mov	r7, r1
 801c062:	bfa4      	itt	ge
 801c064:	460c      	movge	r4, r1
 801c066:	461f      	movge	r7, r3
 801c068:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801c06c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801c070:	68a3      	ldr	r3, [r4, #8]
 801c072:	6861      	ldr	r1, [r4, #4]
 801c074:	eb0a 0609 	add.w	r6, sl, r9
 801c078:	42b3      	cmp	r3, r6
 801c07a:	b085      	sub	sp, #20
 801c07c:	bfb8      	it	lt
 801c07e:	3101      	addlt	r1, #1
 801c080:	f7ff fe92 	bl	801bda8 <_Balloc>
 801c084:	b930      	cbnz	r0, 801c094 <__multiply+0x44>
 801c086:	4602      	mov	r2, r0
 801c088:	4b44      	ldr	r3, [pc, #272]	@ (801c19c <__multiply+0x14c>)
 801c08a:	4845      	ldr	r0, [pc, #276]	@ (801c1a0 <__multiply+0x150>)
 801c08c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801c090:	f000 ff04 	bl	801ce9c <__assert_func>
 801c094:	f100 0514 	add.w	r5, r0, #20
 801c098:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801c09c:	462b      	mov	r3, r5
 801c09e:	2200      	movs	r2, #0
 801c0a0:	4543      	cmp	r3, r8
 801c0a2:	d321      	bcc.n	801c0e8 <__multiply+0x98>
 801c0a4:	f107 0114 	add.w	r1, r7, #20
 801c0a8:	f104 0214 	add.w	r2, r4, #20
 801c0ac:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801c0b0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801c0b4:	9302      	str	r3, [sp, #8]
 801c0b6:	1b13      	subs	r3, r2, r4
 801c0b8:	3b15      	subs	r3, #21
 801c0ba:	f023 0303 	bic.w	r3, r3, #3
 801c0be:	3304      	adds	r3, #4
 801c0c0:	f104 0715 	add.w	r7, r4, #21
 801c0c4:	42ba      	cmp	r2, r7
 801c0c6:	bf38      	it	cc
 801c0c8:	2304      	movcc	r3, #4
 801c0ca:	9301      	str	r3, [sp, #4]
 801c0cc:	9b02      	ldr	r3, [sp, #8]
 801c0ce:	9103      	str	r1, [sp, #12]
 801c0d0:	428b      	cmp	r3, r1
 801c0d2:	d80c      	bhi.n	801c0ee <__multiply+0x9e>
 801c0d4:	2e00      	cmp	r6, #0
 801c0d6:	dd03      	ble.n	801c0e0 <__multiply+0x90>
 801c0d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801c0dc:	2b00      	cmp	r3, #0
 801c0de:	d05b      	beq.n	801c198 <__multiply+0x148>
 801c0e0:	6106      	str	r6, [r0, #16]
 801c0e2:	b005      	add	sp, #20
 801c0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0e8:	f843 2b04 	str.w	r2, [r3], #4
 801c0ec:	e7d8      	b.n	801c0a0 <__multiply+0x50>
 801c0ee:	f8b1 a000 	ldrh.w	sl, [r1]
 801c0f2:	f1ba 0f00 	cmp.w	sl, #0
 801c0f6:	d024      	beq.n	801c142 <__multiply+0xf2>
 801c0f8:	f104 0e14 	add.w	lr, r4, #20
 801c0fc:	46a9      	mov	r9, r5
 801c0fe:	f04f 0c00 	mov.w	ip, #0
 801c102:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c106:	f8d9 3000 	ldr.w	r3, [r9]
 801c10a:	fa1f fb87 	uxth.w	fp, r7
 801c10e:	b29b      	uxth	r3, r3
 801c110:	fb0a 330b 	mla	r3, sl, fp, r3
 801c114:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801c118:	f8d9 7000 	ldr.w	r7, [r9]
 801c11c:	4463      	add	r3, ip
 801c11e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801c122:	fb0a c70b 	mla	r7, sl, fp, ip
 801c126:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801c12a:	b29b      	uxth	r3, r3
 801c12c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801c130:	4572      	cmp	r2, lr
 801c132:	f849 3b04 	str.w	r3, [r9], #4
 801c136:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801c13a:	d8e2      	bhi.n	801c102 <__multiply+0xb2>
 801c13c:	9b01      	ldr	r3, [sp, #4]
 801c13e:	f845 c003 	str.w	ip, [r5, r3]
 801c142:	9b03      	ldr	r3, [sp, #12]
 801c144:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801c148:	3104      	adds	r1, #4
 801c14a:	f1b9 0f00 	cmp.w	r9, #0
 801c14e:	d021      	beq.n	801c194 <__multiply+0x144>
 801c150:	682b      	ldr	r3, [r5, #0]
 801c152:	f104 0c14 	add.w	ip, r4, #20
 801c156:	46ae      	mov	lr, r5
 801c158:	f04f 0a00 	mov.w	sl, #0
 801c15c:	f8bc b000 	ldrh.w	fp, [ip]
 801c160:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801c164:	fb09 770b 	mla	r7, r9, fp, r7
 801c168:	4457      	add	r7, sl
 801c16a:	b29b      	uxth	r3, r3
 801c16c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801c170:	f84e 3b04 	str.w	r3, [lr], #4
 801c174:	f85c 3b04 	ldr.w	r3, [ip], #4
 801c178:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c17c:	f8be 3000 	ldrh.w	r3, [lr]
 801c180:	fb09 330a 	mla	r3, r9, sl, r3
 801c184:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801c188:	4562      	cmp	r2, ip
 801c18a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c18e:	d8e5      	bhi.n	801c15c <__multiply+0x10c>
 801c190:	9f01      	ldr	r7, [sp, #4]
 801c192:	51eb      	str	r3, [r5, r7]
 801c194:	3504      	adds	r5, #4
 801c196:	e799      	b.n	801c0cc <__multiply+0x7c>
 801c198:	3e01      	subs	r6, #1
 801c19a:	e79b      	b.n	801c0d4 <__multiply+0x84>
 801c19c:	0801f881 	.word	0x0801f881
 801c1a0:	0801f909 	.word	0x0801f909

0801c1a4 <__pow5mult>:
 801c1a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c1a8:	4615      	mov	r5, r2
 801c1aa:	f012 0203 	ands.w	r2, r2, #3
 801c1ae:	4607      	mov	r7, r0
 801c1b0:	460e      	mov	r6, r1
 801c1b2:	d007      	beq.n	801c1c4 <__pow5mult+0x20>
 801c1b4:	4c25      	ldr	r4, [pc, #148]	@ (801c24c <__pow5mult+0xa8>)
 801c1b6:	3a01      	subs	r2, #1
 801c1b8:	2300      	movs	r3, #0
 801c1ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c1be:	f7ff fe55 	bl	801be6c <__multadd>
 801c1c2:	4606      	mov	r6, r0
 801c1c4:	10ad      	asrs	r5, r5, #2
 801c1c6:	d03d      	beq.n	801c244 <__pow5mult+0xa0>
 801c1c8:	69fc      	ldr	r4, [r7, #28]
 801c1ca:	b97c      	cbnz	r4, 801c1ec <__pow5mult+0x48>
 801c1cc:	2010      	movs	r0, #16
 801c1ce:	f000 fe97 	bl	801cf00 <malloc>
 801c1d2:	4602      	mov	r2, r0
 801c1d4:	61f8      	str	r0, [r7, #28]
 801c1d6:	b928      	cbnz	r0, 801c1e4 <__pow5mult+0x40>
 801c1d8:	4b1d      	ldr	r3, [pc, #116]	@ (801c250 <__pow5mult+0xac>)
 801c1da:	481e      	ldr	r0, [pc, #120]	@ (801c254 <__pow5mult+0xb0>)
 801c1dc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801c1e0:	f000 fe5c 	bl	801ce9c <__assert_func>
 801c1e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c1e8:	6004      	str	r4, [r0, #0]
 801c1ea:	60c4      	str	r4, [r0, #12]
 801c1ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801c1f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801c1f4:	b94c      	cbnz	r4, 801c20a <__pow5mult+0x66>
 801c1f6:	f240 2171 	movw	r1, #625	@ 0x271
 801c1fa:	4638      	mov	r0, r7
 801c1fc:	f7ff ff12 	bl	801c024 <__i2b>
 801c200:	2300      	movs	r3, #0
 801c202:	f8c8 0008 	str.w	r0, [r8, #8]
 801c206:	4604      	mov	r4, r0
 801c208:	6003      	str	r3, [r0, #0]
 801c20a:	f04f 0900 	mov.w	r9, #0
 801c20e:	07eb      	lsls	r3, r5, #31
 801c210:	d50a      	bpl.n	801c228 <__pow5mult+0x84>
 801c212:	4631      	mov	r1, r6
 801c214:	4622      	mov	r2, r4
 801c216:	4638      	mov	r0, r7
 801c218:	f7ff ff1a 	bl	801c050 <__multiply>
 801c21c:	4631      	mov	r1, r6
 801c21e:	4680      	mov	r8, r0
 801c220:	4638      	mov	r0, r7
 801c222:	f7ff fe01 	bl	801be28 <_Bfree>
 801c226:	4646      	mov	r6, r8
 801c228:	106d      	asrs	r5, r5, #1
 801c22a:	d00b      	beq.n	801c244 <__pow5mult+0xa0>
 801c22c:	6820      	ldr	r0, [r4, #0]
 801c22e:	b938      	cbnz	r0, 801c240 <__pow5mult+0x9c>
 801c230:	4622      	mov	r2, r4
 801c232:	4621      	mov	r1, r4
 801c234:	4638      	mov	r0, r7
 801c236:	f7ff ff0b 	bl	801c050 <__multiply>
 801c23a:	6020      	str	r0, [r4, #0]
 801c23c:	f8c0 9000 	str.w	r9, [r0]
 801c240:	4604      	mov	r4, r0
 801c242:	e7e4      	b.n	801c20e <__pow5mult+0x6a>
 801c244:	4630      	mov	r0, r6
 801c246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c24a:	bf00      	nop
 801c24c:	0801f964 	.word	0x0801f964
 801c250:	0801f8f2 	.word	0x0801f8f2
 801c254:	0801f909 	.word	0x0801f909

0801c258 <__lshift>:
 801c258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c25c:	460c      	mov	r4, r1
 801c25e:	6849      	ldr	r1, [r1, #4]
 801c260:	6923      	ldr	r3, [r4, #16]
 801c262:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801c266:	68a3      	ldr	r3, [r4, #8]
 801c268:	4607      	mov	r7, r0
 801c26a:	4691      	mov	r9, r2
 801c26c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801c270:	f108 0601 	add.w	r6, r8, #1
 801c274:	42b3      	cmp	r3, r6
 801c276:	db0b      	blt.n	801c290 <__lshift+0x38>
 801c278:	4638      	mov	r0, r7
 801c27a:	f7ff fd95 	bl	801bda8 <_Balloc>
 801c27e:	4605      	mov	r5, r0
 801c280:	b948      	cbnz	r0, 801c296 <__lshift+0x3e>
 801c282:	4602      	mov	r2, r0
 801c284:	4b28      	ldr	r3, [pc, #160]	@ (801c328 <__lshift+0xd0>)
 801c286:	4829      	ldr	r0, [pc, #164]	@ (801c32c <__lshift+0xd4>)
 801c288:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801c28c:	f000 fe06 	bl	801ce9c <__assert_func>
 801c290:	3101      	adds	r1, #1
 801c292:	005b      	lsls	r3, r3, #1
 801c294:	e7ee      	b.n	801c274 <__lshift+0x1c>
 801c296:	2300      	movs	r3, #0
 801c298:	f100 0114 	add.w	r1, r0, #20
 801c29c:	f100 0210 	add.w	r2, r0, #16
 801c2a0:	4618      	mov	r0, r3
 801c2a2:	4553      	cmp	r3, sl
 801c2a4:	db33      	blt.n	801c30e <__lshift+0xb6>
 801c2a6:	6920      	ldr	r0, [r4, #16]
 801c2a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801c2ac:	f104 0314 	add.w	r3, r4, #20
 801c2b0:	f019 091f 	ands.w	r9, r9, #31
 801c2b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c2b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801c2bc:	d02b      	beq.n	801c316 <__lshift+0xbe>
 801c2be:	f1c9 0e20 	rsb	lr, r9, #32
 801c2c2:	468a      	mov	sl, r1
 801c2c4:	2200      	movs	r2, #0
 801c2c6:	6818      	ldr	r0, [r3, #0]
 801c2c8:	fa00 f009 	lsl.w	r0, r0, r9
 801c2cc:	4310      	orrs	r0, r2
 801c2ce:	f84a 0b04 	str.w	r0, [sl], #4
 801c2d2:	f853 2b04 	ldr.w	r2, [r3], #4
 801c2d6:	459c      	cmp	ip, r3
 801c2d8:	fa22 f20e 	lsr.w	r2, r2, lr
 801c2dc:	d8f3      	bhi.n	801c2c6 <__lshift+0x6e>
 801c2de:	ebac 0304 	sub.w	r3, ip, r4
 801c2e2:	3b15      	subs	r3, #21
 801c2e4:	f023 0303 	bic.w	r3, r3, #3
 801c2e8:	3304      	adds	r3, #4
 801c2ea:	f104 0015 	add.w	r0, r4, #21
 801c2ee:	4584      	cmp	ip, r0
 801c2f0:	bf38      	it	cc
 801c2f2:	2304      	movcc	r3, #4
 801c2f4:	50ca      	str	r2, [r1, r3]
 801c2f6:	b10a      	cbz	r2, 801c2fc <__lshift+0xa4>
 801c2f8:	f108 0602 	add.w	r6, r8, #2
 801c2fc:	3e01      	subs	r6, #1
 801c2fe:	4638      	mov	r0, r7
 801c300:	612e      	str	r6, [r5, #16]
 801c302:	4621      	mov	r1, r4
 801c304:	f7ff fd90 	bl	801be28 <_Bfree>
 801c308:	4628      	mov	r0, r5
 801c30a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c30e:	f842 0f04 	str.w	r0, [r2, #4]!
 801c312:	3301      	adds	r3, #1
 801c314:	e7c5      	b.n	801c2a2 <__lshift+0x4a>
 801c316:	3904      	subs	r1, #4
 801c318:	f853 2b04 	ldr.w	r2, [r3], #4
 801c31c:	f841 2f04 	str.w	r2, [r1, #4]!
 801c320:	459c      	cmp	ip, r3
 801c322:	d8f9      	bhi.n	801c318 <__lshift+0xc0>
 801c324:	e7ea      	b.n	801c2fc <__lshift+0xa4>
 801c326:	bf00      	nop
 801c328:	0801f881 	.word	0x0801f881
 801c32c:	0801f909 	.word	0x0801f909

0801c330 <__mcmp>:
 801c330:	690a      	ldr	r2, [r1, #16]
 801c332:	4603      	mov	r3, r0
 801c334:	6900      	ldr	r0, [r0, #16]
 801c336:	1a80      	subs	r0, r0, r2
 801c338:	b530      	push	{r4, r5, lr}
 801c33a:	d10e      	bne.n	801c35a <__mcmp+0x2a>
 801c33c:	3314      	adds	r3, #20
 801c33e:	3114      	adds	r1, #20
 801c340:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801c344:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801c348:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801c34c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801c350:	4295      	cmp	r5, r2
 801c352:	d003      	beq.n	801c35c <__mcmp+0x2c>
 801c354:	d205      	bcs.n	801c362 <__mcmp+0x32>
 801c356:	f04f 30ff 	mov.w	r0, #4294967295
 801c35a:	bd30      	pop	{r4, r5, pc}
 801c35c:	42a3      	cmp	r3, r4
 801c35e:	d3f3      	bcc.n	801c348 <__mcmp+0x18>
 801c360:	e7fb      	b.n	801c35a <__mcmp+0x2a>
 801c362:	2001      	movs	r0, #1
 801c364:	e7f9      	b.n	801c35a <__mcmp+0x2a>
	...

0801c368 <__mdiff>:
 801c368:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c36c:	4689      	mov	r9, r1
 801c36e:	4606      	mov	r6, r0
 801c370:	4611      	mov	r1, r2
 801c372:	4648      	mov	r0, r9
 801c374:	4614      	mov	r4, r2
 801c376:	f7ff ffdb 	bl	801c330 <__mcmp>
 801c37a:	1e05      	subs	r5, r0, #0
 801c37c:	d112      	bne.n	801c3a4 <__mdiff+0x3c>
 801c37e:	4629      	mov	r1, r5
 801c380:	4630      	mov	r0, r6
 801c382:	f7ff fd11 	bl	801bda8 <_Balloc>
 801c386:	4602      	mov	r2, r0
 801c388:	b928      	cbnz	r0, 801c396 <__mdiff+0x2e>
 801c38a:	4b3f      	ldr	r3, [pc, #252]	@ (801c488 <__mdiff+0x120>)
 801c38c:	f240 2137 	movw	r1, #567	@ 0x237
 801c390:	483e      	ldr	r0, [pc, #248]	@ (801c48c <__mdiff+0x124>)
 801c392:	f000 fd83 	bl	801ce9c <__assert_func>
 801c396:	2301      	movs	r3, #1
 801c398:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801c39c:	4610      	mov	r0, r2
 801c39e:	b003      	add	sp, #12
 801c3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3a4:	bfbc      	itt	lt
 801c3a6:	464b      	movlt	r3, r9
 801c3a8:	46a1      	movlt	r9, r4
 801c3aa:	4630      	mov	r0, r6
 801c3ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801c3b0:	bfba      	itte	lt
 801c3b2:	461c      	movlt	r4, r3
 801c3b4:	2501      	movlt	r5, #1
 801c3b6:	2500      	movge	r5, #0
 801c3b8:	f7ff fcf6 	bl	801bda8 <_Balloc>
 801c3bc:	4602      	mov	r2, r0
 801c3be:	b918      	cbnz	r0, 801c3c8 <__mdiff+0x60>
 801c3c0:	4b31      	ldr	r3, [pc, #196]	@ (801c488 <__mdiff+0x120>)
 801c3c2:	f240 2145 	movw	r1, #581	@ 0x245
 801c3c6:	e7e3      	b.n	801c390 <__mdiff+0x28>
 801c3c8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801c3cc:	6926      	ldr	r6, [r4, #16]
 801c3ce:	60c5      	str	r5, [r0, #12]
 801c3d0:	f109 0310 	add.w	r3, r9, #16
 801c3d4:	f109 0514 	add.w	r5, r9, #20
 801c3d8:	f104 0e14 	add.w	lr, r4, #20
 801c3dc:	f100 0b14 	add.w	fp, r0, #20
 801c3e0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801c3e4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801c3e8:	9301      	str	r3, [sp, #4]
 801c3ea:	46d9      	mov	r9, fp
 801c3ec:	f04f 0c00 	mov.w	ip, #0
 801c3f0:	9b01      	ldr	r3, [sp, #4]
 801c3f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 801c3f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 801c3fa:	9301      	str	r3, [sp, #4]
 801c3fc:	fa1f f38a 	uxth.w	r3, sl
 801c400:	4619      	mov	r1, r3
 801c402:	b283      	uxth	r3, r0
 801c404:	1acb      	subs	r3, r1, r3
 801c406:	0c00      	lsrs	r0, r0, #16
 801c408:	4463      	add	r3, ip
 801c40a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801c40e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801c412:	b29b      	uxth	r3, r3
 801c414:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801c418:	4576      	cmp	r6, lr
 801c41a:	f849 3b04 	str.w	r3, [r9], #4
 801c41e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801c422:	d8e5      	bhi.n	801c3f0 <__mdiff+0x88>
 801c424:	1b33      	subs	r3, r6, r4
 801c426:	3b15      	subs	r3, #21
 801c428:	f023 0303 	bic.w	r3, r3, #3
 801c42c:	3415      	adds	r4, #21
 801c42e:	3304      	adds	r3, #4
 801c430:	42a6      	cmp	r6, r4
 801c432:	bf38      	it	cc
 801c434:	2304      	movcc	r3, #4
 801c436:	441d      	add	r5, r3
 801c438:	445b      	add	r3, fp
 801c43a:	461e      	mov	r6, r3
 801c43c:	462c      	mov	r4, r5
 801c43e:	4544      	cmp	r4, r8
 801c440:	d30e      	bcc.n	801c460 <__mdiff+0xf8>
 801c442:	f108 0103 	add.w	r1, r8, #3
 801c446:	1b49      	subs	r1, r1, r5
 801c448:	f021 0103 	bic.w	r1, r1, #3
 801c44c:	3d03      	subs	r5, #3
 801c44e:	45a8      	cmp	r8, r5
 801c450:	bf38      	it	cc
 801c452:	2100      	movcc	r1, #0
 801c454:	440b      	add	r3, r1
 801c456:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801c45a:	b191      	cbz	r1, 801c482 <__mdiff+0x11a>
 801c45c:	6117      	str	r7, [r2, #16]
 801c45e:	e79d      	b.n	801c39c <__mdiff+0x34>
 801c460:	f854 1b04 	ldr.w	r1, [r4], #4
 801c464:	46e6      	mov	lr, ip
 801c466:	0c08      	lsrs	r0, r1, #16
 801c468:	fa1c fc81 	uxtah	ip, ip, r1
 801c46c:	4471      	add	r1, lr
 801c46e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801c472:	b289      	uxth	r1, r1
 801c474:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801c478:	f846 1b04 	str.w	r1, [r6], #4
 801c47c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801c480:	e7dd      	b.n	801c43e <__mdiff+0xd6>
 801c482:	3f01      	subs	r7, #1
 801c484:	e7e7      	b.n	801c456 <__mdiff+0xee>
 801c486:	bf00      	nop
 801c488:	0801f881 	.word	0x0801f881
 801c48c:	0801f909 	.word	0x0801f909

0801c490 <__ulp>:
 801c490:	b082      	sub	sp, #8
 801c492:	ed8d 0b00 	vstr	d0, [sp]
 801c496:	9a01      	ldr	r2, [sp, #4]
 801c498:	4b0f      	ldr	r3, [pc, #60]	@ (801c4d8 <__ulp+0x48>)
 801c49a:	4013      	ands	r3, r2
 801c49c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801c4a0:	2b00      	cmp	r3, #0
 801c4a2:	dc08      	bgt.n	801c4b6 <__ulp+0x26>
 801c4a4:	425b      	negs	r3, r3
 801c4a6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801c4aa:	ea4f 5223 	mov.w	r2, r3, asr #20
 801c4ae:	da04      	bge.n	801c4ba <__ulp+0x2a>
 801c4b0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801c4b4:	4113      	asrs	r3, r2
 801c4b6:	2200      	movs	r2, #0
 801c4b8:	e008      	b.n	801c4cc <__ulp+0x3c>
 801c4ba:	f1a2 0314 	sub.w	r3, r2, #20
 801c4be:	2b1e      	cmp	r3, #30
 801c4c0:	bfda      	itte	le
 801c4c2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801c4c6:	40da      	lsrle	r2, r3
 801c4c8:	2201      	movgt	r2, #1
 801c4ca:	2300      	movs	r3, #0
 801c4cc:	4619      	mov	r1, r3
 801c4ce:	4610      	mov	r0, r2
 801c4d0:	ec41 0b10 	vmov	d0, r0, r1
 801c4d4:	b002      	add	sp, #8
 801c4d6:	4770      	bx	lr
 801c4d8:	7ff00000 	.word	0x7ff00000

0801c4dc <__b2d>:
 801c4dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c4e0:	6906      	ldr	r6, [r0, #16]
 801c4e2:	f100 0814 	add.w	r8, r0, #20
 801c4e6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801c4ea:	1f37      	subs	r7, r6, #4
 801c4ec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801c4f0:	4610      	mov	r0, r2
 801c4f2:	f7ff fd4b 	bl	801bf8c <__hi0bits>
 801c4f6:	f1c0 0320 	rsb	r3, r0, #32
 801c4fa:	280a      	cmp	r0, #10
 801c4fc:	600b      	str	r3, [r1, #0]
 801c4fe:	491b      	ldr	r1, [pc, #108]	@ (801c56c <__b2d+0x90>)
 801c500:	dc15      	bgt.n	801c52e <__b2d+0x52>
 801c502:	f1c0 0c0b 	rsb	ip, r0, #11
 801c506:	fa22 f30c 	lsr.w	r3, r2, ip
 801c50a:	45b8      	cmp	r8, r7
 801c50c:	ea43 0501 	orr.w	r5, r3, r1
 801c510:	bf34      	ite	cc
 801c512:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801c516:	2300      	movcs	r3, #0
 801c518:	3015      	adds	r0, #21
 801c51a:	fa02 f000 	lsl.w	r0, r2, r0
 801c51e:	fa23 f30c 	lsr.w	r3, r3, ip
 801c522:	4303      	orrs	r3, r0
 801c524:	461c      	mov	r4, r3
 801c526:	ec45 4b10 	vmov	d0, r4, r5
 801c52a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c52e:	45b8      	cmp	r8, r7
 801c530:	bf3a      	itte	cc
 801c532:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801c536:	f1a6 0708 	subcc.w	r7, r6, #8
 801c53a:	2300      	movcs	r3, #0
 801c53c:	380b      	subs	r0, #11
 801c53e:	d012      	beq.n	801c566 <__b2d+0x8a>
 801c540:	f1c0 0120 	rsb	r1, r0, #32
 801c544:	fa23 f401 	lsr.w	r4, r3, r1
 801c548:	4082      	lsls	r2, r0
 801c54a:	4322      	orrs	r2, r4
 801c54c:	4547      	cmp	r7, r8
 801c54e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801c552:	bf8c      	ite	hi
 801c554:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801c558:	2200      	movls	r2, #0
 801c55a:	4083      	lsls	r3, r0
 801c55c:	40ca      	lsrs	r2, r1
 801c55e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801c562:	4313      	orrs	r3, r2
 801c564:	e7de      	b.n	801c524 <__b2d+0x48>
 801c566:	ea42 0501 	orr.w	r5, r2, r1
 801c56a:	e7db      	b.n	801c524 <__b2d+0x48>
 801c56c:	3ff00000 	.word	0x3ff00000

0801c570 <__d2b>:
 801c570:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c574:	460f      	mov	r7, r1
 801c576:	2101      	movs	r1, #1
 801c578:	ec59 8b10 	vmov	r8, r9, d0
 801c57c:	4616      	mov	r6, r2
 801c57e:	f7ff fc13 	bl	801bda8 <_Balloc>
 801c582:	4604      	mov	r4, r0
 801c584:	b930      	cbnz	r0, 801c594 <__d2b+0x24>
 801c586:	4602      	mov	r2, r0
 801c588:	4b23      	ldr	r3, [pc, #140]	@ (801c618 <__d2b+0xa8>)
 801c58a:	4824      	ldr	r0, [pc, #144]	@ (801c61c <__d2b+0xac>)
 801c58c:	f240 310f 	movw	r1, #783	@ 0x30f
 801c590:	f000 fc84 	bl	801ce9c <__assert_func>
 801c594:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801c598:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c59c:	b10d      	cbz	r5, 801c5a2 <__d2b+0x32>
 801c59e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801c5a2:	9301      	str	r3, [sp, #4]
 801c5a4:	f1b8 0300 	subs.w	r3, r8, #0
 801c5a8:	d023      	beq.n	801c5f2 <__d2b+0x82>
 801c5aa:	4668      	mov	r0, sp
 801c5ac:	9300      	str	r3, [sp, #0]
 801c5ae:	f7ff fd0c 	bl	801bfca <__lo0bits>
 801c5b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 801c5b6:	b1d0      	cbz	r0, 801c5ee <__d2b+0x7e>
 801c5b8:	f1c0 0320 	rsb	r3, r0, #32
 801c5bc:	fa02 f303 	lsl.w	r3, r2, r3
 801c5c0:	430b      	orrs	r3, r1
 801c5c2:	40c2      	lsrs	r2, r0
 801c5c4:	6163      	str	r3, [r4, #20]
 801c5c6:	9201      	str	r2, [sp, #4]
 801c5c8:	9b01      	ldr	r3, [sp, #4]
 801c5ca:	61a3      	str	r3, [r4, #24]
 801c5cc:	2b00      	cmp	r3, #0
 801c5ce:	bf0c      	ite	eq
 801c5d0:	2201      	moveq	r2, #1
 801c5d2:	2202      	movne	r2, #2
 801c5d4:	6122      	str	r2, [r4, #16]
 801c5d6:	b1a5      	cbz	r5, 801c602 <__d2b+0x92>
 801c5d8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801c5dc:	4405      	add	r5, r0
 801c5de:	603d      	str	r5, [r7, #0]
 801c5e0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801c5e4:	6030      	str	r0, [r6, #0]
 801c5e6:	4620      	mov	r0, r4
 801c5e8:	b003      	add	sp, #12
 801c5ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c5ee:	6161      	str	r1, [r4, #20]
 801c5f0:	e7ea      	b.n	801c5c8 <__d2b+0x58>
 801c5f2:	a801      	add	r0, sp, #4
 801c5f4:	f7ff fce9 	bl	801bfca <__lo0bits>
 801c5f8:	9b01      	ldr	r3, [sp, #4]
 801c5fa:	6163      	str	r3, [r4, #20]
 801c5fc:	3020      	adds	r0, #32
 801c5fe:	2201      	movs	r2, #1
 801c600:	e7e8      	b.n	801c5d4 <__d2b+0x64>
 801c602:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801c606:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801c60a:	6038      	str	r0, [r7, #0]
 801c60c:	6918      	ldr	r0, [r3, #16]
 801c60e:	f7ff fcbd 	bl	801bf8c <__hi0bits>
 801c612:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801c616:	e7e5      	b.n	801c5e4 <__d2b+0x74>
 801c618:	0801f881 	.word	0x0801f881
 801c61c:	0801f909 	.word	0x0801f909

0801c620 <__ratio>:
 801c620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c624:	b085      	sub	sp, #20
 801c626:	e9cd 1000 	strd	r1, r0, [sp]
 801c62a:	a902      	add	r1, sp, #8
 801c62c:	f7ff ff56 	bl	801c4dc <__b2d>
 801c630:	9800      	ldr	r0, [sp, #0]
 801c632:	a903      	add	r1, sp, #12
 801c634:	ec55 4b10 	vmov	r4, r5, d0
 801c638:	f7ff ff50 	bl	801c4dc <__b2d>
 801c63c:	9b01      	ldr	r3, [sp, #4]
 801c63e:	6919      	ldr	r1, [r3, #16]
 801c640:	9b00      	ldr	r3, [sp, #0]
 801c642:	691b      	ldr	r3, [r3, #16]
 801c644:	1ac9      	subs	r1, r1, r3
 801c646:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801c64a:	1a9b      	subs	r3, r3, r2
 801c64c:	ec5b ab10 	vmov	sl, fp, d0
 801c650:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801c654:	2b00      	cmp	r3, #0
 801c656:	bfce      	itee	gt
 801c658:	462a      	movgt	r2, r5
 801c65a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801c65e:	465a      	movle	r2, fp
 801c660:	462f      	mov	r7, r5
 801c662:	46d9      	mov	r9, fp
 801c664:	bfcc      	ite	gt
 801c666:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801c66a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801c66e:	464b      	mov	r3, r9
 801c670:	4652      	mov	r2, sl
 801c672:	4620      	mov	r0, r4
 801c674:	4639      	mov	r1, r7
 801c676:	f7e4 f8e9 	bl	800084c <__aeabi_ddiv>
 801c67a:	ec41 0b10 	vmov	d0, r0, r1
 801c67e:	b005      	add	sp, #20
 801c680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c684 <__copybits>:
 801c684:	3901      	subs	r1, #1
 801c686:	b570      	push	{r4, r5, r6, lr}
 801c688:	1149      	asrs	r1, r1, #5
 801c68a:	6914      	ldr	r4, [r2, #16]
 801c68c:	3101      	adds	r1, #1
 801c68e:	f102 0314 	add.w	r3, r2, #20
 801c692:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801c696:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801c69a:	1f05      	subs	r5, r0, #4
 801c69c:	42a3      	cmp	r3, r4
 801c69e:	d30c      	bcc.n	801c6ba <__copybits+0x36>
 801c6a0:	1aa3      	subs	r3, r4, r2
 801c6a2:	3b11      	subs	r3, #17
 801c6a4:	f023 0303 	bic.w	r3, r3, #3
 801c6a8:	3211      	adds	r2, #17
 801c6aa:	42a2      	cmp	r2, r4
 801c6ac:	bf88      	it	hi
 801c6ae:	2300      	movhi	r3, #0
 801c6b0:	4418      	add	r0, r3
 801c6b2:	2300      	movs	r3, #0
 801c6b4:	4288      	cmp	r0, r1
 801c6b6:	d305      	bcc.n	801c6c4 <__copybits+0x40>
 801c6b8:	bd70      	pop	{r4, r5, r6, pc}
 801c6ba:	f853 6b04 	ldr.w	r6, [r3], #4
 801c6be:	f845 6f04 	str.w	r6, [r5, #4]!
 801c6c2:	e7eb      	b.n	801c69c <__copybits+0x18>
 801c6c4:	f840 3b04 	str.w	r3, [r0], #4
 801c6c8:	e7f4      	b.n	801c6b4 <__copybits+0x30>

0801c6ca <__any_on>:
 801c6ca:	f100 0214 	add.w	r2, r0, #20
 801c6ce:	6900      	ldr	r0, [r0, #16]
 801c6d0:	114b      	asrs	r3, r1, #5
 801c6d2:	4298      	cmp	r0, r3
 801c6d4:	b510      	push	{r4, lr}
 801c6d6:	db11      	blt.n	801c6fc <__any_on+0x32>
 801c6d8:	dd0a      	ble.n	801c6f0 <__any_on+0x26>
 801c6da:	f011 011f 	ands.w	r1, r1, #31
 801c6de:	d007      	beq.n	801c6f0 <__any_on+0x26>
 801c6e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801c6e4:	fa24 f001 	lsr.w	r0, r4, r1
 801c6e8:	fa00 f101 	lsl.w	r1, r0, r1
 801c6ec:	428c      	cmp	r4, r1
 801c6ee:	d10b      	bne.n	801c708 <__any_on+0x3e>
 801c6f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c6f4:	4293      	cmp	r3, r2
 801c6f6:	d803      	bhi.n	801c700 <__any_on+0x36>
 801c6f8:	2000      	movs	r0, #0
 801c6fa:	bd10      	pop	{r4, pc}
 801c6fc:	4603      	mov	r3, r0
 801c6fe:	e7f7      	b.n	801c6f0 <__any_on+0x26>
 801c700:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801c704:	2900      	cmp	r1, #0
 801c706:	d0f5      	beq.n	801c6f4 <__any_on+0x2a>
 801c708:	2001      	movs	r0, #1
 801c70a:	e7f6      	b.n	801c6fa <__any_on+0x30>

0801c70c <__ascii_wctomb>:
 801c70c:	4603      	mov	r3, r0
 801c70e:	4608      	mov	r0, r1
 801c710:	b141      	cbz	r1, 801c724 <__ascii_wctomb+0x18>
 801c712:	2aff      	cmp	r2, #255	@ 0xff
 801c714:	d904      	bls.n	801c720 <__ascii_wctomb+0x14>
 801c716:	228a      	movs	r2, #138	@ 0x8a
 801c718:	601a      	str	r2, [r3, #0]
 801c71a:	f04f 30ff 	mov.w	r0, #4294967295
 801c71e:	4770      	bx	lr
 801c720:	700a      	strb	r2, [r1, #0]
 801c722:	2001      	movs	r0, #1
 801c724:	4770      	bx	lr

0801c726 <__ssputs_r>:
 801c726:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c72a:	688e      	ldr	r6, [r1, #8]
 801c72c:	461f      	mov	r7, r3
 801c72e:	42be      	cmp	r6, r7
 801c730:	680b      	ldr	r3, [r1, #0]
 801c732:	4682      	mov	sl, r0
 801c734:	460c      	mov	r4, r1
 801c736:	4690      	mov	r8, r2
 801c738:	d82d      	bhi.n	801c796 <__ssputs_r+0x70>
 801c73a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c73e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801c742:	d026      	beq.n	801c792 <__ssputs_r+0x6c>
 801c744:	6965      	ldr	r5, [r4, #20]
 801c746:	6909      	ldr	r1, [r1, #16]
 801c748:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c74c:	eba3 0901 	sub.w	r9, r3, r1
 801c750:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c754:	1c7b      	adds	r3, r7, #1
 801c756:	444b      	add	r3, r9
 801c758:	106d      	asrs	r5, r5, #1
 801c75a:	429d      	cmp	r5, r3
 801c75c:	bf38      	it	cc
 801c75e:	461d      	movcc	r5, r3
 801c760:	0553      	lsls	r3, r2, #21
 801c762:	d527      	bpl.n	801c7b4 <__ssputs_r+0x8e>
 801c764:	4629      	mov	r1, r5
 801c766:	f7ff fa81 	bl	801bc6c <_malloc_r>
 801c76a:	4606      	mov	r6, r0
 801c76c:	b360      	cbz	r0, 801c7c8 <__ssputs_r+0xa2>
 801c76e:	6921      	ldr	r1, [r4, #16]
 801c770:	464a      	mov	r2, r9
 801c772:	f7fe febe 	bl	801b4f2 <memcpy>
 801c776:	89a3      	ldrh	r3, [r4, #12]
 801c778:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801c77c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c780:	81a3      	strh	r3, [r4, #12]
 801c782:	6126      	str	r6, [r4, #16]
 801c784:	6165      	str	r5, [r4, #20]
 801c786:	444e      	add	r6, r9
 801c788:	eba5 0509 	sub.w	r5, r5, r9
 801c78c:	6026      	str	r6, [r4, #0]
 801c78e:	60a5      	str	r5, [r4, #8]
 801c790:	463e      	mov	r6, r7
 801c792:	42be      	cmp	r6, r7
 801c794:	d900      	bls.n	801c798 <__ssputs_r+0x72>
 801c796:	463e      	mov	r6, r7
 801c798:	6820      	ldr	r0, [r4, #0]
 801c79a:	4632      	mov	r2, r6
 801c79c:	4641      	mov	r1, r8
 801c79e:	f000 fb53 	bl	801ce48 <memmove>
 801c7a2:	68a3      	ldr	r3, [r4, #8]
 801c7a4:	1b9b      	subs	r3, r3, r6
 801c7a6:	60a3      	str	r3, [r4, #8]
 801c7a8:	6823      	ldr	r3, [r4, #0]
 801c7aa:	4433      	add	r3, r6
 801c7ac:	6023      	str	r3, [r4, #0]
 801c7ae:	2000      	movs	r0, #0
 801c7b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c7b4:	462a      	mov	r2, r5
 801c7b6:	f000 fbab 	bl	801cf10 <_realloc_r>
 801c7ba:	4606      	mov	r6, r0
 801c7bc:	2800      	cmp	r0, #0
 801c7be:	d1e0      	bne.n	801c782 <__ssputs_r+0x5c>
 801c7c0:	6921      	ldr	r1, [r4, #16]
 801c7c2:	4650      	mov	r0, sl
 801c7c4:	f7fe feac 	bl	801b520 <_free_r>
 801c7c8:	230c      	movs	r3, #12
 801c7ca:	f8ca 3000 	str.w	r3, [sl]
 801c7ce:	89a3      	ldrh	r3, [r4, #12]
 801c7d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c7d4:	81a3      	strh	r3, [r4, #12]
 801c7d6:	f04f 30ff 	mov.w	r0, #4294967295
 801c7da:	e7e9      	b.n	801c7b0 <__ssputs_r+0x8a>

0801c7dc <_svfiprintf_r>:
 801c7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7e0:	4698      	mov	r8, r3
 801c7e2:	898b      	ldrh	r3, [r1, #12]
 801c7e4:	061b      	lsls	r3, r3, #24
 801c7e6:	b09d      	sub	sp, #116	@ 0x74
 801c7e8:	4607      	mov	r7, r0
 801c7ea:	460d      	mov	r5, r1
 801c7ec:	4614      	mov	r4, r2
 801c7ee:	d510      	bpl.n	801c812 <_svfiprintf_r+0x36>
 801c7f0:	690b      	ldr	r3, [r1, #16]
 801c7f2:	b973      	cbnz	r3, 801c812 <_svfiprintf_r+0x36>
 801c7f4:	2140      	movs	r1, #64	@ 0x40
 801c7f6:	f7ff fa39 	bl	801bc6c <_malloc_r>
 801c7fa:	6028      	str	r0, [r5, #0]
 801c7fc:	6128      	str	r0, [r5, #16]
 801c7fe:	b930      	cbnz	r0, 801c80e <_svfiprintf_r+0x32>
 801c800:	230c      	movs	r3, #12
 801c802:	603b      	str	r3, [r7, #0]
 801c804:	f04f 30ff 	mov.w	r0, #4294967295
 801c808:	b01d      	add	sp, #116	@ 0x74
 801c80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c80e:	2340      	movs	r3, #64	@ 0x40
 801c810:	616b      	str	r3, [r5, #20]
 801c812:	2300      	movs	r3, #0
 801c814:	9309      	str	r3, [sp, #36]	@ 0x24
 801c816:	2320      	movs	r3, #32
 801c818:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c81c:	f8cd 800c 	str.w	r8, [sp, #12]
 801c820:	2330      	movs	r3, #48	@ 0x30
 801c822:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801c9c0 <_svfiprintf_r+0x1e4>
 801c826:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c82a:	f04f 0901 	mov.w	r9, #1
 801c82e:	4623      	mov	r3, r4
 801c830:	469a      	mov	sl, r3
 801c832:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c836:	b10a      	cbz	r2, 801c83c <_svfiprintf_r+0x60>
 801c838:	2a25      	cmp	r2, #37	@ 0x25
 801c83a:	d1f9      	bne.n	801c830 <_svfiprintf_r+0x54>
 801c83c:	ebba 0b04 	subs.w	fp, sl, r4
 801c840:	d00b      	beq.n	801c85a <_svfiprintf_r+0x7e>
 801c842:	465b      	mov	r3, fp
 801c844:	4622      	mov	r2, r4
 801c846:	4629      	mov	r1, r5
 801c848:	4638      	mov	r0, r7
 801c84a:	f7ff ff6c 	bl	801c726 <__ssputs_r>
 801c84e:	3001      	adds	r0, #1
 801c850:	f000 80a7 	beq.w	801c9a2 <_svfiprintf_r+0x1c6>
 801c854:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c856:	445a      	add	r2, fp
 801c858:	9209      	str	r2, [sp, #36]	@ 0x24
 801c85a:	f89a 3000 	ldrb.w	r3, [sl]
 801c85e:	2b00      	cmp	r3, #0
 801c860:	f000 809f 	beq.w	801c9a2 <_svfiprintf_r+0x1c6>
 801c864:	2300      	movs	r3, #0
 801c866:	f04f 32ff 	mov.w	r2, #4294967295
 801c86a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c86e:	f10a 0a01 	add.w	sl, sl, #1
 801c872:	9304      	str	r3, [sp, #16]
 801c874:	9307      	str	r3, [sp, #28]
 801c876:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c87a:	931a      	str	r3, [sp, #104]	@ 0x68
 801c87c:	4654      	mov	r4, sl
 801c87e:	2205      	movs	r2, #5
 801c880:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c884:	484e      	ldr	r0, [pc, #312]	@ (801c9c0 <_svfiprintf_r+0x1e4>)
 801c886:	f7e3 fcab 	bl	80001e0 <memchr>
 801c88a:	9a04      	ldr	r2, [sp, #16]
 801c88c:	b9d8      	cbnz	r0, 801c8c6 <_svfiprintf_r+0xea>
 801c88e:	06d0      	lsls	r0, r2, #27
 801c890:	bf44      	itt	mi
 801c892:	2320      	movmi	r3, #32
 801c894:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c898:	0711      	lsls	r1, r2, #28
 801c89a:	bf44      	itt	mi
 801c89c:	232b      	movmi	r3, #43	@ 0x2b
 801c89e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c8a2:	f89a 3000 	ldrb.w	r3, [sl]
 801c8a6:	2b2a      	cmp	r3, #42	@ 0x2a
 801c8a8:	d015      	beq.n	801c8d6 <_svfiprintf_r+0xfa>
 801c8aa:	9a07      	ldr	r2, [sp, #28]
 801c8ac:	4654      	mov	r4, sl
 801c8ae:	2000      	movs	r0, #0
 801c8b0:	f04f 0c0a 	mov.w	ip, #10
 801c8b4:	4621      	mov	r1, r4
 801c8b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c8ba:	3b30      	subs	r3, #48	@ 0x30
 801c8bc:	2b09      	cmp	r3, #9
 801c8be:	d94b      	bls.n	801c958 <_svfiprintf_r+0x17c>
 801c8c0:	b1b0      	cbz	r0, 801c8f0 <_svfiprintf_r+0x114>
 801c8c2:	9207      	str	r2, [sp, #28]
 801c8c4:	e014      	b.n	801c8f0 <_svfiprintf_r+0x114>
 801c8c6:	eba0 0308 	sub.w	r3, r0, r8
 801c8ca:	fa09 f303 	lsl.w	r3, r9, r3
 801c8ce:	4313      	orrs	r3, r2
 801c8d0:	9304      	str	r3, [sp, #16]
 801c8d2:	46a2      	mov	sl, r4
 801c8d4:	e7d2      	b.n	801c87c <_svfiprintf_r+0xa0>
 801c8d6:	9b03      	ldr	r3, [sp, #12]
 801c8d8:	1d19      	adds	r1, r3, #4
 801c8da:	681b      	ldr	r3, [r3, #0]
 801c8dc:	9103      	str	r1, [sp, #12]
 801c8de:	2b00      	cmp	r3, #0
 801c8e0:	bfbb      	ittet	lt
 801c8e2:	425b      	neglt	r3, r3
 801c8e4:	f042 0202 	orrlt.w	r2, r2, #2
 801c8e8:	9307      	strge	r3, [sp, #28]
 801c8ea:	9307      	strlt	r3, [sp, #28]
 801c8ec:	bfb8      	it	lt
 801c8ee:	9204      	strlt	r2, [sp, #16]
 801c8f0:	7823      	ldrb	r3, [r4, #0]
 801c8f2:	2b2e      	cmp	r3, #46	@ 0x2e
 801c8f4:	d10a      	bne.n	801c90c <_svfiprintf_r+0x130>
 801c8f6:	7863      	ldrb	r3, [r4, #1]
 801c8f8:	2b2a      	cmp	r3, #42	@ 0x2a
 801c8fa:	d132      	bne.n	801c962 <_svfiprintf_r+0x186>
 801c8fc:	9b03      	ldr	r3, [sp, #12]
 801c8fe:	1d1a      	adds	r2, r3, #4
 801c900:	681b      	ldr	r3, [r3, #0]
 801c902:	9203      	str	r2, [sp, #12]
 801c904:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c908:	3402      	adds	r4, #2
 801c90a:	9305      	str	r3, [sp, #20]
 801c90c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801c9d0 <_svfiprintf_r+0x1f4>
 801c910:	7821      	ldrb	r1, [r4, #0]
 801c912:	2203      	movs	r2, #3
 801c914:	4650      	mov	r0, sl
 801c916:	f7e3 fc63 	bl	80001e0 <memchr>
 801c91a:	b138      	cbz	r0, 801c92c <_svfiprintf_r+0x150>
 801c91c:	9b04      	ldr	r3, [sp, #16]
 801c91e:	eba0 000a 	sub.w	r0, r0, sl
 801c922:	2240      	movs	r2, #64	@ 0x40
 801c924:	4082      	lsls	r2, r0
 801c926:	4313      	orrs	r3, r2
 801c928:	3401      	adds	r4, #1
 801c92a:	9304      	str	r3, [sp, #16]
 801c92c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c930:	4824      	ldr	r0, [pc, #144]	@ (801c9c4 <_svfiprintf_r+0x1e8>)
 801c932:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c936:	2206      	movs	r2, #6
 801c938:	f7e3 fc52 	bl	80001e0 <memchr>
 801c93c:	2800      	cmp	r0, #0
 801c93e:	d036      	beq.n	801c9ae <_svfiprintf_r+0x1d2>
 801c940:	4b21      	ldr	r3, [pc, #132]	@ (801c9c8 <_svfiprintf_r+0x1ec>)
 801c942:	bb1b      	cbnz	r3, 801c98c <_svfiprintf_r+0x1b0>
 801c944:	9b03      	ldr	r3, [sp, #12]
 801c946:	3307      	adds	r3, #7
 801c948:	f023 0307 	bic.w	r3, r3, #7
 801c94c:	3308      	adds	r3, #8
 801c94e:	9303      	str	r3, [sp, #12]
 801c950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c952:	4433      	add	r3, r6
 801c954:	9309      	str	r3, [sp, #36]	@ 0x24
 801c956:	e76a      	b.n	801c82e <_svfiprintf_r+0x52>
 801c958:	fb0c 3202 	mla	r2, ip, r2, r3
 801c95c:	460c      	mov	r4, r1
 801c95e:	2001      	movs	r0, #1
 801c960:	e7a8      	b.n	801c8b4 <_svfiprintf_r+0xd8>
 801c962:	2300      	movs	r3, #0
 801c964:	3401      	adds	r4, #1
 801c966:	9305      	str	r3, [sp, #20]
 801c968:	4619      	mov	r1, r3
 801c96a:	f04f 0c0a 	mov.w	ip, #10
 801c96e:	4620      	mov	r0, r4
 801c970:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c974:	3a30      	subs	r2, #48	@ 0x30
 801c976:	2a09      	cmp	r2, #9
 801c978:	d903      	bls.n	801c982 <_svfiprintf_r+0x1a6>
 801c97a:	2b00      	cmp	r3, #0
 801c97c:	d0c6      	beq.n	801c90c <_svfiprintf_r+0x130>
 801c97e:	9105      	str	r1, [sp, #20]
 801c980:	e7c4      	b.n	801c90c <_svfiprintf_r+0x130>
 801c982:	fb0c 2101 	mla	r1, ip, r1, r2
 801c986:	4604      	mov	r4, r0
 801c988:	2301      	movs	r3, #1
 801c98a:	e7f0      	b.n	801c96e <_svfiprintf_r+0x192>
 801c98c:	ab03      	add	r3, sp, #12
 801c98e:	9300      	str	r3, [sp, #0]
 801c990:	462a      	mov	r2, r5
 801c992:	4b0e      	ldr	r3, [pc, #56]	@ (801c9cc <_svfiprintf_r+0x1f0>)
 801c994:	a904      	add	r1, sp, #16
 801c996:	4638      	mov	r0, r7
 801c998:	f3af 8000 	nop.w
 801c99c:	1c42      	adds	r2, r0, #1
 801c99e:	4606      	mov	r6, r0
 801c9a0:	d1d6      	bne.n	801c950 <_svfiprintf_r+0x174>
 801c9a2:	89ab      	ldrh	r3, [r5, #12]
 801c9a4:	065b      	lsls	r3, r3, #25
 801c9a6:	f53f af2d 	bmi.w	801c804 <_svfiprintf_r+0x28>
 801c9aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c9ac:	e72c      	b.n	801c808 <_svfiprintf_r+0x2c>
 801c9ae:	ab03      	add	r3, sp, #12
 801c9b0:	9300      	str	r3, [sp, #0]
 801c9b2:	462a      	mov	r2, r5
 801c9b4:	4b05      	ldr	r3, [pc, #20]	@ (801c9cc <_svfiprintf_r+0x1f0>)
 801c9b6:	a904      	add	r1, sp, #16
 801c9b8:	4638      	mov	r0, r7
 801c9ba:	f000 f879 	bl	801cab0 <_printf_i>
 801c9be:	e7ed      	b.n	801c99c <_svfiprintf_r+0x1c0>
 801c9c0:	0801fa60 	.word	0x0801fa60
 801c9c4:	0801fa6a 	.word	0x0801fa6a
 801c9c8:	00000000 	.word	0x00000000
 801c9cc:	0801c727 	.word	0x0801c727
 801c9d0:	0801fa66 	.word	0x0801fa66

0801c9d4 <_printf_common>:
 801c9d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c9d8:	4616      	mov	r6, r2
 801c9da:	4698      	mov	r8, r3
 801c9dc:	688a      	ldr	r2, [r1, #8]
 801c9de:	690b      	ldr	r3, [r1, #16]
 801c9e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801c9e4:	4293      	cmp	r3, r2
 801c9e6:	bfb8      	it	lt
 801c9e8:	4613      	movlt	r3, r2
 801c9ea:	6033      	str	r3, [r6, #0]
 801c9ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801c9f0:	4607      	mov	r7, r0
 801c9f2:	460c      	mov	r4, r1
 801c9f4:	b10a      	cbz	r2, 801c9fa <_printf_common+0x26>
 801c9f6:	3301      	adds	r3, #1
 801c9f8:	6033      	str	r3, [r6, #0]
 801c9fa:	6823      	ldr	r3, [r4, #0]
 801c9fc:	0699      	lsls	r1, r3, #26
 801c9fe:	bf42      	ittt	mi
 801ca00:	6833      	ldrmi	r3, [r6, #0]
 801ca02:	3302      	addmi	r3, #2
 801ca04:	6033      	strmi	r3, [r6, #0]
 801ca06:	6825      	ldr	r5, [r4, #0]
 801ca08:	f015 0506 	ands.w	r5, r5, #6
 801ca0c:	d106      	bne.n	801ca1c <_printf_common+0x48>
 801ca0e:	f104 0a19 	add.w	sl, r4, #25
 801ca12:	68e3      	ldr	r3, [r4, #12]
 801ca14:	6832      	ldr	r2, [r6, #0]
 801ca16:	1a9b      	subs	r3, r3, r2
 801ca18:	42ab      	cmp	r3, r5
 801ca1a:	dc26      	bgt.n	801ca6a <_printf_common+0x96>
 801ca1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801ca20:	6822      	ldr	r2, [r4, #0]
 801ca22:	3b00      	subs	r3, #0
 801ca24:	bf18      	it	ne
 801ca26:	2301      	movne	r3, #1
 801ca28:	0692      	lsls	r2, r2, #26
 801ca2a:	d42b      	bmi.n	801ca84 <_printf_common+0xb0>
 801ca2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801ca30:	4641      	mov	r1, r8
 801ca32:	4638      	mov	r0, r7
 801ca34:	47c8      	blx	r9
 801ca36:	3001      	adds	r0, #1
 801ca38:	d01e      	beq.n	801ca78 <_printf_common+0xa4>
 801ca3a:	6823      	ldr	r3, [r4, #0]
 801ca3c:	6922      	ldr	r2, [r4, #16]
 801ca3e:	f003 0306 	and.w	r3, r3, #6
 801ca42:	2b04      	cmp	r3, #4
 801ca44:	bf02      	ittt	eq
 801ca46:	68e5      	ldreq	r5, [r4, #12]
 801ca48:	6833      	ldreq	r3, [r6, #0]
 801ca4a:	1aed      	subeq	r5, r5, r3
 801ca4c:	68a3      	ldr	r3, [r4, #8]
 801ca4e:	bf0c      	ite	eq
 801ca50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ca54:	2500      	movne	r5, #0
 801ca56:	4293      	cmp	r3, r2
 801ca58:	bfc4      	itt	gt
 801ca5a:	1a9b      	subgt	r3, r3, r2
 801ca5c:	18ed      	addgt	r5, r5, r3
 801ca5e:	2600      	movs	r6, #0
 801ca60:	341a      	adds	r4, #26
 801ca62:	42b5      	cmp	r5, r6
 801ca64:	d11a      	bne.n	801ca9c <_printf_common+0xc8>
 801ca66:	2000      	movs	r0, #0
 801ca68:	e008      	b.n	801ca7c <_printf_common+0xa8>
 801ca6a:	2301      	movs	r3, #1
 801ca6c:	4652      	mov	r2, sl
 801ca6e:	4641      	mov	r1, r8
 801ca70:	4638      	mov	r0, r7
 801ca72:	47c8      	blx	r9
 801ca74:	3001      	adds	r0, #1
 801ca76:	d103      	bne.n	801ca80 <_printf_common+0xac>
 801ca78:	f04f 30ff 	mov.w	r0, #4294967295
 801ca7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ca80:	3501      	adds	r5, #1
 801ca82:	e7c6      	b.n	801ca12 <_printf_common+0x3e>
 801ca84:	18e1      	adds	r1, r4, r3
 801ca86:	1c5a      	adds	r2, r3, #1
 801ca88:	2030      	movs	r0, #48	@ 0x30
 801ca8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801ca8e:	4422      	add	r2, r4
 801ca90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801ca94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801ca98:	3302      	adds	r3, #2
 801ca9a:	e7c7      	b.n	801ca2c <_printf_common+0x58>
 801ca9c:	2301      	movs	r3, #1
 801ca9e:	4622      	mov	r2, r4
 801caa0:	4641      	mov	r1, r8
 801caa2:	4638      	mov	r0, r7
 801caa4:	47c8      	blx	r9
 801caa6:	3001      	adds	r0, #1
 801caa8:	d0e6      	beq.n	801ca78 <_printf_common+0xa4>
 801caaa:	3601      	adds	r6, #1
 801caac:	e7d9      	b.n	801ca62 <_printf_common+0x8e>
	...

0801cab0 <_printf_i>:
 801cab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801cab4:	7e0f      	ldrb	r7, [r1, #24]
 801cab6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801cab8:	2f78      	cmp	r7, #120	@ 0x78
 801caba:	4691      	mov	r9, r2
 801cabc:	4680      	mov	r8, r0
 801cabe:	460c      	mov	r4, r1
 801cac0:	469a      	mov	sl, r3
 801cac2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801cac6:	d807      	bhi.n	801cad8 <_printf_i+0x28>
 801cac8:	2f62      	cmp	r7, #98	@ 0x62
 801caca:	d80a      	bhi.n	801cae2 <_printf_i+0x32>
 801cacc:	2f00      	cmp	r7, #0
 801cace:	f000 80d2 	beq.w	801cc76 <_printf_i+0x1c6>
 801cad2:	2f58      	cmp	r7, #88	@ 0x58
 801cad4:	f000 80b9 	beq.w	801cc4a <_printf_i+0x19a>
 801cad8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801cadc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801cae0:	e03a      	b.n	801cb58 <_printf_i+0xa8>
 801cae2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801cae6:	2b15      	cmp	r3, #21
 801cae8:	d8f6      	bhi.n	801cad8 <_printf_i+0x28>
 801caea:	a101      	add	r1, pc, #4	@ (adr r1, 801caf0 <_printf_i+0x40>)
 801caec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801caf0:	0801cb49 	.word	0x0801cb49
 801caf4:	0801cb5d 	.word	0x0801cb5d
 801caf8:	0801cad9 	.word	0x0801cad9
 801cafc:	0801cad9 	.word	0x0801cad9
 801cb00:	0801cad9 	.word	0x0801cad9
 801cb04:	0801cad9 	.word	0x0801cad9
 801cb08:	0801cb5d 	.word	0x0801cb5d
 801cb0c:	0801cad9 	.word	0x0801cad9
 801cb10:	0801cad9 	.word	0x0801cad9
 801cb14:	0801cad9 	.word	0x0801cad9
 801cb18:	0801cad9 	.word	0x0801cad9
 801cb1c:	0801cc5d 	.word	0x0801cc5d
 801cb20:	0801cb87 	.word	0x0801cb87
 801cb24:	0801cc17 	.word	0x0801cc17
 801cb28:	0801cad9 	.word	0x0801cad9
 801cb2c:	0801cad9 	.word	0x0801cad9
 801cb30:	0801cc7f 	.word	0x0801cc7f
 801cb34:	0801cad9 	.word	0x0801cad9
 801cb38:	0801cb87 	.word	0x0801cb87
 801cb3c:	0801cad9 	.word	0x0801cad9
 801cb40:	0801cad9 	.word	0x0801cad9
 801cb44:	0801cc1f 	.word	0x0801cc1f
 801cb48:	6833      	ldr	r3, [r6, #0]
 801cb4a:	1d1a      	adds	r2, r3, #4
 801cb4c:	681b      	ldr	r3, [r3, #0]
 801cb4e:	6032      	str	r2, [r6, #0]
 801cb50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801cb54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801cb58:	2301      	movs	r3, #1
 801cb5a:	e09d      	b.n	801cc98 <_printf_i+0x1e8>
 801cb5c:	6833      	ldr	r3, [r6, #0]
 801cb5e:	6820      	ldr	r0, [r4, #0]
 801cb60:	1d19      	adds	r1, r3, #4
 801cb62:	6031      	str	r1, [r6, #0]
 801cb64:	0606      	lsls	r6, r0, #24
 801cb66:	d501      	bpl.n	801cb6c <_printf_i+0xbc>
 801cb68:	681d      	ldr	r5, [r3, #0]
 801cb6a:	e003      	b.n	801cb74 <_printf_i+0xc4>
 801cb6c:	0645      	lsls	r5, r0, #25
 801cb6e:	d5fb      	bpl.n	801cb68 <_printf_i+0xb8>
 801cb70:	f9b3 5000 	ldrsh.w	r5, [r3]
 801cb74:	2d00      	cmp	r5, #0
 801cb76:	da03      	bge.n	801cb80 <_printf_i+0xd0>
 801cb78:	232d      	movs	r3, #45	@ 0x2d
 801cb7a:	426d      	negs	r5, r5
 801cb7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801cb80:	4859      	ldr	r0, [pc, #356]	@ (801cce8 <_printf_i+0x238>)
 801cb82:	230a      	movs	r3, #10
 801cb84:	e011      	b.n	801cbaa <_printf_i+0xfa>
 801cb86:	6821      	ldr	r1, [r4, #0]
 801cb88:	6833      	ldr	r3, [r6, #0]
 801cb8a:	0608      	lsls	r0, r1, #24
 801cb8c:	f853 5b04 	ldr.w	r5, [r3], #4
 801cb90:	d402      	bmi.n	801cb98 <_printf_i+0xe8>
 801cb92:	0649      	lsls	r1, r1, #25
 801cb94:	bf48      	it	mi
 801cb96:	b2ad      	uxthmi	r5, r5
 801cb98:	2f6f      	cmp	r7, #111	@ 0x6f
 801cb9a:	4853      	ldr	r0, [pc, #332]	@ (801cce8 <_printf_i+0x238>)
 801cb9c:	6033      	str	r3, [r6, #0]
 801cb9e:	bf14      	ite	ne
 801cba0:	230a      	movne	r3, #10
 801cba2:	2308      	moveq	r3, #8
 801cba4:	2100      	movs	r1, #0
 801cba6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801cbaa:	6866      	ldr	r6, [r4, #4]
 801cbac:	60a6      	str	r6, [r4, #8]
 801cbae:	2e00      	cmp	r6, #0
 801cbb0:	bfa2      	ittt	ge
 801cbb2:	6821      	ldrge	r1, [r4, #0]
 801cbb4:	f021 0104 	bicge.w	r1, r1, #4
 801cbb8:	6021      	strge	r1, [r4, #0]
 801cbba:	b90d      	cbnz	r5, 801cbc0 <_printf_i+0x110>
 801cbbc:	2e00      	cmp	r6, #0
 801cbbe:	d04b      	beq.n	801cc58 <_printf_i+0x1a8>
 801cbc0:	4616      	mov	r6, r2
 801cbc2:	fbb5 f1f3 	udiv	r1, r5, r3
 801cbc6:	fb03 5711 	mls	r7, r3, r1, r5
 801cbca:	5dc7      	ldrb	r7, [r0, r7]
 801cbcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801cbd0:	462f      	mov	r7, r5
 801cbd2:	42bb      	cmp	r3, r7
 801cbd4:	460d      	mov	r5, r1
 801cbd6:	d9f4      	bls.n	801cbc2 <_printf_i+0x112>
 801cbd8:	2b08      	cmp	r3, #8
 801cbda:	d10b      	bne.n	801cbf4 <_printf_i+0x144>
 801cbdc:	6823      	ldr	r3, [r4, #0]
 801cbde:	07df      	lsls	r7, r3, #31
 801cbe0:	d508      	bpl.n	801cbf4 <_printf_i+0x144>
 801cbe2:	6923      	ldr	r3, [r4, #16]
 801cbe4:	6861      	ldr	r1, [r4, #4]
 801cbe6:	4299      	cmp	r1, r3
 801cbe8:	bfde      	ittt	le
 801cbea:	2330      	movle	r3, #48	@ 0x30
 801cbec:	f806 3c01 	strble.w	r3, [r6, #-1]
 801cbf0:	f106 36ff 	addle.w	r6, r6, #4294967295
 801cbf4:	1b92      	subs	r2, r2, r6
 801cbf6:	6122      	str	r2, [r4, #16]
 801cbf8:	f8cd a000 	str.w	sl, [sp]
 801cbfc:	464b      	mov	r3, r9
 801cbfe:	aa03      	add	r2, sp, #12
 801cc00:	4621      	mov	r1, r4
 801cc02:	4640      	mov	r0, r8
 801cc04:	f7ff fee6 	bl	801c9d4 <_printf_common>
 801cc08:	3001      	adds	r0, #1
 801cc0a:	d14a      	bne.n	801cca2 <_printf_i+0x1f2>
 801cc0c:	f04f 30ff 	mov.w	r0, #4294967295
 801cc10:	b004      	add	sp, #16
 801cc12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cc16:	6823      	ldr	r3, [r4, #0]
 801cc18:	f043 0320 	orr.w	r3, r3, #32
 801cc1c:	6023      	str	r3, [r4, #0]
 801cc1e:	4833      	ldr	r0, [pc, #204]	@ (801ccec <_printf_i+0x23c>)
 801cc20:	2778      	movs	r7, #120	@ 0x78
 801cc22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801cc26:	6823      	ldr	r3, [r4, #0]
 801cc28:	6831      	ldr	r1, [r6, #0]
 801cc2a:	061f      	lsls	r7, r3, #24
 801cc2c:	f851 5b04 	ldr.w	r5, [r1], #4
 801cc30:	d402      	bmi.n	801cc38 <_printf_i+0x188>
 801cc32:	065f      	lsls	r7, r3, #25
 801cc34:	bf48      	it	mi
 801cc36:	b2ad      	uxthmi	r5, r5
 801cc38:	6031      	str	r1, [r6, #0]
 801cc3a:	07d9      	lsls	r1, r3, #31
 801cc3c:	bf44      	itt	mi
 801cc3e:	f043 0320 	orrmi.w	r3, r3, #32
 801cc42:	6023      	strmi	r3, [r4, #0]
 801cc44:	b11d      	cbz	r5, 801cc4e <_printf_i+0x19e>
 801cc46:	2310      	movs	r3, #16
 801cc48:	e7ac      	b.n	801cba4 <_printf_i+0xf4>
 801cc4a:	4827      	ldr	r0, [pc, #156]	@ (801cce8 <_printf_i+0x238>)
 801cc4c:	e7e9      	b.n	801cc22 <_printf_i+0x172>
 801cc4e:	6823      	ldr	r3, [r4, #0]
 801cc50:	f023 0320 	bic.w	r3, r3, #32
 801cc54:	6023      	str	r3, [r4, #0]
 801cc56:	e7f6      	b.n	801cc46 <_printf_i+0x196>
 801cc58:	4616      	mov	r6, r2
 801cc5a:	e7bd      	b.n	801cbd8 <_printf_i+0x128>
 801cc5c:	6833      	ldr	r3, [r6, #0]
 801cc5e:	6825      	ldr	r5, [r4, #0]
 801cc60:	6961      	ldr	r1, [r4, #20]
 801cc62:	1d18      	adds	r0, r3, #4
 801cc64:	6030      	str	r0, [r6, #0]
 801cc66:	062e      	lsls	r6, r5, #24
 801cc68:	681b      	ldr	r3, [r3, #0]
 801cc6a:	d501      	bpl.n	801cc70 <_printf_i+0x1c0>
 801cc6c:	6019      	str	r1, [r3, #0]
 801cc6e:	e002      	b.n	801cc76 <_printf_i+0x1c6>
 801cc70:	0668      	lsls	r0, r5, #25
 801cc72:	d5fb      	bpl.n	801cc6c <_printf_i+0x1bc>
 801cc74:	8019      	strh	r1, [r3, #0]
 801cc76:	2300      	movs	r3, #0
 801cc78:	6123      	str	r3, [r4, #16]
 801cc7a:	4616      	mov	r6, r2
 801cc7c:	e7bc      	b.n	801cbf8 <_printf_i+0x148>
 801cc7e:	6833      	ldr	r3, [r6, #0]
 801cc80:	1d1a      	adds	r2, r3, #4
 801cc82:	6032      	str	r2, [r6, #0]
 801cc84:	681e      	ldr	r6, [r3, #0]
 801cc86:	6862      	ldr	r2, [r4, #4]
 801cc88:	2100      	movs	r1, #0
 801cc8a:	4630      	mov	r0, r6
 801cc8c:	f7e3 faa8 	bl	80001e0 <memchr>
 801cc90:	b108      	cbz	r0, 801cc96 <_printf_i+0x1e6>
 801cc92:	1b80      	subs	r0, r0, r6
 801cc94:	6060      	str	r0, [r4, #4]
 801cc96:	6863      	ldr	r3, [r4, #4]
 801cc98:	6123      	str	r3, [r4, #16]
 801cc9a:	2300      	movs	r3, #0
 801cc9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801cca0:	e7aa      	b.n	801cbf8 <_printf_i+0x148>
 801cca2:	6923      	ldr	r3, [r4, #16]
 801cca4:	4632      	mov	r2, r6
 801cca6:	4649      	mov	r1, r9
 801cca8:	4640      	mov	r0, r8
 801ccaa:	47d0      	blx	sl
 801ccac:	3001      	adds	r0, #1
 801ccae:	d0ad      	beq.n	801cc0c <_printf_i+0x15c>
 801ccb0:	6823      	ldr	r3, [r4, #0]
 801ccb2:	079b      	lsls	r3, r3, #30
 801ccb4:	d413      	bmi.n	801ccde <_printf_i+0x22e>
 801ccb6:	68e0      	ldr	r0, [r4, #12]
 801ccb8:	9b03      	ldr	r3, [sp, #12]
 801ccba:	4298      	cmp	r0, r3
 801ccbc:	bfb8      	it	lt
 801ccbe:	4618      	movlt	r0, r3
 801ccc0:	e7a6      	b.n	801cc10 <_printf_i+0x160>
 801ccc2:	2301      	movs	r3, #1
 801ccc4:	4632      	mov	r2, r6
 801ccc6:	4649      	mov	r1, r9
 801ccc8:	4640      	mov	r0, r8
 801ccca:	47d0      	blx	sl
 801cccc:	3001      	adds	r0, #1
 801ccce:	d09d      	beq.n	801cc0c <_printf_i+0x15c>
 801ccd0:	3501      	adds	r5, #1
 801ccd2:	68e3      	ldr	r3, [r4, #12]
 801ccd4:	9903      	ldr	r1, [sp, #12]
 801ccd6:	1a5b      	subs	r3, r3, r1
 801ccd8:	42ab      	cmp	r3, r5
 801ccda:	dcf2      	bgt.n	801ccc2 <_printf_i+0x212>
 801ccdc:	e7eb      	b.n	801ccb6 <_printf_i+0x206>
 801ccde:	2500      	movs	r5, #0
 801cce0:	f104 0619 	add.w	r6, r4, #25
 801cce4:	e7f5      	b.n	801ccd2 <_printf_i+0x222>
 801cce6:	bf00      	nop
 801cce8:	0801fa71 	.word	0x0801fa71
 801ccec:	0801fa82 	.word	0x0801fa82

0801ccf0 <__sflush_r>:
 801ccf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ccf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ccf8:	0716      	lsls	r6, r2, #28
 801ccfa:	4605      	mov	r5, r0
 801ccfc:	460c      	mov	r4, r1
 801ccfe:	d454      	bmi.n	801cdaa <__sflush_r+0xba>
 801cd00:	684b      	ldr	r3, [r1, #4]
 801cd02:	2b00      	cmp	r3, #0
 801cd04:	dc02      	bgt.n	801cd0c <__sflush_r+0x1c>
 801cd06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801cd08:	2b00      	cmp	r3, #0
 801cd0a:	dd48      	ble.n	801cd9e <__sflush_r+0xae>
 801cd0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801cd0e:	2e00      	cmp	r6, #0
 801cd10:	d045      	beq.n	801cd9e <__sflush_r+0xae>
 801cd12:	2300      	movs	r3, #0
 801cd14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801cd18:	682f      	ldr	r7, [r5, #0]
 801cd1a:	6a21      	ldr	r1, [r4, #32]
 801cd1c:	602b      	str	r3, [r5, #0]
 801cd1e:	d030      	beq.n	801cd82 <__sflush_r+0x92>
 801cd20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801cd22:	89a3      	ldrh	r3, [r4, #12]
 801cd24:	0759      	lsls	r1, r3, #29
 801cd26:	d505      	bpl.n	801cd34 <__sflush_r+0x44>
 801cd28:	6863      	ldr	r3, [r4, #4]
 801cd2a:	1ad2      	subs	r2, r2, r3
 801cd2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801cd2e:	b10b      	cbz	r3, 801cd34 <__sflush_r+0x44>
 801cd30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801cd32:	1ad2      	subs	r2, r2, r3
 801cd34:	2300      	movs	r3, #0
 801cd36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801cd38:	6a21      	ldr	r1, [r4, #32]
 801cd3a:	4628      	mov	r0, r5
 801cd3c:	47b0      	blx	r6
 801cd3e:	1c43      	adds	r3, r0, #1
 801cd40:	89a3      	ldrh	r3, [r4, #12]
 801cd42:	d106      	bne.n	801cd52 <__sflush_r+0x62>
 801cd44:	6829      	ldr	r1, [r5, #0]
 801cd46:	291d      	cmp	r1, #29
 801cd48:	d82b      	bhi.n	801cda2 <__sflush_r+0xb2>
 801cd4a:	4a2a      	ldr	r2, [pc, #168]	@ (801cdf4 <__sflush_r+0x104>)
 801cd4c:	410a      	asrs	r2, r1
 801cd4e:	07d6      	lsls	r6, r2, #31
 801cd50:	d427      	bmi.n	801cda2 <__sflush_r+0xb2>
 801cd52:	2200      	movs	r2, #0
 801cd54:	6062      	str	r2, [r4, #4]
 801cd56:	04d9      	lsls	r1, r3, #19
 801cd58:	6922      	ldr	r2, [r4, #16]
 801cd5a:	6022      	str	r2, [r4, #0]
 801cd5c:	d504      	bpl.n	801cd68 <__sflush_r+0x78>
 801cd5e:	1c42      	adds	r2, r0, #1
 801cd60:	d101      	bne.n	801cd66 <__sflush_r+0x76>
 801cd62:	682b      	ldr	r3, [r5, #0]
 801cd64:	b903      	cbnz	r3, 801cd68 <__sflush_r+0x78>
 801cd66:	6560      	str	r0, [r4, #84]	@ 0x54
 801cd68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801cd6a:	602f      	str	r7, [r5, #0]
 801cd6c:	b1b9      	cbz	r1, 801cd9e <__sflush_r+0xae>
 801cd6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801cd72:	4299      	cmp	r1, r3
 801cd74:	d002      	beq.n	801cd7c <__sflush_r+0x8c>
 801cd76:	4628      	mov	r0, r5
 801cd78:	f7fe fbd2 	bl	801b520 <_free_r>
 801cd7c:	2300      	movs	r3, #0
 801cd7e:	6363      	str	r3, [r4, #52]	@ 0x34
 801cd80:	e00d      	b.n	801cd9e <__sflush_r+0xae>
 801cd82:	2301      	movs	r3, #1
 801cd84:	4628      	mov	r0, r5
 801cd86:	47b0      	blx	r6
 801cd88:	4602      	mov	r2, r0
 801cd8a:	1c50      	adds	r0, r2, #1
 801cd8c:	d1c9      	bne.n	801cd22 <__sflush_r+0x32>
 801cd8e:	682b      	ldr	r3, [r5, #0]
 801cd90:	2b00      	cmp	r3, #0
 801cd92:	d0c6      	beq.n	801cd22 <__sflush_r+0x32>
 801cd94:	2b1d      	cmp	r3, #29
 801cd96:	d001      	beq.n	801cd9c <__sflush_r+0xac>
 801cd98:	2b16      	cmp	r3, #22
 801cd9a:	d11e      	bne.n	801cdda <__sflush_r+0xea>
 801cd9c:	602f      	str	r7, [r5, #0]
 801cd9e:	2000      	movs	r0, #0
 801cda0:	e022      	b.n	801cde8 <__sflush_r+0xf8>
 801cda2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cda6:	b21b      	sxth	r3, r3
 801cda8:	e01b      	b.n	801cde2 <__sflush_r+0xf2>
 801cdaa:	690f      	ldr	r7, [r1, #16]
 801cdac:	2f00      	cmp	r7, #0
 801cdae:	d0f6      	beq.n	801cd9e <__sflush_r+0xae>
 801cdb0:	0793      	lsls	r3, r2, #30
 801cdb2:	680e      	ldr	r6, [r1, #0]
 801cdb4:	bf08      	it	eq
 801cdb6:	694b      	ldreq	r3, [r1, #20]
 801cdb8:	600f      	str	r7, [r1, #0]
 801cdba:	bf18      	it	ne
 801cdbc:	2300      	movne	r3, #0
 801cdbe:	eba6 0807 	sub.w	r8, r6, r7
 801cdc2:	608b      	str	r3, [r1, #8]
 801cdc4:	f1b8 0f00 	cmp.w	r8, #0
 801cdc8:	dde9      	ble.n	801cd9e <__sflush_r+0xae>
 801cdca:	6a21      	ldr	r1, [r4, #32]
 801cdcc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801cdce:	4643      	mov	r3, r8
 801cdd0:	463a      	mov	r2, r7
 801cdd2:	4628      	mov	r0, r5
 801cdd4:	47b0      	blx	r6
 801cdd6:	2800      	cmp	r0, #0
 801cdd8:	dc08      	bgt.n	801cdec <__sflush_r+0xfc>
 801cdda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cdde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cde2:	81a3      	strh	r3, [r4, #12]
 801cde4:	f04f 30ff 	mov.w	r0, #4294967295
 801cde8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cdec:	4407      	add	r7, r0
 801cdee:	eba8 0800 	sub.w	r8, r8, r0
 801cdf2:	e7e7      	b.n	801cdc4 <__sflush_r+0xd4>
 801cdf4:	dfbffffe 	.word	0xdfbffffe

0801cdf8 <_fflush_r>:
 801cdf8:	b538      	push	{r3, r4, r5, lr}
 801cdfa:	690b      	ldr	r3, [r1, #16]
 801cdfc:	4605      	mov	r5, r0
 801cdfe:	460c      	mov	r4, r1
 801ce00:	b913      	cbnz	r3, 801ce08 <_fflush_r+0x10>
 801ce02:	2500      	movs	r5, #0
 801ce04:	4628      	mov	r0, r5
 801ce06:	bd38      	pop	{r3, r4, r5, pc}
 801ce08:	b118      	cbz	r0, 801ce12 <_fflush_r+0x1a>
 801ce0a:	6a03      	ldr	r3, [r0, #32]
 801ce0c:	b90b      	cbnz	r3, 801ce12 <_fflush_r+0x1a>
 801ce0e:	f7fe f98b 	bl	801b128 <__sinit>
 801ce12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ce16:	2b00      	cmp	r3, #0
 801ce18:	d0f3      	beq.n	801ce02 <_fflush_r+0xa>
 801ce1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801ce1c:	07d0      	lsls	r0, r2, #31
 801ce1e:	d404      	bmi.n	801ce2a <_fflush_r+0x32>
 801ce20:	0599      	lsls	r1, r3, #22
 801ce22:	d402      	bmi.n	801ce2a <_fflush_r+0x32>
 801ce24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ce26:	f7fe fb5a 	bl	801b4de <__retarget_lock_acquire_recursive>
 801ce2a:	4628      	mov	r0, r5
 801ce2c:	4621      	mov	r1, r4
 801ce2e:	f7ff ff5f 	bl	801ccf0 <__sflush_r>
 801ce32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ce34:	07da      	lsls	r2, r3, #31
 801ce36:	4605      	mov	r5, r0
 801ce38:	d4e4      	bmi.n	801ce04 <_fflush_r+0xc>
 801ce3a:	89a3      	ldrh	r3, [r4, #12]
 801ce3c:	059b      	lsls	r3, r3, #22
 801ce3e:	d4e1      	bmi.n	801ce04 <_fflush_r+0xc>
 801ce40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ce42:	f7fe fb4d 	bl	801b4e0 <__retarget_lock_release_recursive>
 801ce46:	e7dd      	b.n	801ce04 <_fflush_r+0xc>

0801ce48 <memmove>:
 801ce48:	4288      	cmp	r0, r1
 801ce4a:	b510      	push	{r4, lr}
 801ce4c:	eb01 0402 	add.w	r4, r1, r2
 801ce50:	d902      	bls.n	801ce58 <memmove+0x10>
 801ce52:	4284      	cmp	r4, r0
 801ce54:	4623      	mov	r3, r4
 801ce56:	d807      	bhi.n	801ce68 <memmove+0x20>
 801ce58:	1e43      	subs	r3, r0, #1
 801ce5a:	42a1      	cmp	r1, r4
 801ce5c:	d008      	beq.n	801ce70 <memmove+0x28>
 801ce5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ce62:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ce66:	e7f8      	b.n	801ce5a <memmove+0x12>
 801ce68:	4402      	add	r2, r0
 801ce6a:	4601      	mov	r1, r0
 801ce6c:	428a      	cmp	r2, r1
 801ce6e:	d100      	bne.n	801ce72 <memmove+0x2a>
 801ce70:	bd10      	pop	{r4, pc}
 801ce72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ce76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ce7a:	e7f7      	b.n	801ce6c <memmove+0x24>

0801ce7c <_sbrk_r>:
 801ce7c:	b538      	push	{r3, r4, r5, lr}
 801ce7e:	4d06      	ldr	r5, [pc, #24]	@ (801ce98 <_sbrk_r+0x1c>)
 801ce80:	2300      	movs	r3, #0
 801ce82:	4604      	mov	r4, r0
 801ce84:	4608      	mov	r0, r1
 801ce86:	602b      	str	r3, [r5, #0]
 801ce88:	f7e9 fb34 	bl	80064f4 <_sbrk>
 801ce8c:	1c43      	adds	r3, r0, #1
 801ce8e:	d102      	bne.n	801ce96 <_sbrk_r+0x1a>
 801ce90:	682b      	ldr	r3, [r5, #0]
 801ce92:	b103      	cbz	r3, 801ce96 <_sbrk_r+0x1a>
 801ce94:	6023      	str	r3, [r4, #0]
 801ce96:	bd38      	pop	{r3, r4, r5, pc}
 801ce98:	2000909c 	.word	0x2000909c

0801ce9c <__assert_func>:
 801ce9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ce9e:	4614      	mov	r4, r2
 801cea0:	461a      	mov	r2, r3
 801cea2:	4b09      	ldr	r3, [pc, #36]	@ (801cec8 <__assert_func+0x2c>)
 801cea4:	681b      	ldr	r3, [r3, #0]
 801cea6:	4605      	mov	r5, r0
 801cea8:	68d8      	ldr	r0, [r3, #12]
 801ceaa:	b954      	cbnz	r4, 801cec2 <__assert_func+0x26>
 801ceac:	4b07      	ldr	r3, [pc, #28]	@ (801cecc <__assert_func+0x30>)
 801ceae:	461c      	mov	r4, r3
 801ceb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ceb4:	9100      	str	r1, [sp, #0]
 801ceb6:	462b      	mov	r3, r5
 801ceb8:	4905      	ldr	r1, [pc, #20]	@ (801ced0 <__assert_func+0x34>)
 801ceba:	f000 f857 	bl	801cf6c <fiprintf>
 801cebe:	f000 f867 	bl	801cf90 <abort>
 801cec2:	4b04      	ldr	r3, [pc, #16]	@ (801ced4 <__assert_func+0x38>)
 801cec4:	e7f4      	b.n	801ceb0 <__assert_func+0x14>
 801cec6:	bf00      	nop
 801cec8:	20000288 	.word	0x20000288
 801cecc:	0801face 	.word	0x0801face
 801ced0:	0801faa0 	.word	0x0801faa0
 801ced4:	0801fa93 	.word	0x0801fa93

0801ced8 <_calloc_r>:
 801ced8:	b570      	push	{r4, r5, r6, lr}
 801ceda:	fba1 5402 	umull	r5, r4, r1, r2
 801cede:	b93c      	cbnz	r4, 801cef0 <_calloc_r+0x18>
 801cee0:	4629      	mov	r1, r5
 801cee2:	f7fe fec3 	bl	801bc6c <_malloc_r>
 801cee6:	4606      	mov	r6, r0
 801cee8:	b928      	cbnz	r0, 801cef6 <_calloc_r+0x1e>
 801ceea:	2600      	movs	r6, #0
 801ceec:	4630      	mov	r0, r6
 801ceee:	bd70      	pop	{r4, r5, r6, pc}
 801cef0:	220c      	movs	r2, #12
 801cef2:	6002      	str	r2, [r0, #0]
 801cef4:	e7f9      	b.n	801ceea <_calloc_r+0x12>
 801cef6:	462a      	mov	r2, r5
 801cef8:	4621      	mov	r1, r4
 801cefa:	f7fe f9fb 	bl	801b2f4 <memset>
 801cefe:	e7f5      	b.n	801ceec <_calloc_r+0x14>

0801cf00 <malloc>:
 801cf00:	4b02      	ldr	r3, [pc, #8]	@ (801cf0c <malloc+0xc>)
 801cf02:	4601      	mov	r1, r0
 801cf04:	6818      	ldr	r0, [r3, #0]
 801cf06:	f7fe beb1 	b.w	801bc6c <_malloc_r>
 801cf0a:	bf00      	nop
 801cf0c:	20000288 	.word	0x20000288

0801cf10 <_realloc_r>:
 801cf10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf14:	4680      	mov	r8, r0
 801cf16:	4615      	mov	r5, r2
 801cf18:	460c      	mov	r4, r1
 801cf1a:	b921      	cbnz	r1, 801cf26 <_realloc_r+0x16>
 801cf1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cf20:	4611      	mov	r1, r2
 801cf22:	f7fe bea3 	b.w	801bc6c <_malloc_r>
 801cf26:	b92a      	cbnz	r2, 801cf34 <_realloc_r+0x24>
 801cf28:	f7fe fafa 	bl	801b520 <_free_r>
 801cf2c:	2400      	movs	r4, #0
 801cf2e:	4620      	mov	r0, r4
 801cf30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cf34:	f000 f833 	bl	801cf9e <_malloc_usable_size_r>
 801cf38:	4285      	cmp	r5, r0
 801cf3a:	4606      	mov	r6, r0
 801cf3c:	d802      	bhi.n	801cf44 <_realloc_r+0x34>
 801cf3e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801cf42:	d8f4      	bhi.n	801cf2e <_realloc_r+0x1e>
 801cf44:	4629      	mov	r1, r5
 801cf46:	4640      	mov	r0, r8
 801cf48:	f7fe fe90 	bl	801bc6c <_malloc_r>
 801cf4c:	4607      	mov	r7, r0
 801cf4e:	2800      	cmp	r0, #0
 801cf50:	d0ec      	beq.n	801cf2c <_realloc_r+0x1c>
 801cf52:	42b5      	cmp	r5, r6
 801cf54:	462a      	mov	r2, r5
 801cf56:	4621      	mov	r1, r4
 801cf58:	bf28      	it	cs
 801cf5a:	4632      	movcs	r2, r6
 801cf5c:	f7fe fac9 	bl	801b4f2 <memcpy>
 801cf60:	4621      	mov	r1, r4
 801cf62:	4640      	mov	r0, r8
 801cf64:	f7fe fadc 	bl	801b520 <_free_r>
 801cf68:	463c      	mov	r4, r7
 801cf6a:	e7e0      	b.n	801cf2e <_realloc_r+0x1e>

0801cf6c <fiprintf>:
 801cf6c:	b40e      	push	{r1, r2, r3}
 801cf6e:	b503      	push	{r0, r1, lr}
 801cf70:	4601      	mov	r1, r0
 801cf72:	ab03      	add	r3, sp, #12
 801cf74:	4805      	ldr	r0, [pc, #20]	@ (801cf8c <fiprintf+0x20>)
 801cf76:	f853 2b04 	ldr.w	r2, [r3], #4
 801cf7a:	6800      	ldr	r0, [r0, #0]
 801cf7c:	9301      	str	r3, [sp, #4]
 801cf7e:	f000 f83f 	bl	801d000 <_vfiprintf_r>
 801cf82:	b002      	add	sp, #8
 801cf84:	f85d eb04 	ldr.w	lr, [sp], #4
 801cf88:	b003      	add	sp, #12
 801cf8a:	4770      	bx	lr
 801cf8c:	20000288 	.word	0x20000288

0801cf90 <abort>:
 801cf90:	b508      	push	{r3, lr}
 801cf92:	2006      	movs	r0, #6
 801cf94:	f000 fa08 	bl	801d3a8 <raise>
 801cf98:	2001      	movs	r0, #1
 801cf9a:	f7e9 fa33 	bl	8006404 <_exit>

0801cf9e <_malloc_usable_size_r>:
 801cf9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cfa2:	1f18      	subs	r0, r3, #4
 801cfa4:	2b00      	cmp	r3, #0
 801cfa6:	bfbc      	itt	lt
 801cfa8:	580b      	ldrlt	r3, [r1, r0]
 801cfaa:	18c0      	addlt	r0, r0, r3
 801cfac:	4770      	bx	lr

0801cfae <__sfputc_r>:
 801cfae:	6893      	ldr	r3, [r2, #8]
 801cfb0:	3b01      	subs	r3, #1
 801cfb2:	2b00      	cmp	r3, #0
 801cfb4:	b410      	push	{r4}
 801cfb6:	6093      	str	r3, [r2, #8]
 801cfb8:	da08      	bge.n	801cfcc <__sfputc_r+0x1e>
 801cfba:	6994      	ldr	r4, [r2, #24]
 801cfbc:	42a3      	cmp	r3, r4
 801cfbe:	db01      	blt.n	801cfc4 <__sfputc_r+0x16>
 801cfc0:	290a      	cmp	r1, #10
 801cfc2:	d103      	bne.n	801cfcc <__sfputc_r+0x1e>
 801cfc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cfc8:	f000 b932 	b.w	801d230 <__swbuf_r>
 801cfcc:	6813      	ldr	r3, [r2, #0]
 801cfce:	1c58      	adds	r0, r3, #1
 801cfd0:	6010      	str	r0, [r2, #0]
 801cfd2:	7019      	strb	r1, [r3, #0]
 801cfd4:	4608      	mov	r0, r1
 801cfd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cfda:	4770      	bx	lr

0801cfdc <__sfputs_r>:
 801cfdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cfde:	4606      	mov	r6, r0
 801cfe0:	460f      	mov	r7, r1
 801cfe2:	4614      	mov	r4, r2
 801cfe4:	18d5      	adds	r5, r2, r3
 801cfe6:	42ac      	cmp	r4, r5
 801cfe8:	d101      	bne.n	801cfee <__sfputs_r+0x12>
 801cfea:	2000      	movs	r0, #0
 801cfec:	e007      	b.n	801cffe <__sfputs_r+0x22>
 801cfee:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cff2:	463a      	mov	r2, r7
 801cff4:	4630      	mov	r0, r6
 801cff6:	f7ff ffda 	bl	801cfae <__sfputc_r>
 801cffa:	1c43      	adds	r3, r0, #1
 801cffc:	d1f3      	bne.n	801cfe6 <__sfputs_r+0xa>
 801cffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d000 <_vfiprintf_r>:
 801d000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d004:	460d      	mov	r5, r1
 801d006:	b09d      	sub	sp, #116	@ 0x74
 801d008:	4614      	mov	r4, r2
 801d00a:	4698      	mov	r8, r3
 801d00c:	4606      	mov	r6, r0
 801d00e:	b118      	cbz	r0, 801d018 <_vfiprintf_r+0x18>
 801d010:	6a03      	ldr	r3, [r0, #32]
 801d012:	b90b      	cbnz	r3, 801d018 <_vfiprintf_r+0x18>
 801d014:	f7fe f888 	bl	801b128 <__sinit>
 801d018:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d01a:	07d9      	lsls	r1, r3, #31
 801d01c:	d405      	bmi.n	801d02a <_vfiprintf_r+0x2a>
 801d01e:	89ab      	ldrh	r3, [r5, #12]
 801d020:	059a      	lsls	r2, r3, #22
 801d022:	d402      	bmi.n	801d02a <_vfiprintf_r+0x2a>
 801d024:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d026:	f7fe fa5a 	bl	801b4de <__retarget_lock_acquire_recursive>
 801d02a:	89ab      	ldrh	r3, [r5, #12]
 801d02c:	071b      	lsls	r3, r3, #28
 801d02e:	d501      	bpl.n	801d034 <_vfiprintf_r+0x34>
 801d030:	692b      	ldr	r3, [r5, #16]
 801d032:	b99b      	cbnz	r3, 801d05c <_vfiprintf_r+0x5c>
 801d034:	4629      	mov	r1, r5
 801d036:	4630      	mov	r0, r6
 801d038:	f000 f938 	bl	801d2ac <__swsetup_r>
 801d03c:	b170      	cbz	r0, 801d05c <_vfiprintf_r+0x5c>
 801d03e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d040:	07dc      	lsls	r4, r3, #31
 801d042:	d504      	bpl.n	801d04e <_vfiprintf_r+0x4e>
 801d044:	f04f 30ff 	mov.w	r0, #4294967295
 801d048:	b01d      	add	sp, #116	@ 0x74
 801d04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d04e:	89ab      	ldrh	r3, [r5, #12]
 801d050:	0598      	lsls	r0, r3, #22
 801d052:	d4f7      	bmi.n	801d044 <_vfiprintf_r+0x44>
 801d054:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d056:	f7fe fa43 	bl	801b4e0 <__retarget_lock_release_recursive>
 801d05a:	e7f3      	b.n	801d044 <_vfiprintf_r+0x44>
 801d05c:	2300      	movs	r3, #0
 801d05e:	9309      	str	r3, [sp, #36]	@ 0x24
 801d060:	2320      	movs	r3, #32
 801d062:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d066:	f8cd 800c 	str.w	r8, [sp, #12]
 801d06a:	2330      	movs	r3, #48	@ 0x30
 801d06c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801d21c <_vfiprintf_r+0x21c>
 801d070:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d074:	f04f 0901 	mov.w	r9, #1
 801d078:	4623      	mov	r3, r4
 801d07a:	469a      	mov	sl, r3
 801d07c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d080:	b10a      	cbz	r2, 801d086 <_vfiprintf_r+0x86>
 801d082:	2a25      	cmp	r2, #37	@ 0x25
 801d084:	d1f9      	bne.n	801d07a <_vfiprintf_r+0x7a>
 801d086:	ebba 0b04 	subs.w	fp, sl, r4
 801d08a:	d00b      	beq.n	801d0a4 <_vfiprintf_r+0xa4>
 801d08c:	465b      	mov	r3, fp
 801d08e:	4622      	mov	r2, r4
 801d090:	4629      	mov	r1, r5
 801d092:	4630      	mov	r0, r6
 801d094:	f7ff ffa2 	bl	801cfdc <__sfputs_r>
 801d098:	3001      	adds	r0, #1
 801d09a:	f000 80a7 	beq.w	801d1ec <_vfiprintf_r+0x1ec>
 801d09e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d0a0:	445a      	add	r2, fp
 801d0a2:	9209      	str	r2, [sp, #36]	@ 0x24
 801d0a4:	f89a 3000 	ldrb.w	r3, [sl]
 801d0a8:	2b00      	cmp	r3, #0
 801d0aa:	f000 809f 	beq.w	801d1ec <_vfiprintf_r+0x1ec>
 801d0ae:	2300      	movs	r3, #0
 801d0b0:	f04f 32ff 	mov.w	r2, #4294967295
 801d0b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d0b8:	f10a 0a01 	add.w	sl, sl, #1
 801d0bc:	9304      	str	r3, [sp, #16]
 801d0be:	9307      	str	r3, [sp, #28]
 801d0c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d0c4:	931a      	str	r3, [sp, #104]	@ 0x68
 801d0c6:	4654      	mov	r4, sl
 801d0c8:	2205      	movs	r2, #5
 801d0ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d0ce:	4853      	ldr	r0, [pc, #332]	@ (801d21c <_vfiprintf_r+0x21c>)
 801d0d0:	f7e3 f886 	bl	80001e0 <memchr>
 801d0d4:	9a04      	ldr	r2, [sp, #16]
 801d0d6:	b9d8      	cbnz	r0, 801d110 <_vfiprintf_r+0x110>
 801d0d8:	06d1      	lsls	r1, r2, #27
 801d0da:	bf44      	itt	mi
 801d0dc:	2320      	movmi	r3, #32
 801d0de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d0e2:	0713      	lsls	r3, r2, #28
 801d0e4:	bf44      	itt	mi
 801d0e6:	232b      	movmi	r3, #43	@ 0x2b
 801d0e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d0ec:	f89a 3000 	ldrb.w	r3, [sl]
 801d0f0:	2b2a      	cmp	r3, #42	@ 0x2a
 801d0f2:	d015      	beq.n	801d120 <_vfiprintf_r+0x120>
 801d0f4:	9a07      	ldr	r2, [sp, #28]
 801d0f6:	4654      	mov	r4, sl
 801d0f8:	2000      	movs	r0, #0
 801d0fa:	f04f 0c0a 	mov.w	ip, #10
 801d0fe:	4621      	mov	r1, r4
 801d100:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d104:	3b30      	subs	r3, #48	@ 0x30
 801d106:	2b09      	cmp	r3, #9
 801d108:	d94b      	bls.n	801d1a2 <_vfiprintf_r+0x1a2>
 801d10a:	b1b0      	cbz	r0, 801d13a <_vfiprintf_r+0x13a>
 801d10c:	9207      	str	r2, [sp, #28]
 801d10e:	e014      	b.n	801d13a <_vfiprintf_r+0x13a>
 801d110:	eba0 0308 	sub.w	r3, r0, r8
 801d114:	fa09 f303 	lsl.w	r3, r9, r3
 801d118:	4313      	orrs	r3, r2
 801d11a:	9304      	str	r3, [sp, #16]
 801d11c:	46a2      	mov	sl, r4
 801d11e:	e7d2      	b.n	801d0c6 <_vfiprintf_r+0xc6>
 801d120:	9b03      	ldr	r3, [sp, #12]
 801d122:	1d19      	adds	r1, r3, #4
 801d124:	681b      	ldr	r3, [r3, #0]
 801d126:	9103      	str	r1, [sp, #12]
 801d128:	2b00      	cmp	r3, #0
 801d12a:	bfbb      	ittet	lt
 801d12c:	425b      	neglt	r3, r3
 801d12e:	f042 0202 	orrlt.w	r2, r2, #2
 801d132:	9307      	strge	r3, [sp, #28]
 801d134:	9307      	strlt	r3, [sp, #28]
 801d136:	bfb8      	it	lt
 801d138:	9204      	strlt	r2, [sp, #16]
 801d13a:	7823      	ldrb	r3, [r4, #0]
 801d13c:	2b2e      	cmp	r3, #46	@ 0x2e
 801d13e:	d10a      	bne.n	801d156 <_vfiprintf_r+0x156>
 801d140:	7863      	ldrb	r3, [r4, #1]
 801d142:	2b2a      	cmp	r3, #42	@ 0x2a
 801d144:	d132      	bne.n	801d1ac <_vfiprintf_r+0x1ac>
 801d146:	9b03      	ldr	r3, [sp, #12]
 801d148:	1d1a      	adds	r2, r3, #4
 801d14a:	681b      	ldr	r3, [r3, #0]
 801d14c:	9203      	str	r2, [sp, #12]
 801d14e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d152:	3402      	adds	r4, #2
 801d154:	9305      	str	r3, [sp, #20]
 801d156:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801d22c <_vfiprintf_r+0x22c>
 801d15a:	7821      	ldrb	r1, [r4, #0]
 801d15c:	2203      	movs	r2, #3
 801d15e:	4650      	mov	r0, sl
 801d160:	f7e3 f83e 	bl	80001e0 <memchr>
 801d164:	b138      	cbz	r0, 801d176 <_vfiprintf_r+0x176>
 801d166:	9b04      	ldr	r3, [sp, #16]
 801d168:	eba0 000a 	sub.w	r0, r0, sl
 801d16c:	2240      	movs	r2, #64	@ 0x40
 801d16e:	4082      	lsls	r2, r0
 801d170:	4313      	orrs	r3, r2
 801d172:	3401      	adds	r4, #1
 801d174:	9304      	str	r3, [sp, #16]
 801d176:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d17a:	4829      	ldr	r0, [pc, #164]	@ (801d220 <_vfiprintf_r+0x220>)
 801d17c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d180:	2206      	movs	r2, #6
 801d182:	f7e3 f82d 	bl	80001e0 <memchr>
 801d186:	2800      	cmp	r0, #0
 801d188:	d03f      	beq.n	801d20a <_vfiprintf_r+0x20a>
 801d18a:	4b26      	ldr	r3, [pc, #152]	@ (801d224 <_vfiprintf_r+0x224>)
 801d18c:	bb1b      	cbnz	r3, 801d1d6 <_vfiprintf_r+0x1d6>
 801d18e:	9b03      	ldr	r3, [sp, #12]
 801d190:	3307      	adds	r3, #7
 801d192:	f023 0307 	bic.w	r3, r3, #7
 801d196:	3308      	adds	r3, #8
 801d198:	9303      	str	r3, [sp, #12]
 801d19a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d19c:	443b      	add	r3, r7
 801d19e:	9309      	str	r3, [sp, #36]	@ 0x24
 801d1a0:	e76a      	b.n	801d078 <_vfiprintf_r+0x78>
 801d1a2:	fb0c 3202 	mla	r2, ip, r2, r3
 801d1a6:	460c      	mov	r4, r1
 801d1a8:	2001      	movs	r0, #1
 801d1aa:	e7a8      	b.n	801d0fe <_vfiprintf_r+0xfe>
 801d1ac:	2300      	movs	r3, #0
 801d1ae:	3401      	adds	r4, #1
 801d1b0:	9305      	str	r3, [sp, #20]
 801d1b2:	4619      	mov	r1, r3
 801d1b4:	f04f 0c0a 	mov.w	ip, #10
 801d1b8:	4620      	mov	r0, r4
 801d1ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d1be:	3a30      	subs	r2, #48	@ 0x30
 801d1c0:	2a09      	cmp	r2, #9
 801d1c2:	d903      	bls.n	801d1cc <_vfiprintf_r+0x1cc>
 801d1c4:	2b00      	cmp	r3, #0
 801d1c6:	d0c6      	beq.n	801d156 <_vfiprintf_r+0x156>
 801d1c8:	9105      	str	r1, [sp, #20]
 801d1ca:	e7c4      	b.n	801d156 <_vfiprintf_r+0x156>
 801d1cc:	fb0c 2101 	mla	r1, ip, r1, r2
 801d1d0:	4604      	mov	r4, r0
 801d1d2:	2301      	movs	r3, #1
 801d1d4:	e7f0      	b.n	801d1b8 <_vfiprintf_r+0x1b8>
 801d1d6:	ab03      	add	r3, sp, #12
 801d1d8:	9300      	str	r3, [sp, #0]
 801d1da:	462a      	mov	r2, r5
 801d1dc:	4b12      	ldr	r3, [pc, #72]	@ (801d228 <_vfiprintf_r+0x228>)
 801d1de:	a904      	add	r1, sp, #16
 801d1e0:	4630      	mov	r0, r6
 801d1e2:	f3af 8000 	nop.w
 801d1e6:	4607      	mov	r7, r0
 801d1e8:	1c78      	adds	r0, r7, #1
 801d1ea:	d1d6      	bne.n	801d19a <_vfiprintf_r+0x19a>
 801d1ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d1ee:	07d9      	lsls	r1, r3, #31
 801d1f0:	d405      	bmi.n	801d1fe <_vfiprintf_r+0x1fe>
 801d1f2:	89ab      	ldrh	r3, [r5, #12]
 801d1f4:	059a      	lsls	r2, r3, #22
 801d1f6:	d402      	bmi.n	801d1fe <_vfiprintf_r+0x1fe>
 801d1f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d1fa:	f7fe f971 	bl	801b4e0 <__retarget_lock_release_recursive>
 801d1fe:	89ab      	ldrh	r3, [r5, #12]
 801d200:	065b      	lsls	r3, r3, #25
 801d202:	f53f af1f 	bmi.w	801d044 <_vfiprintf_r+0x44>
 801d206:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d208:	e71e      	b.n	801d048 <_vfiprintf_r+0x48>
 801d20a:	ab03      	add	r3, sp, #12
 801d20c:	9300      	str	r3, [sp, #0]
 801d20e:	462a      	mov	r2, r5
 801d210:	4b05      	ldr	r3, [pc, #20]	@ (801d228 <_vfiprintf_r+0x228>)
 801d212:	a904      	add	r1, sp, #16
 801d214:	4630      	mov	r0, r6
 801d216:	f7ff fc4b 	bl	801cab0 <_printf_i>
 801d21a:	e7e4      	b.n	801d1e6 <_vfiprintf_r+0x1e6>
 801d21c:	0801fa60 	.word	0x0801fa60
 801d220:	0801fa6a 	.word	0x0801fa6a
 801d224:	00000000 	.word	0x00000000
 801d228:	0801cfdd 	.word	0x0801cfdd
 801d22c:	0801fa66 	.word	0x0801fa66

0801d230 <__swbuf_r>:
 801d230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d232:	460e      	mov	r6, r1
 801d234:	4614      	mov	r4, r2
 801d236:	4605      	mov	r5, r0
 801d238:	b118      	cbz	r0, 801d242 <__swbuf_r+0x12>
 801d23a:	6a03      	ldr	r3, [r0, #32]
 801d23c:	b90b      	cbnz	r3, 801d242 <__swbuf_r+0x12>
 801d23e:	f7fd ff73 	bl	801b128 <__sinit>
 801d242:	69a3      	ldr	r3, [r4, #24]
 801d244:	60a3      	str	r3, [r4, #8]
 801d246:	89a3      	ldrh	r3, [r4, #12]
 801d248:	071a      	lsls	r2, r3, #28
 801d24a:	d501      	bpl.n	801d250 <__swbuf_r+0x20>
 801d24c:	6923      	ldr	r3, [r4, #16]
 801d24e:	b943      	cbnz	r3, 801d262 <__swbuf_r+0x32>
 801d250:	4621      	mov	r1, r4
 801d252:	4628      	mov	r0, r5
 801d254:	f000 f82a 	bl	801d2ac <__swsetup_r>
 801d258:	b118      	cbz	r0, 801d262 <__swbuf_r+0x32>
 801d25a:	f04f 37ff 	mov.w	r7, #4294967295
 801d25e:	4638      	mov	r0, r7
 801d260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d262:	6823      	ldr	r3, [r4, #0]
 801d264:	6922      	ldr	r2, [r4, #16]
 801d266:	1a98      	subs	r0, r3, r2
 801d268:	6963      	ldr	r3, [r4, #20]
 801d26a:	b2f6      	uxtb	r6, r6
 801d26c:	4283      	cmp	r3, r0
 801d26e:	4637      	mov	r7, r6
 801d270:	dc05      	bgt.n	801d27e <__swbuf_r+0x4e>
 801d272:	4621      	mov	r1, r4
 801d274:	4628      	mov	r0, r5
 801d276:	f7ff fdbf 	bl	801cdf8 <_fflush_r>
 801d27a:	2800      	cmp	r0, #0
 801d27c:	d1ed      	bne.n	801d25a <__swbuf_r+0x2a>
 801d27e:	68a3      	ldr	r3, [r4, #8]
 801d280:	3b01      	subs	r3, #1
 801d282:	60a3      	str	r3, [r4, #8]
 801d284:	6823      	ldr	r3, [r4, #0]
 801d286:	1c5a      	adds	r2, r3, #1
 801d288:	6022      	str	r2, [r4, #0]
 801d28a:	701e      	strb	r6, [r3, #0]
 801d28c:	6962      	ldr	r2, [r4, #20]
 801d28e:	1c43      	adds	r3, r0, #1
 801d290:	429a      	cmp	r2, r3
 801d292:	d004      	beq.n	801d29e <__swbuf_r+0x6e>
 801d294:	89a3      	ldrh	r3, [r4, #12]
 801d296:	07db      	lsls	r3, r3, #31
 801d298:	d5e1      	bpl.n	801d25e <__swbuf_r+0x2e>
 801d29a:	2e0a      	cmp	r6, #10
 801d29c:	d1df      	bne.n	801d25e <__swbuf_r+0x2e>
 801d29e:	4621      	mov	r1, r4
 801d2a0:	4628      	mov	r0, r5
 801d2a2:	f7ff fda9 	bl	801cdf8 <_fflush_r>
 801d2a6:	2800      	cmp	r0, #0
 801d2a8:	d0d9      	beq.n	801d25e <__swbuf_r+0x2e>
 801d2aa:	e7d6      	b.n	801d25a <__swbuf_r+0x2a>

0801d2ac <__swsetup_r>:
 801d2ac:	b538      	push	{r3, r4, r5, lr}
 801d2ae:	4b29      	ldr	r3, [pc, #164]	@ (801d354 <__swsetup_r+0xa8>)
 801d2b0:	4605      	mov	r5, r0
 801d2b2:	6818      	ldr	r0, [r3, #0]
 801d2b4:	460c      	mov	r4, r1
 801d2b6:	b118      	cbz	r0, 801d2c0 <__swsetup_r+0x14>
 801d2b8:	6a03      	ldr	r3, [r0, #32]
 801d2ba:	b90b      	cbnz	r3, 801d2c0 <__swsetup_r+0x14>
 801d2bc:	f7fd ff34 	bl	801b128 <__sinit>
 801d2c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d2c4:	0719      	lsls	r1, r3, #28
 801d2c6:	d422      	bmi.n	801d30e <__swsetup_r+0x62>
 801d2c8:	06da      	lsls	r2, r3, #27
 801d2ca:	d407      	bmi.n	801d2dc <__swsetup_r+0x30>
 801d2cc:	2209      	movs	r2, #9
 801d2ce:	602a      	str	r2, [r5, #0]
 801d2d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d2d4:	81a3      	strh	r3, [r4, #12]
 801d2d6:	f04f 30ff 	mov.w	r0, #4294967295
 801d2da:	e033      	b.n	801d344 <__swsetup_r+0x98>
 801d2dc:	0758      	lsls	r0, r3, #29
 801d2de:	d512      	bpl.n	801d306 <__swsetup_r+0x5a>
 801d2e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d2e2:	b141      	cbz	r1, 801d2f6 <__swsetup_r+0x4a>
 801d2e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d2e8:	4299      	cmp	r1, r3
 801d2ea:	d002      	beq.n	801d2f2 <__swsetup_r+0x46>
 801d2ec:	4628      	mov	r0, r5
 801d2ee:	f7fe f917 	bl	801b520 <_free_r>
 801d2f2:	2300      	movs	r3, #0
 801d2f4:	6363      	str	r3, [r4, #52]	@ 0x34
 801d2f6:	89a3      	ldrh	r3, [r4, #12]
 801d2f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801d2fc:	81a3      	strh	r3, [r4, #12]
 801d2fe:	2300      	movs	r3, #0
 801d300:	6063      	str	r3, [r4, #4]
 801d302:	6923      	ldr	r3, [r4, #16]
 801d304:	6023      	str	r3, [r4, #0]
 801d306:	89a3      	ldrh	r3, [r4, #12]
 801d308:	f043 0308 	orr.w	r3, r3, #8
 801d30c:	81a3      	strh	r3, [r4, #12]
 801d30e:	6923      	ldr	r3, [r4, #16]
 801d310:	b94b      	cbnz	r3, 801d326 <__swsetup_r+0x7a>
 801d312:	89a3      	ldrh	r3, [r4, #12]
 801d314:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801d318:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d31c:	d003      	beq.n	801d326 <__swsetup_r+0x7a>
 801d31e:	4621      	mov	r1, r4
 801d320:	4628      	mov	r0, r5
 801d322:	f000 f883 	bl	801d42c <__smakebuf_r>
 801d326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d32a:	f013 0201 	ands.w	r2, r3, #1
 801d32e:	d00a      	beq.n	801d346 <__swsetup_r+0x9a>
 801d330:	2200      	movs	r2, #0
 801d332:	60a2      	str	r2, [r4, #8]
 801d334:	6962      	ldr	r2, [r4, #20]
 801d336:	4252      	negs	r2, r2
 801d338:	61a2      	str	r2, [r4, #24]
 801d33a:	6922      	ldr	r2, [r4, #16]
 801d33c:	b942      	cbnz	r2, 801d350 <__swsetup_r+0xa4>
 801d33e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801d342:	d1c5      	bne.n	801d2d0 <__swsetup_r+0x24>
 801d344:	bd38      	pop	{r3, r4, r5, pc}
 801d346:	0799      	lsls	r1, r3, #30
 801d348:	bf58      	it	pl
 801d34a:	6962      	ldrpl	r2, [r4, #20]
 801d34c:	60a2      	str	r2, [r4, #8]
 801d34e:	e7f4      	b.n	801d33a <__swsetup_r+0x8e>
 801d350:	2000      	movs	r0, #0
 801d352:	e7f7      	b.n	801d344 <__swsetup_r+0x98>
 801d354:	20000288 	.word	0x20000288

0801d358 <_raise_r>:
 801d358:	291f      	cmp	r1, #31
 801d35a:	b538      	push	{r3, r4, r5, lr}
 801d35c:	4605      	mov	r5, r0
 801d35e:	460c      	mov	r4, r1
 801d360:	d904      	bls.n	801d36c <_raise_r+0x14>
 801d362:	2316      	movs	r3, #22
 801d364:	6003      	str	r3, [r0, #0]
 801d366:	f04f 30ff 	mov.w	r0, #4294967295
 801d36a:	bd38      	pop	{r3, r4, r5, pc}
 801d36c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801d36e:	b112      	cbz	r2, 801d376 <_raise_r+0x1e>
 801d370:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d374:	b94b      	cbnz	r3, 801d38a <_raise_r+0x32>
 801d376:	4628      	mov	r0, r5
 801d378:	f000 f830 	bl	801d3dc <_getpid_r>
 801d37c:	4622      	mov	r2, r4
 801d37e:	4601      	mov	r1, r0
 801d380:	4628      	mov	r0, r5
 801d382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d386:	f000 b817 	b.w	801d3b8 <_kill_r>
 801d38a:	2b01      	cmp	r3, #1
 801d38c:	d00a      	beq.n	801d3a4 <_raise_r+0x4c>
 801d38e:	1c59      	adds	r1, r3, #1
 801d390:	d103      	bne.n	801d39a <_raise_r+0x42>
 801d392:	2316      	movs	r3, #22
 801d394:	6003      	str	r3, [r0, #0]
 801d396:	2001      	movs	r0, #1
 801d398:	e7e7      	b.n	801d36a <_raise_r+0x12>
 801d39a:	2100      	movs	r1, #0
 801d39c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801d3a0:	4620      	mov	r0, r4
 801d3a2:	4798      	blx	r3
 801d3a4:	2000      	movs	r0, #0
 801d3a6:	e7e0      	b.n	801d36a <_raise_r+0x12>

0801d3a8 <raise>:
 801d3a8:	4b02      	ldr	r3, [pc, #8]	@ (801d3b4 <raise+0xc>)
 801d3aa:	4601      	mov	r1, r0
 801d3ac:	6818      	ldr	r0, [r3, #0]
 801d3ae:	f7ff bfd3 	b.w	801d358 <_raise_r>
 801d3b2:	bf00      	nop
 801d3b4:	20000288 	.word	0x20000288

0801d3b8 <_kill_r>:
 801d3b8:	b538      	push	{r3, r4, r5, lr}
 801d3ba:	4d07      	ldr	r5, [pc, #28]	@ (801d3d8 <_kill_r+0x20>)
 801d3bc:	2300      	movs	r3, #0
 801d3be:	4604      	mov	r4, r0
 801d3c0:	4608      	mov	r0, r1
 801d3c2:	4611      	mov	r1, r2
 801d3c4:	602b      	str	r3, [r5, #0]
 801d3c6:	f7e9 f80d 	bl	80063e4 <_kill>
 801d3ca:	1c43      	adds	r3, r0, #1
 801d3cc:	d102      	bne.n	801d3d4 <_kill_r+0x1c>
 801d3ce:	682b      	ldr	r3, [r5, #0]
 801d3d0:	b103      	cbz	r3, 801d3d4 <_kill_r+0x1c>
 801d3d2:	6023      	str	r3, [r4, #0]
 801d3d4:	bd38      	pop	{r3, r4, r5, pc}
 801d3d6:	bf00      	nop
 801d3d8:	2000909c 	.word	0x2000909c

0801d3dc <_getpid_r>:
 801d3dc:	f7e8 bffa 	b.w	80063d4 <_getpid>

0801d3e0 <__swhatbuf_r>:
 801d3e0:	b570      	push	{r4, r5, r6, lr}
 801d3e2:	460c      	mov	r4, r1
 801d3e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d3e8:	2900      	cmp	r1, #0
 801d3ea:	b096      	sub	sp, #88	@ 0x58
 801d3ec:	4615      	mov	r5, r2
 801d3ee:	461e      	mov	r6, r3
 801d3f0:	da0d      	bge.n	801d40e <__swhatbuf_r+0x2e>
 801d3f2:	89a3      	ldrh	r3, [r4, #12]
 801d3f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801d3f8:	f04f 0100 	mov.w	r1, #0
 801d3fc:	bf14      	ite	ne
 801d3fe:	2340      	movne	r3, #64	@ 0x40
 801d400:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801d404:	2000      	movs	r0, #0
 801d406:	6031      	str	r1, [r6, #0]
 801d408:	602b      	str	r3, [r5, #0]
 801d40a:	b016      	add	sp, #88	@ 0x58
 801d40c:	bd70      	pop	{r4, r5, r6, pc}
 801d40e:	466a      	mov	r2, sp
 801d410:	f000 f848 	bl	801d4a4 <_fstat_r>
 801d414:	2800      	cmp	r0, #0
 801d416:	dbec      	blt.n	801d3f2 <__swhatbuf_r+0x12>
 801d418:	9901      	ldr	r1, [sp, #4]
 801d41a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801d41e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801d422:	4259      	negs	r1, r3
 801d424:	4159      	adcs	r1, r3
 801d426:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801d42a:	e7eb      	b.n	801d404 <__swhatbuf_r+0x24>

0801d42c <__smakebuf_r>:
 801d42c:	898b      	ldrh	r3, [r1, #12]
 801d42e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d430:	079d      	lsls	r5, r3, #30
 801d432:	4606      	mov	r6, r0
 801d434:	460c      	mov	r4, r1
 801d436:	d507      	bpl.n	801d448 <__smakebuf_r+0x1c>
 801d438:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801d43c:	6023      	str	r3, [r4, #0]
 801d43e:	6123      	str	r3, [r4, #16]
 801d440:	2301      	movs	r3, #1
 801d442:	6163      	str	r3, [r4, #20]
 801d444:	b003      	add	sp, #12
 801d446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d448:	ab01      	add	r3, sp, #4
 801d44a:	466a      	mov	r2, sp
 801d44c:	f7ff ffc8 	bl	801d3e0 <__swhatbuf_r>
 801d450:	9f00      	ldr	r7, [sp, #0]
 801d452:	4605      	mov	r5, r0
 801d454:	4639      	mov	r1, r7
 801d456:	4630      	mov	r0, r6
 801d458:	f7fe fc08 	bl	801bc6c <_malloc_r>
 801d45c:	b948      	cbnz	r0, 801d472 <__smakebuf_r+0x46>
 801d45e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d462:	059a      	lsls	r2, r3, #22
 801d464:	d4ee      	bmi.n	801d444 <__smakebuf_r+0x18>
 801d466:	f023 0303 	bic.w	r3, r3, #3
 801d46a:	f043 0302 	orr.w	r3, r3, #2
 801d46e:	81a3      	strh	r3, [r4, #12]
 801d470:	e7e2      	b.n	801d438 <__smakebuf_r+0xc>
 801d472:	89a3      	ldrh	r3, [r4, #12]
 801d474:	6020      	str	r0, [r4, #0]
 801d476:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d47a:	81a3      	strh	r3, [r4, #12]
 801d47c:	9b01      	ldr	r3, [sp, #4]
 801d47e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801d482:	b15b      	cbz	r3, 801d49c <__smakebuf_r+0x70>
 801d484:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d488:	4630      	mov	r0, r6
 801d48a:	f000 f81d 	bl	801d4c8 <_isatty_r>
 801d48e:	b128      	cbz	r0, 801d49c <__smakebuf_r+0x70>
 801d490:	89a3      	ldrh	r3, [r4, #12]
 801d492:	f023 0303 	bic.w	r3, r3, #3
 801d496:	f043 0301 	orr.w	r3, r3, #1
 801d49a:	81a3      	strh	r3, [r4, #12]
 801d49c:	89a3      	ldrh	r3, [r4, #12]
 801d49e:	431d      	orrs	r5, r3
 801d4a0:	81a5      	strh	r5, [r4, #12]
 801d4a2:	e7cf      	b.n	801d444 <__smakebuf_r+0x18>

0801d4a4 <_fstat_r>:
 801d4a4:	b538      	push	{r3, r4, r5, lr}
 801d4a6:	4d07      	ldr	r5, [pc, #28]	@ (801d4c4 <_fstat_r+0x20>)
 801d4a8:	2300      	movs	r3, #0
 801d4aa:	4604      	mov	r4, r0
 801d4ac:	4608      	mov	r0, r1
 801d4ae:	4611      	mov	r1, r2
 801d4b0:	602b      	str	r3, [r5, #0]
 801d4b2:	f7e8 fff7 	bl	80064a4 <_fstat>
 801d4b6:	1c43      	adds	r3, r0, #1
 801d4b8:	d102      	bne.n	801d4c0 <_fstat_r+0x1c>
 801d4ba:	682b      	ldr	r3, [r5, #0]
 801d4bc:	b103      	cbz	r3, 801d4c0 <_fstat_r+0x1c>
 801d4be:	6023      	str	r3, [r4, #0]
 801d4c0:	bd38      	pop	{r3, r4, r5, pc}
 801d4c2:	bf00      	nop
 801d4c4:	2000909c 	.word	0x2000909c

0801d4c8 <_isatty_r>:
 801d4c8:	b538      	push	{r3, r4, r5, lr}
 801d4ca:	4d06      	ldr	r5, [pc, #24]	@ (801d4e4 <_isatty_r+0x1c>)
 801d4cc:	2300      	movs	r3, #0
 801d4ce:	4604      	mov	r4, r0
 801d4d0:	4608      	mov	r0, r1
 801d4d2:	602b      	str	r3, [r5, #0]
 801d4d4:	f7e8 fff6 	bl	80064c4 <_isatty>
 801d4d8:	1c43      	adds	r3, r0, #1
 801d4da:	d102      	bne.n	801d4e2 <_isatty_r+0x1a>
 801d4dc:	682b      	ldr	r3, [r5, #0]
 801d4de:	b103      	cbz	r3, 801d4e2 <_isatty_r+0x1a>
 801d4e0:	6023      	str	r3, [r4, #0]
 801d4e2:	bd38      	pop	{r3, r4, r5, pc}
 801d4e4:	2000909c 	.word	0x2000909c

0801d4e8 <cos>:
 801d4e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d4ea:	ec53 2b10 	vmov	r2, r3, d0
 801d4ee:	4826      	ldr	r0, [pc, #152]	@ (801d588 <cos+0xa0>)
 801d4f0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801d4f4:	4281      	cmp	r1, r0
 801d4f6:	d806      	bhi.n	801d506 <cos+0x1e>
 801d4f8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801d580 <cos+0x98>
 801d4fc:	b005      	add	sp, #20
 801d4fe:	f85d eb04 	ldr.w	lr, [sp], #4
 801d502:	f000 b899 	b.w	801d638 <__kernel_cos>
 801d506:	4821      	ldr	r0, [pc, #132]	@ (801d58c <cos+0xa4>)
 801d508:	4281      	cmp	r1, r0
 801d50a:	d908      	bls.n	801d51e <cos+0x36>
 801d50c:	4610      	mov	r0, r2
 801d50e:	4619      	mov	r1, r3
 801d510:	f7e2 feba 	bl	8000288 <__aeabi_dsub>
 801d514:	ec41 0b10 	vmov	d0, r0, r1
 801d518:	b005      	add	sp, #20
 801d51a:	f85d fb04 	ldr.w	pc, [sp], #4
 801d51e:	4668      	mov	r0, sp
 801d520:	f000 fa0e 	bl	801d940 <__ieee754_rem_pio2>
 801d524:	f000 0003 	and.w	r0, r0, #3
 801d528:	2801      	cmp	r0, #1
 801d52a:	d00b      	beq.n	801d544 <cos+0x5c>
 801d52c:	2802      	cmp	r0, #2
 801d52e:	d015      	beq.n	801d55c <cos+0x74>
 801d530:	b9d8      	cbnz	r0, 801d56a <cos+0x82>
 801d532:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d536:	ed9d 0b00 	vldr	d0, [sp]
 801d53a:	f000 f87d 	bl	801d638 <__kernel_cos>
 801d53e:	ec51 0b10 	vmov	r0, r1, d0
 801d542:	e7e7      	b.n	801d514 <cos+0x2c>
 801d544:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d548:	ed9d 0b00 	vldr	d0, [sp]
 801d54c:	f000 f93c 	bl	801d7c8 <__kernel_sin>
 801d550:	ec53 2b10 	vmov	r2, r3, d0
 801d554:	4610      	mov	r0, r2
 801d556:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801d55a:	e7db      	b.n	801d514 <cos+0x2c>
 801d55c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d560:	ed9d 0b00 	vldr	d0, [sp]
 801d564:	f000 f868 	bl	801d638 <__kernel_cos>
 801d568:	e7f2      	b.n	801d550 <cos+0x68>
 801d56a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d56e:	ed9d 0b00 	vldr	d0, [sp]
 801d572:	2001      	movs	r0, #1
 801d574:	f000 f928 	bl	801d7c8 <__kernel_sin>
 801d578:	e7e1      	b.n	801d53e <cos+0x56>
 801d57a:	bf00      	nop
 801d57c:	f3af 8000 	nop.w
	...
 801d588:	3fe921fb 	.word	0x3fe921fb
 801d58c:	7fefffff 	.word	0x7fefffff

0801d590 <sin>:
 801d590:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d592:	ec53 2b10 	vmov	r2, r3, d0
 801d596:	4826      	ldr	r0, [pc, #152]	@ (801d630 <sin+0xa0>)
 801d598:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801d59c:	4281      	cmp	r1, r0
 801d59e:	d807      	bhi.n	801d5b0 <sin+0x20>
 801d5a0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801d628 <sin+0x98>
 801d5a4:	2000      	movs	r0, #0
 801d5a6:	b005      	add	sp, #20
 801d5a8:	f85d eb04 	ldr.w	lr, [sp], #4
 801d5ac:	f000 b90c 	b.w	801d7c8 <__kernel_sin>
 801d5b0:	4820      	ldr	r0, [pc, #128]	@ (801d634 <sin+0xa4>)
 801d5b2:	4281      	cmp	r1, r0
 801d5b4:	d908      	bls.n	801d5c8 <sin+0x38>
 801d5b6:	4610      	mov	r0, r2
 801d5b8:	4619      	mov	r1, r3
 801d5ba:	f7e2 fe65 	bl	8000288 <__aeabi_dsub>
 801d5be:	ec41 0b10 	vmov	d0, r0, r1
 801d5c2:	b005      	add	sp, #20
 801d5c4:	f85d fb04 	ldr.w	pc, [sp], #4
 801d5c8:	4668      	mov	r0, sp
 801d5ca:	f000 f9b9 	bl	801d940 <__ieee754_rem_pio2>
 801d5ce:	f000 0003 	and.w	r0, r0, #3
 801d5d2:	2801      	cmp	r0, #1
 801d5d4:	d00c      	beq.n	801d5f0 <sin+0x60>
 801d5d6:	2802      	cmp	r0, #2
 801d5d8:	d011      	beq.n	801d5fe <sin+0x6e>
 801d5da:	b9e8      	cbnz	r0, 801d618 <sin+0x88>
 801d5dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d5e0:	ed9d 0b00 	vldr	d0, [sp]
 801d5e4:	2001      	movs	r0, #1
 801d5e6:	f000 f8ef 	bl	801d7c8 <__kernel_sin>
 801d5ea:	ec51 0b10 	vmov	r0, r1, d0
 801d5ee:	e7e6      	b.n	801d5be <sin+0x2e>
 801d5f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d5f4:	ed9d 0b00 	vldr	d0, [sp]
 801d5f8:	f000 f81e 	bl	801d638 <__kernel_cos>
 801d5fc:	e7f5      	b.n	801d5ea <sin+0x5a>
 801d5fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d602:	ed9d 0b00 	vldr	d0, [sp]
 801d606:	2001      	movs	r0, #1
 801d608:	f000 f8de 	bl	801d7c8 <__kernel_sin>
 801d60c:	ec53 2b10 	vmov	r2, r3, d0
 801d610:	4610      	mov	r0, r2
 801d612:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801d616:	e7d2      	b.n	801d5be <sin+0x2e>
 801d618:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d61c:	ed9d 0b00 	vldr	d0, [sp]
 801d620:	f000 f80a 	bl	801d638 <__kernel_cos>
 801d624:	e7f2      	b.n	801d60c <sin+0x7c>
 801d626:	bf00      	nop
	...
 801d630:	3fe921fb 	.word	0x3fe921fb
 801d634:	7fefffff 	.word	0x7fefffff

0801d638 <__kernel_cos>:
 801d638:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d63c:	ec57 6b10 	vmov	r6, r7, d0
 801d640:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801d644:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 801d648:	ed8d 1b00 	vstr	d1, [sp]
 801d64c:	d206      	bcs.n	801d65c <__kernel_cos+0x24>
 801d64e:	4630      	mov	r0, r6
 801d650:	4639      	mov	r1, r7
 801d652:	f7e3 fa6b 	bl	8000b2c <__aeabi_d2iz>
 801d656:	2800      	cmp	r0, #0
 801d658:	f000 8088 	beq.w	801d76c <__kernel_cos+0x134>
 801d65c:	4632      	mov	r2, r6
 801d65e:	463b      	mov	r3, r7
 801d660:	4630      	mov	r0, r6
 801d662:	4639      	mov	r1, r7
 801d664:	f7e2 ffc8 	bl	80005f8 <__aeabi_dmul>
 801d668:	4b51      	ldr	r3, [pc, #324]	@ (801d7b0 <__kernel_cos+0x178>)
 801d66a:	2200      	movs	r2, #0
 801d66c:	4604      	mov	r4, r0
 801d66e:	460d      	mov	r5, r1
 801d670:	f7e2 ffc2 	bl	80005f8 <__aeabi_dmul>
 801d674:	a340      	add	r3, pc, #256	@ (adr r3, 801d778 <__kernel_cos+0x140>)
 801d676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d67a:	4682      	mov	sl, r0
 801d67c:	468b      	mov	fp, r1
 801d67e:	4620      	mov	r0, r4
 801d680:	4629      	mov	r1, r5
 801d682:	f7e2 ffb9 	bl	80005f8 <__aeabi_dmul>
 801d686:	a33e      	add	r3, pc, #248	@ (adr r3, 801d780 <__kernel_cos+0x148>)
 801d688:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d68c:	f7e2 fdfe 	bl	800028c <__adddf3>
 801d690:	4622      	mov	r2, r4
 801d692:	462b      	mov	r3, r5
 801d694:	f7e2 ffb0 	bl	80005f8 <__aeabi_dmul>
 801d698:	a33b      	add	r3, pc, #236	@ (adr r3, 801d788 <__kernel_cos+0x150>)
 801d69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d69e:	f7e2 fdf3 	bl	8000288 <__aeabi_dsub>
 801d6a2:	4622      	mov	r2, r4
 801d6a4:	462b      	mov	r3, r5
 801d6a6:	f7e2 ffa7 	bl	80005f8 <__aeabi_dmul>
 801d6aa:	a339      	add	r3, pc, #228	@ (adr r3, 801d790 <__kernel_cos+0x158>)
 801d6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6b0:	f7e2 fdec 	bl	800028c <__adddf3>
 801d6b4:	4622      	mov	r2, r4
 801d6b6:	462b      	mov	r3, r5
 801d6b8:	f7e2 ff9e 	bl	80005f8 <__aeabi_dmul>
 801d6bc:	a336      	add	r3, pc, #216	@ (adr r3, 801d798 <__kernel_cos+0x160>)
 801d6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6c2:	f7e2 fde1 	bl	8000288 <__aeabi_dsub>
 801d6c6:	4622      	mov	r2, r4
 801d6c8:	462b      	mov	r3, r5
 801d6ca:	f7e2 ff95 	bl	80005f8 <__aeabi_dmul>
 801d6ce:	a334      	add	r3, pc, #208	@ (adr r3, 801d7a0 <__kernel_cos+0x168>)
 801d6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6d4:	f7e2 fdda 	bl	800028c <__adddf3>
 801d6d8:	4622      	mov	r2, r4
 801d6da:	462b      	mov	r3, r5
 801d6dc:	f7e2 ff8c 	bl	80005f8 <__aeabi_dmul>
 801d6e0:	4622      	mov	r2, r4
 801d6e2:	462b      	mov	r3, r5
 801d6e4:	f7e2 ff88 	bl	80005f8 <__aeabi_dmul>
 801d6e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d6ec:	4604      	mov	r4, r0
 801d6ee:	460d      	mov	r5, r1
 801d6f0:	4630      	mov	r0, r6
 801d6f2:	4639      	mov	r1, r7
 801d6f4:	f7e2 ff80 	bl	80005f8 <__aeabi_dmul>
 801d6f8:	460b      	mov	r3, r1
 801d6fa:	4602      	mov	r2, r0
 801d6fc:	4629      	mov	r1, r5
 801d6fe:	4620      	mov	r0, r4
 801d700:	f7e2 fdc2 	bl	8000288 <__aeabi_dsub>
 801d704:	4b2b      	ldr	r3, [pc, #172]	@ (801d7b4 <__kernel_cos+0x17c>)
 801d706:	4598      	cmp	r8, r3
 801d708:	4606      	mov	r6, r0
 801d70a:	460f      	mov	r7, r1
 801d70c:	d810      	bhi.n	801d730 <__kernel_cos+0xf8>
 801d70e:	4602      	mov	r2, r0
 801d710:	460b      	mov	r3, r1
 801d712:	4650      	mov	r0, sl
 801d714:	4659      	mov	r1, fp
 801d716:	f7e2 fdb7 	bl	8000288 <__aeabi_dsub>
 801d71a:	460b      	mov	r3, r1
 801d71c:	4926      	ldr	r1, [pc, #152]	@ (801d7b8 <__kernel_cos+0x180>)
 801d71e:	4602      	mov	r2, r0
 801d720:	2000      	movs	r0, #0
 801d722:	f7e2 fdb1 	bl	8000288 <__aeabi_dsub>
 801d726:	ec41 0b10 	vmov	d0, r0, r1
 801d72a:	b003      	add	sp, #12
 801d72c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d730:	4b22      	ldr	r3, [pc, #136]	@ (801d7bc <__kernel_cos+0x184>)
 801d732:	4921      	ldr	r1, [pc, #132]	@ (801d7b8 <__kernel_cos+0x180>)
 801d734:	4598      	cmp	r8, r3
 801d736:	bf8c      	ite	hi
 801d738:	4d21      	ldrhi	r5, [pc, #132]	@ (801d7c0 <__kernel_cos+0x188>)
 801d73a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801d73e:	2400      	movs	r4, #0
 801d740:	4622      	mov	r2, r4
 801d742:	462b      	mov	r3, r5
 801d744:	2000      	movs	r0, #0
 801d746:	f7e2 fd9f 	bl	8000288 <__aeabi_dsub>
 801d74a:	4622      	mov	r2, r4
 801d74c:	4680      	mov	r8, r0
 801d74e:	4689      	mov	r9, r1
 801d750:	462b      	mov	r3, r5
 801d752:	4650      	mov	r0, sl
 801d754:	4659      	mov	r1, fp
 801d756:	f7e2 fd97 	bl	8000288 <__aeabi_dsub>
 801d75a:	4632      	mov	r2, r6
 801d75c:	463b      	mov	r3, r7
 801d75e:	f7e2 fd93 	bl	8000288 <__aeabi_dsub>
 801d762:	4602      	mov	r2, r0
 801d764:	460b      	mov	r3, r1
 801d766:	4640      	mov	r0, r8
 801d768:	4649      	mov	r1, r9
 801d76a:	e7da      	b.n	801d722 <__kernel_cos+0xea>
 801d76c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 801d7a8 <__kernel_cos+0x170>
 801d770:	e7db      	b.n	801d72a <__kernel_cos+0xf2>
 801d772:	bf00      	nop
 801d774:	f3af 8000 	nop.w
 801d778:	be8838d4 	.word	0xbe8838d4
 801d77c:	bda8fae9 	.word	0xbda8fae9
 801d780:	bdb4b1c4 	.word	0xbdb4b1c4
 801d784:	3e21ee9e 	.word	0x3e21ee9e
 801d788:	809c52ad 	.word	0x809c52ad
 801d78c:	3e927e4f 	.word	0x3e927e4f
 801d790:	19cb1590 	.word	0x19cb1590
 801d794:	3efa01a0 	.word	0x3efa01a0
 801d798:	16c15177 	.word	0x16c15177
 801d79c:	3f56c16c 	.word	0x3f56c16c
 801d7a0:	5555554c 	.word	0x5555554c
 801d7a4:	3fa55555 	.word	0x3fa55555
 801d7a8:	00000000 	.word	0x00000000
 801d7ac:	3ff00000 	.word	0x3ff00000
 801d7b0:	3fe00000 	.word	0x3fe00000
 801d7b4:	3fd33332 	.word	0x3fd33332
 801d7b8:	3ff00000 	.word	0x3ff00000
 801d7bc:	3fe90000 	.word	0x3fe90000
 801d7c0:	3fd20000 	.word	0x3fd20000
 801d7c4:	00000000 	.word	0x00000000

0801d7c8 <__kernel_sin>:
 801d7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7cc:	ec55 4b10 	vmov	r4, r5, d0
 801d7d0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801d7d4:	b085      	sub	sp, #20
 801d7d6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801d7da:	ed8d 1b02 	vstr	d1, [sp, #8]
 801d7de:	4680      	mov	r8, r0
 801d7e0:	d205      	bcs.n	801d7ee <__kernel_sin+0x26>
 801d7e2:	4620      	mov	r0, r4
 801d7e4:	4629      	mov	r1, r5
 801d7e6:	f7e3 f9a1 	bl	8000b2c <__aeabi_d2iz>
 801d7ea:	2800      	cmp	r0, #0
 801d7ec:	d052      	beq.n	801d894 <__kernel_sin+0xcc>
 801d7ee:	4622      	mov	r2, r4
 801d7f0:	462b      	mov	r3, r5
 801d7f2:	4620      	mov	r0, r4
 801d7f4:	4629      	mov	r1, r5
 801d7f6:	f7e2 feff 	bl	80005f8 <__aeabi_dmul>
 801d7fa:	4682      	mov	sl, r0
 801d7fc:	468b      	mov	fp, r1
 801d7fe:	4602      	mov	r2, r0
 801d800:	460b      	mov	r3, r1
 801d802:	4620      	mov	r0, r4
 801d804:	4629      	mov	r1, r5
 801d806:	f7e2 fef7 	bl	80005f8 <__aeabi_dmul>
 801d80a:	a342      	add	r3, pc, #264	@ (adr r3, 801d914 <__kernel_sin+0x14c>)
 801d80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d810:	e9cd 0100 	strd	r0, r1, [sp]
 801d814:	4650      	mov	r0, sl
 801d816:	4659      	mov	r1, fp
 801d818:	f7e2 feee 	bl	80005f8 <__aeabi_dmul>
 801d81c:	a33f      	add	r3, pc, #252	@ (adr r3, 801d91c <__kernel_sin+0x154>)
 801d81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d822:	f7e2 fd31 	bl	8000288 <__aeabi_dsub>
 801d826:	4652      	mov	r2, sl
 801d828:	465b      	mov	r3, fp
 801d82a:	f7e2 fee5 	bl	80005f8 <__aeabi_dmul>
 801d82e:	a33d      	add	r3, pc, #244	@ (adr r3, 801d924 <__kernel_sin+0x15c>)
 801d830:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d834:	f7e2 fd2a 	bl	800028c <__adddf3>
 801d838:	4652      	mov	r2, sl
 801d83a:	465b      	mov	r3, fp
 801d83c:	f7e2 fedc 	bl	80005f8 <__aeabi_dmul>
 801d840:	a33a      	add	r3, pc, #232	@ (adr r3, 801d92c <__kernel_sin+0x164>)
 801d842:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d846:	f7e2 fd1f 	bl	8000288 <__aeabi_dsub>
 801d84a:	4652      	mov	r2, sl
 801d84c:	465b      	mov	r3, fp
 801d84e:	f7e2 fed3 	bl	80005f8 <__aeabi_dmul>
 801d852:	a338      	add	r3, pc, #224	@ (adr r3, 801d934 <__kernel_sin+0x16c>)
 801d854:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d858:	f7e2 fd18 	bl	800028c <__adddf3>
 801d85c:	4606      	mov	r6, r0
 801d85e:	460f      	mov	r7, r1
 801d860:	f1b8 0f00 	cmp.w	r8, #0
 801d864:	d11b      	bne.n	801d89e <__kernel_sin+0xd6>
 801d866:	4602      	mov	r2, r0
 801d868:	460b      	mov	r3, r1
 801d86a:	4650      	mov	r0, sl
 801d86c:	4659      	mov	r1, fp
 801d86e:	f7e2 fec3 	bl	80005f8 <__aeabi_dmul>
 801d872:	a325      	add	r3, pc, #148	@ (adr r3, 801d908 <__kernel_sin+0x140>)
 801d874:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d878:	f7e2 fd06 	bl	8000288 <__aeabi_dsub>
 801d87c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d880:	f7e2 feba 	bl	80005f8 <__aeabi_dmul>
 801d884:	4602      	mov	r2, r0
 801d886:	460b      	mov	r3, r1
 801d888:	4620      	mov	r0, r4
 801d88a:	4629      	mov	r1, r5
 801d88c:	f7e2 fcfe 	bl	800028c <__adddf3>
 801d890:	4604      	mov	r4, r0
 801d892:	460d      	mov	r5, r1
 801d894:	ec45 4b10 	vmov	d0, r4, r5
 801d898:	b005      	add	sp, #20
 801d89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d89e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d8a2:	4b1b      	ldr	r3, [pc, #108]	@ (801d910 <__kernel_sin+0x148>)
 801d8a4:	2200      	movs	r2, #0
 801d8a6:	f7e2 fea7 	bl	80005f8 <__aeabi_dmul>
 801d8aa:	4632      	mov	r2, r6
 801d8ac:	4680      	mov	r8, r0
 801d8ae:	4689      	mov	r9, r1
 801d8b0:	463b      	mov	r3, r7
 801d8b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d8b6:	f7e2 fe9f 	bl	80005f8 <__aeabi_dmul>
 801d8ba:	4602      	mov	r2, r0
 801d8bc:	460b      	mov	r3, r1
 801d8be:	4640      	mov	r0, r8
 801d8c0:	4649      	mov	r1, r9
 801d8c2:	f7e2 fce1 	bl	8000288 <__aeabi_dsub>
 801d8c6:	4652      	mov	r2, sl
 801d8c8:	465b      	mov	r3, fp
 801d8ca:	f7e2 fe95 	bl	80005f8 <__aeabi_dmul>
 801d8ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d8d2:	f7e2 fcd9 	bl	8000288 <__aeabi_dsub>
 801d8d6:	a30c      	add	r3, pc, #48	@ (adr r3, 801d908 <__kernel_sin+0x140>)
 801d8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8dc:	4606      	mov	r6, r0
 801d8de:	460f      	mov	r7, r1
 801d8e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d8e4:	f7e2 fe88 	bl	80005f8 <__aeabi_dmul>
 801d8e8:	4602      	mov	r2, r0
 801d8ea:	460b      	mov	r3, r1
 801d8ec:	4630      	mov	r0, r6
 801d8ee:	4639      	mov	r1, r7
 801d8f0:	f7e2 fccc 	bl	800028c <__adddf3>
 801d8f4:	4602      	mov	r2, r0
 801d8f6:	460b      	mov	r3, r1
 801d8f8:	4620      	mov	r0, r4
 801d8fa:	4629      	mov	r1, r5
 801d8fc:	f7e2 fcc4 	bl	8000288 <__aeabi_dsub>
 801d900:	e7c6      	b.n	801d890 <__kernel_sin+0xc8>
 801d902:	bf00      	nop
 801d904:	f3af 8000 	nop.w
 801d908:	55555549 	.word	0x55555549
 801d90c:	3fc55555 	.word	0x3fc55555
 801d910:	3fe00000 	.word	0x3fe00000
 801d914:	5acfd57c 	.word	0x5acfd57c
 801d918:	3de5d93a 	.word	0x3de5d93a
 801d91c:	8a2b9ceb 	.word	0x8a2b9ceb
 801d920:	3e5ae5e6 	.word	0x3e5ae5e6
 801d924:	57b1fe7d 	.word	0x57b1fe7d
 801d928:	3ec71de3 	.word	0x3ec71de3
 801d92c:	19c161d5 	.word	0x19c161d5
 801d930:	3f2a01a0 	.word	0x3f2a01a0
 801d934:	1110f8a6 	.word	0x1110f8a6
 801d938:	3f811111 	.word	0x3f811111
 801d93c:	00000000 	.word	0x00000000

0801d940 <__ieee754_rem_pio2>:
 801d940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d944:	ec57 6b10 	vmov	r6, r7, d0
 801d948:	4bc5      	ldr	r3, [pc, #788]	@ (801dc60 <__ieee754_rem_pio2+0x320>)
 801d94a:	b08d      	sub	sp, #52	@ 0x34
 801d94c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801d950:	4598      	cmp	r8, r3
 801d952:	4604      	mov	r4, r0
 801d954:	9704      	str	r7, [sp, #16]
 801d956:	d807      	bhi.n	801d968 <__ieee754_rem_pio2+0x28>
 801d958:	2200      	movs	r2, #0
 801d95a:	2300      	movs	r3, #0
 801d95c:	ed80 0b00 	vstr	d0, [r0]
 801d960:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801d964:	2500      	movs	r5, #0
 801d966:	e028      	b.n	801d9ba <__ieee754_rem_pio2+0x7a>
 801d968:	4bbe      	ldr	r3, [pc, #760]	@ (801dc64 <__ieee754_rem_pio2+0x324>)
 801d96a:	4598      	cmp	r8, r3
 801d96c:	d878      	bhi.n	801da60 <__ieee754_rem_pio2+0x120>
 801d96e:	9b04      	ldr	r3, [sp, #16]
 801d970:	4dbd      	ldr	r5, [pc, #756]	@ (801dc68 <__ieee754_rem_pio2+0x328>)
 801d972:	2b00      	cmp	r3, #0
 801d974:	4630      	mov	r0, r6
 801d976:	a3ac      	add	r3, pc, #688	@ (adr r3, 801dc28 <__ieee754_rem_pio2+0x2e8>)
 801d978:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d97c:	4639      	mov	r1, r7
 801d97e:	dd38      	ble.n	801d9f2 <__ieee754_rem_pio2+0xb2>
 801d980:	f7e2 fc82 	bl	8000288 <__aeabi_dsub>
 801d984:	45a8      	cmp	r8, r5
 801d986:	4606      	mov	r6, r0
 801d988:	460f      	mov	r7, r1
 801d98a:	d01a      	beq.n	801d9c2 <__ieee754_rem_pio2+0x82>
 801d98c:	a3a8      	add	r3, pc, #672	@ (adr r3, 801dc30 <__ieee754_rem_pio2+0x2f0>)
 801d98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d992:	f7e2 fc79 	bl	8000288 <__aeabi_dsub>
 801d996:	4602      	mov	r2, r0
 801d998:	460b      	mov	r3, r1
 801d99a:	4680      	mov	r8, r0
 801d99c:	4689      	mov	r9, r1
 801d99e:	4630      	mov	r0, r6
 801d9a0:	4639      	mov	r1, r7
 801d9a2:	f7e2 fc71 	bl	8000288 <__aeabi_dsub>
 801d9a6:	a3a2      	add	r3, pc, #648	@ (adr r3, 801dc30 <__ieee754_rem_pio2+0x2f0>)
 801d9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9ac:	f7e2 fc6c 	bl	8000288 <__aeabi_dsub>
 801d9b0:	e9c4 8900 	strd	r8, r9, [r4]
 801d9b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801d9b8:	2501      	movs	r5, #1
 801d9ba:	4628      	mov	r0, r5
 801d9bc:	b00d      	add	sp, #52	@ 0x34
 801d9be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d9c2:	a39d      	add	r3, pc, #628	@ (adr r3, 801dc38 <__ieee754_rem_pio2+0x2f8>)
 801d9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9c8:	f7e2 fc5e 	bl	8000288 <__aeabi_dsub>
 801d9cc:	a39c      	add	r3, pc, #624	@ (adr r3, 801dc40 <__ieee754_rem_pio2+0x300>)
 801d9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9d2:	4606      	mov	r6, r0
 801d9d4:	460f      	mov	r7, r1
 801d9d6:	f7e2 fc57 	bl	8000288 <__aeabi_dsub>
 801d9da:	4602      	mov	r2, r0
 801d9dc:	460b      	mov	r3, r1
 801d9de:	4680      	mov	r8, r0
 801d9e0:	4689      	mov	r9, r1
 801d9e2:	4630      	mov	r0, r6
 801d9e4:	4639      	mov	r1, r7
 801d9e6:	f7e2 fc4f 	bl	8000288 <__aeabi_dsub>
 801d9ea:	a395      	add	r3, pc, #596	@ (adr r3, 801dc40 <__ieee754_rem_pio2+0x300>)
 801d9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9f0:	e7dc      	b.n	801d9ac <__ieee754_rem_pio2+0x6c>
 801d9f2:	f7e2 fc4b 	bl	800028c <__adddf3>
 801d9f6:	45a8      	cmp	r8, r5
 801d9f8:	4606      	mov	r6, r0
 801d9fa:	460f      	mov	r7, r1
 801d9fc:	d018      	beq.n	801da30 <__ieee754_rem_pio2+0xf0>
 801d9fe:	a38c      	add	r3, pc, #560	@ (adr r3, 801dc30 <__ieee754_rem_pio2+0x2f0>)
 801da00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da04:	f7e2 fc42 	bl	800028c <__adddf3>
 801da08:	4602      	mov	r2, r0
 801da0a:	460b      	mov	r3, r1
 801da0c:	4680      	mov	r8, r0
 801da0e:	4689      	mov	r9, r1
 801da10:	4630      	mov	r0, r6
 801da12:	4639      	mov	r1, r7
 801da14:	f7e2 fc38 	bl	8000288 <__aeabi_dsub>
 801da18:	a385      	add	r3, pc, #532	@ (adr r3, 801dc30 <__ieee754_rem_pio2+0x2f0>)
 801da1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da1e:	f7e2 fc35 	bl	800028c <__adddf3>
 801da22:	f04f 35ff 	mov.w	r5, #4294967295
 801da26:	e9c4 8900 	strd	r8, r9, [r4]
 801da2a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801da2e:	e7c4      	b.n	801d9ba <__ieee754_rem_pio2+0x7a>
 801da30:	a381      	add	r3, pc, #516	@ (adr r3, 801dc38 <__ieee754_rem_pio2+0x2f8>)
 801da32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da36:	f7e2 fc29 	bl	800028c <__adddf3>
 801da3a:	a381      	add	r3, pc, #516	@ (adr r3, 801dc40 <__ieee754_rem_pio2+0x300>)
 801da3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da40:	4606      	mov	r6, r0
 801da42:	460f      	mov	r7, r1
 801da44:	f7e2 fc22 	bl	800028c <__adddf3>
 801da48:	4602      	mov	r2, r0
 801da4a:	460b      	mov	r3, r1
 801da4c:	4680      	mov	r8, r0
 801da4e:	4689      	mov	r9, r1
 801da50:	4630      	mov	r0, r6
 801da52:	4639      	mov	r1, r7
 801da54:	f7e2 fc18 	bl	8000288 <__aeabi_dsub>
 801da58:	a379      	add	r3, pc, #484	@ (adr r3, 801dc40 <__ieee754_rem_pio2+0x300>)
 801da5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da5e:	e7de      	b.n	801da1e <__ieee754_rem_pio2+0xde>
 801da60:	4b82      	ldr	r3, [pc, #520]	@ (801dc6c <__ieee754_rem_pio2+0x32c>)
 801da62:	4598      	cmp	r8, r3
 801da64:	f200 80d1 	bhi.w	801dc0a <__ieee754_rem_pio2+0x2ca>
 801da68:	f000 f966 	bl	801dd38 <fabs>
 801da6c:	ec57 6b10 	vmov	r6, r7, d0
 801da70:	a375      	add	r3, pc, #468	@ (adr r3, 801dc48 <__ieee754_rem_pio2+0x308>)
 801da72:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da76:	4630      	mov	r0, r6
 801da78:	4639      	mov	r1, r7
 801da7a:	f7e2 fdbd 	bl	80005f8 <__aeabi_dmul>
 801da7e:	4b7c      	ldr	r3, [pc, #496]	@ (801dc70 <__ieee754_rem_pio2+0x330>)
 801da80:	2200      	movs	r2, #0
 801da82:	f7e2 fc03 	bl	800028c <__adddf3>
 801da86:	f7e3 f851 	bl	8000b2c <__aeabi_d2iz>
 801da8a:	4605      	mov	r5, r0
 801da8c:	f7e2 fd4a 	bl	8000524 <__aeabi_i2d>
 801da90:	4602      	mov	r2, r0
 801da92:	460b      	mov	r3, r1
 801da94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801da98:	a363      	add	r3, pc, #396	@ (adr r3, 801dc28 <__ieee754_rem_pio2+0x2e8>)
 801da9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da9e:	f7e2 fdab 	bl	80005f8 <__aeabi_dmul>
 801daa2:	4602      	mov	r2, r0
 801daa4:	460b      	mov	r3, r1
 801daa6:	4630      	mov	r0, r6
 801daa8:	4639      	mov	r1, r7
 801daaa:	f7e2 fbed 	bl	8000288 <__aeabi_dsub>
 801daae:	a360      	add	r3, pc, #384	@ (adr r3, 801dc30 <__ieee754_rem_pio2+0x2f0>)
 801dab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dab4:	4682      	mov	sl, r0
 801dab6:	468b      	mov	fp, r1
 801dab8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dabc:	f7e2 fd9c 	bl	80005f8 <__aeabi_dmul>
 801dac0:	2d1f      	cmp	r5, #31
 801dac2:	4606      	mov	r6, r0
 801dac4:	460f      	mov	r7, r1
 801dac6:	dc0c      	bgt.n	801dae2 <__ieee754_rem_pio2+0x1a2>
 801dac8:	4b6a      	ldr	r3, [pc, #424]	@ (801dc74 <__ieee754_rem_pio2+0x334>)
 801daca:	1e6a      	subs	r2, r5, #1
 801dacc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801dad0:	4543      	cmp	r3, r8
 801dad2:	d006      	beq.n	801dae2 <__ieee754_rem_pio2+0x1a2>
 801dad4:	4632      	mov	r2, r6
 801dad6:	463b      	mov	r3, r7
 801dad8:	4650      	mov	r0, sl
 801dada:	4659      	mov	r1, fp
 801dadc:	f7e2 fbd4 	bl	8000288 <__aeabi_dsub>
 801dae0:	e00e      	b.n	801db00 <__ieee754_rem_pio2+0x1c0>
 801dae2:	463b      	mov	r3, r7
 801dae4:	4632      	mov	r2, r6
 801dae6:	4650      	mov	r0, sl
 801dae8:	4659      	mov	r1, fp
 801daea:	f7e2 fbcd 	bl	8000288 <__aeabi_dsub>
 801daee:	ea4f 5328 	mov.w	r3, r8, asr #20
 801daf2:	9305      	str	r3, [sp, #20]
 801daf4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801daf8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801dafc:	2b10      	cmp	r3, #16
 801dafe:	dc02      	bgt.n	801db06 <__ieee754_rem_pio2+0x1c6>
 801db00:	e9c4 0100 	strd	r0, r1, [r4]
 801db04:	e039      	b.n	801db7a <__ieee754_rem_pio2+0x23a>
 801db06:	a34c      	add	r3, pc, #304	@ (adr r3, 801dc38 <__ieee754_rem_pio2+0x2f8>)
 801db08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801db10:	f7e2 fd72 	bl	80005f8 <__aeabi_dmul>
 801db14:	4606      	mov	r6, r0
 801db16:	460f      	mov	r7, r1
 801db18:	4602      	mov	r2, r0
 801db1a:	460b      	mov	r3, r1
 801db1c:	4650      	mov	r0, sl
 801db1e:	4659      	mov	r1, fp
 801db20:	f7e2 fbb2 	bl	8000288 <__aeabi_dsub>
 801db24:	4602      	mov	r2, r0
 801db26:	460b      	mov	r3, r1
 801db28:	4680      	mov	r8, r0
 801db2a:	4689      	mov	r9, r1
 801db2c:	4650      	mov	r0, sl
 801db2e:	4659      	mov	r1, fp
 801db30:	f7e2 fbaa 	bl	8000288 <__aeabi_dsub>
 801db34:	4632      	mov	r2, r6
 801db36:	463b      	mov	r3, r7
 801db38:	f7e2 fba6 	bl	8000288 <__aeabi_dsub>
 801db3c:	a340      	add	r3, pc, #256	@ (adr r3, 801dc40 <__ieee754_rem_pio2+0x300>)
 801db3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db42:	4606      	mov	r6, r0
 801db44:	460f      	mov	r7, r1
 801db46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801db4a:	f7e2 fd55 	bl	80005f8 <__aeabi_dmul>
 801db4e:	4632      	mov	r2, r6
 801db50:	463b      	mov	r3, r7
 801db52:	f7e2 fb99 	bl	8000288 <__aeabi_dsub>
 801db56:	4602      	mov	r2, r0
 801db58:	460b      	mov	r3, r1
 801db5a:	4606      	mov	r6, r0
 801db5c:	460f      	mov	r7, r1
 801db5e:	4640      	mov	r0, r8
 801db60:	4649      	mov	r1, r9
 801db62:	f7e2 fb91 	bl	8000288 <__aeabi_dsub>
 801db66:	9a05      	ldr	r2, [sp, #20]
 801db68:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801db6c:	1ad3      	subs	r3, r2, r3
 801db6e:	2b31      	cmp	r3, #49	@ 0x31
 801db70:	dc20      	bgt.n	801dbb4 <__ieee754_rem_pio2+0x274>
 801db72:	e9c4 0100 	strd	r0, r1, [r4]
 801db76:	46c2      	mov	sl, r8
 801db78:	46cb      	mov	fp, r9
 801db7a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801db7e:	4650      	mov	r0, sl
 801db80:	4642      	mov	r2, r8
 801db82:	464b      	mov	r3, r9
 801db84:	4659      	mov	r1, fp
 801db86:	f7e2 fb7f 	bl	8000288 <__aeabi_dsub>
 801db8a:	463b      	mov	r3, r7
 801db8c:	4632      	mov	r2, r6
 801db8e:	f7e2 fb7b 	bl	8000288 <__aeabi_dsub>
 801db92:	9b04      	ldr	r3, [sp, #16]
 801db94:	2b00      	cmp	r3, #0
 801db96:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801db9a:	f6bf af0e 	bge.w	801d9ba <__ieee754_rem_pio2+0x7a>
 801db9e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801dba2:	6063      	str	r3, [r4, #4]
 801dba4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801dba8:	f8c4 8000 	str.w	r8, [r4]
 801dbac:	60a0      	str	r0, [r4, #8]
 801dbae:	60e3      	str	r3, [r4, #12]
 801dbb0:	426d      	negs	r5, r5
 801dbb2:	e702      	b.n	801d9ba <__ieee754_rem_pio2+0x7a>
 801dbb4:	a326      	add	r3, pc, #152	@ (adr r3, 801dc50 <__ieee754_rem_pio2+0x310>)
 801dbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dbba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dbbe:	f7e2 fd1b 	bl	80005f8 <__aeabi_dmul>
 801dbc2:	4606      	mov	r6, r0
 801dbc4:	460f      	mov	r7, r1
 801dbc6:	4602      	mov	r2, r0
 801dbc8:	460b      	mov	r3, r1
 801dbca:	4640      	mov	r0, r8
 801dbcc:	4649      	mov	r1, r9
 801dbce:	f7e2 fb5b 	bl	8000288 <__aeabi_dsub>
 801dbd2:	4602      	mov	r2, r0
 801dbd4:	460b      	mov	r3, r1
 801dbd6:	4682      	mov	sl, r0
 801dbd8:	468b      	mov	fp, r1
 801dbda:	4640      	mov	r0, r8
 801dbdc:	4649      	mov	r1, r9
 801dbde:	f7e2 fb53 	bl	8000288 <__aeabi_dsub>
 801dbe2:	4632      	mov	r2, r6
 801dbe4:	463b      	mov	r3, r7
 801dbe6:	f7e2 fb4f 	bl	8000288 <__aeabi_dsub>
 801dbea:	a31b      	add	r3, pc, #108	@ (adr r3, 801dc58 <__ieee754_rem_pio2+0x318>)
 801dbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dbf0:	4606      	mov	r6, r0
 801dbf2:	460f      	mov	r7, r1
 801dbf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dbf8:	f7e2 fcfe 	bl	80005f8 <__aeabi_dmul>
 801dbfc:	4632      	mov	r2, r6
 801dbfe:	463b      	mov	r3, r7
 801dc00:	f7e2 fb42 	bl	8000288 <__aeabi_dsub>
 801dc04:	4606      	mov	r6, r0
 801dc06:	460f      	mov	r7, r1
 801dc08:	e764      	b.n	801dad4 <__ieee754_rem_pio2+0x194>
 801dc0a:	4b1b      	ldr	r3, [pc, #108]	@ (801dc78 <__ieee754_rem_pio2+0x338>)
 801dc0c:	4598      	cmp	r8, r3
 801dc0e:	d935      	bls.n	801dc7c <__ieee754_rem_pio2+0x33c>
 801dc10:	4632      	mov	r2, r6
 801dc12:	463b      	mov	r3, r7
 801dc14:	4630      	mov	r0, r6
 801dc16:	4639      	mov	r1, r7
 801dc18:	f7e2 fb36 	bl	8000288 <__aeabi_dsub>
 801dc1c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801dc20:	e9c4 0100 	strd	r0, r1, [r4]
 801dc24:	e69e      	b.n	801d964 <__ieee754_rem_pio2+0x24>
 801dc26:	bf00      	nop
 801dc28:	54400000 	.word	0x54400000
 801dc2c:	3ff921fb 	.word	0x3ff921fb
 801dc30:	1a626331 	.word	0x1a626331
 801dc34:	3dd0b461 	.word	0x3dd0b461
 801dc38:	1a600000 	.word	0x1a600000
 801dc3c:	3dd0b461 	.word	0x3dd0b461
 801dc40:	2e037073 	.word	0x2e037073
 801dc44:	3ba3198a 	.word	0x3ba3198a
 801dc48:	6dc9c883 	.word	0x6dc9c883
 801dc4c:	3fe45f30 	.word	0x3fe45f30
 801dc50:	2e000000 	.word	0x2e000000
 801dc54:	3ba3198a 	.word	0x3ba3198a
 801dc58:	252049c1 	.word	0x252049c1
 801dc5c:	397b839a 	.word	0x397b839a
 801dc60:	3fe921fb 	.word	0x3fe921fb
 801dc64:	4002d97b 	.word	0x4002d97b
 801dc68:	3ff921fb 	.word	0x3ff921fb
 801dc6c:	413921fb 	.word	0x413921fb
 801dc70:	3fe00000 	.word	0x3fe00000
 801dc74:	0801fad0 	.word	0x0801fad0
 801dc78:	7fefffff 	.word	0x7fefffff
 801dc7c:	ea4f 5528 	mov.w	r5, r8, asr #20
 801dc80:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801dc84:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801dc88:	4630      	mov	r0, r6
 801dc8a:	460f      	mov	r7, r1
 801dc8c:	f7e2 ff4e 	bl	8000b2c <__aeabi_d2iz>
 801dc90:	f7e2 fc48 	bl	8000524 <__aeabi_i2d>
 801dc94:	4602      	mov	r2, r0
 801dc96:	460b      	mov	r3, r1
 801dc98:	4630      	mov	r0, r6
 801dc9a:	4639      	mov	r1, r7
 801dc9c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801dca0:	f7e2 faf2 	bl	8000288 <__aeabi_dsub>
 801dca4:	4b22      	ldr	r3, [pc, #136]	@ (801dd30 <__ieee754_rem_pio2+0x3f0>)
 801dca6:	2200      	movs	r2, #0
 801dca8:	f7e2 fca6 	bl	80005f8 <__aeabi_dmul>
 801dcac:	460f      	mov	r7, r1
 801dcae:	4606      	mov	r6, r0
 801dcb0:	f7e2 ff3c 	bl	8000b2c <__aeabi_d2iz>
 801dcb4:	f7e2 fc36 	bl	8000524 <__aeabi_i2d>
 801dcb8:	4602      	mov	r2, r0
 801dcba:	460b      	mov	r3, r1
 801dcbc:	4630      	mov	r0, r6
 801dcbe:	4639      	mov	r1, r7
 801dcc0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801dcc4:	f7e2 fae0 	bl	8000288 <__aeabi_dsub>
 801dcc8:	4b19      	ldr	r3, [pc, #100]	@ (801dd30 <__ieee754_rem_pio2+0x3f0>)
 801dcca:	2200      	movs	r2, #0
 801dccc:	f7e2 fc94 	bl	80005f8 <__aeabi_dmul>
 801dcd0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801dcd4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 801dcd8:	f04f 0803 	mov.w	r8, #3
 801dcdc:	2600      	movs	r6, #0
 801dcde:	2700      	movs	r7, #0
 801dce0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801dce4:	4632      	mov	r2, r6
 801dce6:	463b      	mov	r3, r7
 801dce8:	46c2      	mov	sl, r8
 801dcea:	f108 38ff 	add.w	r8, r8, #4294967295
 801dcee:	f7e2 feeb 	bl	8000ac8 <__aeabi_dcmpeq>
 801dcf2:	2800      	cmp	r0, #0
 801dcf4:	d1f4      	bne.n	801dce0 <__ieee754_rem_pio2+0x3a0>
 801dcf6:	4b0f      	ldr	r3, [pc, #60]	@ (801dd34 <__ieee754_rem_pio2+0x3f4>)
 801dcf8:	9301      	str	r3, [sp, #4]
 801dcfa:	2302      	movs	r3, #2
 801dcfc:	9300      	str	r3, [sp, #0]
 801dcfe:	462a      	mov	r2, r5
 801dd00:	4653      	mov	r3, sl
 801dd02:	4621      	mov	r1, r4
 801dd04:	a806      	add	r0, sp, #24
 801dd06:	f000 f81f 	bl	801dd48 <__kernel_rem_pio2>
 801dd0a:	9b04      	ldr	r3, [sp, #16]
 801dd0c:	2b00      	cmp	r3, #0
 801dd0e:	4605      	mov	r5, r0
 801dd10:	f6bf ae53 	bge.w	801d9ba <__ieee754_rem_pio2+0x7a>
 801dd14:	e9d4 2100 	ldrd	r2, r1, [r4]
 801dd18:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801dd1c:	e9c4 2300 	strd	r2, r3, [r4]
 801dd20:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801dd24:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801dd28:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801dd2c:	e740      	b.n	801dbb0 <__ieee754_rem_pio2+0x270>
 801dd2e:	bf00      	nop
 801dd30:	41700000 	.word	0x41700000
 801dd34:	0801fb50 	.word	0x0801fb50

0801dd38 <fabs>:
 801dd38:	ec51 0b10 	vmov	r0, r1, d0
 801dd3c:	4602      	mov	r2, r0
 801dd3e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801dd42:	ec43 2b10 	vmov	d0, r2, r3
 801dd46:	4770      	bx	lr

0801dd48 <__kernel_rem_pio2>:
 801dd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd4c:	ed2d 8b02 	vpush	{d8}
 801dd50:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 801dd54:	f112 0f14 	cmn.w	r2, #20
 801dd58:	9306      	str	r3, [sp, #24]
 801dd5a:	9104      	str	r1, [sp, #16]
 801dd5c:	4bbe      	ldr	r3, [pc, #760]	@ (801e058 <__kernel_rem_pio2+0x310>)
 801dd5e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 801dd60:	9008      	str	r0, [sp, #32]
 801dd62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801dd66:	9300      	str	r3, [sp, #0]
 801dd68:	9b06      	ldr	r3, [sp, #24]
 801dd6a:	f103 33ff 	add.w	r3, r3, #4294967295
 801dd6e:	bfa8      	it	ge
 801dd70:	1ed4      	subge	r4, r2, #3
 801dd72:	9305      	str	r3, [sp, #20]
 801dd74:	bfb2      	itee	lt
 801dd76:	2400      	movlt	r4, #0
 801dd78:	2318      	movge	r3, #24
 801dd7a:	fb94 f4f3 	sdivge	r4, r4, r3
 801dd7e:	f06f 0317 	mvn.w	r3, #23
 801dd82:	fb04 3303 	mla	r3, r4, r3, r3
 801dd86:	eb03 0b02 	add.w	fp, r3, r2
 801dd8a:	9b00      	ldr	r3, [sp, #0]
 801dd8c:	9a05      	ldr	r2, [sp, #20]
 801dd8e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 801e048 <__kernel_rem_pio2+0x300>
 801dd92:	eb03 0802 	add.w	r8, r3, r2
 801dd96:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801dd98:	1aa7      	subs	r7, r4, r2
 801dd9a:	ae20      	add	r6, sp, #128	@ 0x80
 801dd9c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801dda0:	2500      	movs	r5, #0
 801dda2:	4545      	cmp	r5, r8
 801dda4:	dd13      	ble.n	801ddce <__kernel_rem_pio2+0x86>
 801dda6:	9b06      	ldr	r3, [sp, #24]
 801dda8:	aa20      	add	r2, sp, #128	@ 0x80
 801ddaa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801ddae:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801ddb2:	f04f 0800 	mov.w	r8, #0
 801ddb6:	9b00      	ldr	r3, [sp, #0]
 801ddb8:	4598      	cmp	r8, r3
 801ddba:	dc31      	bgt.n	801de20 <__kernel_rem_pio2+0xd8>
 801ddbc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 801e048 <__kernel_rem_pio2+0x300>
 801ddc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801ddc4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ddc8:	462f      	mov	r7, r5
 801ddca:	2600      	movs	r6, #0
 801ddcc:	e01b      	b.n	801de06 <__kernel_rem_pio2+0xbe>
 801ddce:	42ef      	cmn	r7, r5
 801ddd0:	d407      	bmi.n	801dde2 <__kernel_rem_pio2+0x9a>
 801ddd2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801ddd6:	f7e2 fba5 	bl	8000524 <__aeabi_i2d>
 801ddda:	e8e6 0102 	strd	r0, r1, [r6], #8
 801ddde:	3501      	adds	r5, #1
 801dde0:	e7df      	b.n	801dda2 <__kernel_rem_pio2+0x5a>
 801dde2:	ec51 0b18 	vmov	r0, r1, d8
 801dde6:	e7f8      	b.n	801ddda <__kernel_rem_pio2+0x92>
 801dde8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ddec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801ddf0:	f7e2 fc02 	bl	80005f8 <__aeabi_dmul>
 801ddf4:	4602      	mov	r2, r0
 801ddf6:	460b      	mov	r3, r1
 801ddf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ddfc:	f7e2 fa46 	bl	800028c <__adddf3>
 801de00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801de04:	3601      	adds	r6, #1
 801de06:	9b05      	ldr	r3, [sp, #20]
 801de08:	429e      	cmp	r6, r3
 801de0a:	f1a7 0708 	sub.w	r7, r7, #8
 801de0e:	ddeb      	ble.n	801dde8 <__kernel_rem_pio2+0xa0>
 801de10:	ed9d 7b02 	vldr	d7, [sp, #8]
 801de14:	f108 0801 	add.w	r8, r8, #1
 801de18:	ecaa 7b02 	vstmia	sl!, {d7}
 801de1c:	3508      	adds	r5, #8
 801de1e:	e7ca      	b.n	801ddb6 <__kernel_rem_pio2+0x6e>
 801de20:	9b00      	ldr	r3, [sp, #0]
 801de22:	f8dd 8000 	ldr.w	r8, [sp]
 801de26:	aa0c      	add	r2, sp, #48	@ 0x30
 801de28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801de2c:	930a      	str	r3, [sp, #40]	@ 0x28
 801de2e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801de30:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801de34:	9309      	str	r3, [sp, #36]	@ 0x24
 801de36:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801de3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801de3c:	ab98      	add	r3, sp, #608	@ 0x260
 801de3e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801de42:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801de46:	ed8d 7b02 	vstr	d7, [sp, #8]
 801de4a:	ac0c      	add	r4, sp, #48	@ 0x30
 801de4c:	ab70      	add	r3, sp, #448	@ 0x1c0
 801de4e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801de52:	46a1      	mov	r9, r4
 801de54:	46c2      	mov	sl, r8
 801de56:	f1ba 0f00 	cmp.w	sl, #0
 801de5a:	f1a5 0508 	sub.w	r5, r5, #8
 801de5e:	dc77      	bgt.n	801df50 <__kernel_rem_pio2+0x208>
 801de60:	4658      	mov	r0, fp
 801de62:	ed9d 0b02 	vldr	d0, [sp, #8]
 801de66:	f000 fac7 	bl	801e3f8 <scalbn>
 801de6a:	ec57 6b10 	vmov	r6, r7, d0
 801de6e:	2200      	movs	r2, #0
 801de70:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801de74:	4630      	mov	r0, r6
 801de76:	4639      	mov	r1, r7
 801de78:	f7e2 fbbe 	bl	80005f8 <__aeabi_dmul>
 801de7c:	ec41 0b10 	vmov	d0, r0, r1
 801de80:	f000 fb3a 	bl	801e4f8 <floor>
 801de84:	4b75      	ldr	r3, [pc, #468]	@ (801e05c <__kernel_rem_pio2+0x314>)
 801de86:	ec51 0b10 	vmov	r0, r1, d0
 801de8a:	2200      	movs	r2, #0
 801de8c:	f7e2 fbb4 	bl	80005f8 <__aeabi_dmul>
 801de90:	4602      	mov	r2, r0
 801de92:	460b      	mov	r3, r1
 801de94:	4630      	mov	r0, r6
 801de96:	4639      	mov	r1, r7
 801de98:	f7e2 f9f6 	bl	8000288 <__aeabi_dsub>
 801de9c:	460f      	mov	r7, r1
 801de9e:	4606      	mov	r6, r0
 801dea0:	f7e2 fe44 	bl	8000b2c <__aeabi_d2iz>
 801dea4:	9002      	str	r0, [sp, #8]
 801dea6:	f7e2 fb3d 	bl	8000524 <__aeabi_i2d>
 801deaa:	4602      	mov	r2, r0
 801deac:	460b      	mov	r3, r1
 801deae:	4630      	mov	r0, r6
 801deb0:	4639      	mov	r1, r7
 801deb2:	f7e2 f9e9 	bl	8000288 <__aeabi_dsub>
 801deb6:	f1bb 0f00 	cmp.w	fp, #0
 801deba:	4606      	mov	r6, r0
 801debc:	460f      	mov	r7, r1
 801debe:	dd6c      	ble.n	801df9a <__kernel_rem_pio2+0x252>
 801dec0:	f108 31ff 	add.w	r1, r8, #4294967295
 801dec4:	ab0c      	add	r3, sp, #48	@ 0x30
 801dec6:	9d02      	ldr	r5, [sp, #8]
 801dec8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801decc:	f1cb 0018 	rsb	r0, fp, #24
 801ded0:	fa43 f200 	asr.w	r2, r3, r0
 801ded4:	4415      	add	r5, r2
 801ded6:	4082      	lsls	r2, r0
 801ded8:	1a9b      	subs	r3, r3, r2
 801deda:	aa0c      	add	r2, sp, #48	@ 0x30
 801dedc:	9502      	str	r5, [sp, #8]
 801dede:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801dee2:	f1cb 0217 	rsb	r2, fp, #23
 801dee6:	fa43 f902 	asr.w	r9, r3, r2
 801deea:	f1b9 0f00 	cmp.w	r9, #0
 801deee:	dd64      	ble.n	801dfba <__kernel_rem_pio2+0x272>
 801def0:	9b02      	ldr	r3, [sp, #8]
 801def2:	2200      	movs	r2, #0
 801def4:	3301      	adds	r3, #1
 801def6:	9302      	str	r3, [sp, #8]
 801def8:	4615      	mov	r5, r2
 801defa:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801defe:	4590      	cmp	r8, r2
 801df00:	f300 80b8 	bgt.w	801e074 <__kernel_rem_pio2+0x32c>
 801df04:	f1bb 0f00 	cmp.w	fp, #0
 801df08:	dd07      	ble.n	801df1a <__kernel_rem_pio2+0x1d2>
 801df0a:	f1bb 0f01 	cmp.w	fp, #1
 801df0e:	f000 80bf 	beq.w	801e090 <__kernel_rem_pio2+0x348>
 801df12:	f1bb 0f02 	cmp.w	fp, #2
 801df16:	f000 80c6 	beq.w	801e0a6 <__kernel_rem_pio2+0x35e>
 801df1a:	f1b9 0f02 	cmp.w	r9, #2
 801df1e:	d14c      	bne.n	801dfba <__kernel_rem_pio2+0x272>
 801df20:	4632      	mov	r2, r6
 801df22:	463b      	mov	r3, r7
 801df24:	494e      	ldr	r1, [pc, #312]	@ (801e060 <__kernel_rem_pio2+0x318>)
 801df26:	2000      	movs	r0, #0
 801df28:	f7e2 f9ae 	bl	8000288 <__aeabi_dsub>
 801df2c:	4606      	mov	r6, r0
 801df2e:	460f      	mov	r7, r1
 801df30:	2d00      	cmp	r5, #0
 801df32:	d042      	beq.n	801dfba <__kernel_rem_pio2+0x272>
 801df34:	4658      	mov	r0, fp
 801df36:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 801e050 <__kernel_rem_pio2+0x308>
 801df3a:	f000 fa5d 	bl	801e3f8 <scalbn>
 801df3e:	4630      	mov	r0, r6
 801df40:	4639      	mov	r1, r7
 801df42:	ec53 2b10 	vmov	r2, r3, d0
 801df46:	f7e2 f99f 	bl	8000288 <__aeabi_dsub>
 801df4a:	4606      	mov	r6, r0
 801df4c:	460f      	mov	r7, r1
 801df4e:	e034      	b.n	801dfba <__kernel_rem_pio2+0x272>
 801df50:	4b44      	ldr	r3, [pc, #272]	@ (801e064 <__kernel_rem_pio2+0x31c>)
 801df52:	2200      	movs	r2, #0
 801df54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801df58:	f7e2 fb4e 	bl	80005f8 <__aeabi_dmul>
 801df5c:	f7e2 fde6 	bl	8000b2c <__aeabi_d2iz>
 801df60:	f7e2 fae0 	bl	8000524 <__aeabi_i2d>
 801df64:	4b40      	ldr	r3, [pc, #256]	@ (801e068 <__kernel_rem_pio2+0x320>)
 801df66:	2200      	movs	r2, #0
 801df68:	4606      	mov	r6, r0
 801df6a:	460f      	mov	r7, r1
 801df6c:	f7e2 fb44 	bl	80005f8 <__aeabi_dmul>
 801df70:	4602      	mov	r2, r0
 801df72:	460b      	mov	r3, r1
 801df74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801df78:	f7e2 f986 	bl	8000288 <__aeabi_dsub>
 801df7c:	f7e2 fdd6 	bl	8000b2c <__aeabi_d2iz>
 801df80:	e9d5 2300 	ldrd	r2, r3, [r5]
 801df84:	f849 0b04 	str.w	r0, [r9], #4
 801df88:	4639      	mov	r1, r7
 801df8a:	4630      	mov	r0, r6
 801df8c:	f7e2 f97e 	bl	800028c <__adddf3>
 801df90:	f10a 3aff 	add.w	sl, sl, #4294967295
 801df94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801df98:	e75d      	b.n	801de56 <__kernel_rem_pio2+0x10e>
 801df9a:	d107      	bne.n	801dfac <__kernel_rem_pio2+0x264>
 801df9c:	f108 33ff 	add.w	r3, r8, #4294967295
 801dfa0:	aa0c      	add	r2, sp, #48	@ 0x30
 801dfa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801dfa6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801dfaa:	e79e      	b.n	801deea <__kernel_rem_pio2+0x1a2>
 801dfac:	4b2f      	ldr	r3, [pc, #188]	@ (801e06c <__kernel_rem_pio2+0x324>)
 801dfae:	2200      	movs	r2, #0
 801dfb0:	f7e2 fda8 	bl	8000b04 <__aeabi_dcmpge>
 801dfb4:	2800      	cmp	r0, #0
 801dfb6:	d143      	bne.n	801e040 <__kernel_rem_pio2+0x2f8>
 801dfb8:	4681      	mov	r9, r0
 801dfba:	2200      	movs	r2, #0
 801dfbc:	2300      	movs	r3, #0
 801dfbe:	4630      	mov	r0, r6
 801dfc0:	4639      	mov	r1, r7
 801dfc2:	f7e2 fd81 	bl	8000ac8 <__aeabi_dcmpeq>
 801dfc6:	2800      	cmp	r0, #0
 801dfc8:	f000 80bf 	beq.w	801e14a <__kernel_rem_pio2+0x402>
 801dfcc:	f108 33ff 	add.w	r3, r8, #4294967295
 801dfd0:	2200      	movs	r2, #0
 801dfd2:	9900      	ldr	r1, [sp, #0]
 801dfd4:	428b      	cmp	r3, r1
 801dfd6:	da6e      	bge.n	801e0b6 <__kernel_rem_pio2+0x36e>
 801dfd8:	2a00      	cmp	r2, #0
 801dfda:	f000 8089 	beq.w	801e0f0 <__kernel_rem_pio2+0x3a8>
 801dfde:	f108 38ff 	add.w	r8, r8, #4294967295
 801dfe2:	ab0c      	add	r3, sp, #48	@ 0x30
 801dfe4:	f1ab 0b18 	sub.w	fp, fp, #24
 801dfe8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801dfec:	2b00      	cmp	r3, #0
 801dfee:	d0f6      	beq.n	801dfde <__kernel_rem_pio2+0x296>
 801dff0:	4658      	mov	r0, fp
 801dff2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 801e050 <__kernel_rem_pio2+0x308>
 801dff6:	f000 f9ff 	bl	801e3f8 <scalbn>
 801dffa:	f108 0301 	add.w	r3, r8, #1
 801dffe:	00da      	lsls	r2, r3, #3
 801e000:	9205      	str	r2, [sp, #20]
 801e002:	ec55 4b10 	vmov	r4, r5, d0
 801e006:	aa70      	add	r2, sp, #448	@ 0x1c0
 801e008:	f8df b058 	ldr.w	fp, [pc, #88]	@ 801e064 <__kernel_rem_pio2+0x31c>
 801e00c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 801e010:	4646      	mov	r6, r8
 801e012:	f04f 0a00 	mov.w	sl, #0
 801e016:	2e00      	cmp	r6, #0
 801e018:	f280 80cf 	bge.w	801e1ba <__kernel_rem_pio2+0x472>
 801e01c:	4644      	mov	r4, r8
 801e01e:	2c00      	cmp	r4, #0
 801e020:	f2c0 80fd 	blt.w	801e21e <__kernel_rem_pio2+0x4d6>
 801e024:	4b12      	ldr	r3, [pc, #72]	@ (801e070 <__kernel_rem_pio2+0x328>)
 801e026:	461f      	mov	r7, r3
 801e028:	ab70      	add	r3, sp, #448	@ 0x1c0
 801e02a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e02e:	9306      	str	r3, [sp, #24]
 801e030:	f04f 0a00 	mov.w	sl, #0
 801e034:	f04f 0b00 	mov.w	fp, #0
 801e038:	2600      	movs	r6, #0
 801e03a:	eba8 0504 	sub.w	r5, r8, r4
 801e03e:	e0e2      	b.n	801e206 <__kernel_rem_pio2+0x4be>
 801e040:	f04f 0902 	mov.w	r9, #2
 801e044:	e754      	b.n	801def0 <__kernel_rem_pio2+0x1a8>
 801e046:	bf00      	nop
	...
 801e054:	3ff00000 	.word	0x3ff00000
 801e058:	0801fc98 	.word	0x0801fc98
 801e05c:	40200000 	.word	0x40200000
 801e060:	3ff00000 	.word	0x3ff00000
 801e064:	3e700000 	.word	0x3e700000
 801e068:	41700000 	.word	0x41700000
 801e06c:	3fe00000 	.word	0x3fe00000
 801e070:	0801fc58 	.word	0x0801fc58
 801e074:	f854 3b04 	ldr.w	r3, [r4], #4
 801e078:	b945      	cbnz	r5, 801e08c <__kernel_rem_pio2+0x344>
 801e07a:	b123      	cbz	r3, 801e086 <__kernel_rem_pio2+0x33e>
 801e07c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 801e080:	f844 3c04 	str.w	r3, [r4, #-4]
 801e084:	2301      	movs	r3, #1
 801e086:	3201      	adds	r2, #1
 801e088:	461d      	mov	r5, r3
 801e08a:	e738      	b.n	801defe <__kernel_rem_pio2+0x1b6>
 801e08c:	1acb      	subs	r3, r1, r3
 801e08e:	e7f7      	b.n	801e080 <__kernel_rem_pio2+0x338>
 801e090:	f108 32ff 	add.w	r2, r8, #4294967295
 801e094:	ab0c      	add	r3, sp, #48	@ 0x30
 801e096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e09a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801e09e:	a90c      	add	r1, sp, #48	@ 0x30
 801e0a0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801e0a4:	e739      	b.n	801df1a <__kernel_rem_pio2+0x1d2>
 801e0a6:	f108 32ff 	add.w	r2, r8, #4294967295
 801e0aa:	ab0c      	add	r3, sp, #48	@ 0x30
 801e0ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e0b0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801e0b4:	e7f3      	b.n	801e09e <__kernel_rem_pio2+0x356>
 801e0b6:	a90c      	add	r1, sp, #48	@ 0x30
 801e0b8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801e0bc:	3b01      	subs	r3, #1
 801e0be:	430a      	orrs	r2, r1
 801e0c0:	e787      	b.n	801dfd2 <__kernel_rem_pio2+0x28a>
 801e0c2:	3401      	adds	r4, #1
 801e0c4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801e0c8:	2a00      	cmp	r2, #0
 801e0ca:	d0fa      	beq.n	801e0c2 <__kernel_rem_pio2+0x37a>
 801e0cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e0ce:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801e0d2:	eb0d 0503 	add.w	r5, sp, r3
 801e0d6:	9b06      	ldr	r3, [sp, #24]
 801e0d8:	aa20      	add	r2, sp, #128	@ 0x80
 801e0da:	4443      	add	r3, r8
 801e0dc:	f108 0701 	add.w	r7, r8, #1
 801e0e0:	3d98      	subs	r5, #152	@ 0x98
 801e0e2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 801e0e6:	4444      	add	r4, r8
 801e0e8:	42bc      	cmp	r4, r7
 801e0ea:	da04      	bge.n	801e0f6 <__kernel_rem_pio2+0x3ae>
 801e0ec:	46a0      	mov	r8, r4
 801e0ee:	e6a2      	b.n	801de36 <__kernel_rem_pio2+0xee>
 801e0f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e0f2:	2401      	movs	r4, #1
 801e0f4:	e7e6      	b.n	801e0c4 <__kernel_rem_pio2+0x37c>
 801e0f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e0f8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801e0fc:	f7e2 fa12 	bl	8000524 <__aeabi_i2d>
 801e100:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 801e3c8 <__kernel_rem_pio2+0x680>
 801e104:	e8e6 0102 	strd	r0, r1, [r6], #8
 801e108:	ed8d 7b02 	vstr	d7, [sp, #8]
 801e10c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801e110:	46b2      	mov	sl, r6
 801e112:	f04f 0800 	mov.w	r8, #0
 801e116:	9b05      	ldr	r3, [sp, #20]
 801e118:	4598      	cmp	r8, r3
 801e11a:	dd05      	ble.n	801e128 <__kernel_rem_pio2+0x3e0>
 801e11c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801e120:	3701      	adds	r7, #1
 801e122:	eca5 7b02 	vstmia	r5!, {d7}
 801e126:	e7df      	b.n	801e0e8 <__kernel_rem_pio2+0x3a0>
 801e128:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 801e12c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801e130:	f7e2 fa62 	bl	80005f8 <__aeabi_dmul>
 801e134:	4602      	mov	r2, r0
 801e136:	460b      	mov	r3, r1
 801e138:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e13c:	f7e2 f8a6 	bl	800028c <__adddf3>
 801e140:	f108 0801 	add.w	r8, r8, #1
 801e144:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e148:	e7e5      	b.n	801e116 <__kernel_rem_pio2+0x3ce>
 801e14a:	f1cb 0000 	rsb	r0, fp, #0
 801e14e:	ec47 6b10 	vmov	d0, r6, r7
 801e152:	f000 f951 	bl	801e3f8 <scalbn>
 801e156:	ec55 4b10 	vmov	r4, r5, d0
 801e15a:	4b9d      	ldr	r3, [pc, #628]	@ (801e3d0 <__kernel_rem_pio2+0x688>)
 801e15c:	2200      	movs	r2, #0
 801e15e:	4620      	mov	r0, r4
 801e160:	4629      	mov	r1, r5
 801e162:	f7e2 fccf 	bl	8000b04 <__aeabi_dcmpge>
 801e166:	b300      	cbz	r0, 801e1aa <__kernel_rem_pio2+0x462>
 801e168:	4b9a      	ldr	r3, [pc, #616]	@ (801e3d4 <__kernel_rem_pio2+0x68c>)
 801e16a:	2200      	movs	r2, #0
 801e16c:	4620      	mov	r0, r4
 801e16e:	4629      	mov	r1, r5
 801e170:	f7e2 fa42 	bl	80005f8 <__aeabi_dmul>
 801e174:	f7e2 fcda 	bl	8000b2c <__aeabi_d2iz>
 801e178:	4606      	mov	r6, r0
 801e17a:	f7e2 f9d3 	bl	8000524 <__aeabi_i2d>
 801e17e:	4b94      	ldr	r3, [pc, #592]	@ (801e3d0 <__kernel_rem_pio2+0x688>)
 801e180:	2200      	movs	r2, #0
 801e182:	f7e2 fa39 	bl	80005f8 <__aeabi_dmul>
 801e186:	460b      	mov	r3, r1
 801e188:	4602      	mov	r2, r0
 801e18a:	4629      	mov	r1, r5
 801e18c:	4620      	mov	r0, r4
 801e18e:	f7e2 f87b 	bl	8000288 <__aeabi_dsub>
 801e192:	f7e2 fccb 	bl	8000b2c <__aeabi_d2iz>
 801e196:	ab0c      	add	r3, sp, #48	@ 0x30
 801e198:	f10b 0b18 	add.w	fp, fp, #24
 801e19c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801e1a0:	f108 0801 	add.w	r8, r8, #1
 801e1a4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 801e1a8:	e722      	b.n	801dff0 <__kernel_rem_pio2+0x2a8>
 801e1aa:	4620      	mov	r0, r4
 801e1ac:	4629      	mov	r1, r5
 801e1ae:	f7e2 fcbd 	bl	8000b2c <__aeabi_d2iz>
 801e1b2:	ab0c      	add	r3, sp, #48	@ 0x30
 801e1b4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801e1b8:	e71a      	b.n	801dff0 <__kernel_rem_pio2+0x2a8>
 801e1ba:	ab0c      	add	r3, sp, #48	@ 0x30
 801e1bc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801e1c0:	f7e2 f9b0 	bl	8000524 <__aeabi_i2d>
 801e1c4:	4622      	mov	r2, r4
 801e1c6:	462b      	mov	r3, r5
 801e1c8:	f7e2 fa16 	bl	80005f8 <__aeabi_dmul>
 801e1cc:	4652      	mov	r2, sl
 801e1ce:	e967 0102 	strd	r0, r1, [r7, #-8]!
 801e1d2:	465b      	mov	r3, fp
 801e1d4:	4620      	mov	r0, r4
 801e1d6:	4629      	mov	r1, r5
 801e1d8:	f7e2 fa0e 	bl	80005f8 <__aeabi_dmul>
 801e1dc:	3e01      	subs	r6, #1
 801e1de:	4604      	mov	r4, r0
 801e1e0:	460d      	mov	r5, r1
 801e1e2:	e718      	b.n	801e016 <__kernel_rem_pio2+0x2ce>
 801e1e4:	9906      	ldr	r1, [sp, #24]
 801e1e6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801e1ea:	9106      	str	r1, [sp, #24]
 801e1ec:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 801e1f0:	f7e2 fa02 	bl	80005f8 <__aeabi_dmul>
 801e1f4:	4602      	mov	r2, r0
 801e1f6:	460b      	mov	r3, r1
 801e1f8:	4650      	mov	r0, sl
 801e1fa:	4659      	mov	r1, fp
 801e1fc:	f7e2 f846 	bl	800028c <__adddf3>
 801e200:	3601      	adds	r6, #1
 801e202:	4682      	mov	sl, r0
 801e204:	468b      	mov	fp, r1
 801e206:	9b00      	ldr	r3, [sp, #0]
 801e208:	429e      	cmp	r6, r3
 801e20a:	dc01      	bgt.n	801e210 <__kernel_rem_pio2+0x4c8>
 801e20c:	42b5      	cmp	r5, r6
 801e20e:	dae9      	bge.n	801e1e4 <__kernel_rem_pio2+0x49c>
 801e210:	ab48      	add	r3, sp, #288	@ 0x120
 801e212:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801e216:	e9c5 ab00 	strd	sl, fp, [r5]
 801e21a:	3c01      	subs	r4, #1
 801e21c:	e6ff      	b.n	801e01e <__kernel_rem_pio2+0x2d6>
 801e21e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801e220:	2b02      	cmp	r3, #2
 801e222:	dc0b      	bgt.n	801e23c <__kernel_rem_pio2+0x4f4>
 801e224:	2b00      	cmp	r3, #0
 801e226:	dc39      	bgt.n	801e29c <__kernel_rem_pio2+0x554>
 801e228:	d05d      	beq.n	801e2e6 <__kernel_rem_pio2+0x59e>
 801e22a:	9b02      	ldr	r3, [sp, #8]
 801e22c:	f003 0007 	and.w	r0, r3, #7
 801e230:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801e234:	ecbd 8b02 	vpop	{d8}
 801e238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e23c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801e23e:	2b03      	cmp	r3, #3
 801e240:	d1f3      	bne.n	801e22a <__kernel_rem_pio2+0x4e2>
 801e242:	9b05      	ldr	r3, [sp, #20]
 801e244:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801e248:	eb0d 0403 	add.w	r4, sp, r3
 801e24c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 801e250:	4625      	mov	r5, r4
 801e252:	46c2      	mov	sl, r8
 801e254:	f1ba 0f00 	cmp.w	sl, #0
 801e258:	f1a5 0508 	sub.w	r5, r5, #8
 801e25c:	dc6b      	bgt.n	801e336 <__kernel_rem_pio2+0x5ee>
 801e25e:	4645      	mov	r5, r8
 801e260:	2d01      	cmp	r5, #1
 801e262:	f1a4 0408 	sub.w	r4, r4, #8
 801e266:	f300 8087 	bgt.w	801e378 <__kernel_rem_pio2+0x630>
 801e26a:	9c05      	ldr	r4, [sp, #20]
 801e26c:	ab48      	add	r3, sp, #288	@ 0x120
 801e26e:	441c      	add	r4, r3
 801e270:	2000      	movs	r0, #0
 801e272:	2100      	movs	r1, #0
 801e274:	f1b8 0f01 	cmp.w	r8, #1
 801e278:	f300 809c 	bgt.w	801e3b4 <__kernel_rem_pio2+0x66c>
 801e27c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 801e280:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 801e284:	f1b9 0f00 	cmp.w	r9, #0
 801e288:	f040 80a6 	bne.w	801e3d8 <__kernel_rem_pio2+0x690>
 801e28c:	9b04      	ldr	r3, [sp, #16]
 801e28e:	e9c3 7800 	strd	r7, r8, [r3]
 801e292:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801e296:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801e29a:	e7c6      	b.n	801e22a <__kernel_rem_pio2+0x4e2>
 801e29c:	9d05      	ldr	r5, [sp, #20]
 801e29e:	ab48      	add	r3, sp, #288	@ 0x120
 801e2a0:	441d      	add	r5, r3
 801e2a2:	4644      	mov	r4, r8
 801e2a4:	2000      	movs	r0, #0
 801e2a6:	2100      	movs	r1, #0
 801e2a8:	2c00      	cmp	r4, #0
 801e2aa:	da35      	bge.n	801e318 <__kernel_rem_pio2+0x5d0>
 801e2ac:	f1b9 0f00 	cmp.w	r9, #0
 801e2b0:	d038      	beq.n	801e324 <__kernel_rem_pio2+0x5dc>
 801e2b2:	4602      	mov	r2, r0
 801e2b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801e2b8:	9c04      	ldr	r4, [sp, #16]
 801e2ba:	e9c4 2300 	strd	r2, r3, [r4]
 801e2be:	4602      	mov	r2, r0
 801e2c0:	460b      	mov	r3, r1
 801e2c2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801e2c6:	f7e1 ffdf 	bl	8000288 <__aeabi_dsub>
 801e2ca:	ad4a      	add	r5, sp, #296	@ 0x128
 801e2cc:	2401      	movs	r4, #1
 801e2ce:	45a0      	cmp	r8, r4
 801e2d0:	da2b      	bge.n	801e32a <__kernel_rem_pio2+0x5e2>
 801e2d2:	f1b9 0f00 	cmp.w	r9, #0
 801e2d6:	d002      	beq.n	801e2de <__kernel_rem_pio2+0x596>
 801e2d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801e2dc:	4619      	mov	r1, r3
 801e2de:	9b04      	ldr	r3, [sp, #16]
 801e2e0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801e2e4:	e7a1      	b.n	801e22a <__kernel_rem_pio2+0x4e2>
 801e2e6:	9c05      	ldr	r4, [sp, #20]
 801e2e8:	ab48      	add	r3, sp, #288	@ 0x120
 801e2ea:	441c      	add	r4, r3
 801e2ec:	2000      	movs	r0, #0
 801e2ee:	2100      	movs	r1, #0
 801e2f0:	f1b8 0f00 	cmp.w	r8, #0
 801e2f4:	da09      	bge.n	801e30a <__kernel_rem_pio2+0x5c2>
 801e2f6:	f1b9 0f00 	cmp.w	r9, #0
 801e2fa:	d002      	beq.n	801e302 <__kernel_rem_pio2+0x5ba>
 801e2fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801e300:	4619      	mov	r1, r3
 801e302:	9b04      	ldr	r3, [sp, #16]
 801e304:	e9c3 0100 	strd	r0, r1, [r3]
 801e308:	e78f      	b.n	801e22a <__kernel_rem_pio2+0x4e2>
 801e30a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801e30e:	f7e1 ffbd 	bl	800028c <__adddf3>
 801e312:	f108 38ff 	add.w	r8, r8, #4294967295
 801e316:	e7eb      	b.n	801e2f0 <__kernel_rem_pio2+0x5a8>
 801e318:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801e31c:	f7e1 ffb6 	bl	800028c <__adddf3>
 801e320:	3c01      	subs	r4, #1
 801e322:	e7c1      	b.n	801e2a8 <__kernel_rem_pio2+0x560>
 801e324:	4602      	mov	r2, r0
 801e326:	460b      	mov	r3, r1
 801e328:	e7c6      	b.n	801e2b8 <__kernel_rem_pio2+0x570>
 801e32a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801e32e:	f7e1 ffad 	bl	800028c <__adddf3>
 801e332:	3401      	adds	r4, #1
 801e334:	e7cb      	b.n	801e2ce <__kernel_rem_pio2+0x586>
 801e336:	ed95 7b00 	vldr	d7, [r5]
 801e33a:	ed8d 7b00 	vstr	d7, [sp]
 801e33e:	ed95 7b02 	vldr	d7, [r5, #8]
 801e342:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e346:	ec53 2b17 	vmov	r2, r3, d7
 801e34a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801e34e:	f7e1 ff9d 	bl	800028c <__adddf3>
 801e352:	4602      	mov	r2, r0
 801e354:	460b      	mov	r3, r1
 801e356:	4606      	mov	r6, r0
 801e358:	460f      	mov	r7, r1
 801e35a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e35e:	f7e1 ff93 	bl	8000288 <__aeabi_dsub>
 801e362:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e366:	f7e1 ff91 	bl	800028c <__adddf3>
 801e36a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e36e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801e372:	e9c5 6700 	strd	r6, r7, [r5]
 801e376:	e76d      	b.n	801e254 <__kernel_rem_pio2+0x50c>
 801e378:	ed94 7b00 	vldr	d7, [r4]
 801e37c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 801e380:	ec51 0b17 	vmov	r0, r1, d7
 801e384:	4652      	mov	r2, sl
 801e386:	465b      	mov	r3, fp
 801e388:	ed8d 7b00 	vstr	d7, [sp]
 801e38c:	f7e1 ff7e 	bl	800028c <__adddf3>
 801e390:	4602      	mov	r2, r0
 801e392:	460b      	mov	r3, r1
 801e394:	4606      	mov	r6, r0
 801e396:	460f      	mov	r7, r1
 801e398:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e39c:	f7e1 ff74 	bl	8000288 <__aeabi_dsub>
 801e3a0:	4652      	mov	r2, sl
 801e3a2:	465b      	mov	r3, fp
 801e3a4:	f7e1 ff72 	bl	800028c <__adddf3>
 801e3a8:	3d01      	subs	r5, #1
 801e3aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801e3ae:	e9c4 6700 	strd	r6, r7, [r4]
 801e3b2:	e755      	b.n	801e260 <__kernel_rem_pio2+0x518>
 801e3b4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801e3b8:	f7e1 ff68 	bl	800028c <__adddf3>
 801e3bc:	f108 38ff 	add.w	r8, r8, #4294967295
 801e3c0:	e758      	b.n	801e274 <__kernel_rem_pio2+0x52c>
 801e3c2:	bf00      	nop
 801e3c4:	f3af 8000 	nop.w
	...
 801e3d0:	41700000 	.word	0x41700000
 801e3d4:	3e700000 	.word	0x3e700000
 801e3d8:	9b04      	ldr	r3, [sp, #16]
 801e3da:	9a04      	ldr	r2, [sp, #16]
 801e3dc:	601f      	str	r7, [r3, #0]
 801e3de:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 801e3e2:	605c      	str	r4, [r3, #4]
 801e3e4:	609d      	str	r5, [r3, #8]
 801e3e6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801e3ea:	60d3      	str	r3, [r2, #12]
 801e3ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801e3f0:	6110      	str	r0, [r2, #16]
 801e3f2:	6153      	str	r3, [r2, #20]
 801e3f4:	e719      	b.n	801e22a <__kernel_rem_pio2+0x4e2>
 801e3f6:	bf00      	nop

0801e3f8 <scalbn>:
 801e3f8:	b570      	push	{r4, r5, r6, lr}
 801e3fa:	ec55 4b10 	vmov	r4, r5, d0
 801e3fe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801e402:	4606      	mov	r6, r0
 801e404:	462b      	mov	r3, r5
 801e406:	b991      	cbnz	r1, 801e42e <scalbn+0x36>
 801e408:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801e40c:	4323      	orrs	r3, r4
 801e40e:	d03d      	beq.n	801e48c <scalbn+0x94>
 801e410:	4b35      	ldr	r3, [pc, #212]	@ (801e4e8 <scalbn+0xf0>)
 801e412:	4620      	mov	r0, r4
 801e414:	4629      	mov	r1, r5
 801e416:	2200      	movs	r2, #0
 801e418:	f7e2 f8ee 	bl	80005f8 <__aeabi_dmul>
 801e41c:	4b33      	ldr	r3, [pc, #204]	@ (801e4ec <scalbn+0xf4>)
 801e41e:	429e      	cmp	r6, r3
 801e420:	4604      	mov	r4, r0
 801e422:	460d      	mov	r5, r1
 801e424:	da0f      	bge.n	801e446 <scalbn+0x4e>
 801e426:	a328      	add	r3, pc, #160	@ (adr r3, 801e4c8 <scalbn+0xd0>)
 801e428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e42c:	e01e      	b.n	801e46c <scalbn+0x74>
 801e42e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801e432:	4291      	cmp	r1, r2
 801e434:	d10b      	bne.n	801e44e <scalbn+0x56>
 801e436:	4622      	mov	r2, r4
 801e438:	4620      	mov	r0, r4
 801e43a:	4629      	mov	r1, r5
 801e43c:	f7e1 ff26 	bl	800028c <__adddf3>
 801e440:	4604      	mov	r4, r0
 801e442:	460d      	mov	r5, r1
 801e444:	e022      	b.n	801e48c <scalbn+0x94>
 801e446:	460b      	mov	r3, r1
 801e448:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801e44c:	3936      	subs	r1, #54	@ 0x36
 801e44e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801e452:	4296      	cmp	r6, r2
 801e454:	dd0d      	ble.n	801e472 <scalbn+0x7a>
 801e456:	2d00      	cmp	r5, #0
 801e458:	a11d      	add	r1, pc, #116	@ (adr r1, 801e4d0 <scalbn+0xd8>)
 801e45a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e45e:	da02      	bge.n	801e466 <scalbn+0x6e>
 801e460:	a11d      	add	r1, pc, #116	@ (adr r1, 801e4d8 <scalbn+0xe0>)
 801e462:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e466:	a31a      	add	r3, pc, #104	@ (adr r3, 801e4d0 <scalbn+0xd8>)
 801e468:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e46c:	f7e2 f8c4 	bl	80005f8 <__aeabi_dmul>
 801e470:	e7e6      	b.n	801e440 <scalbn+0x48>
 801e472:	1872      	adds	r2, r6, r1
 801e474:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 801e478:	428a      	cmp	r2, r1
 801e47a:	dcec      	bgt.n	801e456 <scalbn+0x5e>
 801e47c:	2a00      	cmp	r2, #0
 801e47e:	dd08      	ble.n	801e492 <scalbn+0x9a>
 801e480:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801e484:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801e488:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801e48c:	ec45 4b10 	vmov	d0, r4, r5
 801e490:	bd70      	pop	{r4, r5, r6, pc}
 801e492:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801e496:	da08      	bge.n	801e4aa <scalbn+0xb2>
 801e498:	2d00      	cmp	r5, #0
 801e49a:	a10b      	add	r1, pc, #44	@ (adr r1, 801e4c8 <scalbn+0xd0>)
 801e49c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e4a0:	dac1      	bge.n	801e426 <scalbn+0x2e>
 801e4a2:	a10f      	add	r1, pc, #60	@ (adr r1, 801e4e0 <scalbn+0xe8>)
 801e4a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e4a8:	e7bd      	b.n	801e426 <scalbn+0x2e>
 801e4aa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801e4ae:	3236      	adds	r2, #54	@ 0x36
 801e4b0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801e4b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801e4b8:	4620      	mov	r0, r4
 801e4ba:	4b0d      	ldr	r3, [pc, #52]	@ (801e4f0 <scalbn+0xf8>)
 801e4bc:	4629      	mov	r1, r5
 801e4be:	2200      	movs	r2, #0
 801e4c0:	e7d4      	b.n	801e46c <scalbn+0x74>
 801e4c2:	bf00      	nop
 801e4c4:	f3af 8000 	nop.w
 801e4c8:	c2f8f359 	.word	0xc2f8f359
 801e4cc:	01a56e1f 	.word	0x01a56e1f
 801e4d0:	8800759c 	.word	0x8800759c
 801e4d4:	7e37e43c 	.word	0x7e37e43c
 801e4d8:	8800759c 	.word	0x8800759c
 801e4dc:	fe37e43c 	.word	0xfe37e43c
 801e4e0:	c2f8f359 	.word	0xc2f8f359
 801e4e4:	81a56e1f 	.word	0x81a56e1f
 801e4e8:	43500000 	.word	0x43500000
 801e4ec:	ffff3cb0 	.word	0xffff3cb0
 801e4f0:	3c900000 	.word	0x3c900000
 801e4f4:	00000000 	.word	0x00000000

0801e4f8 <floor>:
 801e4f8:	ec51 0b10 	vmov	r0, r1, d0
 801e4fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801e500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e504:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 801e508:	2e13      	cmp	r6, #19
 801e50a:	460c      	mov	r4, r1
 801e50c:	4605      	mov	r5, r0
 801e50e:	4680      	mov	r8, r0
 801e510:	dc34      	bgt.n	801e57c <floor+0x84>
 801e512:	2e00      	cmp	r6, #0
 801e514:	da17      	bge.n	801e546 <floor+0x4e>
 801e516:	a332      	add	r3, pc, #200	@ (adr r3, 801e5e0 <floor+0xe8>)
 801e518:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e51c:	f7e1 feb6 	bl	800028c <__adddf3>
 801e520:	2200      	movs	r2, #0
 801e522:	2300      	movs	r3, #0
 801e524:	f7e2 faf8 	bl	8000b18 <__aeabi_dcmpgt>
 801e528:	b150      	cbz	r0, 801e540 <floor+0x48>
 801e52a:	2c00      	cmp	r4, #0
 801e52c:	da55      	bge.n	801e5da <floor+0xe2>
 801e52e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801e532:	432c      	orrs	r4, r5
 801e534:	2500      	movs	r5, #0
 801e536:	42ac      	cmp	r4, r5
 801e538:	4c2b      	ldr	r4, [pc, #172]	@ (801e5e8 <floor+0xf0>)
 801e53a:	bf08      	it	eq
 801e53c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801e540:	4621      	mov	r1, r4
 801e542:	4628      	mov	r0, r5
 801e544:	e023      	b.n	801e58e <floor+0x96>
 801e546:	4f29      	ldr	r7, [pc, #164]	@ (801e5ec <floor+0xf4>)
 801e548:	4137      	asrs	r7, r6
 801e54a:	ea01 0307 	and.w	r3, r1, r7
 801e54e:	4303      	orrs	r3, r0
 801e550:	d01d      	beq.n	801e58e <floor+0x96>
 801e552:	a323      	add	r3, pc, #140	@ (adr r3, 801e5e0 <floor+0xe8>)
 801e554:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e558:	f7e1 fe98 	bl	800028c <__adddf3>
 801e55c:	2200      	movs	r2, #0
 801e55e:	2300      	movs	r3, #0
 801e560:	f7e2 fada 	bl	8000b18 <__aeabi_dcmpgt>
 801e564:	2800      	cmp	r0, #0
 801e566:	d0eb      	beq.n	801e540 <floor+0x48>
 801e568:	2c00      	cmp	r4, #0
 801e56a:	bfbe      	ittt	lt
 801e56c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801e570:	4133      	asrlt	r3, r6
 801e572:	18e4      	addlt	r4, r4, r3
 801e574:	ea24 0407 	bic.w	r4, r4, r7
 801e578:	2500      	movs	r5, #0
 801e57a:	e7e1      	b.n	801e540 <floor+0x48>
 801e57c:	2e33      	cmp	r6, #51	@ 0x33
 801e57e:	dd0a      	ble.n	801e596 <floor+0x9e>
 801e580:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801e584:	d103      	bne.n	801e58e <floor+0x96>
 801e586:	4602      	mov	r2, r0
 801e588:	460b      	mov	r3, r1
 801e58a:	f7e1 fe7f 	bl	800028c <__adddf3>
 801e58e:	ec41 0b10 	vmov	d0, r0, r1
 801e592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e596:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801e59a:	f04f 37ff 	mov.w	r7, #4294967295
 801e59e:	40df      	lsrs	r7, r3
 801e5a0:	4207      	tst	r7, r0
 801e5a2:	d0f4      	beq.n	801e58e <floor+0x96>
 801e5a4:	a30e      	add	r3, pc, #56	@ (adr r3, 801e5e0 <floor+0xe8>)
 801e5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5aa:	f7e1 fe6f 	bl	800028c <__adddf3>
 801e5ae:	2200      	movs	r2, #0
 801e5b0:	2300      	movs	r3, #0
 801e5b2:	f7e2 fab1 	bl	8000b18 <__aeabi_dcmpgt>
 801e5b6:	2800      	cmp	r0, #0
 801e5b8:	d0c2      	beq.n	801e540 <floor+0x48>
 801e5ba:	2c00      	cmp	r4, #0
 801e5bc:	da0a      	bge.n	801e5d4 <floor+0xdc>
 801e5be:	2e14      	cmp	r6, #20
 801e5c0:	d101      	bne.n	801e5c6 <floor+0xce>
 801e5c2:	3401      	adds	r4, #1
 801e5c4:	e006      	b.n	801e5d4 <floor+0xdc>
 801e5c6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801e5ca:	2301      	movs	r3, #1
 801e5cc:	40b3      	lsls	r3, r6
 801e5ce:	441d      	add	r5, r3
 801e5d0:	4545      	cmp	r5, r8
 801e5d2:	d3f6      	bcc.n	801e5c2 <floor+0xca>
 801e5d4:	ea25 0507 	bic.w	r5, r5, r7
 801e5d8:	e7b2      	b.n	801e540 <floor+0x48>
 801e5da:	2500      	movs	r5, #0
 801e5dc:	462c      	mov	r4, r5
 801e5de:	e7af      	b.n	801e540 <floor+0x48>
 801e5e0:	8800759c 	.word	0x8800759c
 801e5e4:	7e37e43c 	.word	0x7e37e43c
 801e5e8:	bff00000 	.word	0xbff00000
 801e5ec:	000fffff 	.word	0x000fffff

0801e5f0 <_init>:
 801e5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e5f2:	bf00      	nop
 801e5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e5f6:	bc08      	pop	{r3}
 801e5f8:	469e      	mov	lr, r3
 801e5fa:	4770      	bx	lr

0801e5fc <_fini>:
 801e5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e5fe:	bf00      	nop
 801e600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e602:	bc08      	pop	{r3}
 801e604:	469e      	mov	lr, r3
 801e606:	4770      	bx	lr
